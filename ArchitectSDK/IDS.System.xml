<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IDS.System</name>
    </assembly>
    <members>
        <member name="T:IDS.AmountRange">
            <summary>
            The AmountRange class is used to contain a range of amounts.
            </summary>
        </member>
        <member name="F:IDS.AmountRange.AllAmounts">
            <summary>
            Represents an amount range that covers all amounts.
            </summary>
        </member>
        <member name="M:IDS.AmountRange.Parse(System.String)">
            <summary>
            Parses the specified amount range string and return an amount range instance.
            </summary>
            <param name="amountRange">The string containing the amount range. The amounts should be separated by "-".</param>
            <returns>
            Returns an AmountRange instance representing the amount range.
            </returns>
        </member>
        <member name="M:IDS.AmountRange.Parse(System.String,System.String)">
            <summary>
            Parses the specified amount range string and return an amount range instance.
            </summary>
            <param name="amountRange">The string containing the amount range. The amounts should be separated by the separator.</param>
            <param name="separator">The string that separates the amount ranges.</param>
            <returns>Returns an AmountRange instance representing the amount range.</returns>
        </member>
        <member name="M:IDS.AmountRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.AmountRange"/> class.
            </summary>
        </member>
        <member name="M:IDS.AmountRange.#ctor(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.AmountRange"/> class.
            </summary>
            <param name="minimumAmount">The minimum amount of the lower range of the amount range.</param>
            <param name="maximumAmount">The maximum amount of the upper range of the amount range.</param>
        </member>
        <member name="P:IDS.AmountRange.MinimumAmount">
            <summary>
            Gets or sets the minimum amount in the amount range.
            </summary>
            <value>The minimum amount in the amount range.</value>
        </member>
        <member name="P:IDS.AmountRange.MaximumAmount">
            <summary>
            Gets or sets the maximum amount in the amount range.
            </summary>
            <value>The maximum amount in the amount range.</value>
        </member>
        <member name="M:IDS.AmountRange.IsWithin(System.Decimal)">
            <summary>
            Determines whether the specified amount is within the amount range.
            </summary>
            <param name="amount">The amount to compare to the amount range.</param>
            <returns>
            	<c>true</c> if the specified amount is within the amount range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.AmountRange.IsValid">
            <summary>
            Determines whether this instance is valid.
            </summary>
            <returns>
            	<c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.AmountRange.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.AmountRange.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:IDS.AmountRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.AmountRange"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.AmountRange"></see>.
            </returns>
        </member>
        <member name="T:IDS.StandardPermissionSet">
            <summary>
            An enumeration of standard permission sets to use for setting the initial security policy on the new
            app domain.
            </summary>
        </member>
        <member name="F:IDS.StandardPermissionSet.Nothing">
            <summary>
            Nothing permission set
            </summary>
        </member>
        <member name="F:IDS.StandardPermissionSet.Execution">
            <summary>
            Execution permission set
            </summary>
        </member>
        <member name="F:IDS.StandardPermissionSet.FullTrust">
            <summary>
            FullTrust permission set
            </summary>
        </member>
        <member name="F:IDS.StandardPermissionSet.Internet">
            <summary>
            Internet permission set
            </summary>
        </member>
        <member name="F:IDS.StandardPermissionSet.LocalIntranet">
            <summary>
            Local Intranet permission set
            </summary>
        </member>
        <member name="F:IDS.StandardPermissionSet.SkipVerification">
            <summary>
            Skip verification permission set
            </summary>
        </member>
        <member name="T:IDS.AppDomainHelper">
            <summary>
            This class is a helper class for creating .NET App Domains. It only contains static methods.
            </summary>
        </member>
        <member name="M:IDS.AppDomainHelper.CreateAppDomain(System.String,IDS.StandardPermissionSet)">
            <summary>
            A static method that creates a new application domain with a default policy using the setup information from the current AppDomain.
            </summary>
            <param name="appDomainName">The name to give to the new app domain.</param>
            <param name="standardPermissionSet">The standard permission set to use to create this app domain.</param>
            <returns>Returns a new AppDomain object.</returns>
        </member>
        <member name="M:IDS.AppDomainHelper.CreateAppDomain(System.String,IDS.StandardPermissionSet,System.AppDomainSetup)">
            <summary>
            A static method that creates a new application domain with a default policy.
            </summary>
            <param name="appDomainName">The name to give to the new app domain.</param>
            <param name="standardPermissionSet">The standard permission set to use to create this app domain.</param>
            <param name="setupInformation">The setup information to initialize the AppDomain with.</param>
            <returns>Returns a new AppDomain object.</returns>
        </member>
        <member name="M:IDS.AppDomainHelper.GetCompatibleTypes(System.Type)">
            <summary>
            Iterates through the types in the Current AppDomain and returns an array of types
            that are assignable to the targetType.
            </summary>
            <param name="targetType">The type to use to find assignable types.</param>
            <returns>Returns an array of Type objects. The array might be zero length but will never be null.</returns>
        </member>
        <member name="M:IDS.AppDomainHelper.GetCompatibleTypes(System.AppDomain,System.Type)">
            <summary>
            Iterates through the types in the specified AppDomain and returns an array of types
            that are assignable to the targetType.
            </summary>
            <param name="appDomain">The app domain.</param>
            <param name="targetType">The type to use to find assignable types.</param>
            <returns>
            Returns an array of Type objects. The array might be zero length but will never be null.
            </returns>
        </member>
        <member name="M:IDS.AppDomainHelper.GetCompatibleTypes(System.AppDomain,System.Type,System.Type)">
            <summary>
            Iterates through the types in the specified AppDomain and returns an array of types
            that are assignable to the targetType.
            </summary>
            <param name="appDomain">The app domain.</param>
            <param name="targetType">The type to use to find assignable types.</param>
            <param name="assemblyFilterAttributeType"></param>
            <returns>
            Returns an array of Type objects. The array might be zero length but will never be null.
            </returns>
        </member>
        <member name="M:IDS.AppDomainHelper.LoadApplicationAssemblies">
            <summary>
            Loads the application assemblies into the current AppDomain.
            </summary>
        </member>
        <member name="T:IDS.AppDomainHelper.AppDomainLoader">
            <summary>
            The AppDomainLoader is a class that bootstraps an AppDomain by loading all of its assemblies into the AppDomain context.
            </summary>
        </member>
        <member name="M:IDS.AppDomainHelper.AppDomainLoader.Create(System.String,System.String,System.Boolean)">
            <summary>
            Given an app.config/web.config path, this method creates a new AppDomain and loads the application assemblies into that AppDomain.
            </summary>
            <param name="applicationName">The name of the application. This name is assigned to the AppDomain.ApplicationName property.</param>
            <param name="configFilename">The filename of the app.config/web.config to initialize the AppDomain with.</param>
            <param name="shadowCopy">if set to <c>true</c> if the assemblies should be shadow copied.</param>
            <returns>
            Returns a proxied instance of the AppDomainLoader created in the new AppDomain.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the applicationName or configFilename parameters are null.</exception>
        </member>
        <member name="M:IDS.AppDomainHelper.AppDomainLoader.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"></see> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"></see> property.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/></PermissionSet>
        </member>
        <member name="M:IDS.AppDomainHelper.AppDomainLoader.GetCompatibleTypes(System.Type)">
            <summary>
            Iterates through the types in the AppDomain and returns an array of types
            that are assignable to the targetType.
            </summary>
            <param name="targetType">The type to use to find assignable types.</param>
            <returns>Returns an array of assembly-qualified type names. The array might be zero length but will never be null.</returns>
        </member>
        <member name="M:IDS.AppDomainHelper.AppDomainLoader.LoadApplicationAssemblies">
            <summary>
            Loads the application assemblies into the AppDomain.
            </summary>
        </member>
        <member name="M:IDS.AppDomainHelper.AppDomainLoader.LoadAssembly(System.String)">
            <summary>
            Loads the assembly.
            </summary>
            <param name="assemblyFilename">The assembly filename.</param>
        </member>
        <member name="P:IDS.AppDomainHelper.AppDomainLoader.AppDomain">
            <summary>
            Gets the app domain.
            </summary>
            <value>The app domain.</value>
        </member>
        <member name="P:IDS.AppDomainHelper.AppDomainLoader.EventSink">
            <summary>
            Gets or sets the event sink that is used to marshall events across AppDomains.
            </summary>
            <value>The event sink.</value>
        </member>
        <member name="M:IDS.AppDomainHelper.AppDomainLoader.AppDomainAssemblyLoad(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            Apps the domain assembly load.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.AssemblyLoadEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:IDS.AppDomainHelper.AssemblyResolveEventArgs">
            <summary>
            The AssemblyResolveEventArgs is a class that contains data related to an assembly being resolved.
            </summary>
        </member>
        <member name="M:IDS.AppDomainHelper.AssemblyResolveEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.AppDomainHelper.AssemblyResolveEventArgs"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:IDS.AppDomainHelper.AssemblyResolveEventArgs.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:IDS.AppDomainHelper.AssemblyLoadedEventArgs">
            <summary>
            The AssemblyLoadedEventArgs is a class that contains data related to an assembly being loaded.
            </summary>
            <remarks>
            The AssemblyLoadedEventArgs is a serializable replacement for the AppDomain.AssemblyLoadEventArgs.
            </remarks>
        </member>
        <member name="M:IDS.AppDomainHelper.AssemblyLoadedEventArgs.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.AppDomainHelper.AssemblyLoadedEventArgs"/> class.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="P:IDS.AppDomainHelper.AssemblyLoadedEventArgs.GlobalAssemblyCache">
            <summary>
            Gets or sets a value indicating whether an assembly is located in the global assembly cache.
            </summary>
            <value><c>true</c> if the assembly is located in the global assembly cache; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.AppDomainHelper.AssemblyLoadedEventArgs.CodeBase">
            <summary>
            Gets or sets the code base.
            </summary>
            <value>The code base.</value>
        </member>
        <member name="P:IDS.AppDomainHelper.AssemblyLoadedEventArgs.FullName">
            <summary>
            Gets or sets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:IDS.AppDomainHelper.AssemblyLoadedEventArgs.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="T:IDS.AppDomainHelper.AssemblyResolveEventHandler">
            <summary>
            The AssemblyResolveEventHandler represents the method that handles the System.AppDomain.TypeResolve, System.AppDomain.ResourceResolve,
            and System.AppDomain.AssemblyResolve events of an AppDomain through the AppDomainEventSink.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.AppDomainHelper.AppDomainEventSink">
            <summary>
            Receives and forwards events from a <see cref="T:System.AppDomain" />.
            </summary>
        </member>
        <member name="E:IDS.AppDomainHelper.AppDomainEventSink.AssemblyLoad">
            <summary>
            Occurs when an assembly is loaded.
            </summary>
        </member>
        <member name="E:IDS.AppDomainHelper.AppDomainEventSink.AssemblyResolve">
            <summary>
            Occurs when the resolution of an assembly fails.
            </summary>
        </member>
        <member name="E:IDS.AppDomainHelper.AppDomainEventSink.ReflectionOnlyAssemblyResolve">
            <summary>
            Occurs when the resolution of an assembly fails in the reflection-only context.
            </summary>
        </member>
        <member name="E:IDS.AppDomainHelper.AppDomainEventSink.ResourceResolve">
            <summary>
            Occurs when the resolution of a resource fails because the resource is not a valid linked or embedded resource in the assembly.
            </summary>
        </member>
        <member name="E:IDS.AppDomainHelper.AppDomainEventSink.TypeResolve">
            <summary>
            Occurs when the resolution of a type fails.
            </summary>
        </member>
        <member name="E:IDS.AppDomainHelper.AppDomainEventSink.UnhandledException">
            <summary>
            Occurs when an exception is not caught by an event handler.
            </summary>
        </member>
        <member name="M:IDS.AppDomainHelper.AppDomainEventSink.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"></see> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"></see> property.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/></PermissionSet>
        </member>
        <member name="M:IDS.AppDomainHelper.AppDomainEventSink.RaiseAssemblyLoadedEvent(System.Object,IDS.AppDomainHelper.AssemblyLoadedEventArgs)">
            <summary>
            Handles the AssemblyLoad event of the AppDomain control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The <see cref="T:System.AssemblyLoadEventArgs"/> instance containing the event data.</param>
            <remarks>This method must be public so that a delegate to it can be marshaled.</remarks>
        </member>
        <member name="M:IDS.AppDomainHelper.AppDomainEventSink.RaiseAssemblyResolveEvent(System.Object,IDS.AppDomainHelper.AssemblyResolveEventArgs)">
            <summary>
            Raises the assembly resolve event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:IDS.AppDomainHelper.AssemblyResolveEventArgs"/> instance containing the event data.</param>
            <returns>
            Returns a path to the resolved assembly or null if not resolved.
            </returns>
            <remarks>This method must be public so that a delegate to it can be marshaled.</remarks>
        </member>
        <member name="M:IDS.AppDomainHelper.AppDomainEventSink.RaiseReflectionOnlyAssemblyResolveEvent(System.Object,IDS.AppDomainHelper.AssemblyResolveEventArgs)">
            <summary>
            Raises the reflection only assembly resolve event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:IDS.AppDomainHelper.AssemblyResolveEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.AppDomainHelper.AppDomainEventSink.RaiseTypeResolveEvent(System.Object,IDS.AppDomainHelper.AssemblyResolveEventArgs)">
            <summary>
            Raises the type resolve event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:IDS.AppDomainHelper.AssemblyResolveEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.AppDomainHelper.AppDomainEventSink.RaiseResourceResolveEvent(System.Object,IDS.AppDomainHelper.AssemblyResolveEventArgs)">
            <summary>
            Raises the resource resolve event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:IDS.AppDomainHelper.AssemblyResolveEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.AppDomainHelper.AppDomainEventSink.RaiseUnhandledExceptionEvent(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Raises the unhandled exception event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.UnhandledExceptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:IDS.AssemblyReport.DiffReport">
            <summary>
            </summary>
        </member>
        <member name="P:IDS.AssemblyReport.DiffReport.XOutput">
            <summary>
            </summary>
        </member>
        <member name="P:IDS.AssemblyReport.DiffReport.Output">
            <summary>
            </summary>
        </member>
        <member name="T:IDS.AssemblyReport.DiffReport.DiffItemEnum">
            <summary>
            </summary>
        </member>
        <member name="F:IDS.AssemblyReport.DiffReport.DiffItemEnum.Match">
            <summary>
            </summary>
        </member>
        <member name="F:IDS.AssemblyReport.DiffReport.DiffItemEnum.Mismatch">
            <summary>
            </summary>
        </member>
        <member name="F:IDS.AssemblyReport.DiffReport.DiffItemEnum.Deleted">
            <summary>
            </summary>
        </member>
        <member name="F:IDS.AssemblyReport.DiffReport.DiffItemEnum.Inserted">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.AssemblyReport.DiffReport.#ctor(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="T:IDS.AssemblyReport.ReportOutputType">
            <summary>
            </summary>
        </member>
        <member name="F:IDS.AssemblyReport.ReportOutputType.Xml">
            <summary>
            </summary>
        </member>
        <member name="F:IDS.AssemblyReport.ReportOutputType.Tabular">
            <summary>
            </summary>
        </member>
        <member name="T:IDS.AssemblyReport.ReportItem">
            <summary>
            </summary>
        </member>
        <member name="P:IDS.AssemblyReport.ReportItem.FileName">
            <summary>
            </summary>
        </member>
        <member name="P:IDS.AssemblyReport.ReportItem.Hash">
            <summary>
            </summary>
        </member>
        <member name="P:IDS.AssemblyReport.ReportItem.Version">
            <summary>
            </summary>
        </member>
        <member name="P:IDS.AssemblyReport.ReportItem.Changelist">
            <summary>
            </summary>
        </member>
        <member name="T:IDS.AssemblyReport.Report">
            <summary>
            </summary>
        </member>
        <member name="P:IDS.AssemblyReport.Report.Output">
            <summary>
            </summary>
        </member>
        <member name="P:IDS.AssemblyReport.Report.XOutput">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.AssemblyReport.Report.#ctor(System.String,IDS.AssemblyReport.ReportOutputType)">
            <summary>
            </summary>
            <param name="folderPath"></param>
            <param name="type"></param>
        </member>
        <member name="T:IDS.AssemblyReport.ReportHelper">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.AssemblyReport.ReportHelper.GetFilesRecursive(System.String,System.String)">
            <summary>
            </summary>
            <param name="rootFolder"></param>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.AssemblyReport.ReportHelper.GetFilesHash(System.Collections.Generic.List{IDS.AssemblyReport.ReportItem})">
            <summary>
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:IDS.AssemblyReport.ReportHelper.GetAssembliesVersion(System.Collections.Generic.List{IDS.AssemblyReport.ReportItem})">
            <summary>
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:IDS.AssemblyReport.ReportHelper.GetMD5HashFromFile(System.String)">
            <summary>
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.AssociatedObjectAttribute">
            <summary>
            AssociatedObjectAttribute is a class level attribute which helps create an association of the class its being used on with 
            another object 
            </summary>
        </member>
        <member name="P:IDS.AssociatedObjectAttribute.AssociatedType">
            <summary>
            Gets the type of the associated.
            </summary>
            <value>The type of the associated.</value>
        </member>
        <member name="P:IDS.AssociatedObjectAttribute.BaseType">
            <summary>
            Gets the type of the base (that the associated type inherits from).
            </summary>
            <value>The type of the base.</value>
        </member>
        <member name="M:IDS.AssociatedObjectAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.AssociatedObjectAttribute"/> class.
            </summary>
            <param name="associatedType">Type of the associated.</param>
            <param name="baseType">Base type that the assocaited type inherits from.</param>
        </member>
        <member name="M:IDS.AssociatedObjectAttribute.GetAssociatedObjectAttributesByType(System.Object[],System.Type)">
            <summary>
            Gets a list of associated object attributes by type.
            </summary>
            <param name="associatedObjects">The associated objects.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.AssociatedObjectAttribute.GetAssociatedObjectAttributesByBaseType(System.Object[],System.Type)">
            <summary>
            Gets a list of associated object attributes by base type.
            </summary>
            <param name="associatedObjects">The associated objects.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Caching.GuaranteedCache">
            <summary>
            The GuaranteedCache implements a prefetcher and a cache to ensure an item can always be found in the cache. If the item has not completed
            being fetched, the call is blocked until the fetch has completed. 
            </summary>
        </member>
        <member name="M:IDS.Caching.GuaranteedCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Caching.GuaranteedCache"/> class.
            </summary>
        </member>
        <member name="P:IDS.Caching.GuaranteedCache.Prefetcher">
            <summary>
            Gets the prefetcher.
            </summary>
            <value>The prefetcher.</value>
        </member>
        <member name="P:IDS.Caching.GuaranteedCache.RegisteredDelegates">
            <summary>
            Gets the registered delegates.
            </summary>
            <value>The registered delegates.</value>
        </member>
        <member name="M:IDS.Caching.GuaranteedCache.PeekCacheItem(System.Object)">
            <summary>
            Peeks the cache item.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Caching.GuaranteedCache.GetCacheItem(System.Object,System.Object,System.Object[])">
            <summary>
            Gets the cache item.
            </summary>
            <param name="key">The key.</param>
            <param name="delegateID">The delegate ID.</param>
            <param name="prefetchTaskArgs">The prefetch task args.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Caching.GuaranteedCache.Add(System.Object,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:IDS.Caching.GuaranteedCache.Contains(System.Object)">
            <summary>
            Determines whether the cache contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the cache contains the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:IDS.Caching.RequestCache">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Caching.RequestCache.Default">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Caching.RequestCache.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Caching.RequestCache.Set``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag"></param>
            <param name="value"></param>
        </member>
        <member name="M:IDS.Caching.RequestCache.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Caching.CacheValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDS.Caching.CacheValue.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Caching.CacheValue.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:IDS.Caching.SerializableSmartCache">
            <summary>
            The SerializableSmartCache is a serializable version of the SmartCache that implements a collection that contains objects that 
            expire and are automatically removed from the collection.
            </summary>
        </member>
        <member name="M:IDS.Caching.SerializableSmartCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Caching.SmartCache"/> class.
            </summary>
        </member>
        <member name="M:IDS.Caching.SerializableSmartCache.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Caching.SmartCache"/> class.
            </summary>
            <param name="defaultSlidingTimeoutSeconds">The default sliding timeout seconds.</param>
        </member>
        <member name="M:IDS.Caching.SerializableSmartCache.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Caching.SmartCache"/> class.
            </summary>
            <param name="defaultSlidingTimeout">The default sliding timeout.</param>
        </member>
        <member name="M:IDS.Caching.SerializableSmartCache.RemoveStaleItems">
            <summary>
            Removes the stale items from the collection.
            </summary>
        </member>
        <member name="M:IDS.Caching.SerializableSmartCache.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="M:IDS.Caching.SerializableSmartCache.Add(System.Object,System.Object,System.Int32)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <param name="slidingTimeoutSeconds">The sliding timeout in seconds.</param>
        </member>
        <member name="M:IDS.Caching.SerializableSmartCache.Add(System.Object,System.Object,System.TimeSpan)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <param name="slidingTimeout">The sliding timeout.</param>
        </member>
        <member name="P:IDS.Caching.SerializableSmartCache.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object is read-only; otherwise, false.</returns>
        </member>
        <member name="M:IDS.Caching.SerializableSmartCache.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="P:IDS.Caching.SerializableSmartCache.Item(System.Object)">
            <summary>
            Gets or sets the Object with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:IDS.Caching.SerializableSmartCache.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:IDS.Caching.SerializableSmartCache.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:IDS.Caching.SerializableSmartCache.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only. </exception>
        </member>
        <member name="P:IDS.Caching.SerializableSmartCache.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.</returns>
        </member>
        <member name="P:IDS.Caching.SerializableSmartCache.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.</returns>
        </member>
        <member name="P:IDS.Caching.SerializableSmartCache.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:IDS.Caching.SerializableSmartCache.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:IDS.Caching.SerializableSmartCache.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="M:IDS.Caching.SerializableSmartCache.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="P:IDS.Caching.SerializableSmartCache.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="M:IDS.Caching.SerializableSmartCache.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:IDS.Caching.SessionCache">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Caching.SessionCache.Default">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Caching.SessionCache.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Caching.SessionCache.Set``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag"></param>
            <param name="value"></param>
        </member>
        <member name="M:IDS.Caching.SessionCache.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Caching.SmartCache">
            <summary>
            The SmartCache implements a collection that contains objects that expire and are automatically removed from the collection.
            </summary>
            <remarks>
            <seealso cref="T:IDS.Caching.SerializableSmartCache"/>
            </remarks>
        </member>
        <member name="M:IDS.Caching.SmartCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Caching.SmartCache"/> class.
            </summary>
        </member>
        <member name="M:IDS.Caching.SmartCache.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Caching.SmartCache"/> class.
            </summary>
            <param name="defaultSlidingTimeoutSeconds">The default sliding timeout seconds.</param>
        </member>
        <member name="M:IDS.Caching.SmartCache.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Caching.SmartCache"/> class.
            </summary>
            <param name="defaultSlidingTimeout">The default sliding timeout.</param>
        </member>
        <member name="M:IDS.Caching.SmartCache.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:IDS.Caching.SmartCache"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:IDS.Caching.SmartCache.Dispose(System.Boolean)">
            <summary>
            Disposes the specified disposing.
            </summary>
            <param name="disposing">if set to <c>true</c> [disposing].</param>
        </member>
        <member name="M:IDS.Caching.SmartCache.RemoveStaleItems(System.Object)">
            <summary>
            Removes the stale items.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:IDS.Caching.SmartCache.CheckCleanupTimer">
            <summary>
            Checks the cleanup timer.
            </summary>
        </member>
        <member name="M:IDS.Caching.SmartCache.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="M:IDS.Caching.SmartCache.Add(System.Object,System.Object,System.Int32)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <param name="slidingTimeoutSeconds">The sliding timeout in seconds.</param>
        </member>
        <member name="M:IDS.Caching.SmartCache.Add(System.Object,System.Object,System.TimeSpan)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <param name="slidingTimeout">The sliding timeout.</param>
        </member>
        <member name="P:IDS.Caching.SmartCache.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object is read-only; otherwise, false.</returns>
        </member>
        <member name="M:IDS.Caching.SmartCache.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="P:IDS.Caching.SmartCache.Item(System.Object)">
            <summary>
            Gets or sets the Object with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:IDS.Caching.SmartCache.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:IDS.Caching.SmartCache.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:IDS.Caching.SmartCache.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only. </exception>
        </member>
        <member name="P:IDS.Caching.SmartCache.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.</returns>
        </member>
        <member name="P:IDS.Caching.SmartCache.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.</returns>
        </member>
        <member name="P:IDS.Caching.SmartCache.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:IDS.Caching.SmartCache.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:IDS.Caching.SmartCache.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="M:IDS.Caching.SmartCache.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="P:IDS.Caching.SmartCache.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="M:IDS.Caching.SmartCache.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:IDS.Caching.SmartCache.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:IDS.Caching.SmartCacheItem">
            <summary>
            The SmartCacheItem is an internal class for holding the items placed into the SmartCache.
            </summary>
        </member>
        <member name="M:IDS.Caching.SmartCacheItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Caching.SmartCacheItem"/> class.
            </summary>
        </member>
        <member name="M:IDS.Caching.SmartCacheItem.#ctor(System.Object,System.Object,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Caching.SmartCacheItem"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="slidingTimeout">The sliding timeout.</param>
        </member>
        <member name="M:IDS.Caching.SmartCacheItem.#ctor(System.Object,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Caching.SmartCacheItem"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="lastAccessedDateTime">The last accessed date time.</param>
            <param name="slidingTimeout">The sliding timeout.</param>
        </member>
        <member name="P:IDS.Caching.SmartCacheItem.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:IDS.Caching.SmartCacheItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:IDS.Caching.SmartCacheItem.LastAccessedDateTime">
            <summary>
            Gets or sets the last accessed date time.
            </summary>
            <value>The last accessed date time.</value>
        </member>
        <member name="P:IDS.Caching.SmartCacheItem.SlidingTimeout">
            <summary>
            Gets or sets the sliding timeout.
            </summary>
            <value>The sliding timeout.</value>
        </member>
        <member name="P:IDS.Caching.SmartCacheItem.TimeoutDateTime">
            <summary>
            Gets the timeout date time.
            </summary>
            <value>The timeout date time.</value>
        </member>
        <member name="P:IDS.Caching.SmartCacheItem.HasTimedOut">
            <summary>
            Gets a value indicating whether this instance has timed out.
            </summary>
            <value>
            	<c>true</c> if this instance has timed out; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IDS.Collections.Algorithms">
            <summary>
            The Algorithms class is a static class that provides some helper functions.
            </summary>
        </member>
        <member name="M:IDS.Collections.Algorithms.Append``1(``0[],``0)">
            <summary>
            Appends a specified value to the end of an existing array,
            and returns the new array.
            </summary>
            <typeparam name="T">
            The type of elements in the <paramref name="array" />.
            </typeparam>
            <param name="array">
            An array.
            </param>
            <param name="value">
            The value to append to the <paramref name="array" />.
            </param>
            <returns>
            A new array that contains the elements of the <paramref name="array" />
            followed by <paramref name="value" />.
            </returns>
        </member>
        <member name="M:IDS.Collections.Algorithms.ContainsAll(System.Collections.IList,System.Collections.IEnumerable)">
            <summary>
            Determines whether a list contains all the values in
            a specified collection.
            </summary>
            <param name="list">
            An <see cref="T:System.Collections.IList" />.
            </param>
            <param name="values">
            An <see cref="T:System.Collections.IEnumerable" /> collection of the values
            to look for in the specified <paramref name="list" />.
            </param>
            <returns>
            <see langword="true" /> if the specified <paramref name="list" />
            contains all of the specified <paramref name="values" />;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:IDS.Collections.Algorithms.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs a specified action on each element of a collection.
            </summary>
            <typeparam name="T">
            The type of elements in the collection.
            </typeparam>
            <param name="collection">
            A collection.
            </param>
            <param name="action">
            The <see cref="T:System.Action`1" /> to perform on each element
            of the <paramref name="collection" />.
            </param>
        </member>
        <member name="M:IDS.Collections.Algorithms.GenerateArray``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Creates a one-dimensional array with a specified length and initializes each element
            by calling a specified function.
            </summary>
            <typeparam name="T">
            The type of the elements of the array.
            </typeparam>
            <param name="length">
            The length of the array to create.
            </param>
            <param name="generator">
            A function that returns the value to assign to the array element at a specified index.
            </param>
            <returns>
            The generated array.
            </returns>
        </member>
        <member name="M:IDS.Collections.Algorithms.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value associated with a specified key in a dictionary,
            or a default value if the key is not found.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
            <param name="dictionary">
            An <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </param>
            <param name="key">
            The key whose value to get.
            </param>
            <returns>
            The value associated with the specified <paramref name="key" />,
            or if the <paramref name="key" /> is not found,
            the default value for the <typeparamref name="TValue" /> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para>
            <paramref name="dictionary" /> is <see langword="null" />.
            </para>
            <para>
            -or-
            </para>
            <para>
            <paramref name="key" /> is <see langword="null" />.
            </para>
            </exception>
        </member>
        <member name="M:IDS.Collections.Algorithms.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value associated with a specified key in a dictionary,
            or a specified default value if the key is not found.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
            <param name="dictionary">
            An <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </param>
            <param name="key">
            The key whose value to get.
            </param>
            <param name="defaultValue">
            The value to return if the <paramref name="key" /> is not found.
            </param>
            <returns>
            The value associated with the specified <paramref name="key" />,
            or <paramref name="defaultValue" /> if the <paramref name="key" />
            is not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para>
            <paramref name="dictionary" /> is <see langword="null" />.
            </para>
            <para>
            -or-
            </para>
            <para>
            <paramref name="key" /> is <see langword="null" />.
            </para>
            </exception>
        </member>
        <member name="M:IDS.Collections.Algorithms.RecursiveSelect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens a specified sequence of trees.
            </summary>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
            A sequence that contains the root elements of the trees.
            </param>
            <param name="childSelector">
            A function that returns the child elements of a specified element.
            </param>
            <returns>
            The elements of the trees in depth-first search order.
            </returns>
        </member>
        <member name="M:IDS.Collections.Algorithms.StableSortInPlace(System.Collections.IList,System.Collections.IComparer)">
            <summary>
            Sorts the elements in a list, maintaining the relative order of
            equal elements.
            </summary>
            <param name="list">
            The list to sort.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.IComparer" /> to use when comparing elements.
            </param>
        </member>
        <member name="M:IDS.Collections.Algorithms.StableSortInPlace``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts the elements in a specified list, maintaining the relative order of equal elements.
            </summary>
            <param name="list">
            The list to sort.
            </param>
            <param name="comparison">
            The <see cref="T:System.Comparison`1" /> to use when comparing elements.
            </param>
        </member>
        <member name="T:IDS.Collections.ArrayListCached">
            <summary>
            Abstract class for cacheing an ArrayList. Inherited classes determine where the storage is.
            </summary>
        </member>
        <member name="P:IDS.Collections.ArrayListCached.KeyToken">
            <summary>
            Token to prepend to all cache entries
            </summary>
        </member>
        <member name="F:IDS.Collections.ArrayListCached._key">
            <summary>
            Unique key that will be used to find the ArrayList in storage. Leave blank if you don't want to cache.
            </summary>
        </member>
        <member name="P:IDS.Collections.ArrayListCached.Key">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Collections.ArrayListCached.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key that will be used to find the ArrayList in storage. Leave blank if you don't want to cache.</param>
        </member>
        <member name="P:IDS.Collections.ArrayListCached.CacheLoaded">
            <summary>
            Returns true if an ArrayList is in cache.
            </summary>
            <value>true if array list is in cache; otherwise false</value>
        </member>
        <member name="M:IDS.Collections.ArrayListCached.DeleteCache">
            <summary>
            Implement this method in inherited class to delete the ArrayList in storage.
            </summary>
        </member>
        <member name="M:IDS.Collections.ArrayListCached.GetCachedArray">
            <summary>
            Implement this method in inherited class to get the ArrayList from storage.
            </summary>
            <returns>ArrayList</returns>
        </member>
        <member name="M:IDS.Collections.ArrayListCached.WriteArrayToCache">
            <summary>
            Implement this method in inherited class to write the ArrayList to storage.
            </summary>
            <returns>ArrayList</returns>
        </member>
        <member name="M:IDS.Collections.ArrayListCached.InvalidateCache">
            <summary>
            Call to invalidate the cache.
            </summary>
        </member>
        <member name="M:IDS.Collections.ArrayListCached.LoadFromCache">
            <summary>
            Loads the array from cache.
            </summary>
        </member>
        <member name="M:IDS.Collections.ArrayListCached.Cache">
            <summary>
            Call to cache the ArrayList in storage.
            </summary>
        </member>
        <member name="T:IDS.Collections.ArrayListCachedHttpSession">
            <summary>
            ArrayListCached that is cached in HTTP session
            </summary>
        </member>
        <member name="M:IDS.Collections.ArrayListCachedHttpSession.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key that will be used to find the ArrayList in storage. Leave blank if you don't want to cache.</param>
        </member>
        <member name="M:IDS.Collections.ArrayListCachedHttpSession.InvalidateCache(System.String)">
            <summary>
            Deletes all cache entries from session that contain the passed keyFragment in the cache key
            </summary>
            <param name="keyFragment"></param>
        </member>
        <member name="M:IDS.Collections.ArrayListCachedHttpSession.DeleteCache">
            <summary>
            Deletes cache from storage.
            </summary>
        </member>
        <member name="P:IDS.Collections.ArrayListCachedHttpSession.CacheLoaded">
            <summary>
            Determines if the cache is loaded
            </summary>
            <value>true if array list is in cache; otherwise false</value>
        </member>
        <member name="M:IDS.Collections.ArrayListCachedHttpSession.GetCachedArray">
            <summary>
            Gets ArrayList from storage.
            </summary>
            <returns>ArrayList</returns>
        </member>
        <member name="M:IDS.Collections.ArrayListCachedHttpSession.WriteArrayToCache">
            <summary>
            Writes the ArrayList to storage.
            </summary>
            <returns>true if successful.</returns>
        </member>
        <member name="M:IDS.Collections.ArrayListCachedHttpSession.GetSession">
            <summary>
            Gets the current session.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Collections.ColonDelimitedStringCollection">
            <summary>
            The ColonDelimitedStringCollection is an implementation of the DelimitedStringCollection
            class for handling colon delimited strings. This class has the Parse() and ToString()
            methods to work with the ComponentModel ComponentSettings framework.
            </summary>
        </member>
        <member name="M:IDS.Collections.ColonDelimitedStringCollection.Parse(System.String)">
            <summary>
            Parse a colon delimited string into a collection of strings.
            </summary>
            <param name="listString">The colon delimited string to parse.</param>
            <returns>Returns a ColonDelimitedStringCollection.</returns>
        </member>
        <member name="M:IDS.Collections.ColonDelimitedStringCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.ColonDelimitedStringCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Collections.ColonDelimitedStringCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.ColonDelimitedStringCollection"/> class.
            </summary>
            <param name="listString">The list string.</param>
        </member>
        <member name="T:IDS.Collections.CommaDelimitedStringCollection">
            <summary>
            The CommaDelimitedStringCollection is an implementation of the DelimitedStringCollection
            class for handling comma delimited strings. This class has the Parse() and ToString()
            methods to work with the ComponentModel ComponentSettings framework.
            </summary>
        </member>
        <member name="M:IDS.Collections.CommaDelimitedStringCollection.Parse(System.String)">
            <summary>
            Parse a comma delimited string into a collection of strings.
            </summary>
            <param name="listString">The comma delimited string to parse.</param>
            <returns>Returns a CommaDelimitedStringCollection.</returns>
        </member>
        <member name="M:IDS.Collections.CommaDelimitedStringCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.CommaDelimitedStringCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Collections.CommaDelimitedStringCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.CommaDelimitedStringCollection"/> class.
            </summary>
            <param name="listString">The list string.</param>
        </member>
        <member name="T:IDS.Collections.ConcurrentNameObjectDictionary">
            <summary>
            
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Collections.ConcurrentNameObjectDictionary.GetValue``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.ConcurrentNameObjectDictionary.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.ConcurrentNameObjectDictionary.SetValue``1(System.String,``0)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Collections.DelimitedStringCollection">
            <summary>
            The DelimitedStringCollection is a base class for implementing a delimited string collection.
            </summary>
            <remarks>
            Rather then using the DelimitedStringCollection, one of the specialized classes should be used.
            <seealso cref="T:IDS.Collections.CommaDelimitedStringCollection"/>
            <seealso cref="T:IDS.Collections.ColonDelimitedStringCollection"/>
            <seealso cref="T:IDS.Collections.SemiColonDelimitedStringCollection"/>
            <seealso cref="T:IDS.Collections.NewLineDelimitedStringCollection"/>
            </remarks>
        </member>
        <member name="M:IDS.Collections.DelimitedStringCollection.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.DelimitedStringCollection"/> class.
            </summary>
            <param name="delimiter">The delimiter.</param>
        </member>
        <member name="M:IDS.Collections.DelimitedStringCollection.#ctor(System.String,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.DelimitedStringCollection"/> class.
            </summary>
            <param name="listString">The list string.</param>
            <param name="delimiter">The delimiter.</param>
        </member>
        <member name="P:IDS.Collections.DelimitedStringCollection.Delimiter">
            <summary>
            Gets or sets the delimiter.
            </summary>
            <value>The delimiter.</value>
        </member>
        <member name="M:IDS.Collections.DelimitedStringCollection.ToString">
            <summary>
            Returns the elements of the collection as a single delimited string.
            </summary>
            <returns>The elements of the collection as a single delimited string.</returns>
        </member>
        <member name="M:IDS.Collections.DelimitedStringCollection.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.DelimitedStringCollection.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Collections.Generic.ItemCreationDelegate`2">
            <summary>
            ItemCreationDelegate is a delegate that can be called when an item is created.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TCreationData"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Collections.Generic.ItemDestructionDelegate`1">
            <summary>
            ItemDestructionDelegate is a delegate that can be called when an item is destroyed.
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="item"></param>
        </member>
        <member name="T:IDS.Collections.Generic.DictionaryOfKeyAndList`2">
            <summary>
            Generic Dictionary of key and list
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:IDS.Collections.Generic.DictionaryOfKeyAndList`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.DictionaryOfKeyAndList`2.Add(`0,System.Collections.Generic.List{`1})">
            <summary>
            Method called to add an element to the dict
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:IDS.Collections.Generic.DictionaryOfKeyAndList`2.ContainsKey(`0)">
            <summary>
            Method called to check of a key is already present
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:IDS.Collections.Generic.DictionaryOfKeyAndList`2.Keys">
            <summary>
            Property get for keys collection
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.DictionaryOfKeyAndList`2.Remove(`0)">
            <summary>
            Method called to remove a key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.Generic.DictionaryOfKeyAndList`2.TryGetValue(`0,System.Collections.Generic.List{`1}@)">
            <summary>
            Not implemented yet
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:IDS.Collections.Generic.DictionaryOfKeyAndList`2.Values">
            <summary>
            Called to get the values collection
            </summary>
        </member>
        <member name="P:IDS.Collections.Generic.DictionaryOfKeyAndList`2.Item(`0)">
            <summary>
            Indexer to get the list corresponding to the key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.Generic.DictionaryOfKeyAndList`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.List{`1}})">
            <summary>
            Method called to add a key pair
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:IDS.Collections.Generic.DictionaryOfKeyAndList`2.Clear">
            <summary>
            Method called to clear the dictionary
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.DictionaryOfKeyAndList`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.List{`1}})">
            <summary>
            Method called to check for the presense of key pair
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.Generic.DictionaryOfKeyAndList`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.List{`1}}[],System.Int32)">
            <summary>
            Method called to copy dict to an array
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:IDS.Collections.Generic.DictionaryOfKeyAndList`2.Count">
            <summary>
            Property returns the count of the keys
            </summary>
        </member>
        <member name="P:IDS.Collections.Generic.DictionaryOfKeyAndList`2.IsReadOnly">
            <summary>
            Returns if this dict is readonly
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.DictionaryOfKeyAndList`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.List{`1}})">
            <summary>
            Called to remove key pair
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.Generic.DictionaryOfKeyAndList`2.GetEnumerator">
            <summary>
            Method called to get the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.Generic.DictionaryOfKeyAndList`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Method called to get the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.Generic.DictionaryOfKeyAndList`2.Add(`0)">
            <summary>
            Called to a key and an empty list
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:IDS.Collections.Generic.DictionaryOfKeyAndList`2.Add(`0,`1)">
            <summary>
            Method called to add value against a key
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:IDS.Collections.Generic.Grouping`2">
            <summary>
            Represents a collection of objects that have a common key. 
            </summary>
            <typeparam name="TKey">
            The type of the key of the <see cref="T:IDS.Collections.Generic.Grouping`2" />.
            </typeparam>
            <typeparam name="TElement">
            The type of the values in the <see cref="T:IDS.Collections.Generic.Grouping`2" />.
            </typeparam>
        </member>
        <member name="M:IDS.Collections.Generic.Grouping`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.Generic.Grouping`2" /> class.
            </summary>
            <param name="key">
            The key of the <see cref="T:IDS.Collections.Generic.Grouping`2" />.
            </param>
            <param name="collection">
            The values in the <see cref="T:IDS.Collections.Generic.Grouping`2" />.
            </param>
        </member>
        <member name="P:IDS.Collections.Generic.Grouping`2.Key">
            <summary>
            Gets the key of the <see cref="T:IDS.Collections.Generic.Grouping`2" />.
            </summary>
            <value>
            The key of the <see cref="T:IDS.Collections.Generic.Grouping`2" />.
            </value>
        </member>
        <member name="M:IDS.Collections.Generic.Grouping`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection. 
            </returns>
        </member>
        <member name="T:IDS.Collections.Generic.ObjectPool`2">
            <summary>
            A generic object pool implementation that can periodically check for idle items and destroy them.
            </summary>
            <typeparam name="TItem">The type of object being pooled.</typeparam>
            <typeparam name="TCreationData">
            The type of object that contains the values necessary to create a <typeparamref name="TItem"/>.
            </typeparam>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectPool`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.Generic.ObjectPool`2"/> class.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectPool`2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.Generic.ObjectPool`2"/> class.
            </summary>
            <param name="maximumItems">The maximum items.</param>
            <param name="idleTimeout">The idle timeout.</param>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectPool`2.#ctor(System.Int32,System.Int32,IDS.Collections.Generic.ItemCreationDelegate{`0,`1},IDS.Collections.Generic.ItemDestructionDelegate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.Generic.ObjectPool`2"/> class.
            </summary>
            <param name="maximumItems">The maximum items.</param>
            <param name="idleTimeout">The idle timeout.</param>
            <param name="itemCreationProc">The item creation proc.</param>
            <param name="itemDestructionProc">The item destruction proc.</param>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectPool`2.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:IDS.Collections.Generic.ObjectPool`2"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectPool`2.Dispose(System.Boolean)">
            <summary>
            Cleans up resources allocated by this object.
            </summary>
            <param name="disposing">true if this method is being called from the IDisposable.Dispose() method.
            False if being called from the finalizer.</param>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectPool`2.CleanUpPool(System.Object)">
            <summary>
            Cleans the up pool.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectPool`2.CreateItem(IDS.Collections.Generic.ItemCreationDelegate{`0,`1},`1)">
            <summary>
            Creates the item.
            </summary>
            <param name="creationDelegate">The creation delegate.</param>
            <param name="creationData">The creation data.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectPool`2.DestroyItem(`0)">
            <summary>
            Destroys the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectPool`2.DestroyItem(`0,IDS.Collections.Generic.ItemDestructionDelegate{`0})">
            <summary>
            Destroys the item.
            </summary>
            <param name="item">The item.</param>
            <param name="destructionMethod">The destruction method.</param>
        </member>
        <member name="P:IDS.Collections.Generic.ObjectPool`2.PoolItemCount">
            <summary>
            Gets the number of items currently in the pool, ready for use.
            </summary>
        </member>
        <member name="P:IDS.Collections.Generic.ObjectPool`2.MaxItems">
            <summary>
            Gets or sets the maximum number of items allowed in the pool.
            </summary>
            <remarks>
            When setting this value: if the new value is less than the previous value, the pool size will not decrease 
            until the next time the cleanup thread is run.  This may or may not be immediately after setting the value.
            However, if the new value is greater than the existing value, the change will take effect immediately.
            </remarks>
        </member>
        <member name="P:IDS.Collections.Generic.ObjectPool`2.ObjectQueue">
            <summary>
            The queue that holds all the pooled items.
            </summary>
        </member>
        <member name="P:IDS.Collections.Generic.ObjectPool`2.ItemCreationProcedure">
            <summary>
            Gets the default method to be called when a new item needs to be created.  Derived classes may set this value.
            </summary>
        </member>
        <member name="P:IDS.Collections.Generic.ObjectPool`2.ItemDestructionProcedure">
            <summary>
            Gets the default method to be called when an item needs to be destroyed.  Derived classes may set this value.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectPool`2.ObtainFromPool">
            <summary>
            Gets a <typeparamref name="TItem"/> object from the pool.  If the pool is empty,
            a new item will be created using the default <see cref="T:IDS.Collections.Generic.ItemCreationDelegate`2"/>.
            If no delegate is supplied, and <typeparamref name="TItem"/> is a reference type, an attempt will be made to call
            its default constructor.  If no default constructor exists or <typeparamref name="TItem"/> is a value type,
            the default value for <typeparamref name="TItem"/> will be returned.
            </summary>
            <returns>A <typeparamref name="TItem"/> instance.  Either from the pool, or newly-created if the pool is empty.</returns>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectPool`2.ObtainFromPool(IDS.Collections.Generic.ItemCreationDelegate{`0,`1},`1)">
            <summary>
            Gets a <typeparamref name="TItem"/> object from the pool.  If the pool is empty,
            a new item will be created using the supplied <see cref="T:IDS.Collections.Generic.ItemCreationDelegate`2"/>.
            If no delegate is supplied and <typeparamref name="TItem"/> is a reference type, an attempt will be made to call
            its default constructor.  If no default constructor exists or <typeparamref name="TItem"/> is a value type,
            the default value for <typeparamref name="TItem"/> will be returned.
            </summary>
            <param name="creationDelegate">
            The <see cref="T:IDS.Collections.Generic.ItemCreationDelegate`2"/> method to be called if the pool is empty and a new
            <typeparamref name="TItem"/> needs to be created.  If null and <typeparamref name="TItem"/> is a reference type, 
            an attempt will be made to call <typeparamref name="TItem"/>'s default constructor.  If no default constructor exists or 
            <typeparamref name="TItem"/> is a value type, the default value for <typeparamref name="TItem"/> will be returned.
            </param>
            <param name="creationData">
            The <typeparamref name="TCreationData"/> instance to pass to <paramref name="creationDelegate"/>.
            If <paramref name="creationDelegate"/> is null, <paramref name="creationData"/> is ignored.
            </param>
            <returns>A <typeparamref name="TItem"/> instance.  Either from the pool, or newly-created if the pool is empty.</returns>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectPool`2.ReturnToPool(IDS.Collections.Generic.ItemDestructionDelegate{`0},`0)">
            <summary>
            Returns a <typeparamref name="TItem"/> instance to the pool for reuse later.  If the pool is full,
            the item will be destroyed using the supplied <see cref="T:IDS.Collections.Generic.ItemDestructionDelegate`1"/>.
            If no delegate is supplied, and <typeparamref name="TItem"/> implements <see cref="T:System.IDisposable"/>,
            the item's <see cref="M:System.IDisposable.Dispose"/> method will be called.
            </summary>
            <param name="itemReturn">
            The <see cref="T:IDS.Collections.Generic.ItemDestructionDelegate`1"/> method to be called if the pool is full and 
            <paramref name="poolObject"/> needs to be destroyed.  If null, and <paramref name="poolObject"/>
            implements <see cref="T:System.IDisposable"/>, <paramref name="poolObject"/>'s <see cref="M:System.IDisposable.Dispose"/>
            method will be called.
            </param>
            <param name="poolObject">The <typeparamref name="TItem"/> instance to be put back in the pool.</param>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectPool`2.ReturnToPool(`0)">
            <summary>
            Returns a <typeparamref name="TItem"/> instance to the pool for reuse later.  If the pool is full,
            the item will be destroyed using the default <see cref="T:IDS.Collections.Generic.ItemDestructionDelegate`1"/>.
            If no delegate has been set, and <typeparamref name="TItem"/> implements <see cref="T:System.IDisposable"/>,
            the item's <see cref="M:System.IDisposable.Dispose"/> method will be called.
            </summary>
            <param name="poolObject">The <typeparamref name="TItem"/> instance to be put back in the pool.</param>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectPool`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:IDS.Collections.Generic.ObjectSorter`1">
            <summary>
            Can be used as an IComparer in a sort operation to sort the collection objects according to any field on those objects.
            </summary>
            <remarks>
            If an object does not have a given property in the sort expression, it is treated as if it does have that property and it returns null.
            This also means that not all objects in the collection need to have the same properties.
            
            You may sort by multiple fields by separating them by commas. Sort order is ASCENDING by default, unless you specify the DESC modifier.
            You may change the sort order of each field in the sort expression individually.
            
            If two objects have the same value for all fields in the sort expression, their order is undefined.
            </remarks>
            <example>
            <code>
            ArrayList players = new ArrayList();
            players.Add(new BaseballPlayer("Bob Vandehey", "Product Development", 199, 1));
            players.Add(new BaseballPlayer("Kevin Gorlic", "Implementation", 201, 1));
            players.Add(new BaseballPlayer("Josh Merit", "Professional Services", 200, 1));
            players.Add(new BaseballPlayer("Matt Gollob", "Product Development", 201, 42));
            players.Add(new BaseballPlayer("David Reed", "Product Development", 200, 88));
            players.Add(new BaseballPlayer("John Wright", "Implementation", 200, 42));
            players.Add(new BaseballPlayer("Shefali Kumar", "Professional Services", 300, 0));
            players.Add(new BaseballPlayer("Dallas Arnell", "Implementation", 200, 0));
            players.Add(new BaseballPlayer("Matt Walker", "Product Development", 200, 0));
            players.Add(new BaseballPlayer("Scott Williams", "Professional Services", 300, 42));
            IDS.Collections.ObjectSorter os = new IDS.Collections.ObjectSorter("Team, Average DESC, Jersey, Name");
            players.Sort(os);
            
            foreach(BaseballPlayer player in players)
            {
            	Console.WriteLine("Name: {0}\tTeam: {1}\tAverage: {2}\tJersey: {3}", player.Name, player.Team, player.Average, player.Jersey);
            }
            </code>
            </example>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.Sort(System.Collections.Generic.List{`0},System.String)">
            <summary>
            Sorts the specified list.
            </summary>
            <param name="list">The list.</param>
            <param name="sortExpression">The sort expression.</param>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.#ctor">
            <summary>
            Initializes a new ObjectSorter
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.#ctor(System.String)">
            <summary>
            Initializes a new ObjectSorter with the given sort expression.
            </summary>
        </member>
        <member name="P:IDS.Collections.Generic.ObjectSorter`1.SortFields">
            <summary>
            Gets a collection of the Sort Fields.
            </summary>
        </member>
        <member name="P:IDS.Collections.Generic.ObjectSorter`1.SortExpression">
            <summary>
            Gets or sets the Sort Expression.
            </summary>
            <remarks>
            The sort expression is a string representation of the <see cref="P:IDS.Collections.Generic.ObjectSorter`1.SortFields"/> collection. You may modify one or both of these properties
            and the other will instantly reflect the changes.
            
            The format of the sort expression is a comma-delimited list of property names. Each property name may be postfixed with the ASC or DESC modifiers.
            All whitespace is ignored except that whitespace is required between a property name and the ASC or DESC modifier. The comma should separate values only,
            there should not be extra leading or trailing commas, or two or more consequtive commas.
            </remarks>
            <example>
            Team, Average DESC, Jersey, Name
            </example>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.Compare(`0,`0)">
            <summary>
            Compares the two objects according to the assigned sort expression.
            </summary>
            <param name="x">First object</param>
            <param name="y">Second object</param>
            <returns>Negative if x is less than y, 0 if they are equal, positive if y is greater than x.</returns>
        </member>
        <member name="T:IDS.Collections.Generic.ObjectSorter`1.SortField">
            <summary>
            Represents a single sort field in a sort expression.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.SortField.Parse(System.String)">
            <summary>
            Creates a SortField based on the given sort expression fragment.
            </summary>
            <remarks>
            If sortExpressionFragment is null or empty, a default SortField object is returned.
            </remarks>
            <param name="sortExpressionFragment">The fragment that refers to the desired field</param>
            <returns>A new SortField object</returns>
            <example>
            Field DESC
            </example>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.SortField.#ctor">
            <summary>
            Initializes a new SortField
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.SortField.#ctor(System.String)">
            <summary>
            Initializes a new SortField
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.SortField.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new SortField
            </summary>
        </member>
        <member name="P:IDS.Collections.Generic.ObjectSorter`1.SortField.Field">
            <summary>
            Gets or sets the field this sort field is for.
            </summary>
        </member>
        <member name="P:IDS.Collections.Generic.ObjectSorter`1.SortField.Ascending">
            <summary>
            Gets or sets whether this field is sorted ascending or descending.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.SortField.ToString">
            <summary>
            Converts the sort field into a sort expression.
            </summary>
            <returns>A new sort expression string.</returns>
        </member>
        <member name="T:IDS.Collections.Generic.ObjectSorter`1.SortFieldCollection">
            <summary>
            A collection of SortFields.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.SortFieldCollection.Parse(System.String)">
            <summary>
            Initializes a new sort field collection based on a given sort expression.
            </summary>
            <param name="sortFieldsExpression">A sort expression to initialize the sort fields with.</param>
            <returns>A new SortFieldCollection.</returns>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.SortFieldCollection.#ctor">
            <summary>
            Initializes a new sort field collection.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.SortFieldCollection.#ctor(System.String)">
            <summary>
            Initializes a new sort field collection.
            </summary>
            <param name="sortFieldsExpression">A sort expression to initialize the sort fields with.</param>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.SortFieldCollection.Add(System.String)">
            <summary>
            Adds a single sort field to the collection based on the sort field string.
            </summary>
            <example>
            <code>
            fields.Add("Name DESC");
            </code>
            </example>
            <param name="fieldExpression">Field expression to add</param>
            <returns>The zero based index of the newly added field.</returns>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.SortFieldCollection.Add(System.String,System.Boolean)">
            <summary>
            Adds a new sort field to the collection with the given name and order.
            </summary>
            <param name="fieldName">Name of the field to sort by.</param>
            <param name="ascending">Order to sort by.</param>
            <returns>The zero based index of the newly added field.</returns>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.SortFieldCollection.AddExpression(System.String)">
            <summary>
            Adds one or more sort fields to the collection based on the given sort expression.
            </summary>
            <param name="sortFieldsExpression">The sort field expression to process.</param>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.SortFieldCollection.Remove(System.String)">
            <summary>
            Removes a SortField from the collection by its field name.
            </summary>
            <param name="fieldName">The field name to remove</param>
            <remarks>
            If the field is in the collection multiple times, only the first is removed.
            </remarks>
        </member>
        <member name="M:IDS.Collections.Generic.ObjectSorter`1.SortFieldCollection.ToString">
            <summary>
            Converts the collection into a sort expression.
            </summary>
            <returns>A new sort expression.</returns>
        </member>
        <member name="T:IDS.Collections.Generic.SmartComparer`1">
            <summary>
            Reflection based, Generic Comparer
            class for sorting
            </summary>
            <example>
            List&lt;DataObject&gt; array = new List&lt;DataObject&gt;();
            
            ... Code to populate list ...
            
            array.sort(new SmartComparer&lt;DataObject&gt;("ID", SortOrder.Ascending, null));
            
            or
            
            SmartComparer genericComparer = 
                  new SmartComparer&lt;DataObject&gt;();
            genericComparer.MemberName = "ID";
            genericComparer.Order = SortOrder.Ascending;
            
            array.sort(genericComparer);
            </example>
        </member>
        <member name="M:IDS.Collections.Generic.SmartComparer`1.#ctor">
            <summary>
            Default constructor for use in instances.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.SmartComparer`1.#ctor(System.String,IDS.Collections.SortOrder,System.Collections.Generic.List{System.Object})">
            <summary>
            Constructor for in-line instantiation
            </summary>
            <param name="memberName">string of the member name to use for comparison
            can be either a method name or a property.
            </param>
            <param name="sortOrder">enum value defining the sort order</param>
            <param name="methodParameters">object array
                 of parameters to use for method, null otherwise.</param>
        </member>
        <member name="M:IDS.Collections.Generic.SmartComparer`1.#ctor(System.String[],IDS.Collections.SortOrder)">
            <summary>
            Constructor for in-line instantiation
            </summary>
            <param name="properties">string array of the member names to use for comparison.
            Can only be property names.
            </param>
            <param name="sortOrder">enum value defining the sort order</param>
        </member>
        <member name="M:IDS.Collections.Generic.SmartComparer`1.Compare(`0,`0)">
            <summary>
            Implementing method for IComparer
            </summary>
            <param name="objOne">Object to compare from</param>
            <param name="objTwo">Object to compare to</param>
            <returns>int of the comparison, or 0 if equal</returns>
        </member>
        <member name="T:IDS.Collections.Generic.SortExpression`1">
            <summary>
            Defines an ordered sequence of properties by which to sort objects in a collection.
            </summary>
            <typeparam name="T">
            The type of objects to be sorted.
            </typeparam>
            <threadsafety static="true" instance="true" />
            <remarks>
            The string representation of a sort expression consists of a comma-delimited list of zero or more
            .NET property names. Each property name can be followed by a single space and "ASC" (the default)
            or "DESC"; these order specifiers are case sensitive. Extraneous white space is only allowed after commas.
            </remarks>
        </member>
        <member name="M:IDS.Collections.Generic.SortExpression`1.Parse(System.String)">
            <summary>
            Converts the string representation of a sort expression to its equivalent
            <ese cref="T:IDS.Collections.Generic.SortExpression`1" /> instance.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.SortExpression`1.#ctor(IDS.Collections.Generic.SortExpression{`0}.Property[])">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.Generic.SortExpression`1" /> class.
            </summary>
        </member>
        <member name="P:IDS.Collections.Generic.SortExpression`1.Properties">
            <summary>
            Gets the properties by which to sort objects in a collection.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.SortExpression`1.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.Generic.SortExpression`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.Generic.SortExpression`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.Generic.SortExpression`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:IDS.Collections.Generic.SortExpression`1.Property">
            <summary>
            Represents a property by which to sort objects in a collection.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.SortExpression`1.Property.Create(System.String,IDS.Collections.SortOrder)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.SortExpression`1.Property.Create(System.Reflection.PropertyInfo,IDS.Collections.SortOrder)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.SortExpression`1.Property.Create(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},IDS.Collections.SortOrder)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.SortExpression`1.Property.#ctor(System.String,IDS.Collections.SortOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.Generic.SortExpression`1.Property" /> class.
            </summary>
        </member>
        <member name="P:IDS.Collections.Generic.SortExpression`1.Property.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:IDS.Collections.Generic.SortExpression`1.Property.SortOrder">
            <summary>
            Gets a value that indicates whether to sort the property in ascending or descending order.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.SortExpression`1.Property.Clone(IDS.Collections.SortOrder)">
            <summary>
            Creates a <see cref="T:IDS.Collections.Generic.SortExpression`1.Property" /> whose <see cref="P:IDS.Collections.Generic.SortExpression`1.Property.Name" /> is the same as
            the current <see cref="T:IDS.Collections.Generic.SortExpression`1.Property" /> and whose <see cref="P:IDS.Collections.Generic.SortExpression`1.Property.SortOrder" /> equals a specified value.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.SortExpression`1.Property.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.Generic.SortExpression`1.Property.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.Generic.SortExpression`1.Property.ToString">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.Generic.SortExpression`1.Property.GetValue(`0)">
            <summary>
            Returns the property value of a specified object.
            </summary>
        </member>
        <member name="T:IDS.Collections.Generic.SortExpressionHelper">
            <summary>
            Contains static methods for working with sort expressions.
            </summary>
        </member>
        <member name="F:IDS.Collections.Generic.SortExpressionHelper.AscendingSpecifier">
            <summary>
            Indicates that a property is to be sorted in ascending order.
            </summary>
        </member>
        <member name="F:IDS.Collections.Generic.SortExpressionHelper.DescendingSpecifier">
            <summary>
            Indicates that a property is to be sorted in descending order.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.SortExpressionHelper.Split(System.String)">
            <summary>
            Splits a specified comma-delimited list of property names and optional sort orders.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.SortExpressionHelper.OrderBy``1(System.Collections.Generic.IEnumerable{``0},IDS.Collections.Generic.SortExpression{``0})">
            <summary>
            Sorts a sequence of objects by using a specified <see cref="T:IDS.Collections.Generic.SortExpression`1" />.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.SortExpressionHelper.ThenBy``1(System.Linq.IOrderedEnumerable{``0},IDS.Collections.Generic.SortExpression{``0})">
            <summary>
            Performs a subsequent ordering of a sequence of objects by using a specified <see cref="T:IDS.Collections.Generic.SortExpression`1" />.
            </summary>
        </member>
        <member name="T:IDS.Collections.Generic.SortExpressionTypeMapping`2">
            <summary>
            Configures how a <see cref="T:IDS.Collections.Generic.SortExpression`1" /> for one type of object (the "input" type,
            such as a data transfer object or model) is mapped to a <see cref="T:IDS.Collections.Generic.SortExpression`1" />
            for another type of object (the "output" type, such as a business object).
            </summary>
        </member>
        <member name="P:IDS.Collections.Generic.SortExpressionTypeMapping`2.PropertyMappings">
            <summary>
            Gets the collection of configured property mappings.
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.SortExpressionTypeMapping`2.Map(IDS.Collections.Generic.SortExpression{`0})">
            <summary>
            Maps a specified <see cref="T:IDS.Collections.Generic.SortExpression`1" /> of <typeparamref name="TInput" />
            to a <see cref="T:IDS.Collections.Generic.SortExpression`1" /> of <typeparamref name="TOutput" />.
            </summary>
        </member>
        <member name="T:IDS.Collections.Generic.SortExpressionTypeMapping`2.PropertyMapping">
            <summary>
            Configures the mapping from an input property to an output sort expression.
            </summary>
        </member>
        <member name="P:IDS.Collections.Generic.SortExpressionTypeMapping`2.PropertyMapping.InputPropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Collections.Generic.SortExpressionTypeMapping`2.PropertyMapping.OutputSortExpression">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Collections.Generic.SortExpressionTypeMapping`2.PropertyMappingCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Collections.Generic.SortExpressionTypeMapping`2.PropertyMappingCollection.Add(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`1,System.Object}}[])">
            <summary>
            Adds a mapping from a specified input property to a specified array of output properties or values.
            </summary>
            <param name="inputPropertyExpression">
            A lambda expression of the form <c>x =&gt; x.Property</c> that references the input property.
            </param>
            <param name="outputPropertyExpressions">
            An array of lambda expressions that reference the output properties or values.
            </param>
        </member>
        <member name="T:IDS.Collections.Generic.ValidatingList`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IDS.Collections.Generic.ValidatingList`1.#ctor(System.Predicate{`0},System.String)">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <param name="exceptionMessage"></param>
        </member>
        <member name="P:IDS.Collections.Generic.ValidatingList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:IDS.Collections.Generic.ValidatingList`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:IDS.Collections.Generic.ValidatingList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.Generic.ValidatingList`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.Generic.ValidatingList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.Generic.ValidatingList`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.Generic.ValidatingList`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.Generic.ValidatingList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:IDS.Collections.Generic.ValidatingList`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.Generic.ValidatingList`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.Generic.ValidatingList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.Generic.ValidatingList`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Collections.Generic.ValidatingList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:IDS.Collections.SortOrder">
            <summary>
            An enumeration that designates the sort order.
            </summary>
        </member>
        <member name="F:IDS.Collections.SortOrder.Ascending">
            <summary>
            The sort order is ascending.
            </summary>
        </member>
        <member name="F:IDS.Collections.SortOrder.Descending">
            <summary>
            The sort order is descending.
            </summary>
        </member>
        <member name="T:IDS.Collections.SmartComparer">
            <summary>
            Reflection based, Generic Comparer
            class for sorting
            </summary>
            <example>
            List array = new List();
            
            ... Code to populate list ...
            
            array.sort(new SmartComparer("ID", SortOrder.Ascending, null));
            
            or
            
            SmartComparer genericComparer = 
                  new SmartComparer();
            genericComparer.MemberName = "ID";
            genericComparer.Order = SortOrder.Ascending;
            
            array.sort(genericComparer);
            </example>
        </member>
        <member name="P:IDS.Collections.SmartComparer.MemberName">
            <summary>
            Name of the method or property that needs to be used for sorting. Note: Overridden if the Properties property is set.
            </summary>
        </member>
        <member name="P:IDS.Collections.SmartComparer.Properties">
            <summary>
            Names of properties that need to be used for sorting. Note: Setting this property overrides the Member name property.
            </summary>
        </member>
        <member name="P:IDS.Collections.SmartComparer.SortOrders">
            <summary>
            Gets the sort orders of individual properties.
            </summary>
        </member>
        <member name="P:IDS.Collections.SmartComparer.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>The order.</value>
        </member>
        <member name="P:IDS.Collections.SmartComparer.MethodParameters">
            <summary>
            List of objects which are to be used for the method in case a method is being used for sorting (instead of a property).
            </summary>
        </member>
        <member name="M:IDS.Collections.SmartComparer.#ctor">
            <summary>
            Default constructor for use in instances.
            </summary>
        </member>
        <member name="M:IDS.Collections.SmartComparer.#ctor(System.String,IDS.Collections.SortOrder,System.Collections.Generic.List{System.Object})">
            <summary>
            Constructor for in-line instantiation
            </summary>
            <param name="memberName">string of the member name to use for comparison
            can be either a method name or a property.
            </param>
            <param name="sortOrder">enum value defining the sort order</param>
            <param name="methodParameters">object array
                 of parameters to use for method, null otherwise.</param>
        </member>
        <member name="M:IDS.Collections.SmartComparer.#ctor(System.String[],IDS.Collections.SortOrder)">
            <summary>
            Constructor for in-line instantiation
            </summary>
            <param name="properties">string array of the member names to use for comparison.
            Can only be property names.
            </param>
            <param name="sortOrder">enum value defining the sort order</param>
        </member>
        <member name="M:IDS.Collections.SmartComparer.GetReflected(System.Object,System.Object[]@)">
            <summary>
            Sets the global field, propertyInfo
            and/or memberInfo using the underlying Type
            </summary>
            <param name="obj">The obj.</param>
            <param name="parentValues">The parent object values. This is null when the member is a method.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.SmartComparer.GetMember(System.Object,System.String,System.Object@)">
            <summary>
            Gets the member.
            </summary>
            <param name="obj">The obj.</param>
            <param name="memberName">Name of the member.</param>
            <param name="parent">The parent. The object that holds the member</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.SmartComparer.GetComparable(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Return an IComparable for use in the Compare method
            </summary>
            <param name="obj">object to get IComparable from</param>
            <param name="memberInfo">The member info.</param>
            <returns>IComparable for this object</returns>
        </member>
        <member name="M:IDS.Collections.SmartComparer.Compare(System.Object,System.Object)">
            <summary>
            Implementing method for IComparer
            </summary>
            <param name="objOne">Object to compare from</param>
            <param name="objTwo">Object to compare to</param>
            <returns>int of the comparison, or 0 if equal</returns>
        </member>
        <member name="T:IDS.Collections.IndexableStack`1">
            <summary>
            Implements a last-in-first-out (LIFO) collection of items that can be accessed by index.
            </summary>
            <remarks>
            Unlike <see cref="T:System.Collections.Generic.Stack`1" />, the <see cref="T:IDS.Collections.IndexableStack`1" /> class provides an indexer.
            </remarks>
        </member>
        <member name="M:IDS.Collections.IndexableStack`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.IndexableStack`1" /> class.
            </summary>
        </member>
        <member name="M:IDS.Collections.IndexableStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.IndexableStack`1" /> class that contains items copied
            from a specified collection.
            </summary>
        </member>
        <member name="P:IDS.Collections.IndexableStack`1.Item(System.Int32)">
            <summary>
            Gets the item at a specified position in the stack.
            </summary>
            <param name="index">
            The index of the item to retrieve.
            Index 0 refers to the item at the top of the stack.
            Index (<see cref="P:IDS.Collections.IndexableStack`1.Count" /> - 1) refers to the item at the bottom of the stack.
            </param>
        </member>
        <member name="P:IDS.Collections.IndexableStack`1.Count">
            <summary>
            Gets the number of items in the stack.
            </summary>
        </member>
        <member name="M:IDS.Collections.IndexableStack`1.GetEnumerator">
            <summary>
            Gets an enumerator for the stack.
            </summary>
            <remarks>
            The items in the stack are enumerated from top to bottom.
            </remarks>
        </member>
        <member name="M:IDS.Collections.IndexableStack`1.Pop">
            <summary>
            Removes and returns the item at the top of the stack.
            </summary>
        </member>
        <member name="M:IDS.Collections.IndexableStack`1.Push(`0)">
            <summary>
            Adds a specified item to the top of the stack.
            </summary>
        </member>
        <member name="T:IDS.Collections.Int32Range">
            <summary>
            Represents a range of consecutive integers.
            </summary>
        </member>
        <member name="M:IDS.Collections.Int32Range.Intersect(IDS.Collections.Int32Range,IDS.Collections.Int32Range)">
            <summary>
            Intersects the specified ranges.
            </summary>
            <param name="range1">The first range.</param>
            <param name="range2">The second range.</param>
            <returns>A new Int32Range that represents the intersection of the given ranges, or an null if they don't intersect at all.</returns>
        </member>
        <member name="M:IDS.Collections.Int32Range.TestAdjacent(IDS.Collections.Int32Range,System.Int32)">
            <summary>
            Determines whether the specified range is adjacent to the given integer.
            </summary>
            <param name="range">The range.</param>
            <param name="i">The integer.</param>
            <returns>
            	<c>-1</c> if i is adjacent to the lower portion of the range, 1 if i is adjacent to the upper portion of the range, otherwise 0.
            </returns>
        </member>
        <member name="M:IDS.Collections.Int32Range.AreAdjacent(IDS.Collections.Int32Range,IDS.Collections.Int32Range)">
            <summary>
            Determines whether the specified ranges are adjacent to one another.
            </summary>
            <param name="range1">The first range.</param>
            <param name="range2">The second range.</param>
            <returns>
            	<c>true</c> if the specified ranges are adjacent to one another; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.Collections.Int32Range.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.Int32Range"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:IDS.Collections.Int32Range.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.Int32Range"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="P:IDS.Collections.Int32Range.Min">
            <summary>
            Gets the min.
            </summary>
            <value>The min.</value>
        </member>
        <member name="P:IDS.Collections.Int32Range.Max">
            <summary>
            Gets the max.
            </summary>
            <value>The max.</value>
        </member>
        <member name="M:IDS.Collections.Int32Range.Set(System.Int32,System.Int32)">
            <summary>
            Sets the specified min and max.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="P:IDS.Collections.Int32Range.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:IDS.Collections.Int32Range.AppendTo(System.Text.StringBuilder)">
            <summary>
            Appends the range as a string to the given string builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:IDS.Collections.Int32Range.Contains(System.Int32)">
            <summary>
            Determines whether the range contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the range contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.Collections.Int32Range.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Collections.Int32Range"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Collections.Int32Range"></see>.
            </returns>
        </member>
        <member name="M:IDS.Collections.Int32Range.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the range of Int32s.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:IDS.Collections.Int32Range.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:IDS.Collections.Int32Range.ReverseOrder">
            <summary>
            Returns an enumerator that iterates through the range of Int32s from Max to Min.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.Int32Range.Odds">
            <summary>
            Returns an enumerator that iterates over all odd Int32s in the range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.Int32Range.Evens">
            <summary>
            Returns an enumerator that iterates over all even Int32s in the range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.Int32Range.MultiplesOf(System.Int32)">
            <summary>
            Returns an enumerator that iterates over all Int32s that are a multiple of the given integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.Int32Range.CompareTo(IDS.Collections.Int32Range)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="T:IDS.Collections.Int32Set">
            <summary>
            Represents a sorted collection of distinct <see cref="T:System.Int32" /> values.
            </summary>
        </member>
        <member name="M:IDS.Collections.Int32Set.#ctor">
            <summary>
            Creates an empty <see cref="T:IDS.Collections.Int32Set" />.
            </summary>
        </member>
        <member name="P:IDS.Collections.Int32Set.Count">
            <summary>
            Gets the number of <see cref="T:System.Int32" /> values in the set.
            </summary>
            <value>
            The number of <see cref="T:System.Int32" /> values in the set.
            </value>
            <remarks>
            <para>
            If the set contains more than <see cref="F:System.Int32.MaxValue" /> values,
            then <see cref="P:IDS.Collections.Int32Set.Count" /> returns the number of values in the set
            less 2^32 (which results in a zero or negative value).
            </para>
            <para>
            Thus <see cref="P:IDS.Collections.Int32Set.Count" /> returns zero both when the set is empty
            and when the set contains all 2^32 possible <see cref="T:System.Int32" />
            values. To reliably determine whether the set is empty, call
            <see cref="P:IDS.Collections.Int32Set.IsEmpty" />.
            </para>
            </remarks>
        </member>
        <member name="P:IDS.Collections.Int32Set.IsEmpty">
            <summary>
            Gets a Boolean value indicating whether the set contains any
            <see cref="T:System.Int32" /> values.
            </summary>
            <value>
            <see langword="true" /> if the set is empty;
            otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:IDS.Collections.Int32Set.Add(System.Int32)">
            <summary>
            Adds an <see cref="T:System.Int32" /> value to the set.
            </summary>
            <param name="value">
            The <see cref="T:System.Int32" /> value to add to the set.
            </param>
            <returns>
            <see langword="true" /> if the specified <paramref name="value" />
            was added to the set; <see langword="false" /> if the set already
            contained the value.
            </returns>
        </member>
        <member name="M:IDS.Collections.Int32Set.Clear">
            <summary>
            Removes all values from the set.
            </summary>
        </member>
        <member name="M:IDS.Collections.Int32Set.Clone">
            <summary>
            Creates a copy of the set.
            </summary>
            <returns>
            A new copy of the set.
            </returns>
        </member>
        <member name="M:IDS.Collections.Int32Set.Contains(System.Int32)">
            <summary>
            Determines whether the set contains a specified <see cref="T:System.Int32" />
            value.
            </summary>
            <param name="value">
            The <see cref="T:System.Int32" /> to locate in the set.
            </param>
            <returns>
            <see langword="true" /> if the set contains the specified
            <paramref name="value" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:IDS.Collections.Int32Set.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copies the values in the set to an <see cref="T:System.Int32" /> array.
            </summary>
            <param name="array">
            The <see cref="T:System.Int32" /> array to which the values in the set
            are to be copied.
            </param>
            <param name="index">
            The zero-based index in <paramref name="array" /> at which to
            start copying values.
            </param>
            <remarks>
            The values in the set are copied in ascending order.
            </remarks>
        </member>
        <member name="M:IDS.Collections.Int32Set.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator" /> for the set.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through
            the set.
            </returns>
            <remarks>
            The values in the set are returned in ascending order.
            </remarks>
        </member>
        <member name="M:IDS.Collections.Int32Set.ReverseOrder">
            <summary>
            Returns an enumerator that iterates through the range of Int32s from Max to Min.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.Int32Set.Odds">
            <summary>
            Returns an enumerator that iterates over all odd Int32s in the range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.Int32Set.Evens">
            <summary>
            Returns an enumerator that iterates over all even Int32s in the range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.Int32Set.MultiplesOf(System.Int32)">
            <summary>
            Returns an enumerator that iterates over all Int32s that are a multiple of the given integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Collections.Int32Set.Parse(System.String)">
            <summary>
            Creates an <see cref="T:IDS.Collections.Int32Set" /> from the string representation
            of an integer set.
            </summary>
            <param name="value">
            A comma-delimited list of integers and integer ranges.
            For example, "1,3-5" represents the set {1, 3, 4, 5}.
            </param>
            <returns>
            A new <see cref="T:IDS.Collections.Int32Set" /> equivalent to the specified
            <paramref name="value" />.
            </returns>
        </member>
        <member name="M:IDS.Collections.Int32Set.Remove(System.Int32)">
            <summary>
            Removes an <see cref="T:System.Int32" /> value from the set.
            </summary>
            <param name="value">
            The <see cref="T:System.Int32" /> value to remove from the set.
            </param>
            <returns>
            <see langword="true" /> if the specified <paramref name="value" />
            was removed from the set; <see langword="false" /> if the set
            did not contain the value.
            </returns>
        </member>
        <member name="M:IDS.Collections.Int32Set.ToArray">
            <summary>
            Copies the values in the set to a new <see cref="T:System.Int32" /> array.
            </summary>
            <returns>
            A new <see cref="T:System.Int32" /> array that contains the values in the set
            in ascending order.
            </returns>
        </member>
        <member name="M:IDS.Collections.Int32Set.ToString">
            <summary>
            Gets a string representation of the set.
            </summary>
            <returns>
            A comma-delimited list of integers and integer ranges.
            For example, "1,3-5" represents the set {1, 3, 4, 5}.
            </returns>
        </member>
        <member name="T:IDS.Collections.NameObjectDictionary">
            <summary>
            Represents an associative mapping between keys and values.
            All keys are strings, but values can be of any type.
            </summary>
        </member>
        <member name="M:IDS.Collections.NameObjectDictionary.GetValue``1(System.String)">
            <summary>
            Gets the value associated with a specified key.
            </summary>
            <typeparamref name="TValue">
            The type of the value to get.
            </typeparamref>
            <param name="key">
            The key of the value to get.
            </param>
            <returns>
            The value with the specified <paramref name="key" />,
            or the default value of <typeparamref name="TValue" /> if the key is not found.
            </returns>
        </member>
        <member name="M:IDS.Collections.NameObjectDictionary.Remove(System.String)">
            <summary>
            Removes the value associated with a specified key.
            </summary>
            <param name="key">
            The key of the value to remove.
            </param>
        </member>
        <member name="M:IDS.Collections.NameObjectDictionary.SetValue``1(System.String,``0)">
            <summary>
            Sets the value associated with a specified key.
            </summary>
            <typeparamref name="TValue">
            The type of the value to set.
            </typeparamref>
            <param name="key">
            The key of the value to set.
            </param>
            <param name="value">
            The value to associate with the specified <paramref name="key" />.
            </param>
        </member>
        <member name="T:IDS.Collections.NewLineDelimitedStringCollection">
            <summary>
            The NewLineDelimitedStringCollection is an implementation of the DelimitedStringCollection
            class for handling new line delimited strings. This class has the Parse() and ToString()
            methods to work with the ComponentModel ComponentSettings framework.
            </summary>
        </member>
        <member name="M:IDS.Collections.NewLineDelimitedStringCollection.Parse(System.String)">
            <summary>
            Parse a new line delimited string into a collection of strings.
            </summary>
            <param name="listString">The new line delimited string to parse.</param>
            <returns>Returns a NewLineDelimitedStringCollection.</returns>
        </member>
        <member name="M:IDS.Collections.NewLineDelimitedStringCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.NewLineDelimitedStringCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Collections.NewLineDelimitedStringCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.NewLineDelimitedStringCollection"/> class.
            </summary>
            <param name="listString">The list string.</param>
        </member>
        <member name="T:IDS.Collections.ObjectSorter">
            <summary>
            Can be used as an IComparer in a sort operation to sort the collection objects according to any field on those objects.
            </summary>
            <remarks>
            If an object does not have a given property in the sort expression, it is treated as if it does have that property and it returns null.
            This also means that not all objects in the collection need to have the same properties.
            
            You may sort by multiple fields by separating them by commas. Sort order is ASCENDING by default, unless you specify the DESC modifier.
            You may change the sort order of each field in the sort expression individually.
            
            If two objects have the same value for all fields in the sort expression, their order is undefined.
            </remarks>
            <example>
            <code>
            ArrayList players = new ArrayList();
            players.Add(new BaseballPlayer("Bob Vandehey", "Product Development", 199, 1));
            players.Add(new BaseballPlayer("Kevin Gorlic", "Implementation", 201, 1));
            players.Add(new BaseballPlayer("Josh Merit", "Professional Services", 200, 1));
            players.Add(new BaseballPlayer("Matt Gollob", "Product Development", 201, 42));
            players.Add(new BaseballPlayer("David Reed", "Product Development", 200, 88));
            players.Add(new BaseballPlayer("John Wright", "Implementation", 200, 42));
            players.Add(new BaseballPlayer("Shefali Kumar", "Professional Services", 300, 0));
            players.Add(new BaseballPlayer("Dallas Arnell", "Implementation", 200, 0));
            players.Add(new BaseballPlayer("Matt Walker", "Product Development", 200, 0));
            players.Add(new BaseballPlayer("Scott Williams", "Professional Services", 300, 42));
            IDS.Collections.ObjectSorter os = new IDS.Collections.ObjectSorter("Team, Average DESC, Jersey, Name");
            players.Sort(os);
            
            foreach(BaseballPlayer player in players)
            {
            	Console.WriteLine("Name: {0}\tTeam: {1}\tAverage: {2}\tJersey: {3}", player.Name, player.Team, player.Average, player.Jersey);
            }
            </code>
            </example>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.Sort(System.Collections.ArrayList,System.String)">
            <summary>
            Sorts the specified list.
            </summary>
            <param name="list">The list.</param>
            <param name="sortExpression">The sort expression.</param>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.#ctor">
            <summary>
            Initializes a new ObjectSorter
            </summary>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.#ctor(System.String)">
            <summary>
            Initializes a new ObjectSorter with the given sort expression.
            </summary>
        </member>
        <member name="P:IDS.Collections.ObjectSorter.SortFields">
            <summary>
            Gets a collection of the Sort Fields.
            </summary>
        </member>
        <member name="P:IDS.Collections.ObjectSorter.SortExpression">
            <summary>
            Gets or sets the Sort Expression.
            </summary>
            <remarks>
            The sort expression is a string representation of the <see cref="P:IDS.Collections.ObjectSorter.SortFields"/> collection. You may modify one or both of these properties
            and the other will instantly reflect the changes.
            
            The format of the sort expression is a comma-delimited list of property names. Each property name may be postfixed with the ASC or DESC modifiers.
            All whitespace is ignored except that whitespace is required between a property name and the ASC or DESC modifier. The comma should separate values only,
            there should not be extra leading or trailing commas, or two or more consequtive commas.
            </remarks>
            <example>
            Team, Average DESC, Jersey, Name
            </example>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.Compare(System.Object,System.Object)">
            <summary>
            Compares the two objects according to the assigned sort expression.
            </summary>
            <param name="x">First object</param>
            <param name="y">Second object</param>
            <returns>Negative if x is less than y, 0 if they are equal, positive if y is greater than x.</returns>
        </member>
        <member name="T:IDS.Collections.ObjectSorter.SortField">
            <summary>
            Represents a single sort field in a sort expression.
            </summary>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.SortField.Parse(System.String)">
            <summary>
            Creates a SortField based on the given sort expression fragment.
            </summary>
            <remarks>
            If sortExpressionFragment is null or empty, a default SortField object is returned.
            </remarks>
            <param name="sortExpressionFragment">The fragment that refers to the desired field</param>
            <returns>A new SortField object</returns>
            <example>
            Field DESC
            </example>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.SortField.#ctor">
            <summary>
            Initializes a new SortField
            </summary>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.SortField.#ctor(System.String)">
            <summary>
            Initializes a new SortField
            </summary>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.SortField.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new SortField
            </summary>
        </member>
        <member name="P:IDS.Collections.ObjectSorter.SortField.Field">
            <summary>
            Gets or sets the field this sort field is for.
            </summary>
        </member>
        <member name="P:IDS.Collections.ObjectSorter.SortField.Ascending">
            <summary>
            Gets or sets whether this field is sorted ascending or descending.
            </summary>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.SortField.ToString">
            <summary>
            Converts the sort field into a sort expression.
            </summary>
            <returns>A new sort expression string.</returns>
        </member>
        <member name="T:IDS.Collections.ObjectSorter.SortFieldCollection">
            <summary>
            A collection of SortFields.
            </summary>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.SortFieldCollection.Parse(System.String)">
            <summary>
            Initializes a new sort field collection based on a given sort expression.
            </summary>
            <param name="sortFieldsExpression">A sort expression to initialize the sort fields with.</param>
            <returns>A new SortFieldCollection.</returns>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.SortFieldCollection.#ctor">
            <summary>
            Initializes a new sort field collection.
            </summary>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.SortFieldCollection.#ctor(System.String)">
            <summary>
            Initializes a new sort field collection.
            </summary>
            <param name="sortFieldsExpression">A sort expression to initialize the sort fields with.</param>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.SortFieldCollection.Add(System.String)">
            <summary>
            Adds a single sort field to the collection based on the sort field string.
            </summary>
            <example>
            <code>
            fields.Add("Name DESC");
            </code>
            </example>
            <param name="fieldExpression">Field expression to add</param>
            <returns>The zero based index of the newly added field.</returns>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.SortFieldCollection.Add(System.String,System.Boolean)">
            <summary>
            Adds a new sort field to the collection with the given name and order.
            </summary>
            <param name="fieldName">Name of the field to sort by.</param>
            <param name="ascending">Order to sort by.</param>
            <returns>The zero based index of the newly added field.</returns>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.SortFieldCollection.AddExpression(System.String)">
            <summary>
            Adds one or more sort fields to the collection based on the given sort expression.
            </summary>
            <param name="sortFieldsExpression">The sort field expression to process.</param>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.SortFieldCollection.Remove(System.String)">
            <summary>
            Removes a SortField from the collection by its field name.
            </summary>
            <param name="fieldName">The field name to remove</param>
            <remarks>
            If the field is in the collection multiple times, only the first is removed.
            </remarks>
        </member>
        <member name="M:IDS.Collections.ObjectSorter.SortFieldCollection.ToString">
            <summary>
            Converts the collection into a sort expression.
            </summary>
            <returns>A new sort expression.</returns>
        </member>
        <member name="T:IDS.Collections.PropertyBag">
            <summary>
            Represents a collection of names and associated <see cref="T:System.Object" />
            values. The ComponentHelper.Detokenize method can access values
            in the collection by name as if a property were declared for each value.
            </summary>
        </member>
        <member name="P:IDS.Collections.PropertyBag.Item(System.String)">
            <summary>
            Gets the value associated with a specified name.
            </summary>
            <param name="name">
            The name of the value to get.
            </param>
            <value>
            The <see cref="T:System.Object" /> associated with the specified
            <paramref name="name" />, or <see langword="null" />
            if the specified <paramref name="name" /> is not found.
            </value>
        </member>
        <member name="M:IDS.Collections.PropertyBag.Add(System.String,System.Type,System.Object)">
            <summary>
            Adds an entry to the collection.
            </summary>
            <param name="name">
            The name of the value to add.
            </param>
            <param name="type">
            The <see cref="T:System.Type" /> of the property to add.
            </param>
            <param name="value">
            The <see cref="T:System.Object" /> to associate with the specified
            <paramref name="name" />, or <see langword="null" />.
            </param>
        </member>
        <member name="M:IDS.Collections.PropertyBag.Remove(System.String)">
            <summary>
            Removes an entry from the collection.
            </summary>
            <param name="name">
            The name of the value to remove.
            </param>
        </member>
        <member name="M:IDS.Collections.PropertyBag.GetEnumerator">
            <summary>
            IEnumerable is implemented for convenience of collection initializers.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Collections.PropertyCollection">
            <summary>
            The PropertyCollection contains a collection of name/value pairs.
            </summary>
        </member>
        <member name="M:IDS.Collections.PropertyCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.PropertyCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Collections.PropertyCollection.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.PropertyCollection"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:IDS.Collections.PropertyCollection.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.PropertyCollection"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:IDS.Collections.PropertyCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.PropertyCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:IDS.Collections.PropertyCollection.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.PropertyCollection"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:IDS.Collections.PropertyCollection.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.PropertyCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:IDS.Collections.PropertyCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.PropertyCollection"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:IDS.Collections.PropertyCollection.Item(System.String)">
            <summary>
             Returns the dataspace property based on the key or null
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:IDS.Collections.PropertyCollection.Parse(System.String)">
            <summary>
            Parses a string that contains a delimited list of properties in the form of "key0=value0;key1=value1;...;keyn=valuen"
            and populates this collection with those values;
            </summary>
            <param name="propertyString">The string that contains a delimited list of properties.</param>
        </member>
        <member name="M:IDS.Collections.PropertyCollection.Parse(System.String,System.Char,System.Char)">
            <summary>
            Parses a string that contains a delimited list of properties in the form of 
            "key0{valueDelimiter}value0{propertyDelimiter}key1{valueDelimiter}value1{propertyDelimiter}...{propertyDelimiter}keyn{valueDelimiter}valuen"
            and populates this collection with those values;
            </summary>
            <param name="propertyString">The string that contains a delimited list of properties.</param>
            <param name="propertyDelimiter">The delimiter that separates the individual properties.</param>
            <param name="valueSeparator">The delimiter that separates the name from the value.</param>
        </member>
        <member name="M:IDS.Collections.PropertyCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Collections.PropertyCollection"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Collections.PropertyCollection"></see>.
            </returns>
        </member>
        <member name="T:IDS.Collections.ReadOnlyLazyInitDictionary`2">
            <summary>
            Represents a thread-safe, read-only associative mapping between keys
            and values. The value associated with a particular key is initialized
            the first time the key is accessed by calling a specified function.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Collections.ReadOnlyLazyInitDictionary`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the
            <see cref="T:IDS.Collections.ReadOnlyLazyInitDictionary`2" /> class.
            </summary>
            <param name="valueProvider">
            A function that either returns the value associated with a given key
            or, if there is no associated value,
            throws <see cref="T:System.Collections.Generic.KeyNotFoundException" />.
            </param>
        </member>
        <member name="P:IDS.Collections.ReadOnlyLazyInitDictionary`2.Item(`0)">
            <summary>
            Gets the value associated with a specified key.
            </summary>
            <param name="key">
            The key of the value to get.
            </param>
            <returns>
            The value associated with the <paramref name="key" />.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No value is associated with the <paramref name="key" />.
            </exception>
        </member>
        <member name="M:IDS.Collections.ReadOnlyLazyInitDictionary`2.ClearCachedValue(`0)">
            <summary>
            Removes a specified cached value from the dictionary.
            </summary>
            <param name="key">
            The key of the value to remove.
            </param>
        </member>
        <member name="M:IDS.Collections.ReadOnlyLazyInitDictionary`2.ClearCachedValues">
            <summary>
            Removes all cached keys and values from the dictionary.
            </summary>
        </member>
        <member name="M:IDS.Collections.ReadOnlyLazyInitDictionary`2.Dispose">
            <summary>
            Releases all resources used by the object.
            </summary>
        </member>
        <member name="M:IDS.Collections.ReadOnlyLazyInitDictionary`2.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the object
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:IDS.Collections.SemiColonDelimitedStringCollection">
            <summary>
            The SemiColonDelimitedStringCollection is an implementation of the DelimitedStringCollection
            class for handling semiColon delimited strings. This class has the Parse() and ToString()
            methods to work with the ComponentModel ComponentSettings framework.
            </summary>
        </member>
        <member name="M:IDS.Collections.SemiColonDelimitedStringCollection.Parse(System.String)">
            <summary>
            Parse a semiColon delimited string into a collection of strings.
            </summary>
            <param name="listString">The semiColon delimited string to parse.</param>
            <returns>Returns a SemiColonDelimitedStringCollection.</returns>
        </member>
        <member name="M:IDS.Collections.SemiColonDelimitedStringCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.SemiColonDelimitedStringCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Collections.SemiColonDelimitedStringCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.SemiColonDelimitedStringCollection"/> class.
            </summary>
            <param name="listString">The list string.</param>
        </member>
        <member name="T:IDS.Collections.StateContext">
            <summary>
            The StateContext enumeration specifies where the context state should be stored.
            </summary>
        </member>
        <member name="F:IDS.Collections.StateContext.ApplicationState">
            <summary>
            Store the context state in the ASP.NET Application collection.
            </summary>
        </member>
        <member name="F:IDS.Collections.StateContext.SessionState">
            <summary>
            Store the context state in the ASP.NET Session collection.
            </summary>
        </member>
        <member name="F:IDS.Collections.StateContext.Hashtable">
            <summary>
            Store the context state in an internal Hashtable.
            </summary>
        </member>
        <member name="T:IDS.Collections.SmartContextState">
            <summary>
            The SmartContextState class supports storing context state. Where the context state is stored can be configured to be
            the Application collection, Session or an internal Hashtable.
            </summary>
        </member>
        <member name="M:IDS.Collections.SmartContextState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.SmartContextState"/> class.
            </summary>
        </member>
        <member name="M:IDS.Collections.SmartContextState.#ctor(IDS.Collections.StateContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.SmartContextState"/> class.
            </summary>
            <param name="stateContext">The state context storage location.</param>
        </member>
        <member name="P:IDS.Collections.SmartContextState.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object is read-only; otherwise, false.</returns>
        </member>
        <member name="M:IDS.Collections.SmartContextState.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="P:IDS.Collections.SmartContextState.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:IDS.Collections.SmartContextState.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="M:IDS.Collections.SmartContextState.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:IDS.Collections.SmartContextState.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:IDS.Collections.SmartContextState.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only. </exception>
        </member>
        <member name="P:IDS.Collections.SmartContextState.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.</returns>
        </member>
        <member name="P:IDS.Collections.SmartContextState.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.</returns>
        </member>
        <member name="P:IDS.Collections.SmartContextState.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:IDS.Collections.SmartContextState.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:IDS.Collections.SmartContextState.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="M:IDS.Collections.SmartContextState.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="P:IDS.Collections.SmartContextState.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="M:IDS.Collections.SmartContextState.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:IDS.Collections.StateBag">
            <summary>
            The StateBag collection is a property bag for containing state items.
            </summary>
        </member>
        <member name="M:IDS.Collections.StateBag.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:IDS.Collections.StateBag" /> class. This is the default constructor for this
            class.</para>
            </summary>
        </member>
        <member name="M:IDS.Collections.StateBag.#ctor(System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:IDS.Collections.StateBag" /> class that allows stored state
            values to be case-insensitive.</para>
            </summary>
            <param name="ignoreCase">
            <see langword="true" /> to ignore case; otherwise, <see langword="false" />.</param>
        </member>
        <member name="P:IDS.Collections.StateBag.Count">
            <summary>
            <para>Gets the number of <see cref="T:IDS.Collections.StateItem" /> objects in the <see cref="T:IDS.Collections.StateBag" />
            object.</para>
            </summary>
        </member>
        <member name="P:IDS.Collections.StateBag.Item(System.String)">
            <summary>
            <para> Gets or sets the value of an item stored in
            the <see cref="T:IDS.Collections.StateBag" />
            object.</para>
            </summary>
            <param name="key">The key for the item.</param>
            <exception cref="T:System.ArgumentException">The key provided is either null or <see cref="F:System.String.Empty" />.</exception>
        </member>
        <member name="P:IDS.Collections.StateBag.Keys">
            <summary>
            <para>Gets a collection of keys representing the items in the <see cref="T:IDS.Collections.StateBag" />
            object.</para>
            </summary>
        </member>
        <member name="P:IDS.Collections.StateBag.Values">
            <summary>
            <para> Gets a collection of the state values stored in the <see cref="T:IDS.Collections.StateBag" />
            object.</para>
            </summary>
        </member>
        <member name="M:IDS.Collections.StateBag.Add(System.String,System.Object)">
            <summary>
            <para>Adds a new <see cref="T:IDS.Collections.StateItem" /> object to the <see cref="T:IDS.Collections.StateBag" />
            object. If the item already exists in the <see langword="StateBag" />, it updates the
            value of the item.</para>
            </summary>
            <param name="key">The attribute name for the <see langword="StateItem" /> object.</param>
            <param name=" value">The value of the item to add to the <see langword="StateBag" /> .</param>
            <returns>
            <para>Returns a <see cref="T:IDS.Collections.StateItem" /> object that represents the object added to
            view state.</para>
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="key" /> is null or when the number of characters in <paramref name="key" /> is 0. </exception>
        </member>
        <member name="M:IDS.Collections.StateBag.Clear">
            <summary>
            <para>Removes all items from the current <see cref="T:IDS.Collections.StateBag" /> object.</para>
            </summary>
        </member>
        <member name="M:IDS.Collections.StateBag.GetEnumerator">
            <summary>
            <para> Returns an enumerator that iterates over all the
            key/value pairs of the <see cref="T:IDS.Collections.StateItem" /> objects stored in
            the <see langword="StateBag" />.</para>
            </summary>
            <returns>
            <para>The enumerator to iterate through the state bag.</para>
            </returns>
        </member>
        <member name="M:IDS.Collections.StateBag.IsItemDirty(System.String)">
            <summary>
            <para>Checks a <see cref="T:IDS.Collections.StateItem" /> object stored in the <see cref="T:IDS.Collections.StateBag" /> to evaluate if it has been modified.</para>
            </summary>
            <param name="key">The key of the item to check.</param>
            <returns>
            <para>
            <see langword="true" /> if the item has been modified; otherwise,
            <see langword="false" />.</para>
            </returns>
        </member>
        <member name="M:IDS.Collections.StateBag.Remove(System.String)">
            <summary>
            <para>Removes the specified key/value pair from the <see cref="T:IDS.Collections.StateBag" /> object.</para>
            </summary>
            <param name="key">The item to remove.</param>
        </member>
        <member name="M:IDS.Collections.StateBag.SetItemDirty(System.String,System.Boolean)">
            <summary>
            Sets the item dirty.
            </summary>
            <param name="key">The key.</param>
            <param name="dirty">if set to <c>true</c> the state bag is dirty.</param>
        </member>
        <member name="M:IDS.Collections.StateBag.LoadItems(System.Collections.IList,System.Collections.IList)">
            <summary>
            Loads the items using the keys and values lists as the key and value in the state bag collection.
            </summary>
            <param name="keys">The keys.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:IDS.Collections.StateBag.LoadItems(System.Collections.IDictionary)">
            <summary>
            Loads the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:IDS.Collections.StateBag.GetDirtyItems">
            <summary>
            Gets the dirty items.
            </summary>
            <returns>Returns a StateBag of all the dirty items.</returns>
        </member>
        <member name="M:IDS.Collections.StateBag.TrackDirtyState">
            <summary>
            Start tracking the state of item changes.
            </summary>
        </member>
        <member name="T:IDS.Collections.StateItem">
            <summary>
            <para>Represents an item that is saved in the <see cref="T:IDS.Collections.StateBag" /> class.</para>
            </summary>
        </member>
        <member name="M:IDS.Collections.StateItem.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Collections.StateItem"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="P:IDS.Collections.StateItem.IsDirty">
            <summary>
            <para>Gets or sets a value indicating whether the <see cref="T:IDS.Collections.StateItem" /> object has been modified.</para>
            </summary>
        </member>
        <member name="P:IDS.Collections.StateItem.Value">
            <summary>
            <para>Gets or sets the value of the <see cref="T:IDS.Collections.StateItem" /> object that is stored in the <see cref="T:IDS.Collections.StateBag" />
            object.</para>
            </summary>
        </member>
        <member name="T:IDS.Summary.SummaryItem">
            <summary>
            Name value pair for summary collection
            </summary>
        </member>
        <member name="P:IDS.Summary.SummaryItem.Name">
            <summary>
            Description of summary item ex. Last Name
            </summary>
            <value>String description</value>
        </member>
        <member name="P:IDS.Summary.SummaryItem.Value">
            <summary>
            Value of summary Item ex. Smith
            </summary>
        </member>
        <member name="T:IDS.Summary.SummaryCollection">
            <summary>
            A collection of name value pairs (SummaryItem objects) create by a class that implements ISummarizable
            </summary>
        </member>
        <member name="M:IDS.Summary.SummaryCollection.PrintSummaryLines">
            <summary>
            Prints the summary seperated by line feeds
            </summary>
            <returns>string in the form Name=Value\r\n</returns>
        </member>
        <member name="M:IDS.Summary.SummaryCollection.PrintSummaryLines(System.String)">
            <summary>
            Prints the summary according to a format string
            <list type="table">
            	<listheader>Format tokens</listheader>
            	<item>{0}</item><description>Name</description>
            	<item>{1}</item><description>Value</description>
            </list>
            </summary>
            <returns>string in the form Name=Value\r\n</returns>
        </member>
        <member name="P:IDS.Summary.SummaryCollection.Item(System.Int32)">
            <summary>
            Index override
            </summary>
            <param name="index">The zero-based index of the SummaryItem to retrieve.</param>
        </member>
        <member name="M:IDS.Summary.SummaryCollection.Add(IDS.Summary.SummaryItem)">
            <summary>
            Adds a new SummaryItem to the collection
            </summary>
            <param name="SummaryItem">The SummaryItem to add.</param>
            <returns>A non-zero based index vaule for the SummaryItem added.</returns>
        </member>
        <member name="M:IDS.Summary.SummaryCollection.Change(System.String,System.String)">
            <summary>
            Finds all SummaryItems with the matching Name and replaces the value
            </summary>
            <param name="Name">Name of items to change</param>
            <param name="NewValue">New Value</param>
        </member>
        <member name="M:IDS.Summary.SummaryCollection.Remove(System.String)">
            <summary>
            Removes the first summary item with the matching name
            </summary>
            <param name="Name">Name of item to remove.</param>
        </member>
        <member name="M:IDS.Summary.SummaryCollection.Add(System.String,System.String)">
            <summary>
            Adds a new SummaryItem to the collection
            </summary>
            <param name="Name">The SummaryItem to add to the collection.</param>
            <param name="Value">The content of the SummaryItem.</param>
            <returns></returns>
        </member>
        <member name="P:IDS.Summary.SummaryCollection.SummaryString">
            <summary>
            Returns the summary collection in one string
            </summary>
        </member>
        <member name="T:IDS.Summary.ISummarizable">
            <summary>
            Classes that implement this inteface create a summary collection.
            </summary>
        </member>
        <member name="M:IDS.Summary.ISummarizable.Summarize">
            <summary>
            Gives a description of the current state of the object using name/value pairs.
            </summary>
            <returns>A description of the current state of the object using name/value pairs.</returns>
        </member>
        <member name="T:IDS.ComponentModel.AppPathDataspaceMapping">
            <summary>
            The AppPathDataspaceMapping class is used to map a dataspace to an application path.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.AppPathDataspaceMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.AppPathDataspaceMapping"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.AppPathDataspaceMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.AppPathDataspaceMapping"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="dataspaceName">Name of the associated dataspace.</param>
        </member>
        <member name="M:IDS.ComponentModel.AppPathDataspaceMapping.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.AppPathDataspaceMapping"/> class.
            </summary>
            <param name="configNode">The config node.</param>
        </member>
        <member name="M:IDS.ComponentModel.AppPathDataspaceMapping.IsApplicable">
            <summary>
            Determines whether this Dataspace instance is applicable to this request.
            </summary>
            <returns>
            	<c>true</c> if this instance is applicable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.AppPathDataspaceMapping.IsAppPathApplicable(System.Web.HttpContext)">
            <summary>
            Determines whether the app path is applicable for the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>
            	<c>true</c> if the app path is applicable for the specified context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.ComponentSettings">
            <summary>
            Represents settings for component.
            </summary>
            <remarks>
            You can use the ComponentSettings class to keep track of, manipulate, persist, or configure properties on a component.
            It allows you to record modifications to an object without actually making changes to the object.
            Once changes are recorded, you can write them to the object, or another object. You can also persist the recorded changes
            in the form of a SortedList or Xml Document, and back again.
            
            ComponentSettings will build a tree of instances based on the properties you modify.
            TODO: more details, and an example usage.
            </remarks>
        </member>
        <member name="T:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings">
            <summary>
            The BaseComponentCollectionSettings is an abstract class that acts as a base for the ComponentCollectionSettings.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.#ctor(System.Reflection.PropertyInfo,IDS.ComponentModel.ComponentSettings,System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings"/> class.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <param name="collectionOwner">The collection owner.</param>
            <param name="collection">The collection.</param>
            <param name="isLocalized">if set to <c>true</c> [is localized].</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.GetComponentID(System.Object,System.Object)">
            <summary>
            Gets the component ID.
            </summary>
            <param name="component">The component.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.RemoveFromComponent(System.Object,System.String)">
            <summary>
            Removes from component.
            </summary>
            <param name="component">The component.</param>
            <param name="itemID">The item ID.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.AddToComponent(System.Object,System.String,System.Object)">
            <summary>
            Adds to component.
            </summary>
            <param name="component">The component.</param>
            <param name="itemID">The item ID.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.SetToComponent(System.Object,System.String,System.Object)">
            <summary>
            Sets to component.
            </summary>
            <param name="component">The component.</param>
            <param name="itemID">The item ID.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.GetFromComponent(System.Object,System.String)">
            <summary>
            Gets from component.
            </summary>
            <param name="component">The component.</param>
            <param name="itemID">The item ID.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.GetDefaultItemType(System.Object)">
            <summary>
            Gets the type of the default item.
            </summary>
            <param name="component">The component.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.RegisterInvalidItem(System.String)">
            <summary>
            Registers the invalid item.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.Item(System.String)">
            <summary>
            Gets the <see cref="T:IDS.ComponentModel.ComponentSettings"/> with the specified id.
            </summary>
            <value></value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.InvalidItems">
            <summary>
            Gets the invalid ComponentSetting items.
            </summary>
            <value>The invalid items.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.IsDirty">
            <summary>
            Gets a value indicating whether this instance is dirty.
            </summary>
            <value><c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.IsValueLocalized">
            <summary>
            Gets or sets a value indicating whether this instance is value localized.
            </summary>
            <value>
            	<c>true</c> if this instance is value localized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.RemovedItems">
            <summary>
            Gets the removed items.
            </summary>
            <value>The removed items.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.Add(System.String)">
            <summary>
            Adds the specified ID to the ComponentSettings collection.
            </summary>
            <param name="id">The ID to add</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.EnsureItemAdded(System.String)">
            <summary>
            Ensures the item is added.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.EnsureItemRemoved(System.String)">
            <summary>
            Ensures the item is removed.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.GetComponentID(IDS.ComponentModel.ComponentSettings)">
            <summary>
            Gets the component ID.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.IndexOf(IDS.ComponentModel.ComponentSettings)">
            <summary>
            Gets the index of a particular item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.IndexOf(System.String)">
            <summary>
            Gets the index of a particular item based on the ID.
            </summary>
            <param name="itemID">The item ID.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.Merge(IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings,System.Boolean)">
            <summary>
            Merges the specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <param name="mergedAreLocalized">if set to <c>true</c> [merged are localized].</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.Reduce">
            <summary>
            Reduces this instance.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.Remove(System.String)">
            <summary>
            Removes the specified id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.RemoveAll">
            <summary>
            Removes all.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.Revert">
            <summary>
            Reverts this instance.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.ToArrayList">
            <summary>
            Converts the array list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.Write(System.Object,System.Boolean)">
            <summary>
            Writes the ComponentSettings to the specified component.
            </summary>
            <param name="component">The component to write the settings to</param>
            <param name="throwOnError">if set to <c>true</c> if an exception should be thrown when unable to write a setting.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.WriteInvariant(System.Object,System.Boolean)">
            <summary>
            Writes the invariant ComponentSetting.
            </summary>
            <param name="component">The component.</param>
            <param name="throwOnError">if set to <c>true</c> if an exception should be thrown when unable to write a setting.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.WriteLocalized(System.Object,System.Boolean)">
            <summary>
            Writes the localized ComponentSetting.
            </summary>
            <param name="component">The component.</param>
            <param name="throwOnError">if set to <c>true</c> if an exception should be thrown when unable to write a setting.</param>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.BaseComponentCollectionSettings.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.ToDataRows(System.Data.DataTable,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts the component settings contained in an XML string into a DataRows collection.
            </summary>
            <param name="table">The table to use as a template for the DataRow to create.</param>
            <param name="xmlSettingsString">An Xml string that contains the settings to insert into the table.</param>
            <param name="keyField">The key field.</param>
            <param name="valueField">The value field.</param>
            <param name="typeField">The type field.</param>
            <param name="includeInvariant">If set to <c>true</c>, invariant settings will be included.</param>
            <param name="includeLocalized">If set to <c>true</c>, localized settings will be included.</param>
            <returns>Returns an arrray of DataRow objects that contain the items from the xmlSettingsString.</returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.ToDataRows(System.Data.DataTable,System.Xml.XmlDocument,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts the component settings contained in an XML Document into a DataRows collection.
            </summary>
            <param name="table">The table to use as a template for the DataRow to create.</param>
            <param name="settings">An XmlDocument that contains the settings to insert into the table.</param>
            <param name="keyField">The key field.</param>
            <param name="valueField">The value field.</param>
            <param name="typeField">The type field.</param>
            <param name="includeInvariant">If set to <c>true</c>, invariant settings will be included.</param>
            <param name="includeLocalized">If set to <c>true</c>, localized settings will be included.</param>
            <returns>Returns an arrray of DataRow objects that contain the items from the xmlSettingsString.</returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.ToSettingsDocument(System.Data.DataRow[],System.String,System.String,System.String)">
            <summary>
            Converts the component settings contained in an array of DataRows into an XmlDocument.
            </summary>
            <param name="rows">The rows containing the component settings.</param>
            <param name="keyField">The key field.</param>
            <param name="valueField">The value field.</param>
            <param name="typeField">The type field.</param>
            <returns>Returns an XmlDocument containing the settings from the rows parameter.</returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.ToSettingsString(System.Data.DataRow[],System.String,System.String,System.String)">
            <summary>
            Converts the component settings contained in an array of DataRows into an Xml string.
            </summary>
            <param name="rows">The rows containing the component settings.</param>
            <param name="keyField">The key field.</param>
            <param name="valueField">The value field.</param>
            <param name="typeField">The type field.</param>
            <returns>Returns an Xml string containing the settings from the rows parameter.</returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.FromSemiColonDelimitedList(System.String)">
            <summary>
            Creates a ComponentSettings instance from a semicolon delimited list of component settings.
            </summary>
            <param name="semiColonDelimitedList">The semi colon delimited list.</param>
            <returns>Returns a ComponentSettings instance.</returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.#ctor">
            <summary>
            Initializes a new ComponentSettings object.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.#ctor(System.Object,IDS.ComponentModel.ComponentSettings)">
            <summary>
            Initializes a new ComponentSettings object.
            </summary>
            <param name="component"></param>
            <param name="parent">The <see cref="T:IDS.ComponentModel.ComponentSettings"/> object that contains this object.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.#ctor(System.Object,System.Reflection.PropertyInfo,System.Object[],System.ComponentModel.PropertyDescriptor,IDS.ComponentModel.ComponentSettings)">
            <summary>
            Initializes a new ComponentSettings object.
            </summary>
            <param name="component">The value this ComponentSettings encapsulates.</param>
            <param name="propertyInfo">The PropertyInfo object that represents the property that was used to obtain the reference to component.</param>
            <param name="propertyIndexes"></param>
            <param name="descriptor"></param>
            <param name="parent">The <see cref="T:IDS.ComponentModel.ComponentSettings"/> object that contains this object.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.#ctor(System.Object,System.Reflection.PropertyInfo,IDS.ComponentModel.ComponentSettings)">
            <summary>
            
            </summary>
            <param name="component"></param>
            <param name="propertyInfo"></param>
            <param name="parent">The <see cref="T:IDS.ComponentModel.ComponentSettings"/> object that contains this object.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.#ctor(System.Object,System.String,IDS.ComponentModel.ComponentSettings)">
            <summary>
            Initializes a new ComponentSettings object.
            </summary>
            <param name="component"></param>
            <param name="settings"></param>
            <param name="parent">The <see cref="T:IDS.ComponentModel.ComponentSettings"/> object that contains this object.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.#ctor(System.Object,System.String,System.String,IDS.ComponentModel.ComponentSettings)">
            <summary>
            Initializes a new ComponentSettings object.
            </summary>
            <param name="component"></param>
            <param name="invariantSettings"></param>
            <param name="localizedSettings"></param>
            <param name="parent">The <see cref="T:IDS.ComponentModel.ComponentSettings"/> object that contains this object.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.#ctor(System.String,IDS.ComponentModel.ComponentSettings)">
            <summary>
            Initializes a new ComponentSettings object.
            </summary>
            <param name="settings"></param>
            <param name="parent">The <see cref="T:IDS.ComponentModel.ComponentSettings"/> object that contains this object.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.GetComponentCollectionSettings(System.Object,System.Boolean)">
            <summary>
            Gets the component collection settings.
            </summary>
            <param name="component">The component.</param>
            <param name="isLocalized">if set to <c>true</c> if the settings are localized.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.SaveChildComponentSetting(System.Data.DataTable,System.String,System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,IDS.ComponentModel.ComponentSettings})">
            <summary>
            Creates a <see cref="T:System.Data.DataRow"/> representing a <see cref="T:IDS.ComponentModel.ComponentSettings"/> object.
            </summary>
            <param name="table">The <see cref="T:System.Data.DataTable"/> from which the row will be created.</param>
            <param name="keyField">The name of the column that holds the key for the <see cref="T:IDS.ComponentModel.ComponentSettings"/> object.</param>
            <param name="valueField">The name of the column that holds the <see cref="T:IDS.ComponentModel.ComponentSettings"/> object's value.</param>
            <param name="typeField">
            The name of the column that holds the type string for the <see cref="T:IDS.ComponentModel.ComponentSettings"/> object's value.
            </param>
            <param name="refField">The name of the column that holds the ID of a well-known component.</param>
            <param name="entry">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> that contains 
            the <see cref="T:IDS.ComponentModel.ComponentSettings"/> object and its key.
            </param>
            <returns>
            A <see cref="T:System.Data.DataRow"/> with the appropriate fields populated with data from the <paramref name="entry"/>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.GetComponentTypeString(IDS.ComponentModel.ComponentSettings)">
            <summary>
            Formulates the type string for a component's value.
            </summary>
            <param name="cs">The <see cref="T:IDS.ComponentModel.ComponentSettings"/> object for which the value's type is to be determined.</param>
            <returns>The type string for the component's value.</returns>
            <remarks>
            The the type of the value is defined in the MSCORLib assembly, only it's full type name will be returned.  If the type is
            defined in any other assembly, the entire assembly qualified name will be returned.
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.CreateXmlElement(System.Xml.XmlDocument,System.Collections.Generic.KeyValuePair{System.String,IDS.ComponentModel.ComponentSettings})">
            <summary>
            Creates a <see cref="T:System.Xml.XmlElement"/> for a <see cref="T:IDS.ComponentModel.ComponentSettings"/> object.
            </summary>
            <param name="xml">The <see cref="T:System.Xml.XmlDocument"/> in which the element is to be created.</param>
            <param name="entry">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> that contains 
            the <see cref="T:IDS.ComponentModel.ComponentSettings"/> object and its key.
            </param>
            <returns>
            A <see cref="T:System.Xml.XmlElement"/> populated with data from the <paramref name="entry"/>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.PopulateFromParts(System.String,System.Object,System.String,System.Boolean,System.Type)">
            <summary>
            Initializes the <see cref="T:IDS.ComponentModel.ComponentSettings"/> object at the specified key with the specified values.
            </summary>
            <param name="key">The identifier for the <see cref="T:IDS.ComponentModel.ComponentSettings"/> object to be populated.</param>
            <param name="val">The value to assign to the <see cref="P:IDS.ComponentModel.ComponentSettings.Value"/> property.</param>
            <param name="refVal">The value to assign to the <see cref="P:IDS.ComponentModel.ComponentSettings.WellKnownID"/> property.</param>
            <param name="localized">True if the value is localized, false otherwise</param>
            <param name="type">The type of <paramref name="val"/>.  Can be null.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.GetValueForWrite(System.Globalization.CultureInfo,IDS.ComponentModel.ComponentSettings)">
            <summary>
            Gets the value of the specified <see cref="T:IDS.ComponentModel.ComponentSettings"/> object that should be written.
            </summary>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> for which the value should be obtained.</param>
            <param name="settings">The <see cref="T:IDS.ComponentModel.ComponentSettings"/> object whose value is to be determined.</param>
            <returns>
            <see cref="P:IDS.ComponentModel.ComponentSettings.Value"/> or, if <see cref="P:IDS.ComponentModel.ComponentSettings.WellKnownID"/> is not null, 
            the <see cref="T:IDS.ComponentModel.WellKnownComponent"/> instance for the specified <paramref name="culture"/>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.Write(System.Object,System.Globalization.CultureInfo,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Persists the settings stored by a <see cref="T:IDS.ComponentModel.ComponentSettings"/> object to the given component.
            </summary>
            <param name="component">The object to which the settings are to be persisted.</param>
            <param name="culture">The culture for which the settings are to be persisted.</param>
            <param name="writeInvariant">True if non-localized settings should be persisted.  False otherwise.</param>
            <param name="writeLocalized">True if localized settings should be persisted.  False otherwise.</param>
            <param name="throwOnError">True if an exception should be thrown if an error occurs.  False otherwise.</param>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.Component">
            <summary>
            Gets the underlying component.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.ComponentType">
            <summary>
            Gets the type of the current component setting.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.Value">
            <summary>
            Gets or sets the current value for this component setting.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.BaseType">
            <summary>
            Gets or sets the type of the base.
            </summary>
            <value>The type of the base.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.SerializationType">
            <summary>
            Gets the type to be serialized.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.IsDifferentType">
            <summary>
            Gets whether or not <see cref="P:IDS.ComponentModel.ComponentSettings.Value"/> is of a different type 
            than the corresponding property on the <see cref="P:IDS.ComponentModel.ComponentSettings.Component"/>.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.PropertyInfo">
            <summary>
            Gets the PropertyInfo object that represents the property that was used to obtain the wrapped component instance.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.PropertyDescriptor">
            <summary>
            Gets the PropertyDescriptor object that represents the property that was used to obtain the wrapped component instance.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.PropertyIndexes">
            <summary>
            Gets the property indexes.
            </summary>
            <value>The property indexes.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.HasValue">
            <summary>
            Gets whether a value has been assigned to this component setting.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.IsValueLocalized">
            <summary>
            Gets or sets whether the value and child values assigned to this component setting are localized.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.ShouldEncryptValue">
            <summary>
            Gets or sets a Boolean value that indicates whether the value should be encrypted.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.Items">
            <summary>
            Gets the ComponentSettings items from this collection.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.Item(System.String)">
            <summary>
            Gets the named setting.
            </summary>
            <remarks>
            A ComponentSettings object is returned that represents the settings for the given component's property by that name.
            </remarks>
            <value>A <see cref="T:IDS.ComponentModel.ComponentSettings"/> object.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.IsDirty">
            <summary>
            Gets whether the current ComponentSettings instance contains any settings that differ from the underlying component's current value.
            </summary>
            <remarks>
            If the current setting has a value (<see cref="P:IDS.ComponentModel.ComponentSettings.HasValue"/> returns true), this will return the result of:
            <code>
            !object.Equals(/* current setting */, /* current component value */);
            </code>
            If the current setting does not have a value (<see cref="P:IDS.ComponentModel.ComponentSettings.HasValue"/> returns false), this will return true if any of the child settings are dirty.
            If the current setting is not attached to a component at all (<see cref="P:IDS.ComponentModel.ComponentSettings.PropertyInfo"/> returns null), IsDirty is always true.
            </remarks>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.WellKnownComponents">
            <summary>
            Gets the collection of well-Known components.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.Parent">
            <summary>
            Gets the <see cref="T:IDS.ComponentModel.ComponentSettings" /> object that contains this object.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.WellKnownID">
            <summary>
            Gets and sets the unique ID of the well-known component that should be used as the value for this setting.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettings.Root">
            <summary>
            Gets the top-level <see cref="T:IDS.ComponentModel.ComponentSettings"/> object that contains this object.  If this object
            has no parent (it is the root), this object will be returned.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.ClearValue">
            <summary>
            Clears the assigned value to this component setting.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.Revert">
            <summary>
            Reverts this instance.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.Reduce">
            <summary>
            Recursively removes all setting values that do not differ from the underlying component's current value.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.ImportSettings(System.String)">
            <summary>
            Imports the settings.
            </summary>
            <param name="xml">The XML string containing the settings to import.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.ImportSettings(System.Xml.XmlDocument)">
            <summary>
            Imports the settings.
            </summary>
            <param name="xml">The XML Document containing the settings to import.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.ImportSettings(System.Data.DataRow[],System.String,System.String,System.String)">
            <summary>
            Imports the settings from the DataRows.
            </summary>
            <param name="rows">The rows containing the ComponentSettings.</param>
            <param name="keyField">The key field.</param>
            <param name="valueField">The value field.</param>
            <param name="typeField">The type field.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.ImportSettings(System.Data.DataRow[],System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Imports the settings from the DataRows.
            </summary>
            <param name="rows">The rows containing the ComponentSettings.</param>
            <param name="keyField">The key field.</param>
            <param name="valueField">The value field.</param>
            <param name="typeField">The type field.</param>
            <param name="refField">The ref field.</param>
            <param name="isLocalized">if set to <c>true</c> if the settings are localized.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.ImportSettings(System.Collections.SortedList)">
            <summary>
            Imports the settings.
            </summary>
            <param name="settings">The settings to import.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.ImportSettings(System.Collections.SortedList,System.Boolean)">
            <summary>
            Imports the settings.
            </summary>
            <param name="settings">The settings to import.</param>
            <param name="isLocalized">if set to <c>true</c> if the settings are localized.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.Save(System.Data.DataTable,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the ComponentSettings in the specified table into a collection of DataRows.
            </summary>
            <param name="table">The table.</param>
            <param name="keyField">The key field.</param>
            <param name="valueField">The value field.</param>
            <param name="typeField">The type field.</param>
            <param name="refField">The ref field.</param>
            <param name="includeInvariant">if set to <c>true</c> invariant settings should be included.</param>
            <param name="includeLocalized">if set to <c>true</c> localized settings should be included.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.Merge(IDS.ComponentModel.ComponentSettings)">
            <summary>
            Merges the given ComponentSettings with this one.
            </summary>
            <remarks>Values in the given ComponentSettings will overwrite existing values.</remarks>
            <param name="settings">The ComponentSettings to merge with.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.Merge(IDS.ComponentModel.ComponentSettings,System.Boolean)">
            <summary>
            Merges the given ComponentSettings with this one, and flags merged values as localized or not.
            </summary>
            <remarks>Values in the given ComponentSettings will overwrite existing values.</remarks>
            <param name="settings">The ComponentSettings to merge with.</param>
            <param name="mergedAreLocalized">Whether or not the settings in the given ComponentSettings are localized.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.WriteInvariant(System.Object)">
            <summary>
            Writes only the non-localized or invariant settings associated with this ComponentSettings instance to the given component.
            </summary>
            <param name="component">The component to write the invariant settings to.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.WriteInvariant(System.Object,System.Boolean)">
            <summary>
            Writes only the non-localized or invariant settings associated with this ComponentSettings instance to the given component.
            </summary>
            <param name="component">The component to write the invariant settings to.</param>
            <param name="throwOnError">Whether or not to throw an error if one of the settings in this ComponentSettings instance refers to a non-existant property on the component.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.WriteLocalized(System.Object)">
            <summary>
            Writes only the localized settings associated with this ComponentSettings instance to the given component.
            </summary>
            <param name="component">The component to write the settings to.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.WriteLocalized(System.Object,System.Boolean)">
            <summary>
            Writes only the localized settings associated with this ComponentSettings instance to the given component.
            </summary>
            <param name="component">The component to write the localized settings to.</param>
            <param name="throwOnError">Whether or not to throw an error if one of the settings in this ComponentSettings instance refers to a non-existant property on the component.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.WriteLocalized(System.Object,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Writes only the localized settings associated with this ComponentSettings instance to the given component.
            </summary>
            <param name="component">The component to write the localized settings to.</param>
            <param name="culture">The culture for which settings are localized.</param>
            <param name="throwOnError">Whether or not to throw an error if one of the settings in this ComponentSettings instance refers to a non-existant property on the component.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.Write(System.Object)">
            <summary>
            Writes the settings associated with this ComponentSettings instance to the given component.
            </summary>
            <param name="component">The component to write the settings to.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.Write(System.Object,System.Boolean)">
            <summary>
            Writes the ComponentSettings to the specified component.
            </summary>
            <param name="component">The component.</param>
            <param name="throwOnError">if set to <c>true</c> if an exception should be thrown if writing is unsuccessful.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.Write(System.Object,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Writes the ComponentSettings to the specified component.
            </summary>
            <param name="component">The component.</param>
            <param name="culture">The culture of the settings.</param>
            <param name="throwOnError">if set to <c>true</c> if an exception should be thrown if writing is unsuccessful.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.ToXml">
            <summary>
            Converts the ComponentSettings into an XML Document.
            </summary>
            <returns>Returns an XmlDocument containing the ComponentSettings.</returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.ToXml(System.Boolean,System.Boolean)">
            <summary>
            Converts the ComponentSettings into an XML Document.
            </summary>
            <param name="includeInvariant">if set to <c>true</c> invariant settings should be included.</param>
            <param name="includeLocalized">if set to <c>true</c> localized settings should be included.</param>
            <returns>
            Returns an XmlDocument containing the ComponentSettings.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.ToString">
            <summary>
            Returns an XML string that represents the current <see cref="T:IDS.ComponentModel.ComponentSettings"></see>.
            </summary>
            <returns>
            An XML string that represents the current <see cref="T:IDS.ComponentModel.ComponentSettings"></see>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.ToString(System.Boolean,System.Boolean)">
            <summary>
            Returns an XML string that represents the current <see cref="T:IDS.ComponentModel.ComponentSettings"></see>.
            </summary>
            <param name="includeInvariant">if set to <c>true</c> invariant settings should be included.</param>
            <param name="includeLocalized">if set to <c>true</c> localized settings should be included.</param>
            <returns>
            An XML string that represents the current <see cref="T:IDS.ComponentModel.ComponentSettings"></see>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.ComponentSettings.GenericComponentCollectionSettings">
            <summary>
            The GenericComponentCollectionSettings class contains a collection of generic component settings.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.GenericComponentCollectionSettings.#ctor(IDS.ComponentModel.IComponentCollection,IDS.ComponentModel.ComponentSettings,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentSettings.GenericComponentCollectionSettings"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="collectionOwner">The collection owner.</param>
            <param name="isLocalized">if set to <c>true</c> [is localized].</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.GenericComponentCollectionSettings.GetComponentID(System.Object,System.Object)">
            <summary>
            Gets the component ID.
            </summary>
            <param name="component">The component.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.GenericComponentCollectionSettings.GetFromComponent(System.Object,System.String)">
            <summary>
            Gets from component.
            </summary>
            <param name="component">The component.</param>
            <param name="itemID">The item ID.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.GenericComponentCollectionSettings.AddToComponent(System.Object,System.String,System.Object)">
            <summary>
            Adds to component.
            </summary>
            <param name="component">The component.</param>
            <param name="itemID">The item ID.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.GenericComponentCollectionSettings.RemoveFromComponent(System.Object,System.String)">
            <summary>
            Removes from component.
            </summary>
            <param name="component">The component.</param>
            <param name="itemID">The item ID.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.GenericComponentCollectionSettings.SetToComponent(System.Object,System.String,System.Object)">
            <summary>
            Sets to component.
            </summary>
            <param name="component">The component.</param>
            <param name="itemID">The item ID.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettings.GenericComponentCollectionSettings.GetDefaultItemType(System.Object)">
            <summary>
            Gets the type of the default item.
            </summary>
            <param name="component">The component.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.ComponentModel.CollectionEditorCustomItemTypeAttribute">
            <summary>
            The CollectionEditorCustomItemTypeAttribute is an attribute that denotes a custom editor type.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.CollectionEditorCustomItemTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CollectionEditorCustomItemTypeAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:IDS.ComponentModel.CollectionEditorCustomItemTypeAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CollectionEditorCustomItemTypeAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:IDS.ComponentModel.CollectionEditorCustomItemTypeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CollectionEditorCustomItemTypeAttribute"/> class.
            </summary>
            <param name="typeName">The assembly-qualified type name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="P:IDS.ComponentModel.CollectionEditorCustomItemTypeAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:IDS.ComponentModel.CollectionEditorCustomItemTypeAttribute.ItemType">
            <summary>
            Gets or sets the type of the item.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="T:IDS.ComponentModel.CollectionEditorParametersAttribute">
            <summary>
            The CollectionEditorParametersAttribute is an attribute class for annotating Collection Editor parameters.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.CollectionEditorParametersAttribute.#ctor(System.Type,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CollectionEditorParametersAttribute"/> class.
            </summary>
            <param name="defaultWebItemType">Type of the default web item.</param>
            <param name="enableAddRemove">if set to <c>true</c>, add/remove are enabled.</param>
            <param name="enableOrdering">if set to <c>true</c> to enable ordering of items in collection.</param>
            <param name="orderField">The order field.</param>
        </member>
        <member name="M:IDS.ComponentModel.CollectionEditorParametersAttribute.#ctor(System.Type,System.Type,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CollectionEditorParametersAttribute"/> class.
            </summary>
            <param name="defaultWebItemType">Type of the default web item.</param>
            <param name="defaultItemType">Type of the default item.</param>
            <param name="enableAddRemove">if set to <c>true</c>, add/remove are enabled.</param>
            <param name="enableOrdering">if set to <c>true</c> to enable ordering of items in collection.</param>
            <param name="orderField">The order field.</param>
        </member>
        <member name="P:IDS.ComponentModel.CollectionEditorParametersAttribute.DefaultWebItemType">
            <summary>
            Gets or sets the type of the default web item.
            </summary>
            <value>The type of the default web item.</value>
        </member>
        <member name="P:IDS.ComponentModel.CollectionEditorParametersAttribute.DefaultItemType">
            <summary>
            Gets or sets the type of the default item.
            </summary>
            <value>The type of the default item.</value>
        </member>
        <member name="P:IDS.ComponentModel.CollectionEditorParametersAttribute.EnableAddRemove">
            <summary>
            Gets or sets a value indicating whether add/remove is enabled.
            </summary>
            <value><c>true</c> if add/remove is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.ComponentModel.CollectionEditorParametersAttribute.EnableOrdering">
            <summary>
            Gets or sets a value indicating whether ordering is enabled.
            </summary>
            <value><c>true</c> if ordering is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.ComponentModel.CollectionEditorParametersAttribute.OrderField">
            <summary>
            Gets or sets the order field.
            </summary>
            <value>The order field.</value>
        </member>
        <member name="T:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute">
            <summary>
            The CollectionEditorPreviewFieldAttribute is an attribute class that allows a component setting to 
            designate preview fields for the collection editor.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute"/> class.
            </summary>
            <param name="order">The order.</param>
            <param name="dataField">The data field.</param>
        </member>
        <member name="M:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute"/> class.
            </summary>
            <param name="order">The order.</param>
            <param name="dataField">The data field.</param>
            <param name="dataFieldFormatString">The data field format string.</param>
        </member>
        <member name="M:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute"/> class.
            </summary>
            <param name="order">The order.</param>
            <param name="dataField">The data field.</param>
            <param name="dataFieldFormatString">The data field format string.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute.#ctor(System.Int32,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute"/> class.
            </summary>
            <param name="order">The order.</param>
            <param name="webPreviewType">Type of the web preview.</param>
            <param name="dataField">The data field.</param>
        </member>
        <member name="M:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute.#ctor(System.Int32,System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute"/> class.
            </summary>
            <param name="order">The order.</param>
            <param name="webPreviewType">Type of the web preview.</param>
            <param name="dataField">The data field.</param>
            <param name="dataFieldFormatString">The data field format string.</param>
        </member>
        <member name="M:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute.#ctor(System.Int32,System.Type,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute"/> class.
            </summary>
            <param name="order">The order.</param>
            <param name="webPreviewType">Type of the web preview.</param>
            <param name="dataField">The data field.</param>
            <param name="dataFieldFormatString">The data field format string.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute.#ctor(System.Int32,System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute"/> class.
            </summary>
            <param name="order">The order.</param>
            <param name="webPreviewType">Type of the web preview.</param>
            <param name="previewType">Type of the preview.</param>
            <param name="dataField">The data field.</param>
        </member>
        <member name="M:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute.#ctor(System.Int32,System.Type,System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute"/> class.
            </summary>
            <param name="order">The order.</param>
            <param name="webPreviewType">Type of the web preview.</param>
            <param name="previewType">Type of the preview.</param>
            <param name="dataField">The data field.</param>
            <param name="dataFieldFormatString">The data field format string.</param>
        </member>
        <member name="M:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute.#ctor(System.Int32,System.Type,System.Type,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute"/> class.
            </summary>
            <param name="order">The order.</param>
            <param name="webPreviewType">Type of the web preview.</param>
            <param name="previewType">Type of the preview.</param>
            <param name="dataField">The data field.</param>
            <param name="dataFieldFormatString">The data field format string.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>The order.</value>
        </member>
        <member name="P:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute.WebPreviewType">
            <summary>
            Gets or sets the type of the web preview.
            </summary>
            <value>The type of the web preview.</value>
        </member>
        <member name="P:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute.PreviewType">
            <summary>
            Gets or sets the type of the preview.
            </summary>
            <value>The type of the preview.</value>
        </member>
        <member name="P:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute.DataField">
            <summary>
            Gets or sets the data field.
            </summary>
            <value>The data field.</value>
        </member>
        <member name="P:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute.DataFieldFormatString">
            <summary>
            Gets or sets the data field format string.
            </summary>
            <value>The data field format string.</value>
        </member>
        <member name="P:IDS.ComponentModel.CollectionEditorPreviewFieldAttribute.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:IDS.ComponentModel.CollectionEditorRestrictedItemAttribute">
            <summary>
            Prevents a particular item in a collection from being editable in a component collection editor.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.CollectionEditorRestrictedItemAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CollectionEditorRestrictedItemAttribute"/> class.
            </summary>
            <param name="itemID">The item ID.</param>
        </member>
        <member name="P:IDS.ComponentModel.CollectionEditorRestrictedItemAttribute.ItemID">
            <summary>
            Gets or sets the item ID.
            </summary>
            <value>The item ID.</value>
        </member>
        <member name="T:IDS.ComponentModel.ComponentCollection`1">
            <summary>
            A component collection implementation based on generics.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IDS.ComponentModel.ComponentCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentCollection`1"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentCollection`1.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentCollection`1"/> class.
            </summary>
            <param name="defaultItemType">Type of the default item.</param>
        </member>
        <member name="P:IDS.ComponentModel.ComponentCollection`1.DefaultItemType">
            <summary>
            Gets the type of the default item.
            </summary>
            <value>The type of the default item.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentCollection`1.IDS#ComponentModel#IComponentCollection#Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified component ID.
            </summary>
            <value></value>
        </member>
        <member name="M:IDS.ComponentModel.ComponentCollection`1.IDS#ComponentModel#IComponentCollection#GetComponentID(System.Object)">
            <summary>
            Gets the component ID.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentCollection`1.IDS#ComponentModel#IComponentCollection#Add(System.String,System.Object)">
            <summary>
            Adds the specified component ID.
            </summary>
            <param name="id">The component ID.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentCollection`1.RemoveByComponentID(System.String)">
            <summary>
            Removes the by component ID.
            </summary>
            <param name="id">The component ID.</param>
        </member>
        <member name="P:IDS.ComponentModel.ComponentCollection`1.Item(System.String)">
            <summary>
            Gets or sets the <typeparamref name="T" /> with the specified component ID.
            </summary>
            <value></value>
        </member>
        <member name="M:IDS.ComponentModel.ComponentCollection`1.GetComponentID(`0)">
            <summary>
            Gets the component ID.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentCollection`1.Add(System.String,`0)">
            <summary>
            Adds the specified component ID.
            </summary>
            <param name="id">The component ID.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentCollection`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all items that match the condition defined by a specified predicate.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentCollection`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the items in the collection.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentCollection`1.Sort``1(System.Func{`0,``0})">
            <summary>
            Sorts the items in the collection according to a specified key.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:IDS.ComponentModel.ComponentCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:IDS.ComponentModel.ComponentCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing. </param><param name="index">The zero-based index in <paramref name="array"/> at which copying begins. </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.-or-The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:IDS.ComponentModel.ComponentCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:IDS.ComponentModel.ComponentCollection`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:IDS.ComponentModel.ComponentCollection`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:IDS.ComponentModel.ComponentEditorAttribute">
            <summary>
            The ComponentEditorAttribute class is an attribute for associating a custom component setting editor with a class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentEditorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentEditorAttribute"/> class.
            </summary>
            <param name="webType">Type of the web.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentEditorAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentEditorAttribute"/> class.
            </summary>
            <param name="webType">Type of the web.</param>
            <param name="winFormType">Type of the win form.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentEditorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentEditorAttribute"/> class.
            </summary>
            <param name="webUserControlPath">The web user control path.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentEditorAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentEditorAttribute"/> class.
            </summary>
            <param name="webUserControlPath">The web user control path.</param>
            <param name="winFormType">Type of the win form.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentEditorAttribute.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentEditorAttribute"/> class.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentEditorAttribute.WebType">
            <summary>
            Gets or sets the type of the web.
            </summary>
            <value>The type of the web.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentEditorAttribute.WinFormType">
            <summary>
            Gets or sets the type of the win form.
            </summary>
            <value>The type of the win form.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentEditorAttribute.WebUserControlPath">
            <summary>
            Gets or sets the web user control path.
            </summary>
            <value>The web user control path.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentEditorAttribute.WebTypeName">
            <summary>
             Gets or sets the type of the web editor.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.ComponentEditorType">
            <summary>
            The ComponentEditorType denotes what type of editor to use to edit the component settings.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.Automatic">
            <summary>
            Determine the editor automatically based on the property type.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.TextBox">
            <summary>
            Use a textbox editor.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.Html">
            <summary>
            Use an HTML editor.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.DateTime">
            <summary>
            Use a DateTime editor.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.Time">
            <summary>
            Use a Time editor.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.DropDown">
            <summary>
            Use a drop down list editor.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.HashedPassword">
            <summary>
            Use a hashed password editor.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.CheckBox">
            <summary>
            Use a checkbox editor.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.EnumDropDown">
            <summary>
            Use a drop down list populated with the values of an enumeration.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.DataGridColumns">
            <summary>
            Use the DataGridColumns editor.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.Custom">
            <summary>
            Use a custom editor.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.RoleSelector">
            <summary>
            Role Selector
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.FeatureSelector">
            <summary>
            Use a feature selector for non data-driven features.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.DataDrivenFeatureSelector">
            <summary>
            Use a feature selector for data-driven features.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.AllFeatureSelector">
            <summary>
            Use a feature selector for all features.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.ControllerSelector">
            <summary>
            Use a controller selector.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentEditorType.ClientRouteSelector">
            <summary>
            Use a client-side route selector.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.ComponentHelper">
            <summary>
            The ComponentHelper class provides helper functions for working with components.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetTypeConverter(System.Type)">
            <summary>
            Gets the <see cref="T:System.ComponentModel.TypeConverter" /> for a specified <see cref="T:System.Type" />.
            </summary>
            <remarks>
            Unlike the .NET Framework <see cref="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)" /> method, this method uses
            the <see cref="T:System.ComponentModel.TypeDescriptor" /> for the type to which <see cref="T:System.ComponentModel.TypeConverterAttribute" /> is applied
            instead of the <see cref="T:System.ComponentModel.TypeDescriptor" /> for the specified <paramref name="componentType" />.
            This matters when the type is part of a hierarchy and the <see cref="T:System.ComponentModel.TypeConverter" /> only works with
            a base type.
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.PropertyHasAttribute(System.Type,System.Type,System.Boolean)">
            <summary>
            Determines whether the component type has at least one property with the given attribute type declared.
            </summary>
            <param name="componentType">Component Type to search for attributes on.</param>
            <param name="attributeType">Type of attribute to search for.</param>
            <param name="inherit">Whether to search the inheritance tree.</param>
            <returns>
            true if at least one declared property on the componentType has at least one attribute declared of type attributeType.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetPropertyInfo(System.Object,System.String)">
            <summary>
            Gets the property info.
            </summary>
            <param name="component">The component.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetPropertyInfo(System.Object,System.String,System.Boolean)">
            <summary>
            Gets the property info.
            </summary>
            <param name="component">The component.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="throwOnError">if set to <c>true</c> throw an exception on error.</param>
            <returns>Returns a PropertyInfo instance for the specified property.</returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetPropertyInfo(System.Object,System.String,System.Boolean,System.Object[]@,System.Object@,System.Object@,System.ComponentModel.PropertyDescriptor@)">
            <summary>
            Gets the property info.
            </summary>
            <param name="component">The component.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="throwOnError">if set to <c>true</c> throw an exception on error.</param>
            <param name="indexes">The indexes.</param>
            <param name="container">The container.</param>
            <param name="value">The value.</param>
            <param name="propertyDescriptor">The property descriptor.</param>
            <returns>Returns a PropertyInfo instance for the specified property.</returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetIndexedProperties(System.Type,System.Int32)">
            <summary>
            Gets the indexed properties.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="indexParameterCount">The index parameter count.</param>
            <returns>Returns an array of PropertyInfo instances for the specified component type.</returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetIndexedPropertyInfo(System.Type,System.Type[])">
            <summary>
            Gets the indexed property info.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="indexTypes">The index types.</param>
            <returns>Returns a PropertyInfo instance for the specified component type.</returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Gets the property info.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>Returns a PropertyInfo instance for the specified property.</returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetPropertyInfo(System.Type,System.String,System.Boolean)">
            <summary>
            Gets the property info.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="throwOnError">if set to <c>true</c> an exception should be thrown when an error occurs.</param>
            <returns>Returns a PropertyInfo instance for the specified property.</returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="component">The component.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetPropertyValue(System.Object,System.String,System.Boolean)">
            <summary>
            Gets the property value.
            </summary>
            <param name="component">The component.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="throwOnError">if set to <c>true</c> an exception should be thrown when an error occurs.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetPropertyValue(System.Object,System.String,System.Boolean,System.Reflection.PropertyInfo@,System.Object[]@,System.ComponentModel.PropertyDescriptor@)">
            <summary>
            Gets the property value.
            </summary>
            <param name="component">The component.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="throwOnError">if set to <c>true</c> an exception should be thrown when an error occurs.</param>
            <param name="propertyInfo">The property info.</param>
            <param name="indexes">The indexes.</param>
            <param name="propertyDescriptor">The property descriptor.</param>
            <returns>
            Returns the property value for the specified property.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the property value.
            </summary>
            <param name="component">The component.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <returns>
            Returns true if the property was successfully set
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.SetPropertyValue(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the property value.
            </summary>
            <param name="component">The component.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <param name="throwOnError">if set to <c>true</c> an exception should be thrown when an error occurs.</param>
            <returns>
            Returns true if the property was successfully set
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.SetPropertyValue(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Sets the property value.
            </summary>
            <param name="component">The component.</param>
            <param name="propertyInfo">The property info.</param>
            <param name="propertyValue">The property value.</param>
            <returns>
            Returns true if the property was successfully set
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.SetPropertyValue(System.Object,System.Reflection.PropertyInfo,System.Object,System.Boolean)">
            <summary>
            Sets the property value.
            </summary>
            <param name="component">The component.</param>
            <param name="propertyInfo">The property info.</param>
            <param name="propertyValue">The property value.</param>
            <param name="throwOnError">if set to <c>true</c> an exception should be thrown when an error occurs.</param>
            <returns>
            Returns true if the property was successfully set
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.SetPropertyValue(System.Object,System.Reflection.PropertyInfo,System.Object,System.Object[],System.Boolean)">
            <summary>
            Sets the property value.
            </summary>
            <param name="component">The component.</param>
            <param name="propertyInfo">The property info.</param>
            <param name="propertyValue">The property value.</param>
            <param name="indexes">The indexes.</param>
            <param name="throwOnError">if set to <c>true</c> an exception should be thrown when an error occurs.</param>
            <returns>
            Returns true if the property was successfully set
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.SetPropertyValue(System.Object,System.ComponentModel.PropertyDescriptor,System.Object,System.Boolean)">
            <summary>
            Sets the property value.
            </summary>
            <param name="component">The component.</param>
            <param name="propertyDescriptor">The property descriptor.</param>
            <param name="propertyValue">The property value.</param>
            <param name="throwOnError">if set to <c>true</c> an exception should be thrown when an error occurs.</param>
            <returns>
            Returns true if the property was successfully set
            </returns>
        </member>
        <member name="F:IDS.ComponentModel.ComponentHelper.TypeAttributeName">
            <summary>
            Type name attribute used in get and set xml config
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetObject(System.Xml.XmlDocument,System.Boolean)">
            <summary>
            Gets the object from an xml config.
            Note: Sets only properties which are public and have a setter method.
            Assumes that any object having a Parse(string s) gives the string s on calling its ToString().
            Does not work for objects with no default constructor.  
            </summary>
            <param name="config">The config.</param>
            <param name="throwError">if set to <c>true</c> [throw error].</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetObject``1(System.Xml.XmlDocument)">
            <summary>
            Gets the object from an xml config. Throws an error if deserialization has failed for any reason.
            </summary>
            <param name="config"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Deserialized object is of an unexpected type.</exception>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetObject``1(System.Xml.XmlDocument,System.Boolean)">
            <summary>
            Gets the object from an xml config. Throws an error if deserialization has failed for any reason.
            </summary>
            <param name="config"></param>
            <typeparam name="T"></typeparam>
            <param name="throwError">if set to <c>true</c> [throw error].</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Deserialized object is of an unexpected type.</exception>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.SetConfig(System.Object,System.Xml.XmlDocument)">
            <summary>
            Sets the config. Please read note before using this.
            Note: Sets only properties which are public and have a setter method.
            Assumes that any object having a Parse(string s) gives the string s on calling its ToString().
            Does not work for objects with no default constructor.  
            </summary>
            <param name="o">The o.</param>
            <param name="config">The config.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.SetConfig(System.Object,System.Xml.XmlDocument,System.String,System.Boolean)">
            <summary>
            Sets the config based on the xpath.
            Note: Sets only properties which are public and have a setter method.
            Assumes that any object having a Parse(string s) gives the string s on calling its ToString().
            Does not work for objects with no default constructor.  
            </summary>
            <param name="o">The o.</param>
            <param name="config">The config.</param>
            <param name="xpath">The xpath.</param>
            <param name="throwError">if set to <c>true</c> [throw error].</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.SetConfig(System.Object,System.Xml.XmlDocument,System.Boolean)">
            <summary>
            Sets the config. Please read note before using this.
            Note: Sets only properties which are public and have a setter method.
            Assumes that any object having a Parse(string s) gives the string s on calling its ToString().
            Does not work for objects with no default constructor.  
            </summary>
            <param name="o">The o.</param>
            <param name="config">The config.</param>
            <param name="throwError">if set to <c>true</c> [throw error].</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetConfig(System.Object)">
            <summary>
            Gets the config. Please read note before using this.
            Note: Sets only properties which are public and have a setter method.
            Assumes that any object having a Parse(string s) gives the string s on calling its ToString().
            Ignores IEnumerable properties.
            </summary>		
            <param name="o">The o.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetConfig(System.Object,System.Boolean)">
            <summary>
            Gets the config. Please read note before using this.
            Note: Sets only properties which are public and have a setter method.
            Assumes that any object having a Parse(string s) gives the string s on calling its ToString().
            Ignores IEnumerable properties.
            </summary>		
            <param name="o">The o.</param>
            <param name="throwError">if set to <c>true</c> [throw error].</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetConfig(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Gets the config. Please read note before using this.
            Note: Sets only properties which are public and have a setter method.
            Assumes that any object having a Parse(string s) gives the string s on calling its ToString().
            Optionally ignores IEnumerable properties.
            </summary>		
            <param name="o">The object to serialize.</param>
            <param name="throwError">if set to <c>true</c> [throw error].</param>
            <param name="includeCollections"><c>true</c> to serialize IEnumerable properties.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.LoadComponent(System.Object,IDS.ComponentModel.ComponentSettings)">
            <summary>
            Loads the component.
            </summary>
            <param name="component">The component.</param>
            <param name="componentSettings">The component settings.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.LoadComponent(System.Object,IDS.ComponentModel.ComponentSettings,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Loads the component.
            </summary>
            <param name="component">The component.</param>
            <param name="componentSettings">The component settings.</param>
            <param name="culture">The culture.</param>
            <param name="throwOnError">if set to <c>true</c> an exception should be thrown when an error occurs.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.CreateComponent(System.Type,IDS.ComponentModel.ComponentSettings)">
            <summary>
            Creates the component.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="componentSettings">The component settings.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.CreateComponent(System.Type,IDS.ComponentModel.ComponentSettings,System.Boolean)">
            <summary>
            Creates the component.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="componentSettings">The component settings.</param>
            <param name="throwOnLoadSettingsError">if set to <c>true</c> [throw on load settings error].</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.CreateComponent(System.Type,IDS.ComponentModel.ComponentSettings,System.Globalization.CultureInfo)">
            <summary>
            Creates the component.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="componentSettings">The component settings.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.CreateComponent(System.Type,IDS.ComponentModel.ComponentSettings,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Creates the component.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="componentSettings">The component settings.</param>
            <param name="throwOnLoadSettingsError">if set to <c>true</c> [throw on load settings error].</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.ParseComponent(System.Type,System.String)">
            <summary>
            Parses the component.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="componentStringValue">The component string value.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.ParseComponent(System.Type,System.String,System.Boolean)">
            <summary>
            Parses the component.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="componentStringValue">The component string value.</param>
            <param name="throwOnError">if set to <c>true</c> [throw on error].</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.ParseComponent(System.Type,System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the component.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="componentStringValue">The component string value.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.ParseComponent(System.Type,System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Parses the component.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="componentStringValue">The component string value.</param>
            <param name="culture">The culture.</param>
            <param name="throwOnError">if set to <c>true</c> [throw on error].</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.LoadComponentLanguageDefaults(System.Object)">
            <summary>
            Loads the component language defaults.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.LoadComponentLanguageDefaults(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Loads the component language defaults.
            </summary>
            <param name="component">The component.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.HasLocalizableAttribute(System.Type)">
            <summary>
            Determines whether a type has the localizable attribute.
            </summary>
            <param name="type">The type to check for the localizable attribute.</param>
            <returns>
            	<c>true</c> if a type has the localizable attribute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.Detokenize(System.Object,System.String)">
            <summary>
            Detokenizes the specified container.
            Note: Incorrect use of this method can introduce a security vulnerability.
            Use <see cref="M:IDS.ComponentModel.ComponentHelper.DetokenizeHtml(System.Object,System.String)" /> or <see cref="M:IDS.ComponentModel.ComponentHelper.DetokenizePlainText(System.Object,System.String)" />
            instead of this method to clarify the intended use of the resulting string.
            </summary>
            <param name="container">The container.</param>
            <param name="tokenString">The token string.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.Detokenize(System.Object,System.String,System.Boolean)">
            <summary>
            Detokenizes the specified container.
            Note: Incorrect use of this method can introduce a security vulnerability.
            Use <see cref="M:IDS.ComponentModel.ComponentHelper.DetokenizeHtml(System.Object,System.String)" /> or <see cref="M:IDS.ComponentModel.ComponentHelper.DetokenizePlainText(System.Object,System.String)" />
            instead of this method to clarify the intended use of the resulting string.
            </summary>
            <param name="container">The container.</param>
            <param name="tokenString">The token string.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.Detokenize(System.Object,System.String,IDS.ComponentModel.DetokenizeFlags)">
            <summary>
            Detokenizes the specified container.
            </summary>
            <param name="container">The container.</param>
            <param name="tokenString">The token string.</param>
            <param name="flags">Zero or more <see cref="T:IDS.ComponentModel.DetokenizeFlags" />.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.DetokenizeHtml(System.Object,System.String)">
            <summary>
            Detokenizes the specified container. Use this method if the result
            will be written directly to an HTML document.
            </summary>
            <param name="container">The container.</param>
            <param name="tokenString">The token string.</param>
            <returns></returns>
            <remarks>
            This method automatically HTML-encodes all formatted values.
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.DetokenizeJavaScript(System.Object,System.String)">
            <summary>
            Detokenizes the specified container. Use this method if the result
            will be embedded within a JavaScript string literal.
            </summary>
            <param name="container">The container.</param>
            <param name="tokenString">The token string.</param>
            <returns></returns>
            <remarks>
            This method automatically replaces special characters with JavaScript escape sequences.
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.DetokenizePlainText(System.Object,System.String)">
            <summary>
            Detokenizes the specified container. Use this method if the result
            will be written directly to a plain text document or if the result
            will be HTML-encoded before being written to an HTML document. Do not use
            this method if the result will be written directly to an HTML document.
            </summary>
            <param name="container">The container.</param>
            <param name="tokenString">The token string.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.DetokenizeUrl(System.Object,System.String)">
            <summary>
            Detokenizes the specified container. Use this method if the result
            will be treated as a URL.
            </summary>
            <param name="container">The container.</param>
            <param name="tokenString">The token string.</param>
            <returns></returns>
            <remarks>
            This method automatically URL-encodes all formatted values.
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.ReplaceResourceTokens(System.String)">
            <summary>
            Replaces all resource tokens in a specified string with the corresponding resource value
            localized for the current UI culture.
            </summary>
            <param name="tokenString">
            A string containing resource tokens ("{=Resource, Type, Assembly}").
            </param>
            <returns>
            The <paramref name="tokenString" /> with all resource tokens replaced.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetEnumerableSeperator(System.String,System.String@)">
            <summary>
            Parses the seperator out of an IEnumerable format string
            </summary>
            <param name="expression"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetPropertyDelimiterIndex(System.String)">
            <summary>
            Returns the index of the first '.' or '[' character that is not
            inside a C#-style indexer (a matching pair of square brackets).
            </summary>
            <remarks>
            If the string begins with "[" or "ITEM[", the method looks for
            the second '.' or '[' character (that is not inside an indexer).
            The method returns -1 if no delimiter is found.
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.GetSimplifiedAssemblyQualifiedName(System.Type)">
            <summary>
            Gets the assembly-qualified name of a specified <see cref="T:System.Type" />.
            Unlike <see cref="P:System.Type.AssemblyQualifiedName" />, the assembly version number is omitted
            if the assembly is not strongly named, and assembly information is omitted if the type is defined in mscorlib.
            </summary>
            <param name="type">
            A <see cref="T:System.Type" />.
            </param>
            <returns>
            The assembly-qualified name of the specified <paramref name="type" />.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.VerifyNotNull(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Verifies that the value of a specified component setting is not <see langword="null" />.
            </summary>
            <param name="expr">
            A lambda expression of the form <c>() =&gt; this.Property</c> that references the component setting to validate.
            </param>
            <exception cref="T:IDS.ComponentModel.InvalidComponentSettingException">
            The value of the component setting is <see langword="null" />.
            </exception>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.VerifyNotNullOrEmpty(System.Linq.Expressions.Expression{System.Func{System.String}})">
            <summary>
            Verifies that the value of a specified string-valued component setting is not <see langword="null" /> or an empty string.
            </summary>
            <param name="expr">
            A lambda expression of the form <c>() =&gt; this.Property</c> that references the component setting to validate.
            </param>
            <exception cref="T:IDS.ComponentModel.InvalidComponentSettingException">
            The value of the component setting is <see langword="null" /> or an empty string.
            </exception>
        </member>
        <member name="M:IDS.ComponentModel.ComponentHelper.VerifySetting``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Predicate{``0})">
            <summary>
            Verifies that the value of a specified component setting satisfies a specified condition.
            </summary>
            <typeparam name="T">
            The type of the component setting property.
            </typeparam>
            <param name="expr">
            A lambda expression of the form <c>() =&gt; this.Property</c> that references the component setting to validate.
            </param>
            <param name="predicate">
            A delegate that specifies the condition the value of the component setting must satisfy.
            </param>
            <exception cref="T:IDS.ComponentModel.InvalidComponentSettingException">
            The value of the component setting does not satisfy the <paramref name="predicate" />.
            </exception>
        </member>
        <member name="T:IDS.ComponentModel.ComponentSettingSortOrder">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentSettingSortOrder.CategoryOrderByCategoryNameByOrderByNatural">
            <summary>
            Sort by Category ID, Category Name, Order ID and then natural order.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentSettingSortOrder.Natural">
            <summary>
            Use the natural order that the settings were defined.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentSettingSortOrder.CategoryOrderByCategoryNameByOrderByName">
            <summary>
            Sort by Category ID, Category Name, Order ID and then Name.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentSettingSortOrder.Default">
            <summary>
            The Default sort order.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.ComponentSettingSortingAttribute">
            <summary>
            The ComponentSettingSortingAttribute sets how the component settings on a class will be sorted.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettingSortingAttribute.#ctor(IDS.ComponentModel.ComponentSettingSortOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentSettingSortingAttribute"/> class.
            </summary>
            <param name="sortOrder">The sort order.</param>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingSortingAttribute.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="T:IDS.ComponentModel.ComponentSettingCategoryOrderAttribute">
            <summary>
            Specifies the sort order of a particular category of component settings
            on a class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettingCategoryOrderAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentSettingCategoryOrderAttribute" /> class.
            </summary>
            <param name="sortOrder">The sort order.</param>
            <param name="category">The name of the component setting category to sort.</param>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingCategoryOrderAttribute.SortOrder">
            <summary>
            Gets the sort order.
            </summary>
            <value>
            The sort order.
            </value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingCategoryOrderAttribute.Category">
            <summary>
            Gets the name of the component setting category to sort.
            </summary>
            <value>
            The name of the component setting category to sort.
            </value>
        </member>
        <member name="T:IDS.ComponentModel.ComponentSettingAttribute">
            <summary>
            The ComponentSettingAttribute class allows properties within a class to be tagged with information that the ComponentSettings framework
            uses to edit and persist these values.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentSettingAttribute.WellKnownComponentCategoryOrder">
            <summary>
            The standard category sort order for well known component category.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentSettingAttribute.PagesCategoryOrder">
            <summary>
            The standard category sort order for the pages category.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentSettingAttribute.NotInitialized">
            <summary>
            The NotInitialized value is less then int.MaxValue
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettingAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentSettingAttribute"/> class.
            </summary>
            <param name="name">The name of the component setting.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettingAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentSettingAttribute"/> class.
            </summary>
            <param name="name">The name of the component setting.</param>
            <param name="category">The category associated with the component setting.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettingAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentSettingAttribute"/> class.
            </summary>
            <param name="name">The name of the component setting.</param>
            <param name="description">The description associated with the component setting.</param>
            <param name="category">The category associated with the component setting.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettingAttribute.#ctor(System.String,System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentSettingAttribute"/> class.
            </summary>
            <param name="name">The name of the component setting.</param>
            <param name="description">The description associated with the component setting.</param>
            <param name="category">The category associated with the component setting.</param>
            <param name="customWebEditorType">Type of the custom web editor.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettingAttribute.#ctor(System.String,System.String,System.String,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentSettingAttribute"/> class.
            </summary>
            <param name="name">The name of the component setting.</param>
            <param name="description">The description associated with the component setting.</param>
            <param name="category">The category associated with the component setting.</param>
            <param name="customWebEditorType">Type of the custom web editor.</param>
            <param name="customWinFormEditorType">Type of the custom WinForm editor.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettingAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentSettingAttribute"/> class.
            </summary>
            <param name="name">The name of the component setting.</param>
            <param name="description">The description associated with the component setting.</param>
            <param name="category">The category associated with the component setting.</param>
            <param name="webUserEditorControl">The web user editor control.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettingAttribute.#ctor(System.String,System.String,System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentSettingAttribute"/> class.
            </summary>
            <param name="name">The name of the component setting.</param>
            <param name="description">The description associated with the component setting.</param>
            <param name="category">The category associated with the component setting.</param>
            <param name="webUserEditorControl">The web user editor control.</param>
            <param name="customWinFormEditorType">Type of the custom WinForm editor.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettingAttribute.#ctor(System.String,System.String,System.String,IDS.ComponentModel.ComponentEditorType)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.ComponentSettingAttribute"/> class.
            </summary>
            <param name="name">The name of the component setting.</param>
            <param name="description">The description associated with the component setting.</param>
            <param name="category">The category associated with the component setting.</param>
            <param name="editorType">Type of the editor.</param>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.Name">
            <summary>
            The name of the component setting.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.Description">
            <summary>
            The description of the component setting.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.Category">
            <summary>
            The category of the component setting.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.Encrypt">
            <summary>
            Gets or sets a Boolean value that indicates whether the value
            of the component setting should be encrypted when the value is persisted.
            </summary>
            <value>
            The default value is <see langword="false" />.
            </value>
            <remarks>
            This property is advisory; it may not necessarily be honored
            by the persistence mechanism.
            </remarks>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.Mask">
            <summary>
            Gets or sets a Boolean value that indicates whether the value
            of the component setting should be masked when the user edits the value.
            </summary>
            <value>
            The default value is <see langword="false" />.
            </value>
            <remarks>
            This property is advisory; it may not necessarily be honored
            by a particular component setting editor.
            </remarks>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.CustomWebEditorType">
            <summary>
            The type of a custom web control to edit the component setting.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.CustomWebEditorTypeString">
            <summary>
            Gets or sets the custom web editor type string. 		
            Note: If the CustomWebEditorType property is set to a valid type this is ingnored.
            </summary>
            <value>The custom web editor type string.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.CustomWinFormEditorType">
            <summary>
            The type of a custom winform control to edit the component setting.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.WebUserEditorControl">
            <summary>
            Gets or sets the web user editor control.
            </summary>
            <value>The web user editor control.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.ComponentEditorType">
            <summary>
            The type of the UI control to edit the component setting.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.WellKnownComponent">
            <summary>
            Get or set a value on whether this value is a well-known component.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.Order">
            <summary>
            Get or set a value to determine the order (under its category,) in which the component setting is displayed in the admin page.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.CategoryOrder">
            <summary>
            Get or set a value to determine the order of categories in which the component setting is displayed in the admin page.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.ExpandCategory">
            <summary>
            Get or set whether the category that the attribute belongs to is expanded or collapsed in the admin page. Defaults to true if not set.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.NullableExpandCategory">
            <summary>
            Get whether the category that the attribute belongs to is expanded or collapsed in the admin page. Defaults to null if not set.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettingAttribute.LoadParameters(IDS.ComponentModel.IComponentEditor)">
            <summary>
            Loads the parameters into the editor.
            </summary>
            <param name="editor">The editor to load the parameters into.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettingAttribute.AssignParameters(IDS.ComponentModel.IComponentEditor,IDS.ComponentModel.ComponentSettings)">
            <summary>
            Assigns the parameters into the specified editor.
            </summary>
            <param name="editor">The editor to assign the parameters to.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.Parameters">
            <summary>
            Any parameters to associate with this component editor. The syntax of this value depends on each specific editor. 
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingAttribute.MergeGroup">
            <summary>
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.PropertyComponentSettingComparer">
            <summary>
            Compares two PropertyInfo objects looking for a ComponentSettingAttribute for that property to determine sort order.
            </summary>
            <remarks>
            The sort order is: CategoryOrder, Category, Order, Reflected Order.
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.PropertyComponentSettingComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.PropertyComponentSettingComparer"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.PropertyComponentSettingComparer.#ctor(System.Web.UI.WebControls.SortDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.PropertyComponentSettingComparer"/> class.
            </summary>
            <param name="direction">The direction of the sort.</param>
        </member>
        <member name="M:IDS.ComponentModel.PropertyComponentSettingComparer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.PropertyComponentSettingComparer"/> class
            with a specified component type.
            </summary>
            <param name="componentType">The type of the component whose component settings are to be sorted.</param>
        </member>
        <member name="M:IDS.ComponentModel.PropertyComponentSettingComparer.Compare(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.ComponentSettingEncryptor">
            <summary>
            Encrypts and decrypts the values of component settings.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="T:IDS.ComponentModel.ComponentSettingLister">
            <summary>
            The ComponentSettingLister is a static helper class for retrieving all of the component settings associated with a class.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentSettingLister.IdsPublicKeyToken">
            <summary>
            The public key token for our assemblies.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettingLister.IsPublicKeyTokenMatch(System.Byte[],System.Reflection.AssemblyName,System.Boolean)">
            <summary>
            Compare the referenced assembly's public key token to another public key token.
            </summary>
            <param name="token">The token to compare to.</param>
            <param name="assemblyName">Name of the assembly to compare the public key token against.</param>
            <param name="trueIfNoToken">If true, consider the keys match if the assemblyName doesn't have a public key token.</param>
            <returns>
            	<c>true</c> if the public key token match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettingLister.RecurseComponentSetting(System.Collections.ArrayList,System.String,System.Reflection.PropertyInfo,System.String,System.Type,System.String)">
            <summary>
            Recurses the component setting.
            </summary>
            <param name="settings">The settings.</param>
            <param name="propertyTrail">The property trail.</param>
            <param name="property">The property.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="classType">Type of the class.</param>
            <param name="moduleName">Name of the module.</param>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettingLister.GetLoadedAssemblyComponentSettings(System.Boolean,System.String[]@)">
            <summary>
            Gets the loaded assembly component settings.
            </summary>
            <param name="continueOnError">if set to <c>true</c>, continue loading the assemblies even if an error occurs.</param>
            <param name="errors">An out parameter that returns a collection of the errors encountered while loading assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.ComponentSettingLister.GetAssemblyComponentSettings(System.Boolean,System.Reflection.Assembly[],System.String[]@)">
            <summary>
            Gets the assembly component settings.
            </summary>
            <param name="continueOnError">if set to <c>true</c> [continue on error].</param>
            <param name="assemblies">The assemblies.</param>
            <param name="errors">The errors.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.ComponentModel.ComponentSettingInfo">
            <summary>
            The ComponentSettingInfo class contains information related to a component setting.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.ComponentSettingInfo.PropertyTrailDelimiter">
            <summary>
            PropertyTrailDelimiter
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingInfo.AssemblyName">
            <summary>
            Gets or sets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingInfo.ModuleName">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingInfo.ClassType">
            <summary>
            Gets or sets the type of the class.
            </summary>
            <value>The type of the class.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingInfo.PropertyTrail">
            <summary>
            Gets the property trail.
            </summary>
            <value>The property trail.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingInfo.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingInfo.SettingName">
            <summary>
            Gets or sets the name of the setting.
            </summary>
            <value>The name of the setting.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingInfo.SettingDescription">
            <summary>
            Gets or sets the setting description.
            </summary>
            <value>The setting description.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingInfo.SettingCategory">
            <summary>
            Gets or sets the setting category.
            </summary>
            <value>The setting category.</value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingInfo.IsLocalizable">
            <summary>
            Gets or sets a value indicating whether this instance is localizable.
            </summary>
            <value>
            	<c>true</c> if this instance is localizable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingInfo.IsTokenizable">
            <summary>
            Gets or sets a value indicating whether this instance is tokenizable.
            </summary>
            <value>
            	<c>true</c> if this instance is tokenizable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.ComponentModel.ComponentSettingInfo.TokenizableBindingTypes">
            <summary>
            Gets or sets the tokenizable binding types.
            </summary>
            <value>The tokenizable binding types.</value>
        </member>
        <member name="T:IDS.ComponentModel.CompositeObjectPropertyBinder">
            <summary>
            A Property Binding class for detokenizing that supports
            making multiple classes appear to be one class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.CompositeObjectPropertyBinder.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Type,System.Object}})">
            <summary>
            Constructor - initializes a new instance of the CompositeObjectPropertyBinder class
            </summary>
            <param name="typedComponents">An enumerable Type/object Pair</param>
        </member>
        <member name="M:IDS.ComponentModel.CompositeObjectPropertyBinder.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Constructor - initializes a new instance of the CompositeObjectPropertyBinder class
            </summary>
            <param name="components">An enumerable object that enumerates objects</param>
        </member>
        <member name="M:IDS.ComponentModel.CompositeObjectPropertyBinder.#ctor(System.Object[])">
            <summary>
            Constructor - initializes a new instance of the CompositeObjectPropertyBinder class
            </summary>
            <param name="components">A parameter list of objects or an array of objects</param>
        </member>
        <member name="P:IDS.ComponentModel.CompositeObjectPropertyBinder.EnableCustomPropertyBinderOnNullObjects">
            <summary>
            Specifies whether a new instance of the object will be created if it is null.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.CompositeObjectPropertyBinder.GetValue(System.String,System.Object[],System.Object@,System.Type@)">
            <summary>
            Gets the value of a specified property.
            </summary>
            <param name="name">
            The name of the property.
            </param>
            <param name="index">
            Optional index values for indexed properties.
            </param>
            <param name="value">
            Receives the value of the property.
            </param>
            <param name="valueType">
            Receives the type of the value, or if the value is <see langword="null" />,
            the type of the property.
            </param>
            <returns>
            <see langword="true" /> if the property value was successfully retrieved;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.AbstractComponentAdapter">
            <summary>
            Base for implementing ComponentAdapters
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.AbstractComponentAdapter.#ctor(System.Object,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="componentKey">The component's key</param>
            <param name="componentImplementation">The component implementing type</param>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.AbstractComponentAdapter.ComponentKey">
            <summary>
            The key of the component
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.AbstractComponentAdapter.ComponentImplementation">
            <summary>
            The component implementing type
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.AbstractComponentAdapter.ToString">
            <summary>
            The string representation of the ComponentAdapter
            </summary>
            <returns>The name</returns>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.AbstractComponentAdapter.Container">
            <summary>
             Property containing the container in which this instance is registered, called by the container upon registration
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.AbstractComponentAdapter.ComponentInstance">
            <summary>
            Gets the component instance. This method will usually create
            a new instance for each call.
            </summary>
            <remarks>
            Not all ComponentAdapters return a new instance for each call an example is the <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.CachingComponentAdapter"/>.<BR/>
            </remarks>
            <returns>a component instance</returns>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoInitializationException">if the component could not be instantiated.</exception>    
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.AbstractComponentAdapter.Verify">
            <summary>
            Verify that all dependencies for this adapter can be satisifed.
            </summary>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoIntrospectionException">if the verification failed</exception>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.AmbiguousComponentResolutionException">
            <summary>
            The PicoIntrospectionException is thrown when the initialization could be done with more than one
            component.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.AmbiguousComponentResolutionException.#ctor(System.Type,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="ambiguousType">The type that could be resolved with more than one component.</param>
            <param name="componentKeys">The keys of the components that where resolved</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.AmbiguousComponentResolutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.AmbiguousComponentResolutionException"/> class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.
            </remarks>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized 
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination. </param>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.AmbiguousComponentResolutionException.Message">
            <summary>
            Returns a customized message showing what type resolved to multiple keys.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.AmbiguousComponentResolutionException.AmbiguousComponentKeys">
            <summary>
            The keys that resolved the dependency.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.AssignabilityRegistrationException">
            <summary>
            An exception thrown when a type could not be assigned.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.AssignabilityRegistrationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.AssignabilityRegistrationException"/> class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.
            </remarks>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized 
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination. </param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.AssignabilityRegistrationException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new ins
            </summary>
            <param name="type"></param>
            <param name="typeToAssign"></param>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.AssignabilityRegistrationException.Message">
            <summary>
            Returns a customized message containing the name of the types.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.BeanPropertyComponentAdapter.#ctor(IDS.ComponentModel.Containers.Pico.IComponentAdapter)">
            <summary>
            Constructor
            </summary>
            <param name="theDelegate">The component adapter to decorate</param>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.BeanPropertyComponentAdapter.ComponentInstance">
            <summary>
            Returns the component's implementing type.
            <remarks>Initializing additional properties using the properties set using the Properties property</remarks>
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.BeanPropertyComponentAdapter.Properties">
            <summary>
            Setter for additional properties not set via PicoContainer
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.CachingComponentAdapter">
            <summary>
            ComponentAdapter initializing the component only once. Reusing the component.
            <remarks>Components registered using this adapter can be seen as Singleton. No synchronization of calls is done.
            </remarks>
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.CachingComponentAdapter.#ctor(IDS.ComponentModel.Containers.Pico.IComponentAdapter)">
            <summary>
            Constructor
            </summary>
            <param name="theDelegate">The component adapter to decorate</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.CachingComponentAdapter.#ctor(IDS.ComponentModel.Containers.Pico.IComponentAdapter,IDS.ComponentModel.Containers.Pico.Defaults.SimpleReference)">
            <summary>
            Constructor
            </summary>
            <param name="theDelegate">The component adapter to decorate</param>
            <param name="reference">Object to store the instance in. See <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.IObjectReference"/> for an explanation.</param>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.CachingComponentAdapter.ComponentInstance">
            <summary>
            Gets the component instance. Only one instance is created of the type
            </summary>
            <returns>a component instance</returns>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoInitializationException">if the component could not be instantiated.</exception>    
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.CachingComponentAdapterFactory">
            <summary>
            Summary description for CachingComponentAdapterFactory.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.ComponentParameter">
            <summary>
            A ComponentParameter should be used to pass in a particular component
            as argument to a different component's constructor. 
            <remarks>
            This is particularly
            useful in cases where several components of the same type have been registered,
            but with a different key. Passing a ComponentParameter as a parameter
            when registering a component will give PicoContainer a hint about what
            other component to use in the constructor.</remarks>
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.ComponentParameter.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="componentKey">the key of the desired component</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.ComponentParameter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.ComponentParameter.ResolveAdapter(IDS.ComponentModel.Containers.Pico.IPicoContainer,System.Type)">
            <summary>
            Get the component adapter for the key.
            <remarks>
            If the component key is null the component returned will be located using the type
            </remarks>
            </summary>
            <param name="picoContainer">The container to search in for the component</param>
            <param name="expectedType">The type that should be returned</param>
            <returns>The component adapter</returns>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.ConstantParameter">
            <summary>
            A ConstantParameter should be used to pass in constant arguments
            to constructors. 
            <remarks>This includes Strings, Integers or
            any other object that is not registered in the container.</remarks>
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.ConstantParameter.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="constantValue">the value</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.ConstantParameter.ResolveAdapter(IDS.ComponentModel.Containers.Pico.IPicoContainer,System.Type)">
            <summary>
            Get a component for the parameter.
            </summary>
            <param name="picoContainer">-</param>
            <param name="expectedType">-</param>
            <returns>The component adapter</returns>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.ConstructorInjectionComponentAdapter">
            <summary>
            Instantiates components using Constructor Injection.
            <remarks>
            Note that this class doesn't cache instances. If you want caching,
            use a <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.CachingComponentAdapter"/> around this one.
            </remarks>
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.ConstructorInjectionComponentAdapter.#ctor(System.Object,System.Type,IDS.ComponentModel.Containers.Pico.IParameter[])">
            <summary>
            Constructor
            </summary>
            <param name="componentKey">The component's key</param>
            <param name="componentImplementation">The component implementing type</param>
            <param name="parameters">Parameters used to initialize the component</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.ConstructorInjectionComponentAdapter.#ctor(System.Object,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="componentKey">The component's key</param>
            <param name="componentImplementation">The component implementing type</param>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.ConstructorInjectionComponentAdapterFactory">
            <summary>
            Summary description for ConstructorComponentAdapterFactory.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.DecoratingComponentAdapter">
            <summary>
            Decorates a Component adapter, used for combining the functionality of multiple IComponentAdapters
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.DecoratingComponentAdapter.#ctor(IDS.ComponentModel.Containers.Pico.IComponentAdapter)">
            <summary>
            Constructor
            </summary>
            <param name="theDelegate">The component adapter to decorate</param>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.DecoratingComponentAdapter.ComponentKey">
            <summary>
            Returns the component's key
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.DecoratingComponentAdapter.ComponentImplementation">
            <summary>
            Returns the component's implementing type
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.DecoratingComponentAdapter.ComponentInstance">
            <summary>
            Gets the component instance. This method will usually create
            a new instance for each call.
            </summary>
            <remarks>
            Not all ComponentAdapters return a new instance for each call an example is the <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.CachingComponentAdapter"/>.<BR/>
            </remarks>
            <returns>a component instance</returns>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoInitializationException">if the component could not be instantiated.</exception>    
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.DecoratingComponentAdapter.Verify">
            <summary>
            Verify that all dependencies for this adapter can be satisifed.
            </summary>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoIntrospectionException">if the verification failed</exception>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.DecoratingComponentAdapter.Delegate">
            <summary>
            The delegate decorated by this adapter
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.DecoratingComponentAdapter.Container">
            
            <summary>
             Property containing the container in which this instance is registered, called by the container upon registration
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.ImplementationHidingComponentAdapterFactory">
            <summary>
            Summary description for ImplementationHidingComponentAdapterFactory.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.InstantiatingComponentAdapter">
            <summary>
            This ComponentAdapter will instantiate a new object for each call to <see cref="P:IDS.ComponentModel.Containers.Pico.IComponentAdapter.ComponentInstance"/>
            That means that
            when used with a PicoContainer, getComponentInstance will return a new
            object each time.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.InstantiatingComponentAdapter.#ctor(System.Object,System.Type,IDS.ComponentModel.Containers.Pico.IParameter[])">
            <summary>
            Constructor
            </summary>
            <param name="componentKey">The component's key</param>
            <param name="componentImplementation">The component implementing type</param>
            <param name="parameters">Parameters used to initialize the component</param>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.InstantiatingComponentAdapter.ComponentInstance">
            <summary>
            Gets the component instance. 
            </summary>
            <returns>a component instance</returns>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.InstantiatingComponentAdapter.CreateDefaultParameters(System.Type[])">
            <summary>
            Creates default parameters if no parameters are passed in.
            </summary>
            <param name="parameters">The types of the required parameters</param>
            <returns>The default parameters</returns>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.InstantiatingComponentAdapter.InstantiateComponent(System.Collections.ArrayList)">
            <summary>
            Instantiate the object. 
            </summary>
            <param name="adapterDependencies">This list is filled with the dependent adapters of the instance.</param>
            <returns>Returns the new instance.</returns>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.IObjectReference">
            <summary>
             A way to refer to objects that are stored in awkward places
            (for example HttpSession).
            <remarks>This is typically implemented by someone integrating Pico into
            an existing container.</remarks> 
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.ISwappable">
            <summary>
            Summary description for Swappable.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.PicoInvocationTargetInitializationException">
            <summary>
            The PicoInvocationTargetInitializationException is thrown when an error occurs while creating an 
            instance of a registered <see cref="T:IDS.ComponentModel.Containers.Pico.IComponentAdapter"/>.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.PicoInvocationTargetInitializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.PicoInvocationTargetInitializationException"/> class.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a system-supplied message 
            that describes the error, such as "PicoContainer caused an exception." 
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.PicoInvocationTargetInitializationException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.PicoInvocationTargetInitializationException"/> class.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a system-supplied message 
            that describes the error, such as "PicoContainer caused an exception." 
            </remarks>
            <param name="ex">The exception that cauesed this exception.</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.PicoInvocationTargetInitializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.PicoInvocationTargetInitializationException"/> class with a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property of the 
            passed in exception. 
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.PicoInvocationTargetInitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.PicoInvocationTargetInitializationException"/> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous 
            exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference 
            (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="ex">The exception that caused the error</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.PicoInvocationTargetInitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.PicoInvocationTargetInitializationException"/> class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.
            </remarks>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized 
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination. </param>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.SetterInjectionComponentAdapter">
            <summary>
            Instantiates components using empty constructors and Setter Injection
            <remarks>
            <a href="http://docs.codehaus.org/display/PICO/Setter+Injection">Setter Injection</a>.
            For easy setting of primitive properties, also <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.BeanPropertyComponentAdapter"/>.
            Note that this class doesn't cache instances. If you want caching,
            use a <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.CachingComponentAdapter"/> around this one.
            </remarks>
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.SetterInjectionComponentAdapter.#ctor(IDS.ComponentModel.Containers.Pico.IComponentAdapter)">
            <summary>
            Constructor
            </summary>
            <param name="theDelegate">The component adapter to decorate</param>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.Defaults.SetterInjectionComponentAdapter.ComponentInstance">
            <summary>
            Gets the component instance. This method will usually create
            a new instance for each call.
            </summary>
            <remarks>
            Not all ComponentAdapters return a new instance for each call an example is the <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.CachingComponentAdapter"/>.<BR/>
            </remarks>
            <returns>a component instance</returns>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoInitializationException">if the component could not be instantiated.</exception>    
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.SetterInjectionComponentAdapterFactory">
            <summary>
            Summary description for SetterInjectionComponentAdapterFactory.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.Defaults.SetterInjectionComponentAdapterFactory.#ctor(IDS.ComponentModel.Containers.Pico.Defaults.IComponentAdapterFactory)">
            <summary>
            Constructs a SetterInjectionComponentAdapterFactory.
            </summary>
            <param name="theDelegate">The delegated <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.IComponentAdapterFactory"/></param>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.SimpleReference">
            <summary>
            Summary description for SimpleReference.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Defaults.SynchronizedComponentAdapterFactory">
            <summary>
            Summary description for SynchronizedComponentAdapterFactory.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.IComponentAdapter">
            <summary>
            A component adapter is responsible for providing a specific component instance.
            </summary>
            <remarks>
            An instance of an implementation of this interface is used in a <see cref="T:IDS.ComponentModel.Containers.Pico.IPicoContainer"/>
            for every registered component or instance. Each ComponentAdapter instance has to 
            support unique key for a single PicoContainer. The key itself is either a class type
            (normally an interface) or an identifier.
            See <see cref="T:IDS.ComponentModel.Containers.Pico.IMutablePicoContainer"/>an extension of the PicoContainer interface which 
            allows you to modify the contents of the container.</remarks>
            
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.IComponentAdapter.ComponentKey">
            <summary>
            Retrieve the key associated with the component.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.IComponentAdapter.ComponentImplementation">
            <summary>
            Retrieve the implementing Type of the component.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.IComponentAdapter.ComponentInstance">
            <summary>
            Gets the component instance. 
            </summary>
            <remarks>
            This method will usually create a new instance for each call, this is not required.
            Not all ComponentAdapters return a new instance for each call an example is the <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.CachingComponentAdapter"/>.<BR/>
            </remarks>
            <returns>The component instance</returns>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoInitializationException">if the component could not be instantiated.</exception>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoIntrospectionException">if the component has dependencies which could not be resolved, or
                                                                       instantiation of the component lead to an ambigous situation within the
                                                                       container.</exception>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.IComponentAdapter.Container">
            
            <summary>
             Property containing the container in which this instance is registered, called by the container upon registration
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IComponentAdapter.Verify">
            <summary>
            Verify that all dependencies for this adapter can be satisifed.
            </summary>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoIntrospectionException">if the verification failed</exception>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.IMutablePicoContainer">
            <summary>
            This is the core interface used for registration of components with a container. 
            </summary>
            <remarks>It is possible to 
            register a (<see cref="M:IDS.ComponentModel.Containers.Pico.IMutablePicoContainer.RegisterComponentImplementation(System.Object,System.Type)"/>)  an 
            implementation class or <see cref="M:IDS.ComponentModel.Containers.Pico.IMutablePicoContainer.RegisterComponent(IDS.ComponentModel.Containers.Pico.IComponentAdapter)"/> 
            a ComponentAdapter.</remarks>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IMutablePicoContainer.RegisterComponentImplementation(System.Object,System.Type)">
            <summary>Registers a component.</summary>
            <param name="componentKey">a key that identifies the compoent. Must be unique within the container.<remarks>The type of the key object has no semantic significance unless explicitly specified
            in the implementing container.</remarks></param>
            <param name="componentImplementation">the concrete component type</param>
            <returns>the associated ComponentAdapter.</returns>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoRegistrationException">if the registration fails</exception>
            <see cref="M:IDS.ComponentModel.Containers.Pico.IMutablePicoContainer.RegisterComponentImplementation(System.Object,System.Type,IDS.ComponentModel.Containers.Pico.IParameter[])"/> a variant of this method that allows more control
            over the parameters passed into the componentImplementation constructor when constructing an instance. 
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IMutablePicoContainer.RegisterComponentImplementation(System.Object,System.Type,IDS.ComponentModel.Containers.Pico.IParameter[])">
            <summary>
            Registers a component.</summary>
            <param name="componentKey">a key that identifies the compoent. Must be unique within the container.
            <remarks>The type of the key object has no semantic significance unless explicitly specified
            in the implementing container.</remarks></param>
            <param name="componentImplementation">the component's implementation type.
            <remarks>This must be a concrete class (ie, a class that can be instantiated).</remarks></param>
            <param name="parameters">an array of parameters that gives the container hints about what arguments
            to pass to the constructor when it is instantiated.
            <remarks>Container implementations may ignore one or more of these hints.</remarks></param>
            <returns>the associated ComponentAdapter.</returns>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoRegistrationException">if the registration fails</exception>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IMutablePicoContainer.RegisterComponentImplementation(System.Type)">
            <summary>
            Registers a component using the ComponentImplementation type as key.
            </summary>
            <remarks>Calling this method is equivalent to calling <example>RegisterComponentImplementation(componentImplementation, componentImplementation)</example></remarks>
            <param name="componentImplementation">the concrete component type</param>
            <returns>the associated ComponentAdapter.</returns>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoRegistrationException">if the registration fails</exception>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IMutablePicoContainer.RegisterComponentInstance(System.Object)">
            <summary>
            Registers an arbitrary object, using it's class as a key.
            </summary>
            <param name="componentInstance">the object to register</param>
            <returns>the associated ComponentAdapter.</returns>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoRegistrationException">if the registration fails</exception>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IMutablePicoContainer.RegisterComponentInstance(System.Object,System.Object)">
            <summary>
            Registers an arbitrary object as a component in the container.
            </summary>
            <remarks>This is handy when other components in the same container have dependencies on this
            kind of object, but where letting the container manage and instantiate it is impossible.<br />
            Beware that too much use of this method is an antipattern.
            <a href="http://docs.codehaus.org/display/PICO/Instance+Registration">antipattern</a>.
            </remarks>
            <param name="componentKey">a key that identifies the compoent. Must be unique within the container    
            <remarks>The type of the key object has no semantic significance unless explicitly specified
            in the implementing container.</remarks></param>
            <param name="componentInstance">an arbitrary object.</param>
            <returns>the associated ComponentAdapter.</returns>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoRegistrationException">if the registration fails</exception>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IMutablePicoContainer.RegisterComponent(IDS.ComponentModel.Containers.Pico.IComponentAdapter)">
            <summary>
            Registers a component via an <see cref="T:IDS.ComponentModel.Containers.Pico.IComponentAdapter"/>. 
            </summary>
            <remarks>Use this if you need fine grained control over what ComponentAdapter
            to use for a specific component.</remarks>
            <param name="componentAdapter">the adapter to register</param>
            <returns>the passed in ComponentAdapter.</returns>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoRegistrationException">if the registration fails</exception>    
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IMutablePicoContainer.UnregisterComponent(System.Object)">
            <summary>
            Unregisters a component.</summary>
            <param name="componentKey">key of the component to unregister.</param>
            <returns>the associated ComponentAdapter.</returns>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IMutablePicoContainer.UnregisterComponentByInstance(System.Object)">
            <summary>
            Unregisters a component using the instance of the component.</summary>
            <param name="componentInstance">instance of the component to unregister.</param>
            <returns>the associated ComponentAdapter.</returns>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.IParameter">
            <summary>
            This class represents an argument to a constructor. </summary>
            <remarks>It can be used to
            have finer control over what arguments are passed to a particular constructor.</remarks>
            <see cref="M:IDS.ComponentModel.Containers.Pico.IMutablePicoContainer.RegisterComponentImplementation(System.Object,System.Type,IDS.ComponentModel.Containers.Pico.IParameter[])"/> a method on the 
            <see cref="T:IDS.ComponentModel.Containers.Pico.IMutablePicoContainer"/> interface which allows passing in of an array of <example>IParameter</example>s.
            <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.ComponentParameter"/> an implementation of this interface that allows you to specify the
            key used for resolving the parameter.
            <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.ConstantParameter"/> an implementation of this interface that allows you to specify a
            constant that will be used for resolving the parameter.
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IParameter.ResolveAdapter(IDS.ComponentModel.Containers.Pico.IPicoContainer,System.Type)">
            <summary>
            Method the value of the parameter to an object of the required type.
            </summary>
            <remarks>This method exist only to keep in sync with the java version of the PicoContainer. Primitive types in
            the .Net framework are objects, so no translation is required.</remarks>
            <param name="componentRegistry">picoContainer the container where dependencies are resolved from</param>
            <param name="expectedType">the expected (dependant) type</param>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoIntrospectionException"></exception>
            <returns>the component adapter that should be used to find the instance to be passed in for this parameter. <remarks>Should
            return <example>null</example> if not suitable adapter can be found.</remarks></returns>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.IPicoContainer">
            <summary>This is the core interface for PicoContainer. It only has accessor methods.</summary>
            <remarks>In order to register components in a PicoContainer, use a <see cref="T:IDS.ComponentModel.Containers.Pico.IMutablePicoContainer"/>,
            such as <see cref="T:IDS.ComponentModel.Containers.Pico.Defaults.DefaultPicoContainer"/>.</remarks>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IPicoContainer.GetComponentInstance(System.Object)">
            <summary>
            Retrieve a component instance registered with a specific key.
            </summary>
            <remarks>
            If a component cannot be found in this container,
            the parent container (if one exists) will be searched.
            </remarks>
            <param name="componentKey">the key the component was registered with.</param>
            <returns>an instantiated component, , or <example>null</example> if no component has been registered for the specified
            key.</returns>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IPicoContainer.GetComponentInstanceOfType(System.Type)">
            <summary>
            Finds a component instance matching the type, looking in parent if
            not found in self (unless parent is null).
            </summary>
            <param name="componentType">type of the compontent</param>
            <returns>the adapter matching the type</returns>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.IPicoContainer.ComponentInstances">
            <summary>
            Gets all the registered component instances in the container (not including 
            those in the parent container).</summary>
            <remarks>The components are returned in their order of instantiation, which
            depends on the dependency order between components.</remarks>
            <returns>all the components</returns>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.IPicoContainer.Parent">
            <summary>
            Get the parent of this container, or <example>null</example> if this container does not have a parent.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IPicoContainer.GetComponentAdapter(System.Object)">
            <summary>
            Finds a ComponentAdapter matching the key
            </summary>
            <remarks>If a component adapter cannot be found in this
            container, the parent container (if one exists) will be searched.</remarks>
            <param name="componentKey">key of the component</param>
            <returns>the component adapter associated with this key, or <example>null</example> if no component has been registered
            for the specified key.</returns>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IPicoContainer.GetComponentAdapterOfType(System.Type)">
            <summary>
            Finds a ComponentAdapter matching the type. 
            </summary>
            <remarks>If a component adapter cannot be found in this
            container, the parent container (if one exists) will be searched.</remarks>
            <param name="componentType">type of the component.</param>
            <returns>the component adapter associated with this class, or <example>null</example> if no component has been
            registered for the specified key.</returns>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.IPicoContainer.ComponentAdapters">
            <summary>
            Retrieve all the component adapters inside this container. 
            </summary>
            <remarks>The component adapters from the parent container are
            not returned.
            <see cref="M:IDS.ComponentModel.Containers.Pico.IPicoContainer.GetComponentAdaptersOfType(System.Type)"/> a variant of this method which returns the component adapters inside this
            container that are associated with the specified type.
            </remarks>
            <returns>List of <see cref="T:IDS.ComponentModel.Containers.Pico.IComponentAdapter"/> all the {@link ComponentAdapter}s inside this container. 
            The collection will be readonly.</returns>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IPicoContainer.GetComponentAdaptersOfType(System.Type)">
            <summary>
            Retrieve all the component adapters inside this container. 
            </summary>
            <remarks>The component adapters from the parent container are
            not returned.
            </remarks>
            <param name="componentType">type of the component</param>
            <returns>a collection containing all the {@link ComponentAdapter}s inside this container. The collection is readonly.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IPicoContainer.Verify">
            <summary>
            Verifies that the dependencies for all the registered components can be satisfied
            </summary>
            <remarks>None of the components are instantiated during the verification process.</remarks>
            <exception cref="T:IDS.ComponentModel.Containers.Pico.PicoVerificationException">if there are unsatisifiable dependencies.</exception>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IPicoContainer.AddOrderedComponentAdapter(IDS.ComponentModel.Containers.Pico.IComponentAdapter)">
            <summary>
            Callback method from the implementation to keep track of the instantiation
            order. 
            </summary>
            <remarks>This method is not intended to be called explicitly by clients of the API!</remarks>
            <param name="componentAdapter">the adapter</param>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.IStartable">
            <summary>
            An interface which is implemented by components that can be started and stopped. 
            </summary>
            <remarks>The <see cref="M:IDS.ComponentModel.Containers.Pico.IStartable.Start"/>
            must be called at the begin of the component lifecycle. It can be called again only after a call to
            <see cref="M:IDS.ComponentModel.Containers.Pico.IStartable.Stop"/>. The <see cref="M:IDS.ComponentModel.Containers.Pico.IStartable.Stop"/> method must be called at the end of the component lifecycle,
            and can further be called after every <see cref="M:IDS.ComponentModel.Containers.Pico.IStartable.Start"/>. If a component implements the <see cref="T:System.IDisposable"/>
            interface as well, <see cref="M:IDS.ComponentModel.Containers.Pico.IStartable.Stop"/> should be called before <see cref="M:System.IDisposable.Dispose"/>.</remarks>  
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IStartable.Start">
            <summary>
            Starts a component. 
            </summary>
            <remarks>Called initially at the begin of the lifecycle. It can be called again after a stop.</remarks>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.IStartable.Stop">
            <summary>
            Stop this component. 
            </summary>
            <remarks>Called near the end the lifecycle.
            It can be called again after a further start. Implement <see cref="T:System.IDisposable"/> if you need a single call at the definite end of the lifecycle.
            </remarks>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.PicoException">
            <summary>
            Superclass for all Exceptions in PicoContainer. 
            </summary>
            <remarks>
            You can use this if you want to catch all exceptions thrown by
            PicoContainer. Be aware that some parts of the PicoContainer API will also throw <see cref="T:System.NullReferenceException"/> when
            <example>null</example> values are provided for method arguments, and this is not allowed.
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoException"/> class.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a system-supplied message 
            that describes the error, such as "PicoContainer caused an exception." 
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoException"/> class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance using the message parameter.
            </remarks>
            <param name="ex">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoException"/> class with a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property of the 
            passed in exception. 
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoException"/> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous 
            exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference 
            (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="ex">The exception that caused the error</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoException"/> class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.
            </remarks>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized 
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination. </param>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.PicoInitializationException">
            <summary>
            Exception that is thrown when there is a problem initializing the container or some other
            part of the PicoContainer api, for example, when a cyclic dependency between components occurs.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoInitializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoInitializationException"/> class.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a system-supplied message 
            that describes the error, such as "Could not initialize the PicoContainer." 
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoInitializationException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoInitializationException"/> class with a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property of the 
            passed in exception. 
            </remarks>
            <param name="ex">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoInitializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoInitializationException"/> class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance using the message parameter.
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoInitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoInitializationException"/> class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="ex">The exception that caused the error</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoInitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.
            </remarks>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.PicoInstantiationException">
            <summary>
            Exception that is thrown when there is a problem creating an instance of a container or some
            other part of the PicoContainer api, for example, when an invocation through the reflection api fails.  
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoInstantiationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoInstantiationException"/> class.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a system-supplied message 
            that describes the error, such as "PicoContainer caused an exception." 
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoInstantiationException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoInstantiationException"/> class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance using the message parameter.
            </remarks>
            <param name="ex">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoInstantiationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoInstantiationException"/> class with a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property of the 
            passed in exception. 
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoInstantiationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoInstantiationException"/> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous 
            exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference 
            (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="ex">The exception that caused the error</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoInstantiationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoInstantiationException"/> class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.
            </remarks>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized 
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination. </param>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.PicoIntrospectionException">
            <summary>
            Exception that is thrown when there is a problem creating, providing or locating a component
            instance or a part of the PicoContainer API, for example, when a request for a component is ambiguous.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoIntrospectionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoIntrospectionException"/> class.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a system-supplied message 
            that describes the error, such as "PicoContainer caused an exception." 
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoIntrospectionException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoIntrospectionException"/> class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance using the message parameter.
            </remarks>
            <param name="ex">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoIntrospectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoIntrospectionException"/> class with a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property of the 
            passed in exception. 
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoIntrospectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoIntrospectionException"/> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous 
            exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference 
            (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="ex">The exception that caused the error</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoIntrospectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoIntrospectionException"/> class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.
            </remarks>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized 
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination. </param>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.PicoRegistrationException">
            <summary>
            Exception that is thrown when there is a problem registering a component with the container
            or another part of the PicoContainer API, for example, when a request for a component is ambiguous.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoRegistrationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoRegistrationException"/> class.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a system-supplied message 
            that describes the error, such as "PicoContainer caused an exception." 
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoRegistrationException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoRegistrationException"/> class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance using the message parameter.
            </remarks>
            <param name="ex">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoRegistrationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoRegistrationException"/> class with a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property of the 
            passed in exception. 
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoRegistrationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoRegistrationException"/> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous 
            exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference 
            (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="ex">The exception that caused the error</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoRegistrationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoRegistrationException"/> class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.
            </remarks>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized 
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination. </param>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.PicoVerificationException">
            <summary>
            Exception that is thrown when there is a problem with the internal state of the container or
            another part of the PicoContainer API, for example when a needed dependency cannot be resolved.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoVerificationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoException"/> class.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a system-supplied message 
            that describes the error, such as "Verification of the conatainer failed." 
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoVerificationException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoException"/> class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance using the message parameter.
            </remarks>
            <param name="ex">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoVerificationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoException"/> class with a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property of the 
            passed in exception. 
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoVerificationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoException"/> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous 
            exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference 
            (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="ex">The exception that caused the error</param>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoVerificationException.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoException"/> class with a list of exceptions 
            that where thrown during the verification.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a system-supplied message 
            that describes the error, such as "Verification of the conatainer failed." 
            </remarks>
            <param name="nestedExceptions">a list of exceptions occurred during verification.</param>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.PicoVerificationException.NestedExceptions">
            <summary>
            Readonly property containing a list of exceptions thrown during the verification of the container.
            </summary>
            <remarks>
            Can be null (Nothing in VisualBasic).
            </remarks>
        </member>
        <member name="P:IDS.ComponentModel.Containers.Pico.PicoVerificationException.Message">
            <summary>
            Returns a string containing all errors occured during verification
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Containers.Pico.PicoVerificationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Containers.Pico.PicoException"/> class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.
            </remarks>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized 
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination. </param>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Utils.StringUtils">
            <summary>
            Summary description for StringUtils.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Containers.Pico.Utils.TypeUtils">
            <summary>
            Summary description for TypeUtls.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.CookieDataspaceMapping">
            <summary>
            The CookieDataspaceMapping class is used to map a dataspace to a cookie.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.CookieDataspaceMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CookieDataspaceMapping"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.CookieDataspaceMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CookieDataspaceMapping"/> class.
            </summary>
            <param name="value">The value which contains the name of the cookie and the value in the format cookiename=value.</param>
            <param name="dataspaceName">Name of the associated dataspace.</param>
        </member>
        <member name="M:IDS.ComponentModel.CookieDataspaceMapping.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CookieDataspaceMapping"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="dataspaceName">Name of the associated dataspace.</param>
        </member>
        <member name="M:IDS.ComponentModel.CookieDataspaceMapping.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.CookieDataspaceMapping"/> class.
            </summary>
            <param name="configNode">The config node.</param>
        </member>
        <member name="M:IDS.ComponentModel.CookieDataspaceMapping.Configure(System.Xml.XmlNode)">
            <summary>
            Configures this instance using the specified XML node.
            </summary>
            <param name="configNode">The XML node to configure this instance with.</param>
        </member>
        <member name="M:IDS.ComponentModel.CookieDataspaceMapping.IsApplicable">
            <summary>
            Determines whether this Dataspace instance is applicable to this request.
            </summary>
            <returns>
            	<c>true</c> if this instance is applicable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.CookieDataspaceMapping.IsCookieApplicable(System.String)">
            <summary>
            Determines whether the cookie is applicable to the specified cookie name.
            </summary>
            <param name="cookieName">Name of the cookie.</param>
            <returns>
            	<c>true</c> if the cookie is applicable to the specified cookie name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.CookieDataspaceMapping.IsCookieApplicable(System.Web.HttpContext,System.String)">
            <summary>
            Determines whether the cookie is applicable to the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="cookieName">Name of the cookie.</param>
            <returns>
            	<c>true</c> if the cookie is applicable to the specified context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:IDS.ComponentModel.CookieDataspaceMapping.Name">
            <summary>
            Gets or sets the name of this mapping.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:IDS.ComponentModel.CookieDataspaceMapping.IsCookieApplicable(System.Web.HttpCookie)">
            <summary>
            Determines whether the cookie is applicable to the specified cookie.
            </summary>
            <param name="cookie">The cookie to see if it is applicable.</param>
            <returns>
            	<c>true</c> if the cookie is applicable to the specified cookie; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.CurrentUserDetokenizingHandler">
            <summary>
            The CurrentUserDetokenizingHandler is a <see cref="T:IDS.ComponentModel.DetokenizingHandler"/> that supports the CurrentUser property.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.CurrentUserDetokenizingHandler.GetDetokenizingContainerForExpression(System.String,System.Object)">
            <summary>
            Gets the detokenizing container for the given expression.
            </summary>
            <param name="expression">The expression to check if it has a supported token.</param>
            <param name="currentContainer">The current detokenizing container.</param>
            <returns>
            Returns a <see cref="T:IDS.ComponentModel.DetokenizingHandlerData"/> with the appropriate data for the detokenizer if the
            handler supports the token. Otherwise, null is returned.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.Dataspace">
            <summary>
            The Dataspace class is a class for segmenting and classifying data into classes or categories. This is useful for
            segmenting the database.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.Dataspace.Empty">
            <summary>
            A readonly instance of the Dataspace class that represents an empty (or unassigned) dataspace.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Dataspace.Current">
            <summary>
            Gets and sets the Dataspace for the current thread. This value will never be null.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Dataspace.Parse(System.String)">
            <summary>
            Parses the specified dataspace string.
            </summary>
            <param name="dataspaceString">The dataspace string.</param>
            <returns>Returns a Dataspace instance from the associated property string.</returns>
        </member>
        <member name="P:IDS.ComponentModel.Dataspace.CurrentSiteName">
            <summary>
            Gets and sets the Current Site Name.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Dataspace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Dataspace"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Dataspace.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Dataspace"/> class.
            </summary>
            <param name="name">The name associated with the namespace.</param>
        </member>
        <member name="M:IDS.ComponentModel.Dataspace.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Dataspace"/> class.
            </summary>
            <param name="name">The name associated with the namespace.</param>
            <param name="isDefault">if set to <c>true</c> this dataspace is the default dataspace.</param>
        </member>
        <member name="M:IDS.ComponentModel.Dataspace.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Dataspace"/> class.
            </summary>
            <param name="configNode">The config node.</param>
        </member>
        <member name="M:IDS.ComponentModel.Dataspace.Configure(System.Xml.XmlNode)">
            <summary>
            Configures this instance using the specified XML node.
            </summary>
            <param name="configNode">The XML node to configure this instance with.</param>
        </member>
        <member name="P:IDS.ComponentModel.Dataspace.Name">
            <summary>
            The name of the Dataspace.
            </summary>
            <value>The name associated with this dataspace.</value>
        </member>
        <member name="P:IDS.ComponentModel.Dataspace.IsDefault">
            <summary>
            Gets a value indicating whether this instance is the default dataspace.
            </summary>
            <value>
            	<c>true</c> if this instance is the default dataspace; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.ComponentModel.Dataspace.Properties">
            <summary>
            Gets the properties associated with this dataspace.
            </summary>
            <value>The properties associated with this dataspace.</value>
        </member>
        <member name="M:IDS.ComponentModel.Dataspace.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.Dataspace.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.Dataspace.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.ComponentModel.Dataspace"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.ComponentModel.Dataspace"></see>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.Dataspace.ToLongString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.ComponentModel.Dataspace"></see> including
            all of the properties.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.ComponentModel.Dataspace"></see>.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.DataspaceDomainProxy">
            <summary>
            The DataspaceDomainProxy class is a MarshalByRef class that allows accessing
            and setting the Dataspace across AppDomain's.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.DataspaceDomainProxy.CurrentDataspace">
            <summary>
            Gets or sets the current dataspace.
            </summary>
            <value>The current dataspace.</value>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceDomainProxy.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"></see> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"></see> property.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/></PermissionSet>
        </member>
        <member name="T:IDS.ComponentModel.DataspaceCollection">
            <summary>
            The DataspacCollection class contains a collection of <see cref="T:IDS.ComponentModel.Dataspace"/> objects.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.DataspaceCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceCollection.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.DataspaceCollection"/> class.
            </summary>
            <param name="root">The root XML node.</param>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.DataspaceCollection"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceCollection.Configure(System.Xml.XmlNode)">
            <summary>
            Configures the specified root XML node.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceCollection.Add(IDS.ComponentModel.Dataspace)">
            <summary>
            Adds the specified dataspace to the collection.
            </summary>
            <param name="dataspace">The dataspace to add to the collection.</param>
        </member>
        <member name="T:IDS.ComponentModel.DataspaceDetokenizingHandler">
            <summary>
            The DataspaceDetokenizingHandler is a <see cref="T:IDS.ComponentModel.DetokenizingHandler"/> that supports the Dataspace property.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceDetokenizingHandler.GetDetokenizingContainerForExpression(System.String,System.Object)">
            <summary>
            Gets the detokenizing container for the given expression.
            </summary>
            <param name="expression">The expression to check if it has a supported token.</param>
            <param name="currentContainer">The current detokenizing container.</param>
            <returns>
            Returns a <see cref="T:IDS.ComponentModel.DetokenizingHandlerData"/> with the appropriate data for the detokenizer if the
            handler supports the token. Otherwise, null is returned.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.DataspaceManager">
            <summary>
            The DataspaceManager manages the dataspaces and the associated mappings.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.DataspaceManager.Default">
            <summary>
            Gets the default instance of the DataspaceManager.
            </summary>
            <value>The default instance of the DataspaceManager.</value>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.DataspaceManager"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceManager.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.DataspaceManager"/> class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceManager.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"></see> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"></see> property.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/></PermissionSet>
        </member>
        <member name="P:IDS.ComponentModel.DataspaceManager.DataspaceMappings">
            <summary>
            Gets or sets the dataspace mappings.
            </summary>
            <value>The dataspace mappings.</value>
        </member>
        <member name="P:IDS.ComponentModel.DataspaceManager.Dataspaces">
            <summary>
            Gets or sets the dataspaces.
            </summary>
            <value>The dataspaces.</value>
        </member>
        <member name="P:IDS.ComponentModel.DataspaceManager.DefaultDataspaceInitialized">
            <summary>
            A protected property to determine if the default dataspace has been initialized.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.DataspaceManager.DefaultDataSpace">
            <summary>
            Gets the default data space.
            </summary>
            <value>The default data space.</value>
        </member>
        <member name="P:IDS.ComponentModel.DataspaceManager.DefaultProperties">
            <summary>
            Gets or sets the default properties associated with the Dataspace Manager.
            </summary>
            <value>The default properties.</value>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceManager.GetDataspace(System.String)">
            <summary>
            Gets the dataspace of the associated name.
            </summary>
            <param name="name">Name of the dataspace.</param>
            <returns>Returns the dataspace with the given name. This method will always return a dataspace 
            even if a dataspace with that name wasn't defined.</returns>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceManager.Refresh">
            <summary>
            Refreshes this instance, if necessary.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.DataspaceManager.IsDirty">
            <summary>
            Gets a value indicating whether this <see cref="T:IDS.ComponentModel.DataspaceManager"/> is dirty.
            </summary>
            <value><c>true</c> if dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.ComponentModel.DataspaceManager.AutoRefresh">
            <summary>
            Gets or sets a value indicating whether the DataManager should automatically refresh the Dataspaces.
            </summary>
            <value><c>true</c> if [auto refresh]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.ComponentModel.DataspaceManager.AutoRefreshInterval">
            <summary>
            Gets or sets the auto refresh interval.
            </summary>
            <value>The auto refresh interval.</value>
        </member>
        <member name="P:IDS.ComponentModel.DataspaceManager.LastUpdate">
            <summary>
            Gets or sets the date and time of the last update.
            </summary>
            <value>The date and time of last update.</value>
        </member>
        <member name="T:IDS.ComponentModel.DataspaceMapping">
            <summary>
            The DataspaceMapping class contains the rules that determine how a Dataspace maps to a particular thread.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.DataspaceMapping.SiteName">
            <summary>SiteName for the Dataspace Mapping. </summary>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceMapping.DataspaceMappingFactory(System.Xml.XmlNode)">
            <summary>
            Creates the appropriate <see cref="T:IDS.ComponentModel.DataspaceMapping"/> instance based on the configuration XML.
            </summary>
            <param name="configNode">The configuration XML node.</param>
            <returns>Returns an instance of the DataspaceMapping class.</returns>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceMapping.DataspaceMappingFactory(System.String,System.String,System.String)">
            <summary>
            Creates the appropriate <see cref="T:IDS.ComponentModel.DataspaceMapping"/> instance based on the configuration XML.
            </summary>
            <param name="type">The type of dataspace mapping.</param>
            <param name="value">The value which is interpreted by the type of dataspace mapping.</param>
            <param name="dataspaceName">The name of the dataspace.</param>
            <returns>
            Returns an instance of the DataspaceMapping class.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.DataspaceMapping"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.DataspaceMapping"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="dataspaceName">Name of the associated dataspace.</param>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceMapping.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.DataspaceMapping"/> class.
            </summary>
            <param name="configNode">The config node.</param>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceMapping.Configure(System.Xml.XmlNode)">
            <summary>
            Configures this instance using the specified XML node.
            </summary>
            <param name="configNode">The XML node to configure this instance with.</param>
        </member>
        <member name="P:IDS.ComponentModel.DataspaceMapping.Value">
            <summary>
            Gets or sets the value associated with this mapping.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:IDS.ComponentModel.DataspaceMapping.DataspaceName">
            <summary>
            Gets or sets the Dataspace name associated with this mapping.
            </summary>
            <value>The dataspace name associated with this mapping.</value>
        </member>
        <member name="P:IDS.ComponentModel.DataspaceMapping.Dataspace">
            <summary>
            Gets or sets the Dataspace associated with this mapping.
            </summary>
            <value>The dataspace associated with this mapping.</value>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceMapping.IsApplicable">
            <summary>
            Determines whether this Dataspace instance is applicable to this request.
            </summary>
            <returns>
            	<c>true</c> if this instance is applicable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.DataspaceMappingCollection">
            <summary>
            The DataspaceMappingCollection class contains a collection of <see cref="T:IDS.ComponentModel.DataspaceMapping"/> objects.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceMappingCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.DataspaceMappingCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceMappingCollection.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.DataspaceMappingCollection"/> class.
            </summary>
            <param name="root">The root XML node.</param>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceMappingCollection.Configure(System.Xml.XmlNode)">
            <summary>
            Configures the specified root XML node.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceMappingCollection.GetMappedDataspace">
            <summary>
            Gets the mapped dataspace based on the associated mapping rules.
            </summary>
            <returns>Returns the mapped Dataspace or null if no map was found.</returns>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceMappingCollection.GetMappedDataspace(System.String@)">
            <summary>
            Gets the mapped dataspace based on the associated mapping rules.
            </summary>
            <param name="siteName">Outputs the sitename if the dataspace mapping has one</param>
            <returns>Returns the mapped Dataspace or null if no map was found.</returns>
        </member>
        <member name="T:IDS.ComponentModel.DataspaceMappingSectionHandler">
            <summary>
            The DataspaceMappingSectionHandler implements the IConfigurationSectionHandler interface for initializing Dataspace
            configuration.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.DataspaceMappingType">
            <summary>
            The DataspaceMappingType enumeration denotes the type of mapping used to map a request to a dataspace.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.DataspaceMappingType.HostHeader">
            <summary>
            The mapping is based on the ASP.NET Request host header value.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.DataspaceMappingType.IPMask">
            <summary>
            The mapping is based on an IP address mask.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.DataspaceMappingType.Cookie">
            <summary>
            The mapping is based on a cookie.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.DataspaceMappingType.RequestPath">
            <summary>
            The mapping is based on a portion of the ASP.NET Request path.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.DataspaceMappingType.AppPath">
            <summary>
            The mapping is based on a portion of the ASP.NET Application path.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.DataspaceMappingType.UrlRegEx">
            <summary>
            The mapping is based on a regular expression that matches against the full request URL.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.DataspaceSectionHandler">
            <summary>
            The DataspaceSectionHandler implements the IConfigurationSectionHandler interface for initializing the Dataspace
            configuration.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceSectionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.DataspaceSectionHandler"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.DataspaceSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent"></param>
            <param name="configContext">Configuration context object.</param>
            <param name="section"></param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:IDS.ComponentModel.DateTimeDetokenizingHandler">
            <summary>
            The DateTimeDetokenizingHandler is a <see cref="T:IDS.ComponentModel.DetokenizingHandler"/> that supports the Dataspace property.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.DateTimeDetokenizingHandler.GetDetokenizingContainerForExpression(System.String,System.Object)">
            <summary>
            Gets the detokenizing container for the given expression.
            </summary>
            <param name="expression">The expression to check if it has a supported token.</param>
            <param name="currentContainer">The current detokenizing container.</param>
            <returns>
            Returns a <see cref="T:IDS.ComponentModel.DetokenizingHandlerData"/> with the appropriate data for the detokenizer if the
            handler supports the token. Otherwise, null is returned.
            </returns>
        </member>
        <member name="P:IDS.ComponentModel.DateTimeDetokenizingHandler.DateTimeContainer.Now">
            <summary>
            Gets the current date and time.
            </summary>
            <value>The current date and time.</value>
        </member>
        <member name="P:IDS.ComponentModel.DateTimeDetokenizingHandler.DateTimeContainer.Today">
            <summary>
            Gets the current date.
            </summary>
            <value>The current date.</value>
        </member>
        <member name="P:IDS.ComponentModel.DateTimeDetokenizingHandler.DateTimeContainer.UtcNow">
            <summary>
            Gets the current date and time in UTC.
            </summary>
            <value>The current date and time in UTC.</value>
        </member>
        <member name="T:IDS.ComponentModel.DefinesDetokenizingHandlerAttribute">
            <summary>
             Indicates that assembly has types that implement <see cref="T:IDS.ComponentModel.DetokenizingHandler"/> and need to be registered.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.DelegatePropertyBinder">
            <summary>
            DelegatePropertyBinder - Allows you to
            specify a delegate or anonymous method
            to supply tokens.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.DelegatePropertyBinder.ValueGetter">
            <summary>
            The delegate that returns tokens.
            </summary>
            <param name="name">The name of the token requested</param>
            <param name="index">null for a property, an array for indexers</param>
            <param name="value">The return value</param>
            <param name="valueType">The type of the return value</param>
            <returns>true for success, false for token not supported</returns>
        </member>
        <member name="M:IDS.ComponentModel.DelegatePropertyBinder.#ctor(IDS.ComponentModel.DelegatePropertyBinder.ValueGetter)">
            <summary>
            Contstructor - initializes a new instance of the DelegatePropertyBinder class.
            </summary>
            <param name="getValue"></param>
        </member>
        <member name="M:IDS.ComponentModel.DelegatePropertyBinder.GetValue(System.String,System.Object[],System.Object@,System.Type@)">
            <summary>
            Gets the value of a specified property.
            </summary>
            <param name="name">
            The name of the property.
            </param>
            <param name="index">
            Optional index values for indexed properties.
            </param>
            <param name="value">
            Receives the value of the property.
            </param>
            <param name="valueType">
            Receives the type of the value, or if the value is <see langword="null" />,
            the type of the property.
            </param>
            <returns>
            <see langword="true" /> if the property value was successfully retrieved;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.DetokenizeFlags">
            <summary>
            Specifies flags that control how a string is detokenized.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.DetokenizeFlags.HtmlEncode">
            <summary>
            Automatically HTML-encodes all formatted values.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.DetokenizeFlags.Recursive">
            <summary>
            Recursively detokenizes all binding results.
            WARNING: Use this flag with caution. User input that contains tokens
            could expose sensitive information or inject script.
            </summary>
            <remarks>
            This flag is ignored when <see cref="F:IDS.ComponentModel.DetokenizeFlags.HtmlEncode" /> is specified.
            </remarks>
        </member>
        <member name="F:IDS.ComponentModel.DetokenizeFlags.JavaScriptEncode">
            <summary>
            Automatically encodes all formatted values using JavaScript
            character escape sequences so that the values can be safely embedded
            in single- or double-quoted string literals (but nowhere else).
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.DetokenizeFlags.UrlEncode">
            <summary>
            Automatically URL-encodes all formatted values.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.DetokenizingHandler">
            <summary>
            The DetokenizingHandler class is an abstract class for extending the <see cref="M:IDS.ComponentModel.ComponentHelper.Detokenize(System.Object,System.String)"/> method
            with additional tokens that aren't a member of the target container. The DetokenizingHandler allows subclassed instances to
            register themselves with the Detokenizer.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.DetokenizingHandler.RetrieveDetokenizingContainer">
            <summary>
            A delegate for retrieving the detokenizing container if the token is a match for the handler.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.DetokenizingHandler.Handlers">
            <summary>
            An internal static method that gets the collection of registered handlers.
            </summary>
            <value>The collection of handlers.</value>
        </member>
        <member name="M:IDS.ComponentModel.DetokenizingHandler.RegisterHandler(IDS.ComponentModel.DetokenizingHandler)">
            <summary>
            A static method that registers a handler. The prefer method to register a handler is through adding 
            the <see cref="T:IDS.ComponentModel.DefinesDetokenizingHandlerAttribute"/> assembly attribute.
            </summary>
            <param name="handler">The handler to register.</param>
            <remarks>If the handler with the same type is already registered, the registration request is ignored.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if handler argument is null.</exception>
        </member>
        <member name="M:IDS.ComponentModel.DetokenizingHandler.GetDetokenizingContainerForExpression(System.String,System.Object)">
            <summary>
            Gets the detokenizing container for the given expression.
            </summary>
            <param name="expression">The expression to check if it has a supported token.</param>
            <param name="currentContainer">The current detokenizing container.</param>
            <returns>Returns a <see cref="T:IDS.ComponentModel.DetokenizingHandlerData"/> with the appropriate data for the detokenizer if the
            handler supports the token. Otherwise, null is returned.</returns>
        </member>
        <member name="M:IDS.ComponentModel.DetokenizingHandler.GetDetokenizingDataForExpressionHelper(System.String,System.String,System.Object,IDS.ComponentModel.DetokenizingHandler.RetrieveDetokenizingContainer)">
            <summary>
            A protected static helper method for retrieving the <see cref="T:IDS.ComponentModel.DetokenizingHandlerData"/> instance for an expression.
            </summary>
            <param name="token">The token.</param>
            <param name="expression">The expression.</param>
            <param name="currentContainer">The current container.</param>
            <param name="retrieveDetokenizingContainer">The retrieve detokenizing container.</param>
            <returns>Returns null if the token is not the active token in the expression. Otherwise, an instance of the <see cref="T:IDS.ComponentModel.DetokenizingHandlerData"/> 
            class is returned containing the data for the detokenizer to use.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if either the token or expression arguments are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the token argument is empty.</exception>
        </member>
        <member name="M:IDS.ComponentModel.DetokenizingHandler.ContainerSupportsProperty(System.Object,System.String)">
            <summary>
            A protected static method to determine if a container supports the specific property.
            </summary>
            <param name="container">The container.</param>
            <param name="propertyName">Name of the property to see if the container supports.</param>
            <returns>Returns true if the container supports the property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if either the container or propertyName arguments are null.</exception>
        </member>
        <member name="T:IDS.ComponentModel.DetokenizingHandlerData">
            <summary>
            The DetokenizingData class is used to return a new expression and container for the detokenizer to use.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.DetokenizingHandlerData.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.DetokenizingHandlerData"/> class.
            </summary>
            <param name="container">The container to be used by the Detokenizer.</param>
            <param name="expression">The new expression to be used by the Detokenizer.</param>
        </member>
        <member name="P:IDS.ComponentModel.DetokenizingHandlerData.Container">
            <summary>
            Gets the container to be used by the Detokenizer.
            </summary>
            <value>The container to be used by the Detokenizer.</value>
        </member>
        <member name="P:IDS.ComponentModel.DetokenizingHandlerData.Expression">
            <summary>
            Gets the new expression to be used by the Detokenizer.
            </summary>
            <value>The expression to be used by the Detokenizer.</value>
        </member>
        <member name="T:IDS.ComponentModel.DocumentationAttribute">
            <summary>
            The DocumentationAttribute class allows documentation to be viewed
            when editing a module. The Docs tab will contain the HelpHtml.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.DocumentationAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="html"></param>
        </member>
        <member name="P:IDS.ComponentModel.DocumentationAttribute.Html">
            <summary>
            The documentation in HTML format.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.EnvironmentDetokenizingHandler">
            <summary>
            Adds support for <see cref="T:System.Environment"/> property.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.EnvironmentDetokenizingHandler.GetDetokenizingContainerForExpression(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:IDS.ComponentModel.Event">
            <summary>
            The Event class is an abstract base class that all events must inherit from.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Event.#ctor">
            <summary>
            Creates an instance of the Event class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Event.#ctor(System.DateTime)">
            <summary>
            Creates an instance of the Event class.
            </summary>
            <param name="eventDateTime">The date and time of the event.</param>
        </member>
        <member name="M:IDS.ComponentModel.Event.#ctor(System.DateTime,System.Web.HttpContext,System.String)">
            <summary>
            Creates an instance of the Event class.
            </summary>
            <param name="eventDateTime">The date and time of the event.</param>
            <param name="httpContext">The HttpContext if this is a web request.</param>
            <param name="userIPAddress">The user's IP address.</param>
        </member>
        <member name="M:IDS.ComponentModel.Event.#ctor(System.DateTime,System.Web.HttpContext,System.String,IDS.ComponentModel.Dataspace)">
            <summary>
            Creates an instance of the Event class.
            </summary>
            <param name="eventDateTime">The date and time of the event.</param>
            <param name="httpContext">The HttpContext if this is a web request.</param>
            <param name="userIPAddress">The user's IP address.</param>
            <param name="dataspace">The dataspace associated with this event.</param>
        </member>
        <member name="P:IDS.ComponentModel.Event.EventDateTime">
            <summary>
            Gets the date and time of the event.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Event.HttpContext">
            <summary>
            Gets the HttpContext associated with this Event. This value can be null if the request
            isn't a web request.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Event.UserIPAddress">
            <summary>
            Gets the IP address of the user that initiated this event.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Event.Dataspace">
            <summary>
            Gets the dataspace.
            </summary>
            <value>The dataspace.</value>
        </member>
        <member name="T:IDS.ComponentModel.EventDispatcher">
            <summary>
            The EventDispatcher implements an event dispatcher service.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.EventDispatcher.registeredListeners">
            <summary>
            A protected field that contains the EventListeners registered with this EventDispatcher.
            </summary>
        </member>
        <member name="F:IDS.ComponentModel.EventDispatcher.registeredEvents">
            <summary>
            A protected field that contains the events registered with this EventDispatcher.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.EventDispatcher.CurrentInstance">
            <summary>
            Gets the current instance of the event dispatcher or null if one hasn't been set.
            </summary>
            <value>The current instance of the event dispatcher or null if one hasn't been set.</value>
        </member>
        <member name="M:IDS.ComponentModel.EventDispatcher.RegisterListener(IDS.ComponentModel.IEventListener)">
            <summary>
            Registers a IEventListener instance with the event dispatcher.
            </summary>
            <param name="eventListener">The IEventListener to register.</param>
        </member>
        <member name="M:IDS.ComponentModel.EventDispatcher.UnregisterListener(IDS.ComponentModel.IEventListener)">
            <summary>
            Unregisters a IEventListener instance with the event dispatcher.
            </summary>
            <param name="eventListener">The IEventListener to unregister.</param>
        </member>
        <member name="M:IDS.ComponentModel.EventDispatcher.RaiseEvent(IDS.ComponentModel.Event)">
            <summary>
            Ask the event dispatcher to raise the event to the registered listeners.
            </summary>
            <param name="eventToRaise">The event to pass to the registered event listeners.</param>
        </member>
        <member name="P:IDS.ComponentModel.EventDispatcher.EventsPending">
            <summary>
            Get a boolean value that determines whether any events are still pending.
            This value should be checked before terminating the program.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.EventDispatcher.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.EventDispatcher.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:IDS.ComponentModel.EventListenerCollection">
            <summary>
            Implements a strongly typed collection of <see cref="T:IDS.ComponentModel.IEventListener"/> elements.
            </summary>
            <remarks><para>
            <b>EventListenerCollection</b> provides an <see cref="T:System.Collections.ArrayList"/>
            that is strongly typed for <see cref="T:IDS.ComponentModel.IEventListener"/> elements.
            </para></remarks>
        </member>
        <member name="M:IDS.ComponentModel.EventListenerCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.EventListenerCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.EventListenerCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.ComponentModel.IEventListener})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.EventListenerCollection"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.ComponentModel.EventListenerCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.EventListenerCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="T:IDS.ComponentModel.Events.AchFailedNotificationEvent">
            <summary>
            AchFailedNotificationEvent
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Events.AchFailedNotificationEvent.#ctor(IDS.Security.IUser,System.Object)">
            <summary>
            Creates an instance of the ChangePasswordSuccessfulEvent class.
            </summary>
            <param name="user">The user who changed their password.</param>
            <param name="dataObject">The value of the Object</param>
        </member>
        <member name="P:IDS.ComponentModel.Events.AchFailedNotificationEvent.DataObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.AchFailedNotificationEvent.User">
            <summary>
            The IUser associated with the event.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.AchFailedNotificationEvent.UserID">
            <summary>
            UserID
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Events.ChangeEmailEvent">
            <summary>
            The ChangeEmailEvent class is used to designate that the user changed the email
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Events.ChangeEmailEvent.#ctor(IDS.Security.IUser,System.String,System.String)">
            <summary>
            Creates an instance of the ChangeEmailEvent class.
            </summary>
            <param name="user">The user of the changed email address.</param>
            <param name="oldEmailAddress">The email address prior to the change.</param>
            <param name="newEmailAddress">The email address after the change.</param>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangeEmailEvent.User">
            <summary>
            The user of the changed email address.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangeEmailEvent.OldEmailAddress">
            <summary>
            The email address prior to the change.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangeEmailEvent.NewEmailAddress">
            <summary>
            The email address after the change.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Events.ChangeLoginNameEvent">
            <summary>
            The ChangeLoginNameEvent class is used to designate that the user changed their login name.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Events.ChangeLoginNameEvent.#ctor(IDS.Security.IUser,System.String,System.String)">
            <summary>
            Creates an instance of the ChangeLoginNameEvent class.
            </summary>
            <param name="user">The user of the changed login name.</param>
            <param name="oldLoginName">The login name prior to the change.</param>
            <param name="newLoginName">The login name after the change.</param>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangeLoginNameEvent.User">
            <summary>
            The user whose login name was changed
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangeLoginNameEvent.UserID">
            <summary>
            The UserID of the user whose login name was changed
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangeLoginNameEvent.OldLoginName">
            <summary>
            The login name prior to the change.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangeLoginNameEvent.NewLoginName">
            <summary>
            The login name after the change.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Events.ChangePasswordAttemptFailedEvent">
            <summary>
            The ChangePasswordAttemptFailedEvent class is used to designate that the user attempted to change 
            the password but it was unsuccessful.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Events.ChangePasswordAttemptFailedEvent.#ctor(IDS.Security.IUser,System.String)">
            <summary>
            Creates an instance of the ChangePasswordAttemptFailedEvent class.
            </summary>
            <param name="user">The user who attempted to change their password.</param>
            <param name="failureReason">The failure reason.</param>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangePasswordAttemptFailedEvent.User">
            <summary>
            Get the user who attempted to change their password.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangePasswordAttemptFailedEvent.FailureReason">
            <summary>
            Get the reason the password change failed.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Events.ChangePasswordSuccessfulEvent">
            <summary>
            The ChangePasswordSuccessfulEvent class is used to designate the password was changed successfully.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Events.ChangePasswordSuccessfulEvent.#ctor(IDS.Security.IUser)">
            <summary>
            Creates an instance of the ChangePasswordSuccessfulEvent class.
            </summary>
            <param name="user">The user who changed their password.</param>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangePasswordSuccessfulEvent.User">
            <summary>
            The user who changed their password.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangePasswordSuccessfulEvent.UserID">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangePasswordSuccessfulEvent.ChangedByUser">
            <summary>
            Gets or sets the user who is authorizing the change. Should be supplied
            </summary>
            <value>The user authorizing the change.</value>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangePasswordSuccessfulEvent.PasswordValidityPeriod">
            <summary>
            Gets or sets the length of time that the new password is valid before it expires.
            </summary>
            <value>
            A <see cref="T:System.TimeSpan" /> that represents the length of time that the new password is valid,
            or <see cref="F:System.TimeSpan.Zero" /> if the new password never expires. The default is <see cref="F:System.TimeSpan.Zero" />.
            </value>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangePasswordSuccessfulEvent.ChangeMadeByDifferentUser">
            <summary>
            Gets a value indicating whether [change made by different user].
            Requires AuthorizingUser to be set
            </summary>
            <value>
            	<c>true</c> if [change made by different user]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IDS.ComponentModel.Events.ChangePreferredCultureEvent">
            <summary>
            The ChangePreferredCultureEvent class is used to designate that the user changed their preferred culture.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Events.ChangePreferredCultureEvent.#ctor(IDS.Security.IUser,System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Creates an instance of the ChangePreferredCultureEvent class.
            </summary>
            <param name="user">The user of the changed preferred culture.</param>
            <param name="oldCultureInfo">The preferred culture prior to the change.</param>
            <param name="newCultureInfo">The preferred culture after the change.</param>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangePreferredCultureEvent.User">
            <summary>
            The user of the changed email address.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangePreferredCultureEvent.OldCultureInfo">
            <summary>
            The login name prior to the change.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.ChangePreferredCultureEvent.NewCultureInfo">
            <summary>
            The login name after the change.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Events.ConfirmEmailEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.ConfirmEmailEvent.User">
            <summary>
            Used when a user's changes their email address with confirmation turned on
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.ConfirmEmailEvent.NewEmailAddress">
            <summary>
            New email address to change too
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.ConfirmEmailEvent.ConfirmationUrl">
            <summary>
            Page to visit to confirm new email
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Events.ConfirmEmailEvent.#ctor(IDS.Security.IUser,System.String,System.String)">
            <summary>
            Creates an instance of the UpdateUserEvent class.
            </summary>
            <param name="user">The user of the changed email address.</param>
            <param name="newEmail">The user's new email address</param>
            <param name="confirmationUrl">Page to visit to confirm new email</param>
        </member>
        <member name="T:IDS.ComponentModel.Events.DeleteUserEvent">
            <summary>
            Occurs when a user is deleted.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Events.DeleteUserEvent.#ctor(IDS.Security.IUser)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.Events.DeleteUserEvent" /> class.
            </summary>
            <param name="user">The user who is being deleted.</param>
        </member>
        <member name="P:IDS.ComponentModel.Events.DeleteUserEvent.User">
            <summary>
            Gets the user who is being deleted.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Events.LoginFailedEvent">
            <summary>
            The LoginFailedEvent class is used to designate that the attempt to login was unsuccessful.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Events.LoginFailedEvent.#ctor(IDS.Security.ICredentials)">
            <summary>
            Creates an instance of the LoginFailedEvent class.
            </summary>
            <param name="credentials">The credentials that were used to try and login.</param>
        </member>
        <member name="M:IDS.ComponentModel.Events.LoginFailedEvent.#ctor(IDS.Security.ICredentials,IDS.Security.IUserProvider)">
            <summary>
            Creates an instance of the LoginFailed class
            </summary>
            <param name="credentials">The credentials that were used to try and login.</param>
            <param name="userProvider">The <see cref="T:IDS.Security.IUserProvider"/> against which the credentials failed to authenticate</param>
        </member>
        <member name="P:IDS.ComponentModel.Events.LoginFailedEvent.Credentials">
            <summary>
            The credentials that were used to try and login.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.LoginFailedEvent.UserProvider">
            <summary>
            The <see cref="T:IDS.Security.IUserProvider"/> against which the credentials failed to authenticate (optional).
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Events.LoginSuccessfulEvent">
            <summary>
            The LoginSuccessfulEvent class is used to designate that the attempt to login was successful.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Events.LoginSuccessfulEvent.#ctor(IDS.Security.IUser)">
            <summary>
            Creates an instance of the LoginSuccessfulEvent class.
            </summary>
            <param name="user">The user who successfully logged in.</param>
        </member>
        <member name="P:IDS.ComponentModel.Events.LoginSuccessfulEvent.User">
            <summary>
            Gets the user who successfully logged in.
            </summary>
            <value>The user who successfully logged in.</value>
        </member>
        <member name="T:IDS.ComponentModel.Events.LogoutEvent">
            <summary>
            The LogoutEvent class is used to designate that the user logged out.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Events.LogoutEvent.#ctor(IDS.Security.IUser)">
            <summary>
            Creates an instance of the LogoutEvent class.
            </summary>
            <param name="user">The user who logged out.</param>
        </member>
        <member name="P:IDS.ComponentModel.Events.LogoutEvent.User">
            <summary>
            The user who logged out.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:IDS.ComponentModel.Events.LogoutEvent.LogoutReason">
            <summary>
            The reason for logging out. This is typically populated by ToString-ing
            an instance of the LogoutReason class
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Events.RegistrationSuccessfulEmailEvent">
            <summary>
            The RegisterSuccessfulEvent class is used to send welcome email when user registered successfully.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Events.RegistrationSuccessfulEmailEvent.#ctor(IDS.Security.IUser,System.Globalization.CultureInfo)">
            <summary>
            Create an instance of the RegisterSuccessfulEvent class.
            </summary>
            <param name="user"></param>
            <param name="preferredCulture"></param>
        </member>
        <member name="P:IDS.ComponentModel.Events.RegistrationSuccessfulEmailEvent.User">
            <summary>
            Registered User
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.RegistrationSuccessfulEmailEvent.UserID">
            <summary>
            User ID of registered user.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.RegistrationSuccessfulEmailEvent.PreferredCulture">
            <summary>
            Gets the preferred culture.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Events.UserStatusChangedEvent">
            <summary>
            UserStatusChangedEvent Raised if a user's Unliniked/A2A Transfer or Login status is changed to "Locked" or "Disabled"  
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Events.UserStatusChangedEvent.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Events.UserStatusChangedEvent.#ctor(IDS.Security.IUser,System.String,System.String)">
            <summary>
            UserStatusChangedEvent
            </summary>
            <param name="user"></param>
            <param name="statusName"></param>
            <param name="statusValue"></param>
        </member>
        <member name="P:IDS.ComponentModel.Events.UserStatusChangedEvent.User">
            <summary>
            User
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.UserStatusChangedEvent.UserID">
            <summary>
            UserID
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.UserStatusChangedEvent.StatusName">
            <summary>
            Status Name
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.UserStatusChangedEvent.StatusValue">
            <summary>
            Status Value
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.Events.UpdateUserEvent">
            <summary>
            The UpdateUserEvent class is used to designate that the user information such as the address has been updated.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.Events.UpdateUserEvent.#ctor(IDS.Security.IUser)">
            <summary>
            Creates an instance of the UpdateUserEvent class.
            </summary>
            <param name="user">The user of the changed address.</param>
        </member>
        <member name="P:IDS.ComponentModel.Events.UpdateUserEvent.User">
            <summary>
            The user of the changed email address.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.Events.UpdateUserEvent.UserID">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.FileUploadContent">
            <summary>
            The FileUploadContent class encapsulates the information regarding a file that was uploaded.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.FileUploadContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.FileUploadContent"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.FileUploadContent.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.FileUploadContent"/> class.
            </summary>
            <param name="filename">FileName of the content.</param>
            <param name="contentType">Type of the content.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:IDS.ComponentModel.FileUploadContent.#ctor(System.String,System.String,System.Byte[],System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.FileUploadContent"/> class.
            </summary>
            <param name="filename">Filename of the content.</param>
            <param name="contentType">Type of the content.</param>
            <param name="content">The content.</param>
            <param name="lastModifiedDateTime">The last modified date time.</param>
        </member>
        <member name="M:IDS.ComponentModel.FileUploadContent.#ctor(System.Web.HttpPostedFile)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.FileUploadContent"/> class.
            </summary>
            <param name="postedFile">The posted file.</param>
        </member>
        <member name="P:IDS.ComponentModel.FileUploadContent.FileName">
            <summary>
            Gets or sets the file name.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:IDS.ComponentModel.FileUploadContent.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:IDS.ComponentModel.FileUploadContent.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:IDS.ComponentModel.FileUploadContent.LastModifiedDateTime">
            <summary>
            Gets or sets the last modified date time.
            </summary>
            <value>The last modified date time.</value>
        </member>
        <member name="M:IDS.ComponentModel.FileUploadContent.ToString">
            <summary>
            Returns a <see cref="T:IDS.ComponentModel.FileUploadContent"></see> that represents the current <see cref="T:IDS.ComponentModel.FileUploadContent"></see>.
            </summary>
            <returns>
            A <see cref="T:IDS.ComponentModel.FileUploadContent"></see> that represents the current <see cref="T:IDS.ComponentModel.FileUploadContent"></see>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.FileUploadContent.WriteContent(System.Web.HttpContext)">
            <summary>
            Writes the content to the specified HTTP context response object.
            </summary>
            <param name="context">The HTTP context object.</param>
        </member>
        <member name="P:IDS.ComponentModel.FileUploadContent.Stream">
            <summary>
            Gets the content as a stream.
            </summary>
            <value>A memory stream containing the content.</value>
        </member>
        <member name="M:IDS.ComponentModel.FileUploadContent.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>Returns a FileUploadContent object.</returns>
        </member>
        <member name="T:IDS.ComponentModel.HostHeaderDataspaceMapping">
            <summary>
            The HostHeaderDataspaceMapping class is used to map a dataspace to a host header.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.HostHeaderDataspaceMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.HostHeaderDataspaceMapping"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.HostHeaderDataspaceMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.HostHeaderDataspaceMapping"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="dataspaceName">Name of the associated dataspace.</param>
        </member>
        <member name="M:IDS.ComponentModel.HostHeaderDataspaceMapping.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.HostHeaderDataspaceMapping"/> class.
            </summary>
            <param name="configNode">The config node.</param>
        </member>
        <member name="M:IDS.ComponentModel.HostHeaderDataspaceMapping.IsApplicable">
            <summary>
            Determines whether this Dataspace instance is applicable to this request.
            </summary>
            <returns>
            	<c>true</c> if this instance is applicable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.IAsynchronousEventListener">
            <summary>
            The IAsynchronousEventListener interface is used by event listeners that 
            listen to events asynchonously.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.IAsynchronousEventListener.EventsPending">
            <summary>
            Returns true if events are pending.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.IComponentCollection">
            <summary>
            The IComponentCollection class is a collection class for containing components.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.IComponentCollection.DefaultItemType">
            <summary>
            Gets the type of the default item.
            </summary>
            <value>The type of the default item.</value>
        </member>
        <member name="P:IDS.ComponentModel.IComponentCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified component ID.
            </summary>
            <value></value>
        </member>
        <member name="M:IDS.ComponentModel.IComponentCollection.GetComponentID(System.Object)">
            <summary>
            Gets the component ID.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.IComponentCollection.RemoveByComponentID(System.String)">
            <summary>
            Removes the by component ID.
            </summary>
            <param name="componentID">The component ID.</param>
        </member>
        <member name="M:IDS.ComponentModel.IComponentCollection.Add(System.String,System.Object)">
            <summary>
            Adds the specified component ID.
            </summary>
            <param name="componentID">The component ID.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:IDS.ComponentModel.BaseComponentCollection">
            <summary>
            The BaseComponentCollection class is a base implementation of the IComponentCollection class which contains a collection of components.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.BaseComponentCollection.#ctor">
            <summary>
            Initializes a new BaseComponentCollection.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.BaseComponentCollection.#ctor(System.String)">
            <summary>
            Initializes a new BaseComponentCollection.
            </summary>
            <param name="idField">The property name from which to get the Component ID from items to be added to the collection.</param>
            <remarks>Specify the name of the property on the items in the collection that will return the item's component ID.</remarks>
        </member>
        <member name="M:IDS.ComponentModel.BaseComponentCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.BaseComponentCollection"/> class.
            </summary>
            <param name="defaultItemType">Type of the default item.</param>
        </member>
        <member name="M:IDS.ComponentModel.BaseComponentCollection.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.BaseComponentCollection"/> class.
            </summary>
            <param name="idField">The id field.</param>
            <param name="defaultItemType">Type of the default item.</param>
        </member>
        <member name="P:IDS.ComponentModel.BaseComponentCollection.ItemIndex">
            <summary>
            Gets the index of the item.
            </summary>
            <value>The index of the item.</value>
        </member>
        <member name="P:IDS.ComponentModel.BaseComponentCollection.DefaultItemType">
            <summary>
            Gets the type of the default item.
            </summary>
            <value>The type of the default item.</value>
        </member>
        <member name="P:IDS.ComponentModel.BaseComponentCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified component ID.
            </summary>
            <value></value>
        </member>
        <member name="M:IDS.ComponentModel.BaseComponentCollection.GetComponentID(System.Object)">
            <summary>
            Gets the component ID for the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>Returns the ID or null if not found.</returns>
        </member>
        <member name="M:IDS.ComponentModel.BaseComponentCollection.RemoveByComponentID(System.String)">
            <summary>
            Removes the by component ID.
            </summary>
            <param name="componentID">The component ID.</param>
        </member>
        <member name="M:IDS.ComponentModel.BaseComponentCollection.Add(System.String,System.Object)">
            <summary>
            Adds the specified component ID.
            </summary>
            <param name="componentID">The component ID.</param>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:IDS.ComponentModel.BaseComponentCollection.Add(System.Object)">
            <summary>
            Adds an object to the end of the <see cref="T:System.Collections.ArrayList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to be added to the end of the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
            <returns>
            The <see cref="T:System.Collections.ArrayList"></see> index at which the value has been added.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList"></see> is read-only.-or- The <see cref="T:System.Collections.ArrayList"></see> has a fixed size. </exception>
        </member>
        <member name="M:IDS.ComponentModel.BaseComponentCollection.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ArrayList"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList"></see> is read-only.-or- The <see cref="T:System.Collections.ArrayList"></see> has a fixed size. </exception>
        </member>
        <member name="M:IDS.ComponentModel.BaseComponentCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ArrayList"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"></see> to insert. The value can be null.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList"></see> is read-only.-or- The <see cref="T:System.Collections.ArrayList"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.-or- index is greater than <see cref="P:System.Collections.ArrayList.Count"></see>. </exception>
        </member>
        <member name="M:IDS.ComponentModel.BaseComponentCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.ArrayList"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList"></see> is read-only.-or- The <see cref="T:System.Collections.ArrayList"></see> has a fixed size. </exception>
        </member>
        <member name="M:IDS.ComponentModel.BaseComponentCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ArrayList"></see>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList"></see> is read-only.-or- The <see cref="T:System.Collections.ArrayList"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.-or- index is equal to or greater than <see cref="P:System.Collections.ArrayList.Count"></see>. </exception>
        </member>
        <member name="M:IDS.ComponentModel.BaseComponentCollection.ToList``1">
            <summary>
            Returns a new list containing the items in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:IDS.ComponentModel.IComponentEditor">
            <summary>
            The IComponentEditor interface is used to implement a custom component editor.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.IComponentEditor.Initialize(IDS.ComponentModel.IComponentEditor,System.Reflection.PropertyInfo,IDS.ComponentModel.ComponentSettingAttribute,IDS.ComponentModel.LocalizableAttribute[],IDS.ComponentModel.TokenizableAttribute[])">
            <summary>
            Initializes the specified parent editor.
            </summary>
            <param name="parentEditor">The parent editor.</param>
            <param name="property">The property.</param>
            <param name="csa">The associated component setting attribute.</param>
            <param name="las">The associated localizable attribute.</param>
            <param name="tas">The associated tokenizable attribute.</param>
        </member>
        <member name="M:IDS.ComponentModel.IComponentEditor.LoadSettings(IDS.ComponentModel.ComponentSettings)">
            <summary>
            Loads the component settings into the editor.
            </summary>
            <param name="settings">The settings instance to initialize the editor with.</param>
        </member>
        <member name="M:IDS.ComponentModel.IComponentEditor.SaveSettings(IDS.ComponentModel.ComponentSettings)">
            <summary>
            Saves the component settings from the editor.
            </summary>
            <param name="settings">The settings instance to put the settings into.</param>
        </member>
        <member name="P:IDS.ComponentModel.IComponentEditor.ComponentName">
            <summary>
            Gets or sets the name of the component.
            </summary>
            <value>The name of the component.</value>
        </member>
        <member name="P:IDS.ComponentModel.IComponentEditor.ComponentDescription">
            <summary>
            Gets or sets the component description.
            </summary>
            <value>The component description.</value>
        </member>
        <member name="P:IDS.ComponentModel.IComponentEditor.ComponentLocalized">
            <summary>
            Gets or sets a value indicating whether the component is localized.
            </summary>
            <value><c>true</c> if the component is localized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.ComponentModel.IComponentEditor.ComponentTokenized">
            <summary>
            Gets or sets a value indicating whether the component is tokenized.
            </summary>
            <value><c>true</c> if the component is tokenized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.ComponentModel.IComponentEditor.ComponentBindType">
            <summary>
            Gets or sets the type of the component bind.
            </summary>
            <value>The type of the component bind.</value>
        </member>
        <member name="P:IDS.ComponentModel.IComponentEditor.ComponentInputID">
            <summary>
            Gets or sets the component input ID.
            </summary>
            <value>The component input ID.</value>
        </member>
        <member name="T:IDS.ComponentModel.IComponentEditorParameterConsumer">
            <summary>
            The IComponentEditorParameterConsumer interface provides methods for loading parameters into a component editor.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.IComponentEditorParameterConsumer.LoadParameters(IDS.ComponentModel.ComponentSettingAttribute,System.String)">
            <summary>
            Loads the parameters into the component editor.
            </summary>
            <param name="csa">The component settings attribute.</param>
            <param name="parameters">The parameters to load.</param>
        </member>
        <member name="T:IDS.ComponentModel.ICultureAwareComponent">
            <summary>
            Indicates that a component's localizable properties are capable of
            accepting and returning different values depending on the current culture.
            </summary>
            <remarks>
            If a localizable well-known component implements this interface,
            Portal will instantiate a single instance of the component and
            use it for all supported cultures. Otherwise, Portal will instantiate
            multiple instances of the component, one per supported culture.
            </remarks>
        </member>
        <member name="T:IDS.ComponentModel.ICustomPropertyBinder">
            <summary>
            Customizes the behavior of the ComponentHelper.GetPropertyInfo method.
            </summary>
            <remarks>
            A class implements this interface to expose synthesized properties
            not declared on the class itself.
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.ICustomPropertyBinder.GetValue(System.String,System.Object[],System.Object@,System.Type@)">
            <summary>
            Gets the value of a specified property.
            </summary>
            <param name="name">
            The name of the property.
            </param>
            <param name="index">
            Optional index values for indexed properties.
            </param>
            <param name="value">
            Receives the value of the property.
            </param>
            <param name="valueType">
            Receives the type of the value, or if the value is <see langword="null" />,
            the type of the property.
            </param>
            <returns>
            <see langword="true" /> if the property value was successfully retrieved;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.StaticPropertyBinder">
            <summary>
            Allows the ComponentHelper.GetPropertyInfo method to access static properties
            of a specified class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.StaticPropertyBinder.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.StaticPropertyBinder" /> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type" /> of the class whose static properties are to be accessed.
            </param>
        </member>
        <member name="M:IDS.ComponentModel.StaticPropertyBinder.GetValue(System.String,System.Object[],System.Object@,System.Type@)">
            <summary>
            Gets the value of a specified property.
            </summary>
            <param name="name">
            The name of the property.
            </param>
            <param name="index">
            Optional index values for indexed properties.
            </param>
            <param name="value">
            Receives the value of the property.
            </param>
            <param name="valueType">
            Receives the type of the value, or if the value is <see langword="null" />,
            the type of the property.
            </param>
            <returns>
            <see langword="true" /> if the property value was successfully retrieved;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.IEventDispatcherConsumer">
            <summary>
            The IEventDispatcherConsumer interface is used for marking a service as a cunsumer of the event dispatcher.
            Services that are marked with this interface will have their EventDispatcher property automatically set.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.IEventDispatcherConsumer.EventDispatcher">
            <summary>
            Gets or sets the event dispatcher service.
            </summary>
            <value>The event dispatcher service.</value>
        </member>
        <member name="T:IDS.ComponentModel.IEventListener">
            <summary>
            The IEventListener interface is used for implementing listeners that can consume events.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.IEventListener.GetRegisteredEvents">
            <summary>
            The GetRegisteredEvents method returns a list of Event types that it knows how to consume.
            </summary>
            <returns>Returns an array of Event types.</returns>
        </member>
        <member name="M:IDS.ComponentModel.IEventListener.NotifyEvent(IDS.ComponentModel.Event)">
            <summary>
            Notify the listener of an event.
            </summary>
            <param name="eventToNotify">The event to notify the listeners about.</param>
        </member>
        <member name="T:IDS.ComponentModel.IInitializableComponent">
            <summary>
            Allows a component to be notified when all of its component settings have been initialized.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.IInitializableComponent.OnComponentInitialized">
            <summary>
            Notifies the component that all of its component settings have been initialized.
            </summary>
            <exception cref="T:IDS.ComponentModel.InvalidComponentSettingException">
            At least one component setting has an invalid value.
            </exception>
        </member>
        <member name="T:IDS.ComponentModel.IInitializableService">
            <summary>
            Implements a service which can initialize or update dependencies on initialization of itself or all the services
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.IInitializableService.OnInit">
            <summary>
            Called right after the service is initialized.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.IInitializableService.OnInitAllServices">
            <summary>
            Called after all the services are initialized.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.ILocalizableComponent">
            <summary>
            When implemented by a class, indicates that the component may have culture-specific values, properties, or behavior.
            </summary>
            <remarks>
            Use in conjunction with <see cref="T:IDS.ComponentModel.LocalizableAttribute"/> and the <see cref="T:IDS.ComponentModel.ComponentHelper"/>. If you wish to load culture-specific
            values manually rather than rely on the ComponentHelper, implement <see cref="T:IDS.ComponentModel.ILocalizableHandler"/> as well.
            </remarks>
        </member>
        <member name="T:IDS.ComponentModel.ILocalizableHandler">
            <summary>
            When implemented by a class, its LoadLanguageDefaults method will be called during initialization of culture-specific values.
            </summary>
            <remarks>
            This is only useful if special handling is required. Components that don't implement ILocalizableHandler will have their properties
            set automatically, provided they implement the ILocalizableComponent interface.
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.ILocalizableHandler.LoadLanguageDefaults(System.Globalization.CultureInfo)">
            <summary>
            Loads the language defaults.
            </summary>
            <param name="culture">The culture.</param>
        </member>
        <member name="T:IDS.ComponentModel.InvalidComponentSettingException">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.InvalidComponentSettingException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:IDS.ComponentModel.IPAddressDataspaceMapping">
            <summary>
            The IPAddressDataspaceMapping class is used to map a dataspace to an IP address
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.IPAddressDataspaceMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.IPAddressDataspaceMapping"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.IPAddressDataspaceMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.IPAddressDataspaceMapping"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="dataspaceName">Name of the associated dataspace.</param>
        </member>
        <member name="M:IDS.ComponentModel.IPAddressDataspaceMapping.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.IPAddressDataspaceMapping"/> class.
            </summary>
            <param name="configNode">The config node.</param>
        </member>
        <member name="M:IDS.ComponentModel.IPAddressDataspaceMapping.IsApplicable">
            <summary>
            Determines whether this Dataspace instance is applicable to this request.
            </summary>
            <returns>
            	<c>true</c> if this instance is applicable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.IPAddressDataspaceMapping.IsIPAddressApplicable(System.String)">
            <summary>
            Determines whether the IP address is applicable based on the specified IP address string.
            </summary>
            <param name="ipAddressString">The ip address string.</param>
            <returns>
            	<c>true</c> if the IP address is applicable based on the specified IP address string; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.IPAddressDataspaceMapping.IsIPAddressApplicable(System.Net.IPAddress)">
            <summary>
            Determines whether the IP address is applicable based on the specified IP address.
            </summary>
            <param name="address">The IP address.</param>
            <returns>
            	<c>true</c> if the IP address is applicable based on the specified IP address; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.IReferenceIdManager">
            <summary>
            Interface injected into generated subclasses for portal services
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.IReferenceIdManager.GeneratedSetId(System.String)">
            <summary>
            Method to set id (service instance ID)
            </summary>
            <param name="suppliedId"></param>
        </member>
        <member name="M:IDS.ComponentModel.IReferenceIdManager.GeneratedGetId">
            <summary>
            Method to get Service Instance ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.ComponentModel.ISettingsConsumer">
            <summary>
            The ISettingsComsumer interface is part of the ComponentSettings model. Use this interface if you want your instance to manually
            load the Component settings.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ISettingsConsumer.LoadSettings(IDS.ComponentModel.ComponentSettings,System.Globalization.CultureInfo)">
            <summary>
            Loads the Component settings.
            </summary>
            <param name="settings">The Component settings.</param>
            <param name="culture">The culture of the Component settings.</param>
        </member>
        <member name="T:IDS.ComponentModel.ITokenBindingContainerService">
            <summary>
            The ITokenBindingContainerService is an interface for implementing a service that returns a TokenBindingContainer
            instance.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ITokenBindingContainerService.GetTokenBindingContainer(System.Object)">
            <summary>
            A method to get the token binding container from the service.
            </summary>
            <param name="requester">The instance of the object requesting the token binding container. 
            This value can be null. The use of this parameter by the service is optional and how it is used
            is defined by the implementation of the service.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.ComponentModel.LocalizableAttribute">
            <summary>
            This attribute declares a component property to be Localized. That will enable the property to have different defaults for different cultures.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.LocalizableAttribute.#ctor">
            <summary>
            Creates the default instance of this type.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.LocalizableAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of this type, setting the DefaultValueBaseResourceName property.
            </summary>
            <param name="defaultValueBaseResourceName">The default value base resource name.</param>
        </member>
        <member name="M:IDS.ComponentModel.LocalizableAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of this type, setting the DefaultValueBaseResourceName property and the
            DefaultValueKey property.
            </summary>
            <param name="defaultValueBaseResourceName">The default value base resource name.</param>
            <param name="defaultValueKey">
            The default value key in the resource file identified by the defaultValueBaseResourceName value.
            </param>
        </member>
        <member name="P:IDS.ComponentModel.LocalizableAttribute.DefaultValueBaseResourceName">
            <summary>
            The base name of the resource file that contains the default value for the property decorated by
            this attribute.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.LocalizableAttribute.DefaultValueKey">
            <summary>
            The key of the default value in the resource file identified by the DefaultValueBaseResourceName property.
            If blank, the property name will be used as the key.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.LocalizableAttribute.Property">
            <summary>
            Gets or sets the subproperty of the component property which is localized.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.RegisteredEvent">
            <summary>
            The RegisteredEvent class is used to track the relationship between events and 
            event listeners and used to notify those listeners when an event has been raised.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.RegisteredEvent.#ctor(System.Type)">
            <summary>
            Create an instance of the RegisteredEvent class.
            </summary>
            <param name="eventType"></param>
        </member>
        <member name="P:IDS.ComponentModel.RegisteredEvent.EventType">
            <summary>
            The Event type that is associated with this registered event.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.RegisteredEvent.AsyncListeners">
            <summary>
            A protected virtual property to get the registered asynchronous listeners.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.RegisteredEvent.SyncListeners">
            <summary>
            A protected virtual property to get the registered synchronous listeners.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.RegisteredEvent.RegisterListener(IDS.ComponentModel.IEventListener)">
            <summary>
            This method registers an event listener for this event.
            </summary>
            <param name="eventListener">The event listener to register.</param>
        </member>
        <member name="M:IDS.ComponentModel.RegisteredEvent.UnregisterListener(IDS.ComponentModel.IEventListener)">
            <summary>
            This method unregisters an event listener from this event.
            </summary>
            <param name="eventListener">The event listener to unregister.</param>
        </member>
        <member name="M:IDS.ComponentModel.RegisteredEvent.RaiseEvent(IDS.ComponentModel.Event)">
            <summary>
            Raise the event and notify all of the registered listeners of the event.
            </summary>
            <param name="eventToRaise">The event to raise.</param>
        </member>
        <member name="T:IDS.ComponentModel.RegisteredEventCollection">
            <summary>
            Implements a strongly typed collection of <see cref="T:IDS.ComponentModel.RegisteredEvent"/> elements.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.RegisteredEventCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.RegisteredEventCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.RegisteredEventCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.ComponentModel.RegisteredEvent})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.RegisteredEventCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.ComponentModel.RegisteredEventCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.RegisteredEventCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="P:IDS.ComponentModel.RegisteredEventCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:IDS.ComponentModel.RegisteredEventCollection.Item(System.Type)">
            <summary>
            Gets the <see cref="T:IDS.ComponentModel.RegisteredEvent"/> with the specified event type.
            </summary>
            <value></value>
        </member>
        <member name="T:IDS.ComponentModel.RequestPathDataspaceMapping">
            <summary>
            The RequestPathDataspaceMapping class is used to map a dataspace to a request path.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.RequestPathDataspaceMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.RequestPathDataspaceMapping"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.RequestPathDataspaceMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.RequestPathDataspaceMapping"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="dataspaceName">Name of the associated dataspace.</param>
        </member>
        <member name="M:IDS.ComponentModel.RequestPathDataspaceMapping.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.RequestPathDataspaceMapping"/> class.
            </summary>
            <param name="configNode">The config node.</param>
        </member>
        <member name="M:IDS.ComponentModel.RequestPathDataspaceMapping.IsApplicable">
            <summary>
            Determines whether this Dataspace instance is applicable to this request.
            </summary>
            <returns>
            	<c>true</c> if this instance is applicable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.RequestPathDataspaceMapping.IsRequestPathApplicable(System.Web.HttpContext)">
            <summary>
            Determines whether the request path is applicable for the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>
            	<c>true</c> if the request path is applicable for the specified context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.SerializeAsTypeAttribute">
            <summary>
            Specifies the value of the "Type" attribute that should be serialized for a component setting property.
            </summary>
            <remarks>
            The <see cref="T:IDS.ComponentModel.ComponentSettings" /> class serializes an extra "Type" attribute containing
            the actual type of the property value if the actual type differs from the declared type of the property.
            Apply this attribute to replace the actual type with a base type.
            </remarks>
        </member>
        <member name="M:IDS.ComponentModel.SerializeAsTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.SerializeAsTypeAttribute" /> class.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.SerializeAsTypeAttribute.SerializationType">
            <summary>
            The value of the "Type" attribute that should be serialized.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.SerializeAsTypeAttribute.GetSerializationType(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.ServicesDetokenizingHandler">
            <summary>
            A <see cref="T:IDS.ComponentModel.DetokenizingHandler"/> that allows you to bind to properties on Services
            Usage: Services.Item[&lt;service name&gt;].&lt;PropertyOnService&gt;
            Example: {*Services.Item[Account Selector Service].FilteredAccounts::&lt;asp:ListItem value="{AccountID}"&gt;{MaskedInstitutionAccountNumber} - {Nickname}&lt;/asp:ListItem&gt;}
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.ServicesDetokenizingHandler.GetDetokenizingContainerForExpression(System.String,System.Object)">
            <summary>
            Gets the detokenizing container for the given expression.
            </summary>
            <param name="expression">The expression to check if it has a supported token.</param>
            <param name="currentContainer">The current detokenizing container.</param>
            <returns>
            Returns a <see cref="T:IDS.ComponentModel.DetokenizingHandlerData"/> with the appropriate data for the detokenizer if the
            handler supports the token. Otherwise, null is returned.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.ServicesIndexer">
            <summary>
            Allows indexing of the current schemes Portal services
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.ServicesIndexer.Item(System.String)">
            <summary>
            Index by service name
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.ComponentModel.SqlDataspaceManager">
            <summary>
            The SqlDataspaceManager is an implementation of a <see cref="T:IDS.ComponentModel.DataspaceManager"/> that reads the
            dataspace configuration from SQL.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.SqlDataspaceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.DataspaceManager"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.SqlDataspaceManager.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.DataspaceManager"/> class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:IDS.ComponentModel.SqlDataspaceManager.#ctor(IDS.Data.SqlConnectionService)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.DataspaceManager"/> class.
            </summary>
            <param name="connectionService">The connection service</param>
        </member>
        <member name="M:IDS.ComponentModel.SqlDataspaceManager.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.SqlDataspaceManager.Refresh">
            <summary>
            Refreshes this instance, if necessary.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.SqlDataspaceManager.IsDirty">
            <summary>
            Gets a value indicating whether this <see cref="T:IDS.ComponentModel.DataspaceManager"/> is dirty.
            </summary>
            <value><c>true</c> if dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.ComponentModel.SqlDataspaceManager.ConnectionIsValid">
            <summary>
            Gets a value indicating whether the SQL connection is valid (was able to open a connection to the database
            and read from the tables.
            </summary>
            <value><c>true</c> if the connection is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:IDS.ComponentModel.SqlDataspaceManager.InsertDataspace(System.String,System.Boolean)">
            <summary>
            Inserts a dataspace into the SQL database.
            </summary>
            <param name="dataspaceName">Name of the dataspace.</param>
            <param name="isDefault">if set to <c>true</c> this is the default dataspace.</param>
        </member>
        <member name="M:IDS.ComponentModel.SqlDataspaceManager.InsertDataspaceProperty(System.String,System.String,System.String)">
            <summary>
            Inserts the dataspace property into the SQL database.
            </summary>
            <param name="dataspaceName">Name of the dataspace.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
        </member>
        <member name="M:IDS.ComponentModel.SqlDataspaceManager.InsertDataspaceMapping(System.String,System.String,System.Int32,System.String)">
            <summary>
            Inserts the dataspace mapping into the SQL database.
            </summary>
            <param name="mappingType">Type of the mapping.</param>
            <param name="mappingValue">The mapping value.</param>
            <param name="priority">The priority.</param>
            <param name="dataspaceName">Name of the dataspace.</param>
        </member>
        <member name="M:IDS.ComponentModel.SqlDataspaceManager.DeleteDataspace(System.String)">
            <summary>
            Deletes the dataspace.
            </summary>
            <param name="dataspaceName">Name of the dataspace.</param>
        </member>
        <member name="M:IDS.ComponentModel.SqlDataspaceManager.DeleteDataspaceProperty(System.String,System.String)">
            <summary>
            Deletes the dataspace property.
            </summary>
            <param name="dataspaceName">Name of the dataspace.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:IDS.ComponentModel.SqlDataspaceManager.DeleteDataspaceMapping(System.String,System.String)">
            <summary>
            Deletes the dataspace mapping.
            </summary>
            <param name="mappingType">Type of the mapping.</param>
            <param name="mappingValue">The mapping value.</param>
        </member>
        <member name="T:IDS.ComponentModel.TokenizableAttribute">
            <summary>
            This attribute declares that a component property supports token data binding.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.TokenizableAttribute.#ctor">
            <summary>
            Creates an instance of the TokenizableAttribute class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.TokenizableAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance of the TokenizableAttribute class.
            </summary>
            <param name="bindingType">The type of the object this property gets data bound to.</param>
        </member>
        <member name="M:IDS.ComponentModel.TokenizableAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Creates an instance of the TokenizableAttribute class.
            </summary>
            <param name="bindingType">The type of the object this property gets data bound to.</param>
            <param name="recursive">A boolean that determines whether the data binding is recursive.</param>
        </member>
        <member name="M:IDS.ComponentModel.TokenizableAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the TokenizableAttribute class.
            </summary>
            <param name="bindingTypeName">The type name of the object this property gets data bound to.</param>
        </member>
        <member name="P:IDS.ComponentModel.TokenizableAttribute.BindingType">
            <summary>
            Get or set the Type that the property binds against.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.TokenizableAttribute.Recursive">
            <summary>
            Get or set a boolean that specifies whether the binding is flat (Recursive = false) or deep (Recursive = true).
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.TokenizableAttribute.Prefix">
            <summary>
            Prefix that is attached to the token. Defaults to { if not set.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.TokenizableAttribute.Suffix">
            <summary>
            Suffix that is attached to the token. Defaults to } if not set.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.UrlRegExDataspaceMapping">
            <summary>
            The UrlRegExDataspaceMapping class is used to map a dataspace to an URL using a regular expression.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.UrlRegExDataspaceMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.UrlRegExDataspaceMapping"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.UrlRegExDataspaceMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.UrlRegExDataspaceMapping"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="dataspaceName">Name of the associated dataspace.</param>
        </member>
        <member name="M:IDS.ComponentModel.UrlRegExDataspaceMapping.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.UrlRegExDataspaceMapping"/> class.
            </summary>
            <param name="configNode">The config node.</param>
        </member>
        <member name="M:IDS.ComponentModel.UrlRegExDataspaceMapping.IsApplicable">
            <summary>
            Determines whether this Dataspace instance is applicable to this request.
            </summary>
            <returns>
            	<c>true</c> if this instance is applicable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.UrlRegExDataspaceMapping.IsUrlApplicable(System.Web.HttpContext)">
            <summary>
            Determines whether the URL matches the given regular expression for the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>
            	<c>true</c> if the URL is applicable for the specified context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:IDS.ComponentModel.WellKnownComponent">
            <summary>
            Wraps instances of a component, conveniently containing all instances for various cultures and assigning the group a 
            well-known identifier for easy retrieval.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponent.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponent.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.WellKnownComponent"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="commandName">Name of the command.</param>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponent.#ctor(System.String,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.WellKnownComponent"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="commandName">Name of the command.</param>
            <param name="invariantComponent">The invariant component.</param>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponent.#ctor(System.String,System.String,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.WellKnownComponent"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="commandName">Name of the command.</param>
            <param name="invariantComponent">The invariant component.</param>
            <param name="culturedComponents">The cultured components.</param>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponent.#ctor(System.String,System.String,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.WellKnownComponent"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="commandName">Name of the command.</param>
            <param name="invariantComponent">The invariant component.</param>
            <param name="culturedComponents">The cultured components.</param>
            <param name="componentType">Type of the component.</param>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponent.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:IDS.ComponentModel.WellKnownComponent"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponent.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:IDS.ComponentModel.WellKnownComponent.ID">
            <summary>
            The unique identifier for the well-known component.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.WellKnownComponent.Name">
            <summary>
            Gets or sets the friendly name of the well-known component
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.WellKnownComponent.CommandName">
            <summary>
            Gets or sets the command name of the well-known component
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.WellKnownComponent.ComponentType">
            <summary>
            Gets the type of the well-known component
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.WellKnownComponent.InvariantComponent">
            <summary>
            Gets and sets the instance of the well-known component for the invariant culture.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.WellKnownComponent.CulturedComponents">
            <summary>
            Gets the collection of well-known component instances indexed by culture.
            </summary>
        </member>
        <member name="P:IDS.ComponentModel.WellKnownComponent.Error">
            <summary>
            Gets or sets the error that occured while trying to create the component.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponent.GetComponentInstance">
            <summary>
            Gets the instance of the well-known component appropriate for the current culture.
            </summary>
            <returns>
            The instance of the well-known component appropriate for the current culture, or the component for the 
            invariant culture if a component for the current culture does not exist.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponent.GetComponentInstance(System.Globalization.CultureInfo)">
            <summary>
            Gets the instance of the well-known component appropriate for the specified culture.
            </summary>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> object that represents the culture for which an instance of this
            well-known component is desired.
            </param>
            <returns>
            The instance of the well-known component appropriate for the specified culture, or the component for the 
            invariant culture if a component for the specified culture does not exist.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponent.GetComponentInstance``1">
            <summary>
            Gets a strongly-typed reference to the instance of the well-known component appropriate for the current culture.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>
            The instance of the well-known component, casted to type <typeparamref name="T"/>, appropriate for the current 
            culture, or the component for the invariant culture if a component for the current culture does not exist.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponent.GetComponentInstance``1(System.Globalization.CultureInfo)">
            <summary>
            Gets a strongly-typed reference to the instance of the well-known component appropriate for the specified culture.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> object that represents the culture for which an instance
            of this well-known component is desired.
            </param>
            <returns>
            The instance of the well-known component, casted to type <typeparamref name="T"/>, appropriate for the specified
            culture, or the component for the invariant culture if a component for the specified culture does not exist.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponent.AssignableTo(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponent.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.WellKnownComponentCollection">
            <summary>
            The WellKnownComponentCollection implements a strongly typed collection of <see cref="T:IDS.ComponentModel.WellKnownComponent"/> elements.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.WellKnownComponentCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.WellKnownComponentCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.ComponentModel.WellKnownComponent})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.WellKnownComponentCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentCollection.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:IDS.ComponentModel.WellKnownComponentCollection"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentCollection.Dispose(System.Boolean)">
            <summary>
            Disposes this instance.
            </summary>
            <param name="disposing">if set to <c>true</c> the object is disposing.</param>
        </member>
        <member name="P:IDS.ComponentModel.WellKnownComponentCollection.Default">
            <summary>
            Gets the singleton instance of the WellKnownComponentCollection for this thread or request.
            </summary>
            <value>The singleton instance of the WellKnownComponentCollection.</value>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentCollection.GetItemsOfType(System.Type)">
            <summary>
            Gets a collection of the <see cref="T:IDS.ComponentModel.WellKnownComponent"/> objects in this collection 
            whose <see cref="P:IDS.ComponentModel.WellKnownComponent.InvariantComponent"/> values are assignable to the specified type.
            </summary>
            <param name="t">The type that the <see cref="P:IDS.ComponentModel.WellKnownComponent.InvariantComponent"/> must be assignable to.</param>
            <returns>
            A <see cref="T:IDS.ComponentModel.WellKnownComponentCollection"/> containing <see cref="T:IDS.ComponentModel.WellKnownComponent"/> objects that are both
            in this collection and are assignable to the <see cref="T:System.Type"/> specified by <paramref name="t"/>
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentCollection.FindByID(System.String)">
            <summary>
            Locates a well-known component in the collection by ID.
            </summary>
            <param name="componentID">The ID of the component to be returned.</param>
            <returns>
            The first <see cref="T:IDS.ComponentModel.WellKnownComponent"/> in the collection whose 
            <see cref="P:IDS.ComponentModel.WellKnownComponent.ID"/> matches <paramref name="componentID"/>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentCollection.FindByID``1(System.String)">
            <summary>
            Locates a well-known component in the collection by ID.
            </summary>
            <typeparam name="T">
            The specific type of well-known component.  Must inherit from <see cref="T:IDS.ComponentModel.WellKnownComponent"/>.
            </typeparam>
            <param name="componentID">The ID of the component to be returned.</param>
            <returns>
            The first <see cref="T:IDS.ComponentModel.WellKnownComponent"/> in the collection whose 
            <see cref="P:IDS.ComponentModel.WellKnownComponent.Name"/> matches <paramref name="componentID"/>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentCollection.FindByCommandName(System.String)">
            <summary>
            Locates a well-known component in the collection by name, ignoring case.
            </summary>
            <param name="commandName">The command name of the component to be returned.</param>
            <returns>
            The first <see cref="T:IDS.ComponentModel.WellKnownComponent"/> in the collection whose 
            <see cref="P:IDS.ComponentModel.WellKnownComponent.Name"/> matches <paramref name="commandName"/>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentCollection.FindByCommandName``1(System.String)">
            <summary>
            Locates a well-known component in the collection by name, ignoring case.
            </summary>
            <typeparam name="T">
            The specific type of well-known component.  Must inherit from <see cref="T:IDS.ComponentModel.WellKnownComponent"/>.
            </typeparam>
            <param name="commandName">The command name of the component to be returned.</param>
            <returns>
            The first <see cref="T:IDS.ComponentModel.WellKnownComponent"/> in the collection whose 
            <see cref="P:IDS.ComponentModel.WellKnownComponent.Name"/> matches <paramref name="commandName"/>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentCollection.FindByName(System.String)">
            <summary>
            Locates a well-known component in the collection by name, ignoring case.
            </summary>
            <param name="componentName">The name of the component to be returned.</param>
            <returns>
            The first <see cref="T:IDS.ComponentModel.WellKnownComponent"/> in the collection whose 
            <see cref="P:IDS.ComponentModel.WellKnownComponent.Name"/> matches <paramref name="componentName"/>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentCollection.FindByName``1(System.String)">
            <summary>
            Locates a well-known component in the collection by name, ignoring case.
            </summary>
            <typeparam name="T">
            The specific type of well-known component.  Must inherit from <see cref="T:IDS.ComponentModel.WellKnownComponent"/>.
            </typeparam>
            <param name="componentName">The name of the component to be returned.</param>
            <returns>
            The first <see cref="T:IDS.ComponentModel.WellKnownComponent"/> in the collection whose 
            <see cref="P:IDS.ComponentModel.WellKnownComponent.Name"/> matches <paramref name="componentName"/>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentCollection.GetInvariantComponentByName``1(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentCollection.FindByInstance(System.Object)">
            <summary>
            Locates a well-known component in the collection whose instance (cultured or invariant) is the specified instance.
            </summary>
            <param name="componentInstance">The instance whose well-known component is to be located.</param>
            <returns>
            The first <see cref="T:IDS.ComponentModel.WellKnownComponent"/> in the collection whose GetComponentInstance() method 
            returns <paramref name="componentInstance"/>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentCollection.FindByInstance``1(System.Object)">
            <summary>
            Locates a well-known component in the collection whose instance (cultured or invariant) is the specified instance.
            </summary>
            <typeparam name="T">
            The specific type of well-known component.  Must inherit from <see cref="T:IDS.ComponentModel.WellKnownComponent"/>.
            </typeparam>
            <param name="componentInstance">The instance whose well-known component is to be located.</param>
            <returns>
            The first <see cref="T:IDS.ComponentModel.WellKnownComponent"/> in the collection whose GetComponentInstance() method 
            returns <paramref name="componentInstance"/>.
            </returns>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentCollection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:IDS.ComponentModel.WellKnownComponentProxySerializer">
            <summary>
            The WellKnownComponentProxySerializer class is used as a proxy class for serialization of a well known component.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentProxySerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.WellKnownComponentProxySerializer"/> class.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentProxySerializer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ComponentModel.WellKnownComponentProxySerializer"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentProxySerializer.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Returns the real object that should be deserialized, rather than the object that the serialized stream specifies.
            </summary>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> from which the current object is deserialized.</param>
            <returns>
            Returns the actual object that is put into the graph.
            </returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. The call will not work on a medium trusted server.
            </exception>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentProxySerializer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.NotImplementedException">This exception is always thrown when calling this method since it is not implemented.</exception>
        </member>
        <member name="T:IDS.ComponentModel.WellKnownComponentSerializationHelper">
            <summary>
            The WellKnownComponentSerializationHelper class is a static helper class for subclassing a WellKnownComponent to
            support custom serialization where just the WellKnownComponentID is serialized instead of the instance.
            </summary>
        </member>
        <member name="M:IDS.ComponentModel.WellKnownComponentSerializationHelper.CreateSubClass(System.Type,System.Type)">
            <summary>
            Creates the sub class.
            </summary>
            <param name="baseType">Type of the base.</param>
            <param name="serializerProxyType">Type of the serializer proxy.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Configuration.ConfigFileCacheLogCategory">
            <summary>
            The categories for ConfigFileCache logging.
            </summary>
        </member>
        <member name="F:IDS.Configuration.ConfigFileCacheLogCategory.Configuration">
            <summary>
            Indicates that the log entry is related to configuration of the ConfigFileCache.
            </summary>
        </member>
        <member name="F:IDS.Configuration.ConfigFileCacheLogCategory.Debug">
            <summary>
            Indicates that the log entry is related to debug information for the ConfigFileCache.
            </summary>
        </member>
        <member name="F:IDS.Configuration.ConfigFileCacheLogCategory.Exception">
            <summary>
            Indicates that the log entry is related to an exception in the ConfigFileCache.
            </summary>
        </member>
        <member name="T:IDS.Configuration.ConfigFileDetail">
            <summary>
            This class contains the details for a config file retrieved from the ConfigFileCache.Load method.
            </summary>
        </member>
        <member name="M:IDS.Configuration.ConfigFileDetail.#ctor(System.Boolean,System.Xml.XmlDocument,System.String)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="isFromCache">Whether the config file was retrieved from the cache or from the file system.</param>
            <param name="xmlDocument">The System.Xml.XmlDocument that contains the config file.</param>
            <param name="fullPath">The full path and file name of the config file.</param>
        </member>
        <member name="P:IDS.Configuration.ConfigFileDetail.IsFromCache">
            <summary>
            Gets whether the config file was retrieved from the cache or from the file system.
            </summary>
        </member>
        <member name="P:IDS.Configuration.ConfigFileDetail.XmlDocument">
            <summary>
            Gets the System.Xml.XmlDocument that contains the config file.
            </summary>
        </member>
        <member name="P:IDS.Configuration.ConfigFileDetail.FullPath">
            <summary>
            Gets the full path and file name of the config file.
            </summary>
        </member>
        <member name="T:IDS.Configuration.ConfigFileCache">
            <summary>
            This class loads config files from the file system into an XmlDocument, returning the XmlDocument. If the file
            has previously been requested, a cached-version of the XmlDocument will be returned without the need to read
            from the file system. Changes to the files in the file system that represent cached XmlDocuments result in the
            cached XmlDocument being removed from the cache.
            </summary>
        </member>
        <member name="T:IDS.Configuration.ConfigFileCache.ConfigFileCacheItem">
            <summary>
            This class holds two objects so that they can be kept together as a pair.
            </summary>
        </member>
        <member name="F:IDS.Configuration.ConfigFileCache.ConfigFileCacheItem.ConfigXml">
            <summary>
            The config file loaded into an XmlDocument.
            </summary>
        </member>
        <member name="F:IDS.Configuration.ConfigFileCache.ConfigFileCacheItem.Fsw">
            <summary>
            The FileSystemWatcher object watching the config file for changes.
            </summary>
        </member>
        <member name="F:IDS.Configuration.ConfigFileCache.ConfigFileCacheItem.TimeoutTimer">
            <summary>
            The timer object associated with this item. When it times out, this
            item is removed from the cache.
            </summary>
        </member>
        <member name="M:IDS.Configuration.ConfigFileCache.ConfigFileCacheItem.#ctor(System.Xml.XmlDocument,System.IO.FileSystemWatcher,System.Threading.Timer)">
            <summary>
            Creates an instance of the ConfigFileCacheItem class.
            </summary>
            <param name="configXml">The config file loaded into an XmlDocument.</param>
            <param name="fsw">The FileSystemWatcher object watching the config file for changes.</param>
            <param name="timeoutTimer">
            The timer object that will expire when this item needs to be removed from the cache. If null,
            the item will never be removed from the cache.
            </param>
        </member>
        <member name="M:IDS.Configuration.ConfigFileCache.#cctor">
            <summary>
            The static constructor loads the Acquire Lock Timeout In Seconds value from the application config file.
            </summary>
        </member>
        <member name="M:IDS.Configuration.ConfigFileCache.#ctor">
            <summary>
            The default constructor is private so that an instance of this class cannot be created. This class is used
            by calling its static methods.
            </summary>
        </member>
        <member name="P:IDS.Configuration.ConfigFileCache.AcquireLockTimeout">
            <summary>
            Gets the Acquire Lock Timeout value.
            </summary>
        </member>
        <member name="P:IDS.Configuration.ConfigFileCache.ItemInCacheTimeout">
            <summary>
            Gets the Item in Cache Timeout value.
            </summary>
        </member>
        <member name="M:IDS.Configuration.ConfigFileCache.Load(System.String,System.Boolean)">
            <summary>
            Loads the requested config file into an XmlDocument and returns the XmlDocument.
            </summary>
            <param name="configFile">The requested config file.</param>
            <param name="useCache">True if the config file can be saved and retrieved from cache.</param>
            <returns>
            A ConfigFileDetail instance indicating whether the config file came from the cache or the file system, and containing the
            System.Xml.XmlDocument containing the config file, and the full path and file name of the config file.
            </returns>
        </member>
        <member name="M:IDS.Configuration.ConfigFileCache.Load(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads the requested config file into an XmlDocument and returns the XmlDocument.
            </summary>
            <param name="configFile">The requested config file.</param>
            <param name="useCache">True if the config file can be saved and retrieved from cache.</param>
            <param name="throwExceptionIfConfigFileNotFound">
            True if an exception should be thrown if the configFile parameter does not exist.
            </param>
            <returns>
            A ConfigFileDetail instance indicating whether the config file came from the cache or the file system, and containing the
            System.Xml.XmlDocument containing the config file, and the full path and file name of the config file.
            </returns>
        </member>
        <member name="M:IDS.Configuration.ConfigFileCache.Clear">
            <summary>
            Clears all items from the cache.
            </summary>
        </member>
        <member name="M:IDS.Configuration.ConfigFileCache.CreateFileSystemWatcher(System.String)">
            <summary>
            Creates a FileSystemWatcher for the specified file.
            </summary>
            <param name="fullConfigFile">The file to watch.</param>
            <returns>A FileSystemWatcher object.</returns>
        </member>
        <member name="M:IDS.Configuration.ConfigFileCache.OnFileChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            This event is called when a file in the cache has been changed or deleted.
            </summary>
            <param name="sender">The event sender. Not used.</param>
            <param name="ea">The event argument.</param>
        </member>
        <member name="M:IDS.Configuration.ConfigFileCache.OnFileRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            This event is called when a file in the cache has been renamed.
            </summary>
            <param name="sender">The event sender. Not used.</param>
            <param name="ea">The event argument.</param>
        </member>
        <member name="M:IDS.Configuration.ConfigFileCache.RemoveFromCache(System.String)">
            <summary>
            Removes a config file from the cache.
            </summary>
            <param name="fullConfigFile">The config file to remove.</param>
        </member>
        <member name="M:IDS.Configuration.ConfigFileCache.OnFileSystemWatcherError(System.Object,System.IO.ErrorEventArgs)">
            <summary>
            Removes all files from the cache.
            </summary>
            <param name="sender">The event sender. Not used.</param>
            <param name="ea">The event argument.</param>
            <remarks>
            Removing all files from the cache may seem like an extreme course to take. But the impact
            is actually very minor. The next calls to ConfigFileCache.Load will have the files loaded
            from the file system rather than from cache.
            </remarks>
        </member>
        <member name="M:IDS.Configuration.ConfigFileCache.OnItemInCacheTimeout(System.Object)">
            <summary>
            This event is called when a cached config file's timeout timer expires.
            </summary>
            <param name="state">The config file full path and file name.</param>
        </member>
        <member name="T:IDS.Configuration.ConfigurationBaseAttribute">
            <summary>
            The base attribute that all configuration attributes inherit from.
            </summary>
        </member>
        <member name="T:IDS.Configuration.ConfigurationClassAttribute">
            <summary>
            This attribute decorates a class member that refers to another class whose members are decorated with one of
            the ConfigurationMemberAttribute-derived attributes. The member decorated with this attribute can be an array of
            the referenced class, or a single instance of the referenced class.
            
            If the XML that corresponds to this member consists of a series of zero or more elements, and the decorated 
            member is an array, then the member will be set to an array of the same length as the series of elements.
            
            If the XML that corresponds to this member consists of a series of more than one element, and the decorated 
            member is NOT an array, then the member will be set to a single instance of the class with only the first
            XML element data loaded into it.
            </summary>
            <remarks>
            The member decorated with this attribute can only refer to a class that takes an empty constructor.
            </remarks>
        </member>
        <member name="M:IDS.Configuration.ConfigurationClassAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Configuration.ConfigurationClassAttribute"/> class.
            </summary>
        </member>
        <member name="M:IDS.Configuration.ConfigurationClassAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Configuration.ConfigurationClassAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:IDS.Configuration.ConfigurationClassAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Configuration.ConfigurationClassAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="parentElementLocation">The parent element location.</param>
        </member>
        <member name="T:IDS.Configuration.ConfigurationClassBase">
            <summary>
            If a type decorated with the IDS.Configuration.ConfigurationClass attribute is derived from this type,
            then the root XML element property will be automatically set by the IDS.Configuration.SectionReader type.
            </summary>
        </member>
        <member name="P:IDS.Configuration.ConfigurationClassBase.RootElement">
            <summary>
            Gets or sets the ConfigurationClass root XML element.
            </summary>
        </member>
        <member name="T:IDS.Configuration.ConfigurationKeyType">
            <summary>
            This enumeration is used by the ConfigurationKeyValueAttribute and describes the type of "key" value.
            </summary>
        </member>
        <member name="F:IDS.Configuration.ConfigurationKeyType.NameValueSectionHandlerElement">
            <summary>
            The key is an attribute named "key" located in a child element of its parent element named "add" whose value
            is in the "value" attribute. This is the config key/value format used by Microsoft's NameValueSectionHandler.
            See the "appSettings" section of any web.config file for an example.
            </summary>
        </member>
        <member name="F:IDS.Configuration.ConfigurationKeyType.Element">
            <summary>
            The key is a child element of its parent element whose value is its InnerText property.
            </summary>
        </member>
        <member name="F:IDS.Configuration.ConfigurationKeyType.Attribute">
            <summary>
            The key is an attribute of its parent element whose value is the attribute's value.
            </summary>
        </member>
        <member name="T:IDS.Configuration.ConfigurationKeyValueAttribute">
            <summary>
            This attribute decorates a field or property that maps directly to a config file key/value pair. The decorated property or
            field's class is decorated with the ConfigurationSection attribute that describes the path and file name to the
            config file and the default parent element in the config file for this decorated key/value pair (although this can be modified
            or overridden by the ParentElementLocation property).
            </summary>
            <remarks>
            The behavior of the Inherited property is subtle. Even though the value of the Inherited property is false, the following are
            all true:
            
            If a class has non-private member fields that are decorated with this attribute, a derived class will ALWAYS inherit both the 
            field and the attribute.
            
            If a class has non-private non-virtual member properties that are decorated with this attribute, a derived class will ALWAYS
            inherit both the property and the attribute.
            
            If a class has virtual member properties that are decorated with this attribute, a derived class that does NOT override the 
            property will ALWAYS inherit both the property and the attribute if it .
            
            If a class has virtual member properties that are decorated with this attribute, a derived class that overrides the property
            will NOT inherit the attribute on its overridden property, and will need to provide its own ConfigurationKeyValue 
            attribute if it wants the property loaded by the SectionReader.
            </remarks>
        </member>
        <member name="M:IDS.Configuration.ConfigurationKeyValueAttribute.#ctor(IDS.Configuration.ConfigurationKeyType)">
            <summary>
            Creates an instance of this attribute and sets the ConfigurationKeyType property.
            </summary>
            <param name="configurationKeyType">
            The type of key in relation to its parent element in the config file.
            </param>
        </member>
        <member name="M:IDS.Configuration.ConfigurationKeyValueAttribute.#ctor(IDS.Configuration.ConfigurationKeyType,System.String)">
            <summary>
            Creates an instance of this attribute and sets the ConfigurationKeyType and Key properties.
            </summary>
            <param name="configurationKeyType">Type of the configuration key.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:IDS.Configuration.ConfigurationKeyValueAttribute.#ctor(IDS.Configuration.ConfigurationKeyType,System.String,System.String)">
            <summary>
            Creates an instance of this attribute and sets the ConfigurationKeyType, Key and ParentElementLocation properties.
            </summary>
            <param name="configurationKeyType">Type of the configuration key.</param>
            <param name="key">The key.</param>
            <param name="parentElementLocation">The parent element location.</param>
        </member>
        <member name="P:IDS.Configuration.ConfigurationKeyValueAttribute.ConfigurationKeyType">
            <summary>
            Gets the type of key in relation to its parent element in the config file.
            </summary>
        </member>
        <member name="P:IDS.Configuration.ConfigurationKeyValueAttribute.DefaultValue">
            <summary>
            The default value to which to set the decorated property or field. If null, and the key is not found, the
            property or field will not be set.
            </summary>
            <remarks>
            The DefaultValue's must be of the same type as the property or field's type, or be able to be implicitly cast to it,
            or an InvalidCastException exception will be thrown.
            </remarks>
        </member>
        <member name="T:IDS.Configuration.ConfigurationMemberAttribute">
            <summary>
            This class is the base class for all "Configuration" attributes that decorate class members.
            </summary>
        </member>
        <member name="F:IDS.Configuration.ConfigurationMemberAttribute.key">
            <summary>
            The XPath expression relative to its parent element location of the configuration member. If blank,
            the name of the member will be used.
            </summary>
        </member>
        <member name="F:IDS.Configuration.ConfigurationMemberAttribute.parentElementLocation">
            <summary>
            The XPath expression of the parent element location relative to the configuration section root element. If
            the expression begins with either "/" or "//", then it is absolute, and not relative to its configuration
            section root element.
            </summary>
        </member>
        <member name="F:IDS.Configuration.ConfigurationMemberAttribute.namespacePrefix">
            <summary>
            The namespace prefix for this configuration member.
            </summary>
        </member>
        <member name="M:IDS.Configuration.ConfigurationMemberAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Configuration.ConfigurationMemberAttribute"/> class.
            </summary>
        </member>
        <member name="M:IDS.Configuration.ConfigurationMemberAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Configuration.ConfigurationMemberAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:IDS.Configuration.ConfigurationMemberAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Configuration.ConfigurationMemberAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="parentElementLocation">The parent element location.</param>
        </member>
        <member name="P:IDS.Configuration.ConfigurationMemberAttribute.Key">
            <summary>
            The name of the key. If null or blank, the name of the decorated property or field will be used as the key.
            </summary>
        </member>
        <member name="P:IDS.Configuration.ConfigurationMemberAttribute.ParentElementLocation">
            <summary>
            If null or blank, the key's parent element will obtained from the decorated property or field's class attributes. If not blank, 
            and the XPath expression begins with either "/" or "//", the XPath expression to the key's parent element will be this value.
            If not blank, and the XPath expression does not begin with "/" or "//", this XPath expression will be relative to the
            key's parent element obtained from the decorated property or field's class attributes.
            </summary>
        </member>
        <member name="P:IDS.Configuration.ConfigurationMemberAttribute.NamespacePrefix">
            <summary>
            The namespace prefix for this configuration member.
            </summary>
        </member>
        <member name="T:IDS.Configuration.ConfigFileValue">
            <summary>
            This enumeration describes the possible values for the ConfigFile property of the ConfigurationSectionAttribute.
            </summary>
        </member>
        <member name="F:IDS.Configuration.ConfigFileValue.IsAppConfigLocation">
            <summary>
            The ConfigFile property is an XPath expression in the application config file whose value is the location of the config file.
            </summary>
        </member>
        <member name="F:IDS.Configuration.ConfigFileValue.IsFileSystemPath">
            <summary>
            The ConfigFile property is a file system path to the config file.
            </summary>
        </member>
        <member name="F:IDS.Configuration.ConfigFileValue.UseAppConfig">
            <summary>
            The application config file should be used as the config file. In this instance, the ConfigFile property does not need to be set.
            Any value in the ConfigFile property will be ignored.
            </summary>
        </member>
        <member name="F:IDS.Configuration.ConfigFileValue.DoNotUseConfigFile">
            <summary>
            The application config file will not be used to load the configuration data. Instead, the configuration data will be passed
            directly to the IDS.ConfigurationSection object as XML.
            </summary>
        </member>
        <member name="T:IDS.Configuration.ConfigurationSectionAttribute">
            <summary>
            This attribute decorates a class that contains fields and properties that map to values in a config file.
            </summary>
            <remarks>
            This attribute can decorate a single class multiple times. This allows the decorated class to contain
            configuration key/value pair properties or fields that come from different config files, or from
            different root elements in the same config file.
            
            This attribute can also decorate a class that represents a subsection of another section (the other section
            represented by a class also decorated with this attribute). In that case, the ConfigFileValueLocationInAppConfig
            property is not used when decorating the subsection class, and the RootElementLocation property value is
            relative to the RootElementLocation property of the parent section class.
            </remarks>
        </member>
        <member name="M:IDS.Configuration.ConfigurationSectionAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of this attribute and initializes the RootElementLocation to the specified value. The config file used will
            be the application's config file.
            </summary>
            <param name="rootElementLocation">
            The XPath expression of the root element for this section in the config file.
            </param>
        </member>
        <member name="M:IDS.Configuration.ConfigurationSectionAttribute.#ctor(IDS.Configuration.ConfigFileValue,System.String)">
            <summary>
            Creates an instance of this attribute and initializes the attribute properties to the specified values.
            </summary>
            <param name="configFileValueType">The type of value in the ConfigFile property.</param>
            <param name="rootElementLocation">
            The XPath expression of the root element for this section in the config file.
            </param>
        </member>
        <member name="M:IDS.Configuration.ConfigurationSectionAttribute.#ctor(IDS.Configuration.ConfigFileValue,System.String,System.String)">
            <summary>
            Creates an instance of this attribute and initializes the attribute properties to the specified values.
            </summary>
            <param name="configFileValueType">The type of value in the ConfigFile property.</param>
            <param name="configFile">
            The value used to locate the config file. The ConfigFileValueType property determines its actual meaning.
            </param>
            <param name="rootElementLocation">
            The XPath expression of the root element for this section in the config file.
            </param>
        </member>
        <member name="P:IDS.Configuration.ConfigurationSectionAttribute.ConfigFileValueType">
            <summary>
            The type of value in the ConfigFile property.
            </summary>
        </member>
        <member name="P:IDS.Configuration.ConfigurationSectionAttribute.ConfigFile">
            <summary>
            The value used to locate the config file. The ConfigFileValueType property determines its actual meaning.
            </summary>
        </member>
        <member name="P:IDS.Configuration.ConfigurationSectionAttribute.RootElementLocation">
            <summary>
            Gets the XPath expression of the root element for this section in the config file.
            </summary>
        </member>
        <member name="P:IDS.Configuration.ConfigurationSectionAttribute.NamespaceManagerType">
            <summary>
            Sets the namespace manager to be used for all XPath queries.
            </summary>
        </member>
        <member name="P:IDS.Configuration.ConfigurationSectionAttribute.IsConfigFileCached">
            <summary>
            Gets or sets whether to cache the config file in memory for faster access.
            </summary>
        </member>
        <member name="P:IDS.Configuration.ConfigurationSectionAttribute.MemberNamespacePrefix">
            <summary>
            Sets the member namespace prefix to be used for all XPath queries executed to obtain member values.
            </summary>
        </member>
        <member name="T:IDS.Configuration.ConfigurationSectionBase">
            <summary>
            This abstract class is the base class for all configuration section classes. This class optionally calls the SectionReader.Load
            method upon instantiation.
            </summary>
        </member>
        <member name="M:IDS.Configuration.ConfigurationSectionBase.#ctor">
            <summary>
            Instantiates the default instance of this class.
            </summary>
        </member>
        <member name="M:IDS.Configuration.ConfigurationSectionBase.#ctor(System.Boolean)">
            <summary>
            If the load parameter is true, then this constructor instantiates a new instance of the this class,
            and then calls the SectionReader.Load method to load the config values from the config file. If the
            load parameter is false, this constructor does nothing.
            </summary>
        </member>
        <member name="M:IDS.Configuration.ConfigurationSectionBase.#ctor(System.String)">
            <summary>
            If the load parameter is true, then this constructor instantiates a new instance of the this class,
            and then calls the SectionReader.Load method to load the config values from the config file. If the
            load parameter is false, this constructor does nothing.
            </summary>
            <param name="xml">The XML to load into the configuration section object.</param>
        </member>
        <member name="M:IDS.Configuration.ConfigurationSectionBase.InitializeLifetimeService">
            <summary>
            Initializes the instance to last forever.
            </summary>
            <returns>Null, which instructs .Net Remoting to never release the object.</returns>
        </member>
        <member name="P:IDS.Configuration.ConfigurationSectionBase.SectionReader">
            <summary>
            Gets or sets the SectionReader used to load the configuration section instance.
            </summary>
        </member>
        <member name="M:IDS.Configuration.ConfigurationSectionBase.Load">
            <summary>
            Calls the SectionReader.Load method.
            </summary>
        </member>
        <member name="M:IDS.Configuration.ConfigurationSectionBase.Load(System.String)">
            <summary>
            Calls the SectionReader.Load method and passes it the XML to load.
            </summary>
            <param name="xml">The XML to load into the configuration section object.</param>
        </member>
        <member name="P:IDS.Configuration.ConfigurationSectionBase.RootElement">
            <summary>
            Gets or sets the ConfigurationSection root XML element.
            </summary>
        </member>
        <member name="T:IDS.Configuration.ConfigurationSectionHandlerDelegate">
            <summary>
            This delegate is used by the IDS.Configuration infrastructure to call methods decorated with the
            ConfigurationSectionHandler attribute. The method must have the same signature as this
            delegate.
            </summary>
        </member>
        <member name="T:IDS.Configuration.ConfigurationSectionHandlerAttribute">
            <summary>
            This attribute decorates a method that is a configuration section handler. This method must have
            the same signature as IDS.Configuration.ConfigurationSectionHandlerDelegate delegate. The method
            decorated with this attribute will be called and passed the System.Xml.XmlNodeList as described
            by its parent class' config file and root element location, and its own values for the Key and
            ParentElementLocation properties. The method will then load whatever values it desires from the
            XML data contained in the XmlNodeList.
            </summary>
            <remarks>
            The behavior of the Inherited property is subtle. Even though the value of the Inherited property 
            is false, the following are all true:
            
            If a class has a non-private non-virtual method decorated with this attribute, a derived class
            will still have the base method decorated and called by the SectionReader.
            
            If a class has a virtual method decorated with this attribute, a derived class that does not
            override the decorated method will still have the base method decorated and called by the
            SectionReader.
            
            If a class has a virtual method decorated with this attribute, a derived class that overrides
            the decorated method will not inherit the base method's attribute, and will need to provide its
            own ConfigurationSectionHandler attribute if it wants the method decorated and called by the
            SectionReader.
            </remarks>
        </member>
        <member name="T:IDS.Configuration.ICreateFromStrings">
            <summary>
            Provides a standard method of creating an object based on a Class String and Unique Identifier.
            When objects are placed into a grid, one or more fields in the grid must contain
            enough information to re-create the object based on that information.
            </summary>
        </member>
        <member name="P:IDS.Configuration.ICreateFromStrings.ClassString">
            <summary>
            Retrieves the ClassString in form Namespace, Assembly.
            </summary>
        </member>
        <member name="P:IDS.Configuration.ICreateFromStrings.Identifier">
            <summary>
            Globally unique identifier that, along with the class string, can be used to re-create an object.
            </summary>
            <value></value>
        </member>
        <member name="M:IDS.Configuration.ICreateFromStrings.LoadFromIdentifier(System.String)">
            <summary>
            Once an object is created, use this method to populate values into the object.
            <example>
            	<code>
            	<![CDATA[
            ClassString = Server.UrlDecode(Request.QueryString["ClassString"]);
            Identifier = Server.UrlDecode(Request.QueryString["Identifier"]);
            AutoTransfer transfer = CreateAutoTransferFromClassString();
            if ((Identifier != null) && (Identifier != ""))
            {
            	if (! transfer.LoadFromIdentifier(Identifier))
            	{
            		//  report error
            	]]>
            	</code>
            </example>
            </summary>
            <param name="Identifier">Globally unique identifier that, along with the class string, can be used to re-create an object.</param>
            <returns>true if object was successfully created.</returns>
        </member>
        <member name="P:IDS.Configuration.ICreateFromStrings.EditPageName">
            <summary>
            IDS.Web.Portal page name that contains a module that can create of edit this module.
            </summary>
            <value>IDS.Web.Portal page name string.</value>
        </member>
        <member name="T:IDS.Configuration.SectionReaderLogCategory">
            <summary>
            The categories for SectionReader logging.
            </summary>
        </member>
        <member name="F:IDS.Configuration.SectionReaderLogCategory.Debug">
            <summary>
            Indicates that the log entry is related to debug information for the SectionReader.
            </summary>
        </member>
        <member name="F:IDS.Configuration.SectionReaderLogCategory.Exception">
            <summary>
            Indicates that the log entry is related to an exception in the SectionReader.
            </summary>
        </member>
        <member name="T:IDS.Configuration.SectionReader">
            <summary>
            This class is used by calling its Load method. This method takes a ConfigurationSection attribute decorated class as its 
            parameter and reads the config file and loads all of the requested values into the decorated class' appropriate members.
            </summary>
        </member>
        <member name="M:IDS.Configuration.SectionReader.InitializeLifetimeService">
            <summary>
            Initializes the instance to last forever.
            </summary>
            <returns>Null, which instructs .Net Remoting to never release the object.</returns>
        </member>
        <member name="P:IDS.Configuration.SectionReader.IsConfigFileFromCache">
            <summary>
            Returns true if the config file was read from the cache, and false if it was read from the file system.
            </summary>
        </member>
        <member name="P:IDS.Configuration.SectionReader.ConfigurationSectionType">
            <summary>
            Gets the System.Type of the configuration section object.
            </summary>
        </member>
        <member name="P:IDS.Configuration.SectionReader.AppConfigFile">
            <summary>
            Gets the path and file name of the application's config file.
            </summary>
        </member>
        <member name="P:IDS.Configuration.SectionReader.ConfigFile">
            <summary>
            Gets the path and file name of the config file loaded into the configuration section object.
            </summary>
        </member>
        <member name="M:IDS.Configuration.SectionReader.SetConfigFile(System.String)">
            <summary>
            Sets the config file, ensuring that it is never null.
            </summary>
            <param name="value">The config file path.</param>
        </member>
        <member name="P:IDS.Configuration.SectionReader.ConfigFileXmlDocument">
            <summary>
            Gets the System.Xml.XmlDocument for the config file loaded into the configuration section object.
            </summary>
        </member>
        <member name="M:IDS.Configuration.SectionReader.Load(System.Object)">
            <summary>
            This method takes a ConfigurationSectionAttribute decorated class as its parameter and reads the config file and loads
            all of the requested values into the decorated class' appropriate members.
            </summary>
            <param name="configurationSectionObject">The ConfigurationSectionAttribute decorated class.</param>
        </member>
        <member name="M:IDS.Configuration.SectionReader.Load(System.Object,System.String)">
            <summary>
            This method takes a ConfigurationSectionAttribute decorated class and XML from a config file as its parameters,
            and loads all of the XML values into the decorated class' appropriate members.
            </summary>
            <param name="configurationSectionObject">The ConfigurationSectionAttribute decorated class.</param>
            <param name="xml">The XML to load into the configuration section object.</param>
        </member>
        <member name="M:IDS.Configuration.SectionReader.LoadMemberValues(System.Xml.XmlDocument,System.Object,System.Xml.XmlElement,System.Xml.XmlNamespaceManager)">
            <summary>
            Given an array of fields for a class decorated with the ConfigurationSection attribute, searches the members
            for the ConfigurationKeyValue attribute and when the attribute is found, loads the corresponding key 
            value from the config file into the member.
            </summary>
            <param name="configXml">The config file loaded into an System.Xml.XmlDocument instance.</param>
            <param name="configurationSectionObject">
            An object whose class definition is decorated with the ConfigurationSection attribute.
            </param>
            <param name="defaultParentElement">The default parent element for all members.</param>
            <param name="namespaceManager">The XML namespace manager used for XPath queries.</param>
        </member>
        <member name="M:IDS.Configuration.SectionReader.LoadFieldOrPropertyValues(System.Reflection.MemberInfo[],System.Xml.XmlDocument,System.Object,System.Xml.XmlElement,System.Xml.XmlNamespaceManager)">
            <summary>
            Given an array of fields for a class decorated with the ConfigurationSection attribute, searches the members
            for the ConfigurationKeyValue attribute and when the attribute is found, loads the corresponding key 
            value from the config file into the member.
            </summary>
            <param name="members">The fields or properties to load.</param>
            <param name="configXml">The config file loaded into an System.Xml.XmlDocument instance.</param>
            <param name="configurationSectionObject">
            An object whose class definition is decorated with the ConfigurationSection attribute.
            </param>
            <param name="defaultParentElement">
            The default parent element for all members.
            </param>
            <param name="namespaceManager">The XML namespace manager used for XPath queries.</param>
        </member>
        <member name="M:IDS.Configuration.SectionReader.LoadKeyValueMember(System.Reflection.MemberInfo,IDS.Configuration.ConfigurationKeyValueAttribute,System.Xml.XmlDocument,System.Object,System.Xml.XmlElement,System.Xml.XmlNamespaceManager)">
            <summary>
            Loads a key/value pair from a config file into a class member.
            </summary>
            <param name="member">The class member.</param>
            <param name="configurationKeyValueAttribute">The member's ConfigurationKeyValueAttribute instance.</param>
            <param name="configXml">The XmlDocument representing the config file.</param>
            <param name="configurationSectionObject">The member's containing class.</param>
            <param name="defaultParentElement">The member's default parent element.</param>
            <param name="namespaceManager">The XML namespace manager used for XPath queries.</param>
        </member>
        <member name="M:IDS.Configuration.SectionReader.LoadClassMember(System.Reflection.MemberInfo,IDS.Configuration.ConfigurationClassAttribute,System.Xml.XmlDocument,System.Object,System.Xml.XmlElement,System.Xml.XmlNamespaceManager)">
            <summary>
            Loads an array (multiple instances of XML elements) into a class member array.
            </summary>
            <param name="member">The class member.</param>
            <param name="configurationClassAttribute">The member's ConfigurationClassAttribute instance.</param>
            <param name="configXml">The XmlDocument representing the config file.</param>
            <param name="configurationSectionObject">The member's containing class.</param>
            <param name="defaultParentElement">The member's default parent element.</param>
            <param name="namespaceManager">The XML namespace manager used for XPath queries.</param>
        </member>
        <member name="M:IDS.Configuration.SectionReader.CallSectionHandler(System.Reflection.MethodInfo,IDS.Configuration.ConfigurationSectionHandlerAttribute,System.Xml.XmlDocument,System.Object,System.Xml.XmlElement,System.Xml.XmlNamespaceManager)">
            <summary>
            Calls a class method that is a section handler, passing it the appropriate XML node list.
            </summary>
            <param name="method">The class method.</param>
            <param name="configurationSectionHandlerAttribute">The method's ConfigurationSectionHandlerAttribute instance.</param>
            <param name="configXml">The XmlDocument representing the config file.</param>
            <param name="configurationSectionObject">The method's containing class.</param>
            <param name="defaultParentElement">The method's default parent element.</param>
            <param name="namespaceManager">The XML namespace manager used for XPath queries.</param>
        </member>
        <member name="M:IDS.Configuration.SectionReader.GetNamespaceManager(IDS.Configuration.ConfigurationSectionAttribute,System.Xml.XmlDocument)">
            <summary>
            Returns an XmlNamespaceManager to use with XPath queries.
            </summary>
            <param name="configurationSectionAttribute">The ConfigurationSection attribute containing the XmlNamespaceManager type.</param>
            <param name="configXml">The XmlDocument for the config file.</param>
            <returns>An XmlNamespaceManager, or null if one is not defined by the ConfigurationSectionAttribute.</returns>
        </member>
        <member name="M:IDS.Configuration.SectionReader.GetKey(System.Reflection.MemberInfo,IDS.Configuration.ConfigurationMemberAttribute)">
            <summary>
            Returns the member's Key value.
            </summary>
            <param name="member">The member.</param>
            <param name="configurationMemberAttribute">The ConfigurationMemberAttribute for the member.</param>
            <returns>The correct key for the member.</returns>
        </member>
        <member name="M:IDS.Configuration.SectionReader.GetParentElement(System.Reflection.MemberInfo,IDS.Configuration.ConfigurationMemberAttribute,System.Xml.XmlDocument,System.Object,System.Xml.XmlElement,System.Xml.XmlNamespaceManager)">
            <summary>
            Returns the correct parent element for the member.
            </summary>
            <param name="member">The member.</param>
            <param name="configurationMemberAttribute">The member's ConfigurationMemberAttribute instance.</param>
            <param name="configXml">The XmlDocument for the config file.</param>
            <param name="configurationSectionObject">The member's containing class instance.</param>
            <param name="defaultParentElement">The member's containing class' default parent element.</param>
            <param name="namespaceManager">The XML namespace manager used for XPath queries.</param>
            <returns>The Parent element for the member.</returns>
        </member>
        <member name="M:IDS.Configuration.SectionReader.GetXmlLocation(System.Xml.XmlNode)">
            <summary>
            Gets the XPath location of the XmlNode.
            </summary>
        </member>
        <member name="M:IDS.Configuration.SectionReader.GetValue(IDS.Configuration.ConfigurationKeyType,System.Xml.XmlElement,System.String,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            Returns the value for a given key.
            </summary>
            <param name="keyType">The ConfigurationKeyType of the key.</param>
            <param name="parentElement">The parent element of the key.</param>
            <param name="key">The value's key.</param>
            <param name="namespacePrefix">The XML namespace prefix for XPath queries.</param>
            <param name="namespaceManager">The XML namespace manager for XPath queries.</param>
            <returns>The key's value; or null if it does not exist.</returns>
        </member>
        <member name="M:IDS.Configuration.SectionReader.GetNameValueSectionHandlerElementValue(System.Xml.XmlElement,System.String,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            Returns the value for a key of type ConfigurationKeyType.NameValueSectionHandlerElement.
            </summary>
            <param name="parentElement">The parent element of the key.</param>
            <param name="key">The value's key.</param>
            <param name="namespacePrefix">The XML namespace prefix for XPath queries.</param>
            <param name="namespaceManager">The XML namespace manager for XPath queries.</param>
            <returns>The key's value; or null if it does not exist.</returns>
        </member>
        <member name="M:IDS.Configuration.SectionReader.GetElementValue(System.Xml.XmlElement,System.String,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            Returns the value for a key of type ConfigurationKeyType.Element.
            </summary>
            <param name="parentElement">The parent element of the key.</param>
            <param name="key">The value's key.</param>
            <param name="namespacePrefix">The XML namespace prefix for XPath queries.</param>
            <param name="namespaceManager">The XML namespace manager for XPath queries.</param>
            <returns>The key's value; or null if it does not exist.</returns>
        </member>
        <member name="M:IDS.Configuration.SectionReader.GetAttributeValue(System.Xml.XmlElement,System.String,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            Returns the value for a key of type ConfigurationKeyType.Attribute.
            </summary>
            <param name="parentElement">The parent element of the key.</param>
            <param name="key">The value's key.</param>
            <param name="namespacePrefix">The XML namespace prefix for XPath queries.</param>
            <param name="namespaceManager">The XML namespace manager for XPath queries.</param>
            <returns>The key's value; or null if it does not exist.</returns>
        </member>
        <member name="M:IDS.Configuration.SectionReader.SetMemberValue(System.Object,System.Reflection.MemberInfo,System.Object)">
            <summary>
            Sets a member to the specified value.
            </summary>
            <param name="objectToSet">The object that contains the member.</param>
            <param name="member">The member.</param>
            <param name="value">The value to set the member to.</param>
        </member>
        <member name="M:IDS.Configuration.SectionReader.ReplaceStringValueWithPropertyValue(System.String,System.String,System.String,System.String)">
            <summary>
            Given a string with embedded "{propertyName}" strings in it, replace the embedded property names with the actual
            values of the properties when called on the configurationSectionObject object.
            </summary>
            <param name="value">The string with embedded "{propertyName}" strings in it.</param>
            <param name="objectType">
            The type of the object that has the attribute value being replaced. This value is for exception messages only.
            </param>
            <param name="attributeType">
            The type of the attribute whose value is being replaced. This value is for exception messages only.
            </param>
            <param name="attributePropertyName">
            The attribute property name whose value is being replaced. This value is for exception messages only.
            </param>
            <returns>The string with the embedded property names replaced with the property values.</returns>
            <example>
            Given an object o with property P that returns "me" calling this method as follows:
            
            ReplaceStringValueWithPropertyValue("Help {P} if you can", o);
            
            Returns "Help me if you can".
            </example>
        </member>
        <member name="M:IDS.Configuration.SectionReader.ReplaceStringValueWithPropertyValue(System.String)">
            <summary>
            Given a string with embedded "{propertyName}" strings in it, replace the embedded property names with the actual
            values of the properties from the configurationSectionObject object.
            </summary>
            <param name="value">The string with embedded "{propertyName}" strings in it.</param>
            <returns>The string with the embedded property names replaced with the property values.</returns>
            <example>
            Given an ConfigurationSection object with property P that returns "me", calling this method as follows:
            
            ReplaceStringValueWithPropertyValue("Help {P} if you can");
            
            Returns "Help me if you can".
            </example>
        </member>
        <member name="M:IDS.Configuration.SectionReader.Resource(System.String,System.Object[])">
            <summary>
            Returns the requested resource value.
            </summary>
            <param name="key">The key of the resource value.</param>
            <param name="args">The arguments to supply to the resource value.</param>
            <returns>The requested resource value.</returns>
        </member>
        <member name="T:IDS.Configuration.SectionReaderBaseException">
            <summary>
            This Exception is the base class for all exceptions thrown by the SectionReader class.
            </summary>
            <remarks>
            This class cannot be used directly, but must be derived by another exception class.
            </remarks>
        </member>
        <member name="M:IDS.Configuration.SectionReaderBaseException.#ctor(System.Type,System.String)">
            <summary>
            The constructor that creates an exception and sets the exception message.
            </summary>
            <param name="configurationSectionType">The configuration section System.Type object.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:IDS.Configuration.SectionReaderBaseException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="configurationSectionType">The configuration section System.Type object.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that generated this exception.</param>
        </member>
        <member name="M:IDS.Configuration.SectionReaderBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="M:IDS.Configuration.SectionReaderBaseException.ToString">
            <summary>
            Returns detailed information about the exception, including all inner exceptions.
            </summary>
            <returns>Detailed information about the exception, including all inner exceptions.</returns>
        </member>
        <member name="M:IDS.Configuration.SectionReaderBaseException.ExpandMessage(System.Type,System.String)">
            <summary>
            Expands the message to include type information.
            </summary>
            <param name="configurationSectionType">The configuration section type that caused the exception.</param>
            <param name="message">The exception message.</param>
            <returns>The expanded exception message.</returns>
        </member>
        <member name="T:IDS.Configuration.ConfigFileNotFoundException">
            <summary>
            This Exception is thrown when the SectionReader class cannot obtain the application's config file
            because it has not been defined in the AppDomain.
            </summary>
        </member>
        <member name="M:IDS.Configuration.ConfigFileNotFoundException.#ctor(System.Type,System.String)">
            <summary>
            The constructor that creates an exception and sets the exception message.
            </summary>
            <param name="configurationSectionType">The configuration section System.Type object.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:IDS.Configuration.ConfigFileNotFoundException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="configurationSectionType">The configuration section System.Type object.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that generated this exception.</param>
        </member>
        <member name="M:IDS.Configuration.ConfigFileNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:IDS.Configuration.ConfigFileNotLoadableException">
            <summary>
            This Exception is thrown when the SectionReader class load a config file into an 
            XML document.
            </summary>
        </member>
        <member name="M:IDS.Configuration.ConfigFileNotLoadableException.#ctor(System.Type,System.String)">
            <summary>
            The constructor that creates an exception and sets the exception message.
            </summary>
            <param name="configurationSectionType">The configuration section System.Type object.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:IDS.Configuration.ConfigFileNotLoadableException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="configurationSectionType">The configuration section System.Type object.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that generated this exception.</param>
        </member>
        <member name="M:IDS.Configuration.ConfigFileNotLoadableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:IDS.Configuration.InvalidAttributeUsageException">
            <summary>
            This Exception is thrown when the SectionReader class is called and the configurationSectionObject
            parameter is not decorated with the <see cref="T:IDS.Configuration.ConfigurationSectionAttribute" /> attribute, or is decorated with multiple instances of
            the <see cref="T:IDS.Configuration.ConfigurationSectionAttribute"/> attribute, or when the <see cref="T:IDS.Configuration.ConfigurationClassAttribute"/> attribute decorates a member that is not
            an array, but more than one XML node is found in the config file.
            </summary>
        </member>
        <member name="M:IDS.Configuration.InvalidAttributeUsageException.#ctor(System.Type,System.String)">
            <summary>
            The constructor that creates an exception and sets the exception message.
            </summary>
            <param name="configurationSectionType">The configuration section System.Type object.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:IDS.Configuration.InvalidAttributeUsageException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="configurationSectionType">The configuration section System.Type object.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that generated this exception.</param>
        </member>
        <member name="M:IDS.Configuration.InvalidAttributeUsageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:IDS.Configuration.InvalidLocationException">
            <summary>
            This Exception is thrown when the SectionReader class is passed a location that is not an
            element or attribute of a config file. For example, if the location is /, this will point to the root
            of the document tree, not an element or attribute in the document.
            </summary>
        </member>
        <member name="M:IDS.Configuration.InvalidLocationException.#ctor(System.Type,System.String)">
            <summary>
            The constructor that creates an exception and sets the exception message.
            </summary>
            <param name="configurationSectionType">The configuration section System.Type object.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:IDS.Configuration.InvalidLocationException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="configurationSectionType">The configuration section System.Type object.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that generated this exception.</param>
        </member>
        <member name="M:IDS.Configuration.InvalidLocationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:IDS.Configuration.InvalidMemberTypeException">
            <summary>
            This Exception is thrown when the SectionReader class cannot convert a config file value to
            the type defined in the class. For example, if a config file value is <c>Hello</c>, but the member type is
            defined as an Int32, then an InvalidMemberTypeException.
            </summary>
        </member>
        <member name="M:IDS.Configuration.InvalidMemberTypeException.#ctor(System.Type,System.String)">
            <summary>
            The constructor that creates an exception and sets the exception message.
            </summary>
            <param name="configurationSectionType">The configuration section System.Type object.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:IDS.Configuration.InvalidMemberTypeException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="configurationSectionType">The configuration section System.Type object.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that generated this exception.</param>
        </member>
        <member name="M:IDS.Configuration.InvalidMemberTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:IDS.Configuration.InvalidAttributePropertyValueException">
            <summary>
            This Exception is thrown when the SectionReader class cannot process an attribute's property because the
            value is invalid.
            </summary>
        </member>
        <member name="M:IDS.Configuration.InvalidAttributePropertyValueException.#ctor(System.Type,System.String)">
            <summary>
            The constructor that creates an exception and sets the exception message.
            </summary>
            <param name="configurationSectionType">The configuration section System.Type object.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:IDS.Configuration.InvalidAttributePropertyValueException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="configurationSectionType">The configuration section System.Type object.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that generated this exception.</param>
        </member>
        <member name="M:IDS.Configuration.InvalidAttributePropertyValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:IDS.Configuration.SectionHandlerException">
            <summary>
            This Exception is thrown when a section handler (a method decorated with the
            ConfigurationSectionHandler attribute) causes an exception to be thrown. The
            specific exception is the contained in the InnerException property of this class.
            </summary>
        </member>
        <member name="M:IDS.Configuration.SectionHandlerException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="configurationSectionType">The configuration section System.Type object.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that generated this exception.</param>
        </member>
        <member name="M:IDS.Configuration.SectionHandlerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:IDS.Content.ContentFormat">
            <summary>
            ContentFormat class
            </summary>
        </member>
        <member name="M:IDS.Content.ContentFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.ContentFormat"/> class.
            </summary>
        </member>
        <member name="M:IDS.Content.ContentFormat.#ctor(System.Collections.Generic.IEnumerable{IDS.Content.FieldDefinition})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.ContentFormat"/> class.
            </summary>
            <param name="fieldCollection">The field collection.</param>
        </member>
        <member name="P:IDS.Content.ContentFormat.FieldCollection">
            <summary>
            Gets or sets the field collection.
            </summary>
            <value>The field collection.</value>
        </member>
        <member name="P:IDS.Content.ContentFormat.Id">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:IDS.Content.ContentFormat.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:IDS.Content.ContentFormat.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:IDS.Content.ContentFormat.ExtendedProperties">
            <summary>
            Allows a place to add additional properties for extended formats.
            </summary>
        </member>
        <member name="P:IDS.Content.ContentFormat.CreateDateTimeUTC">
            <summary>
             Represents the date and time the file was created 
            </summary>
        </member>
        <member name="P:IDS.Content.ContentFormat.LastUpdatedDateTimeUTC">
            <summary>
             Represents the date and time the file was last updated 
            </summary>
        </member>
        <member name="T:IDS.Content.ContentFormatCollection">
            <summary>
            Class that represents a collection of ContentFormat objects
            </summary>
        </member>
        <member name="M:IDS.Content.ContentFormatCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.ContentFormatCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Content.ContentFormatCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Content.ContentFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.ContentFormatCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Content.ContentFormatCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FieldDefinitionCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than 0.</exception>
        </member>
        <member name="T:IDS.Content.ConverterBase">
            <summary>
             Base Converter Class
            </summary>
        </member>
        <member name="M:IDS.Content.ConverterBase.#ctor(System.Type)">
            <summary>
            </summary>
            <param name="baseType"></param>
        </member>
        <member name="M:IDS.Content.ConverterBase.Initialize(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initialize this instance.
            </summary>
            <param name="format">The format string.</param>
        </member>
        <member name="M:IDS.Content.ConverterBase.ConvertValueToFormat(System.Object)">
            <summary>
            Convert value to the format string.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns an object </returns>
        </member>
        <member name="M:IDS.Content.ConverterBase.ConvertValueFromFormat(System.Object)">
            <summary>
            Convert value from the format string.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns an object </returns>
        </member>
        <member name="T:IDS.Content.ConverterFactory">
            <summary>
            Converter Factory Class
            </summary>
        </member>
        <member name="M:IDS.Content.ConverterFactory.Create(System.Type)">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Content.DateConverter">
            <summary>
            Date Converter Class
            </summary>
        </member>
        <member name="M:IDS.Content.DateConverter.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.Content.DateConverter.Initialize(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initialize this instance.
            </summary>
            <param name="format">The format string.</param>
        </member>
        <member name="M:IDS.Content.DateConverter.ConvertValueToFormat(System.Object)">
            <summary>
            Converts from string to datetime.
            </summary>
        </member>
        <member name="M:IDS.Content.DateConverter.ConvertValueFromFormat(System.Object)">
            <summary>
            Converts from datetime to string.
            </summary>
        </member>
        <member name="T:IDS.Content.DecimalConverter">
            <summary>
            Decimal Converter Class
            </summary>
        </member>
        <member name="M:IDS.Content.DecimalConverter.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.Content.DecimalConverter.Initialize(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initialize this instance.
            </summary>
            <param name="format">The format string.</param>
        </member>
        <member name="M:IDS.Content.DecimalConverter.ConvertValueToFormat(System.Object)">
            <summary>
            Converts from string to decimal.
            </summary>
        </member>
        <member name="M:IDS.Content.DecimalConverter.ConvertValueFromFormat(System.Object)">
            <summary>
            Converts from decimal to string.
            </summary>
        </member>
        <member name="T:IDS.Content.DelimitedBuilder">
            <summary>
            This class will Build the Delimeted content using content format
            </summary>
        </member>
        <member name="M:IDS.Content.DelimitedBuilder.#ctor(IDS.Content.DelimitedFormat,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.DelimitedBuilder"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="lineDelimiter">lineDelimiter.</param>
        </member>
        <member name="P:IDS.Content.DelimitedBuilder.DelimitedFormat">
            <summary>
            Gets or sets the delimited format.
            </summary>
            <value>The delimited format.</value>
        </member>
        <member name="P:IDS.Content.DelimitedBuilder.LineDelimiter">
            <summary>
            Gets or sets the row delimiter.
            </summary>
            <value>The row delimiter.</value>
        </member>
        <member name="M:IDS.Content.DelimitedBuilder.BuildContent(System.Collections.Generic.IEnumerable{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Gets the content.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.DelimitedBuilder.GetBuiltContent(System.Collections.Generic.IEnumerable{IDS.Content.FieldDefinition},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the content of the built.
            </summary>
            <param name="fieldsCollection">The fields collection.</param>
            <param name="contentLine">The content line.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.DelimitedBuilder.BuildLine(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Builds the line.
            </summary>
            <param name="contentLine">The line.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Content.DelimitedFieldDefinition">
            <summary>
            Class that represents a delimited field definition.
            </summary>
        </member>
        <member name="M:IDS.Content.DelimitedFieldDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.DelimitedFieldDefinition"/> class.
            </summary>
        </member>
        <member name="M:IDS.Content.DelimitedFieldDefinition.#ctor(System.String,System.Type,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.DelimitedFieldDefinition"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="order">The order.</param>
            <param name="defaultValue">The default value of the field if no value is found</param>
            <param name="parentObject">The parent object of the name property</param>
            <param name="formatString">The format string of the value</param>
        </member>
        <member name="P:IDS.Content.DelimitedFieldDefinition.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>The order.</value>
        </member>
        <member name="T:IDS.Content.DelimitedFormat">
            <summary>
            Delimited Query
            </summary>
        </member>
        <member name="M:IDS.Content.DelimitedFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.DelimitedFormat"/> class.
            </summary>
        </member>
        <member name="M:IDS.Content.DelimitedFormat.#ctor(System.String,System.Collections.Generic.IEnumerable{IDS.Content.FieldDefinition})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.DelimitedFormat"/> class.
            </summary>
            <param name="delimiter">The delimiter.</param>
            <param name="fieldsCollection">The fieldsCollection.</param>
        </member>
        <member name="P:IDS.Content.DelimitedFormat.Delimiter">
            <summary>
            Gets or sets the delimiter.
            </summary>
            <value>The delimiter.</value>
        </member>
        <member name="M:IDS.Content.DelimitedFormat.SortFieldsCollection">
            <summary>
            Sorts the fields collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.DelimitedFormat.GetDelimitedFields">
            <summary>
            Gets the delimited fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.DelimitedFormat.GetDelimitedFields(System.Collections.Generic.IEnumerable{IDS.Content.FieldDefinition})">
            <summary>
            Gets the delimitedfields.
            </summary>
            <param name="fieldsCollection">The fields collection.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Content.DelimitedParser">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Content.DelimitedParser.#ctor(IDS.Content.DelimitedFormat,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.DelimitedParser"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="lineDelimiter">The lineDelimiter.</param>
        </member>
        <member name="P:IDS.Content.DelimitedParser.DelimitedFormat">
            <summary>
            Gets or sets the delimited format.
            </summary>
            <value>The delimited format.</value>
        </member>
        <member name="P:IDS.Content.DelimitedParser.LineDelimiter">
            <summary>
            Gets or sets the row delimiter.
            </summary>
            <value>The row delimiter.</value>
        </member>
        <member name="M:IDS.Content.DelimitedParser.ParseContent(System.String)">
            <summary>
            Parses the content. Raises an exception of the type <see cref="T:IDS.Content.ContentParseException"/>
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.DelimitedParser.GetParsedContent(System.String)">
            <summary>
            parses the content within a single line.
            </summary>
            <param name="contentLine">The content line.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.DelimitedParser.ParseLine(System.String)">
            <summary>
            Parses the line. Raises an exception of the type <see cref="T:IDS.Content.LineParseException"/>
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Content.FieldParseException">
            <summary>
            Exception that is thrown when on an invalid field parse attempt.
            </summary>
        </member>
        <member name="M:IDS.Content.FieldParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FieldParseException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Content.FieldParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FieldParseException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:IDS.Content.FieldParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FieldParseException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:IDS.Content.FieldParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FieldParseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:IDS.Content.FieldParseException.FieldDefinition">
            <summary>
            Gets or sets the field definition.
            </summary>
            <value>The field definition.</value>
        </member>
        <member name="P:IDS.Content.FieldParseException.ActualValue">
            <summary>
            Gets or sets the actual value that was attempted to be converted.
            </summary>
            <value>The actual value.</value>
        </member>
        <member name="T:IDS.Content.RequiredFieldMissingException">
            <summary>
            Exception that is thrown when an required field is missing during field parsing
            </summary>
        </member>
        <member name="M:IDS.Content.RequiredFieldMissingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.RequiredFieldMissingException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Content.RequiredFieldMissingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.RequiredFieldMissingException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:IDS.Content.RequiredFieldMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.RequiredFieldMissingException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:IDS.Content.RequiredFieldMissingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.RequiredFieldMissingException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:IDS.Content.ValidationExpressionMismatchException">
            <summary>
             Exception that is thrown if the validation regular expression mismatches on field parsing
            </summary>
        </member>
        <member name="M:IDS.Content.ValidationExpressionMismatchException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.ValidationExpressionMismatchException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Content.ValidationExpressionMismatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.ValidationExpressionMismatchException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:IDS.Content.ValidationExpressionMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.ValidationExpressionMismatchException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:IDS.Content.ValidationExpressionMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.ValidationExpressionMismatchException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:IDS.Content.LineParseException">
            <summary>
            Exception that is thrown when an invalid line conversion is attempted
            </summary>
        </member>
        <member name="M:IDS.Content.LineParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.LineParseException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Content.LineParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.LineParseException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:IDS.Content.LineParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.LineParseException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:IDS.Content.LineParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.LineParseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:IDS.Content.LineParseException.LineNumber">
            <summary>
            Gets or sets the line number ranging from 1 to n.
            </summary>
            <value>The line number which caused the exception, ranging from 1 to n.</value>
        </member>
        <member name="P:IDS.Content.LineParseException.FieldParseExceptions">
            <summary>
            Gets or sets the field parse exceptions.
            </summary>
            <value>The field parse exceptions.</value>
        </member>
        <member name="T:IDS.Content.ContentParseException">
            <summary>
            Exception that is thrown when an invalid file conversion is attempted
            </summary>
        </member>
        <member name="M:IDS.Content.ContentParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.ContentParseException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Content.ContentParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.ContentParseException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:IDS.Content.ContentParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.ContentParseException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:IDS.Content.ContentParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.ContentParseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:IDS.Content.ContentParseException.LineParseExceptions">
            <summary>
            Gets or sets the line parse exceptions.
            </summary>
            <value>The line parse exceptions.</value>
        </member>
        <member name="T:IDS.Content.FieldDefinition">
            <summary>
            Class that represents the definition of a field that is used in a  map definition / content format.
            </summary>
        </member>
        <member name="M:IDS.Content.FieldDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FieldDefinition"/> class.
            </summary>
        </member>
        <member name="M:IDS.Content.FieldDefinition.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FieldDefinition"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:IDS.Content.FieldDefinition.#ctor(System.String,System.Type,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FieldDefinition"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="defaultValue">The default value of the field if not value is present</param>
            <param name="parentObject">The object parent</param>
            <param name="formatString">The format string to format data</param>
        </member>
        <member name="P:IDS.Content.FieldDefinition.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:IDS.Content.FieldDefinition.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:IDS.Content.FieldDefinition.TypeString">
            <summary>
            Gets or sets the type string.
            </summary>
            <value>The type string.</value>
        </member>
        <member name="P:IDS.Content.FieldDefinition.ParentObject">
            <summary>
            Gets or sets the parent object of the Field.
            </summary>
            <value>The parent object.</value>
        </member>
        <member name="P:IDS.Content.FieldDefinition.DefaultValue">
            <summary>
            Gets or sets the default value of this field.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:IDS.Content.FieldDefinition.FormatString">
            <summary>
            Gets or sets the format string of this field.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:IDS.Content.FieldDefinition.IsRequired">
            <summary>
            Gets or sets a value indicating whether this instance is required.
            </summary>
            <value>
            	<c>true</c> if this instance is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Content.FieldDefinition.AlwaysUseDefaultValue">
            <summary>
            Gets or sets a value indicating whether this instance is to always use the default value or not.
            </summary>
            <value>
            	<c>true</c> if this instance is to always use the default value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Content.FieldDefinition.ValidationExpression">
            <summary>
            Gets or sets the regular expression used for additional string validations.
            </summary>
            <value>The validation expression.</value>
        </member>
        <member name="T:IDS.Content.FieldDefinitionCollection">
            <summary>
            Class that represents a collection of FieldDefinition objects
            </summary>
        </member>
        <member name="M:IDS.Content.FieldDefinitionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FieldDefinitionCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Content.FieldDefinitionCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Content.FieldDefinition})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FieldDefinitionCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Content.FieldDefinitionCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FieldDefinitionCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than 0.</exception>
        </member>
        <member name="T:IDS.Content.FileContent">
            <summary>
            FileContent Class
            </summary>
        </member>
        <member name="M:IDS.Content.FileContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FileContent"/> class.
            </summary>
        </member>
        <member name="M:IDS.Content.FileContent.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FileContent"/> class.
            </summary>
            <param name="id"></param>
            <param name="fileId"></param>
            <param name="content"></param>
        </member>
        <member name="P:IDS.Content.FileContent.Id">
            <summary>
             Represents the unique id of the content
            </summary>
        </member>
        <member name="P:IDS.Content.FileContent.FileId">
            <summary>
             Represents the unique id of the file associated with this content
            </summary>
        </member>
        <member name="P:IDS.Content.FileContent.Content">
            <summary>
             Represents the content of the file
            </summary>
        </member>
        <member name="P:IDS.Content.FileContent.CreateDateTimeUTC">
            <summary>
             Represents the date and time the raw data file was created 
            </summary>
        </member>
        <member name="P:IDS.Content.FileContent.LastUpdatedDateTimeUTC">
            <summary>
             Represents the date and time the raw data file was last updated 
            </summary>
        </member>
        <member name="T:IDS.Content.FileDefinition">
            <summary>
            File Definition Class
            </summary>
        </member>
        <member name="M:IDS.Content.FileDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FileDefinition"/> class.
            </summary>
        </member>
        <member name="M:IDS.Content.FileDefinition.#ctor(System.String,System.String,System.String,System.String,IDS.Content.SerializableDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FileDefinition"/> class.
            </summary>
            <param name="id"></param>
            <param name="fileName"></param>
            <param name="fileExtension"></param>
            <param name="formatId"></param>
            <param name="extendedProperties"></param>
        </member>
        <member name="P:IDS.Content.FileDefinition.Id">
            <summary>
             Represents the unique id associated with a file
            </summary>
        </member>
        <member name="P:IDS.Content.FileDefinition.FileName">
            <summary>
             Represents the name of the file
            </summary>
        </member>
        <member name="P:IDS.Content.FileDefinition.FileExtension">
            <summary>
             Represents the file extension 
            </summary>
        </member>
        <member name="P:IDS.Content.FileDefinition.FormatId">
            <summary>
             Represents the format id of the file
            </summary>
        </member>
        <member name="P:IDS.Content.FileDefinition.FileContent">
            <summary>
             Represents the raw content of the file, which is lazy-loaded
            </summary>
        </member>
        <member name="P:IDS.Content.FileDefinition.ExtendedProperties">
            <summary>
            Represents the extended fields that a file
            </summary>
        </member>
        <member name="P:IDS.Content.FileDefinition.CreateDateTimeUTC">
            <summary>
             Represents the date and time the file was created 
            </summary>
        </member>
        <member name="P:IDS.Content.FileDefinition.LastUpdatedDateTimeUTC">
            <summary>
             Represents the date and time the file was last updated 
            </summary>
        </member>
        <member name="P:IDS.Content.FileDefinition.DataProvider">
            <summary>
             Represents the DataProvider used to create this object, used for lazy loading the file content
            </summary>
        </member>
        <member name="T:IDS.Content.FixedContentParser">
            <summary>
            This class will have methods to parse fixed content
            </summary>
        </member>
        <member name="T:IDS.Content.FixedLengthBuilder">
            <summary>
            This class will have methods to build  fixed lenth content
            </summary>
        </member>
        <member name="M:IDS.Content.FixedLengthBuilder.#ctor(IDS.Content.FixedLengthFormat,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.DelimitedFormat"/> class.
            </summary>
            <param name="format">The parent.</param>
            <param name="lineDelimiter">The lineDelimiter.</param>
        </member>
        <member name="P:IDS.Content.FixedLengthBuilder.FixedLengthFormat">
            <summary>
            Gets or sets the delimited format.
            </summary>
            <value>The delimited format.</value>
        </member>
        <member name="P:IDS.Content.FixedLengthBuilder.LineDelimiter">
            <summary>
            Gets or sets the row delimiter.
            </summary>
            <value>The row delimiter.</value>
        </member>
        <member name="M:IDS.Content.FixedLengthBuilder.BuildContent(System.Collections.Generic.IEnumerable{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Gets the content.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.FixedLengthBuilder.GetBuiltContent(System.Collections.Generic.IEnumerable{IDS.Content.FieldDefinition},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the content of the built.
            </summary>
            <param name="fieldsCollection">The fields collection.</param>
            <param name="contentLine">The content line.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.FixedLengthBuilder.BuildLine(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Builds the line.
            </summary>
            <param name="contentLine">The contentLine.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Content.PaddingPositions">
            <summary>
             Padding positions of a field value
            </summary>
        </member>
        <member name="F:IDS.Content.PaddingPositions.Leading">
            <summary>
             Padding will be placed at the beginning of the field value
            </summary>
        </member>
        <member name="F:IDS.Content.PaddingPositions.Trailing">
            <summary>
             Padding will be placed at the end of the field value
            </summary>
        </member>
        <member name="T:IDS.Content.FixedLengthFieldDefinition">
            <summary>
            Class that represents a Fixed Length field definition.
            </summary>
        </member>
        <member name="M:IDS.Content.FixedLengthFieldDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FixedLengthFieldDefinition"/> class.
            </summary>
        </member>
        <member name="M:IDS.Content.FixedLengthFieldDefinition.#ctor(System.String,System.Type,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FixedLengthFieldDefinition"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="position">The position.</param>
            <param name="length">The length.</param>
            <param name="defaultValue">The default value of the field if no value is found</param>
            <param name="parentObject">The parent object of the name property</param>
            <param name="formatString">The format string of the value</param>
        </member>
        <member name="M:IDS.Content.FixedLengthFieldDefinition.#ctor(System.String,System.Type,System.Int32,System.Int32,System.Char,IDS.Content.PaddingPositions,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FixedLengthFieldDefinition"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="position">The position.</param>
            <param name="length">The length.</param>
            <param name="paddingChar">The character used to pad the value if shorter than required length.</param>
            <param name="paddingPosition">The position of character used to complete the length if value is shorter than length required.</param>
            <param name="defaultValue">The default value of the field if no value is found</param>
            <param name="parentObject">The parent object of the name property</param>
            <param name="formatString">The format string of the value</param>
        </member>
        <member name="P:IDS.Content.FixedLengthFieldDefinition.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:IDS.Content.FixedLengthFieldDefinition.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:IDS.Content.FixedLengthFieldDefinition.PaddingCharacter">
            <summary>
            Gets or sets the field value padding character string.
            </summary>
            <value>The field value padding character string.</value>
        </member>
        <member name="P:IDS.Content.FixedLengthFieldDefinition.PaddingPosition">
            <summary>
            Gets or sets the field value padding position.
            </summary>
            <value>The field value padding position.</value>
        </member>
        <member name="T:IDS.Content.FixedLengthFormat">
            <summary>
            Fixed Query
            </summary>
        </member>
        <member name="M:IDS.Content.FixedLengthFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FixedLengthFormat"/> class.
            </summary>
        </member>
        <member name="M:IDS.Content.FixedLengthFormat.#ctor(System.Collections.Generic.IEnumerable{IDS.Content.FieldDefinition})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.FixedLengthFormat"/> class.
            </summary>
            <param name="fieldsCollection">The fieldsCollection.</param>
        </member>
        <member name="M:IDS.Content.FixedLengthFormat.SortFieldsCollection">
            <summary>
            Sorts the fields collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.FixedLengthFormat.GetFixedLengthFields">
            <summary>
            Gets the fixed length fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.FixedLengthFormat.GetFixedLengthFields(System.Collections.Generic.IEnumerable{IDS.Content.FieldDefinition})">
            <summary>
            Gets the fixed length fields.
            </summary>
            <param name="fieldsCollection">The fields collection.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Content.FixedLengthParser">
            <summary>
            This Class will parse Fixed length content
            </summary>
        </member>
        <member name="M:IDS.Content.FixedLengthParser.#ctor(IDS.Content.FixedLengthFormat,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.DelimitedFormat"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="lineDelimiter">The lineDelimiter.</param>
        </member>
        <member name="P:IDS.Content.FixedLengthParser.FixedLengthFormat">
            <summary>
            Gets or sets the delimited format.
            </summary>
            <value>The delimited format.</value>
        </member>
        <member name="P:IDS.Content.FixedLengthParser.LineDelimiter">
            <summary>
            Gets or sets the row delimiter.
            </summary>
            <value>The row delimiter.</value>
        </member>
        <member name="M:IDS.Content.FixedLengthParser.ParseContent(System.String)">
            <summary>
            Gets the content.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.FixedLengthParser.GetParsedContent(System.String)">
            <summary>
            parses the content within a single line.
            </summary>
            <param name="contentLine">The content line.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.FixedLengthParser.ParseLine(System.String)">
            <summary>
            Parses the line.
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Content.IBuilder">
            <summary>
            Builder interface
            </summary>
        </member>
        <member name="M:IDS.Content.IBuilder.BuildContent(System.Collections.Generic.IEnumerable{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Builds the content.
            </summary>
            <param name="inputParameters">The input parameters.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Content.IContentDataProvider">
            <summary>
            Interface that implements a content data provider
            </summary>
        </member>
        <member name="M:IDS.Content.IContentDataProvider.AddContentFormat(IDS.Content.ContentFormat,System.Boolean,System.String)">
            <summary>
            This method signature will add a format to the database and update the format.Id property
            with the new database id that is generated.
            </summary>
            <param name="format">The format object that will be added to the database</param>
            <param name="allowDuplicateFormatNames">Allows duplicate format names or not</param>
            <param name="userId">The user that is adding the format</param>
        </member>
        <member name="M:IDS.Content.IContentDataProvider.UpdateContentFormat(IDS.Content.ContentFormat,System.Boolean,System.String)">
            <summary>
            This method signature will update a format.
            </summary>
            <param name="format">The format object that will be updated in the database</param>
            <param name="allowDuplicateFormatNames">Allows duplicate format names or not</param>
            <param name="userId">The user that is updating the format</param>
            <returns>The number of rows updated to the caller</returns>   
        </member>
        <member name="M:IDS.Content.IContentDataProvider.DeleteContentFormat(System.String,System.String)">
            <summary>
            This method signature will soft delete a format
            </summary>
            <param name="formatId">The unique format id that will be deleted from the database (soft deleted)</param>
            <param name="userId">The user that is deleting the format</param>
            <returns>The number of rows deleted to the caller</returns>          
        </member>
        <member name="M:IDS.Content.IContentDataProvider.GetContentFormat(System.String)">
            <summary>
            This method signature will get a format from the database filtered by format id
            </summary>
            <param name="formatId">The unique format id that will be retrieved from the database</param>
            <returns>The format object requested by caller and if file content is not found it will return null</returns> 
        </member>
        <member name="M:IDS.Content.IContentDataProvider.GetContentFormatByName(System.String)">
            <summary>
            Gets the content format by format name.
            </summary>
            <param name="formatName">Name of the format.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.IContentDataProvider.GetContentFormats">
            <summary>
            This method signature will get a format from the database filtered by dataspace
            </summary>
            <returns>A collection of content format objects requested by caller and will return a empty collection if no formats are found</returns> 
        </member>
        <member name="M:IDS.Content.IContentDataProvider.AddFile(IDS.Content.FileDefinition,System.String,System.Boolean)">
            <summary>
            This method signature will add a file definition and update the file.Id property
            with the new database id that is generated.
            </summary>
            <param name="fileObj">The file object that will be added to the database</param>
            <param name="userId">The user that is adding the file definition</param>
            <param name="recordDeleted">Allows the caller to enable(false)/disable(true) the file</param>
        </member>
        <member name="M:IDS.Content.IContentDataProvider.UpdateFile(System.String,System.String,System.Boolean)">
            <summary>
            This method signature will update a file
            </summary>
            <param name="fileId">The unique file id that will be updated from the database</param>
            <param name="userId">The user that is updating the file definition</param>
            <param name="recordDeleted">Allows the caller to enable(false)/disable(true) the file</param>
            <returns>The number of rows updated to the caller</returns>
        </member>
        <member name="M:IDS.Content.IContentDataProvider.UpdateFile(IDS.Content.FileDefinition,System.String,System.Boolean)">
            <summary>
            This method signature will let you update a file
            </summary>
            <param name="fileObj">The file object that will be updated in the database</param>
            <param name="userId">The user that is updating the file definition</param>
            <param name="recordDeleted">Allows the caller to enable(false)/disable(true) the file</param>
            <returns>The number of rows updated to the caller</returns>
        </member>
        <member name="M:IDS.Content.IContentDataProvider.DeleteFile(System.String,System.String)">
            <summary>
            This method signature will soft delete a file
            </summary>
            <param name="fileId">The unique file id that will be deleted from the database (soft deleted)</param>
            <param name="userId">The user that is deleting the file</param>
            <returns>The number of rows deleted to the caller</returns>
        </member>
        <member name="M:IDS.Content.IContentDataProvider.GetFile(System.String)">
            <summary>
            This method signature will get a file from the database
            </summary>
            <param name="fileId">The unique file id that will be retrieved from the database</param>
            <returns>The file object requested by caller and if file content is not found it will return null</returns>
        </member>
        <member name="M:IDS.Content.IContentDataProvider.GetFileContentById(System.String)">
            <summary>
            This method signature will get a file's content by its unique FileContentId
            </summary>
            <param name="fileContentId">The unique file content id that will be retrieved from the database</param>
            <returns>The file content object requested by caller and if file content is not found it will return null</returns>  
        </member>
        <member name="M:IDS.Content.IContentDataProvider.GetFileContentByFileId(System.String)">
            <summary>
            This method signature will let you get a file's content by FileId
            </summary>
            <param name="fileId">The file id used to retrieve its raw content from the database</param>
            <returns>The file content object requested by caller and if file content is not found it will return null</returns>  
        </member>
        <member name="T:IDS.Content.IConverter">
            <summary>
            Converter interface
            </summary>
        </member>
        <member name="M:IDS.Content.IConverter.Initialize(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initialize this instance.
            </summary>
            <param name="format">The format string.</param>
        </member>
        <member name="M:IDS.Content.IConverter.ConvertValueToFormat(System.Object)">
            <summary>
            Convert value to the format string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.IConverter.ConvertValueFromFormat(System.Object)">
            <summary>
            Convert value from the format string.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns an object </returns>
        </member>
        <member name="T:IDS.Content.ILine">
            <summary>
            Line interface
            </summary>
        </member>
        <member name="P:IDS.Content.ILine.LineDelimiter">
            <summary>
            Gets or sets the row delimiter.
            </summary>
            <value>The row delimiter.</value>
        </member>
        <member name="T:IDS.Content.ILineBuilder">
            <summary>
            Line Builder interface
            </summary>
        </member>
        <member name="M:IDS.Content.ILineBuilder.BuildLine(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Builds the line.
            </summary>
            <param name="inputParameters">The input parameters.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Content.ILineParser">
            <summary>
            Line Parser interface
            </summary>
        </member>
        <member name="M:IDS.Content.ILineParser.ParseLine(System.String)">
            <summary>
            Parses the line. Raises an exception of the type <see cref="T:IDS.Content.LineParseException"/>
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Content.IParser">
            <summary>
            Parser interface
            </summary>
        </member>
        <member name="M:IDS.Content.IParser.ParseContent(System.String)">
            <summary>
            Parses the content. Raises an exception of the type <see cref="T:IDS.Content.ContentParseException"/>
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Content.ObjectSerializerHelper`1">
            <summary>
             This Helper class can be used to serialize and Deserialize Domain Objects
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IDS.Content.ObjectSerializerHelper`1.SerializeObject(`0,System.Type[])">
            <summary>
            Serializes a specified object to an XML string.
            </summary>
            <param name="serializableObject"></param>
            <param name="extraTypes"></param>
            <returns>
            A serialized XML representation of the <paramref name="extraTypes" />.
            </returns>
        </member>
        <member name="M:IDS.Content.ObjectSerializerHelper`1.DeserializeObject(System.String,System.Type[])">
            <summary>
            Deserializes an object.
            </summary>
            <param name="xml">The XML.</param>
            <param name="extraTypes">The extra types.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.ObjectSerializerHelper`1.CreateObject(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates the object using the type and sets the properties based on the key value from the parameters dictionary passed in.
            If the property defined by the key is not found, all such unfound properties are maintained in a SerializableDictionary of string, object
            and are then tried to be set on a property SerializableDictionary of string, object ExtendedProperties if found on the object.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Content.ParserHelper">
            <summary>
            This Class will contain many helper methods for the parser
            </summary>
        </member>
        <member name="M:IDS.Content.ParserHelper.SplitLines(System.String,System.String)">
            <summary>
            Splits the lines and returns a string array.
            </summary>
            <param name="content">The content.</param>
            <param name="lineDelimiter">The lineDelimiter.</param>
            <returns>string array</returns>
        </member>
        <member name="M:IDS.Content.ParserHelper.ProcessEachLine(System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{IDS.Content.FieldDefinition})">
            <summary>
            Processes each line. Raises 
            </summary>
            <param name="contentValue">The contentValue.</param>
            <param name="fieldsCollection">The fieldsCollection.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.ParserHelper.GetDictionaryItemsForObjectProperties(System.Collections.Generic.IEnumerable{IDS.Content.FieldDefinition},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Converts the object into an  Dictionary of string, object for the specified Object properties within field collections
            defined by the fielddefinition's ParentObject node.
            Each public property on the object becomes the key - string and the property value is the value - object.
            If the object contains a public property called ExtendedProperties of type SerializableDictionary of string, object;
            each KeyValuePair of string, object in the SerializableDictionary is also added to the output list item.
            </summary>
            <param name="fieldsCollection">The fields collection.</param>
            <param name="contentLine">The content line.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.ParserHelper.GetListOfDictionaryItems(System.Collections.Generic.List{System.Object})">
            <summary>
            Converts the list of objects into an IEnumerable Dictionary of string, object. 
            Each public property on the object becomes the key - string and the property value is the value - object.
            If the object contains a public property called ExtendedProperties of type SerializableDictionary of string, object; 
            each KeyValuePair of string, object in the SerializableDictionary is also added to the output list item.
            </summary>
            <param name="objects">The objects.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.ParserHelper.GetDictionaryItem(System.Object)">
            <summary>
            Converts an object into a Dictionary of string, object. 
            Each public property on the object becomes the key - string and the property value is the value - object.
            If the object contains a public property called ExtendedProperties of type SerializableDictionary of string, object; 
            each KeyValuePair of string, object in the SerializableDictionary is also added to the output list item.
            </summary>
            <param name="itemObject">The item object.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.ParserHelper.GetDistinctParentFields(System.Collections.Generic.IEnumerable{IDS.Content.FieldDefinition})">
            <summary>
            Gets the distinct field definition from the given Field Definition collection 
            defined by the fielddefinition's ParentObject node.
            </summary>
            <param name="fieldsCollection">The fields collection.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Content.SerializableDictionary`2">
            <summary>
             Serializable Dictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:IDS.Content.SerializableDictionary`2.#ctor">
            <summary>
             SerializableDictionary
            </summary>
        </member>
        <member name="M:IDS.Content.SerializableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
             SerializableDictionary
            </summary>
        </member>
        <member name="M:IDS.Content.SerializableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             SerializableDictionary
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:IDS.Content.SerializableDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.SerializableDictionary`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:IDS.Content.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Content.SerializableDictionary`2"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:IDS.Content.SerializableDictionary`2.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
            
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
            
        </member>
        <member name="M:IDS.Content.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized. </param>
        </member>
        <member name="M:IDS.Content.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized. </param>
        </member>
        <member name="T:IDS.Content.SqlContentDataProvider">
            <summary>
             SqlContentDataProvider Class
            </summary>
        </member>
        <member name="P:IDS.Content.SqlContentDataProvider.ConnectionService">
            <summary>
            Gets or sets the connection service.
            </summary>
            <value>The connection service.</value>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.DoAddContentFormat(IDS.Content.ContentFormat,System.Boolean,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            This method signature will add a format to the database and update the format.Id property
            with the new database id that is generated.
            </summary>
            <param name="format">The format object that will be added to the database</param>
            <param name="allowDuplicateFormatNames">Allows duplicate format names or not</param>
            <param name="userId">The user that is adding the format</param>
            <param name="transaction">The Sql Transaction used for the insert format process.</param>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.DoUpdateContentFormat(IDS.Content.ContentFormat,System.Boolean,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            This method signature will update a format.
            </summary>
            <param name="format">The format object that will be updated in the database</param>
            <param name="allowDuplicateFormatNames">Allows duplicate format names or not</param>
            <param name="userId">The user that is updating the format</param>
            <param name="transaction">The Sql Transaction used for the updating format process.</param>
            <returns>The number of rows updated to the caller</returns>   
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.DoDeleteContentFormat(System.String,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            This method signature will soft delete a format
            </summary>
            <param name="formatId">The unique format id that will be deleted from the database (soft deleted)</param>
            <param name="userId">The user that is deleting the format</param>
            <param name="transaction">The Sql Transaction used for the deleting format process.</param>
            <returns>The number of rows deleted to the caller</returns>   
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.AddContentFormat(IDS.Content.ContentFormat,System.Boolean,System.String)">
            <summary>
            This method signature will add a format to the database and update the format.Id property
            with the new database id that is generated.
            </summary>
            <param name="format">The format object that will be added to the database</param>
            <param name="allowDuplicateFormatNames">Allows duplicate format names or not</param>
            <param name="userId">The user that is adding the format</param>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.UpdateContentFormat(IDS.Content.ContentFormat,System.Boolean,System.String)">
            <summary>
            This method signature will update a format.
            </summary>
            <param name="format">The format object that will be updated in the database</param>
            <param name="allowDuplicateFormatNames">Allows duplicate format names or not</param>
            <param name="userId">The user that is updating the format</param>
            <returns>The number of rows updated to the caller</returns>   
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.DeleteContentFormat(System.String,System.String)">
            <summary>
            This method signature will soft delete a format
            </summary>
            <param name="formatId">The unique format id that will be deleted from the database (soft deleted)</param>
            <param name="userId">The user that is deleting the format</param>
            <returns>The number of rows deleted to the caller</returns>   
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.GetContentFormat(System.String)">
            <summary>
            This method signature will get a format from the database filtered by format id
            </summary>
            <param name="formatId">The unique format id that will be retrieved from the database</param>
            <returns>The format object requested by caller</returns> 
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.GetContentFormats">
            <summary>
            This method signature will get a format from the database filtered by dataspace
            </summary>
            <returns>The format object requested by caller</returns> 
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.GetFormatFromReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            This method will populate a derived content format from the DataReader or will return null.
            </summary>
            <param name="reader">The sql data reader to create the format from</param>
            <returns>A content format object</returns>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.CreateDelimitedFormatFromReader(System.Data.SqlClient.SqlDataReader,IDS.Content.DelimitedFormat)">
            <summary>
            This method will populate a DelimetedFormat Object from the DataReader
            </summary>
            <param name="delimitedFormatReader"></param>
            <param name="delimitedFormat"></param>
            <returns>A delimited format object</returns>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.CreateFixedLengthFormatFromReader(System.Data.SqlClient.SqlDataReader,IDS.Content.FixedLengthFormat)">
            <summary>
            This Method will populate a FixedlengthFormat object from the SqlDataReader
            </summary>
            <param name="fixedLengthFormatReader"></param>
            <param name="fixedLengthFormat"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.DoAddFile(IDS.Content.FileDefinition,System.String,System.Boolean,System.Data.SqlClient.SqlTransaction)">
            <summary>
            This method signature will add a file definition and update the file.Id property
            with the new database id that is generated.
            </summary>
            <param name="fileObj">The file object that will be added to the database</param>
            <param name="userId">The user that is adding the file definition</param>
            <param name="recordDeleted">Allows the caller to enable(false)/disable(true) the file</param>
            <param name="transaction">The Sql Transaction used for the inserting file process.</param>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.DoUpdateFile(System.String,System.String,System.Boolean,System.Data.SqlClient.SqlTransaction)">
            <summary>
            This method signature will update a file
            </summary>
            <param name="fileId">The unique file id that will be updated from the database</param>
            <param name="userId">The user that is updating the file definition</param>
            <param name="recordDeleted">Allows the caller to enable(false)/disable(true) the file</param>
            <param name="transaction">The Sql Transaction used for the updating file process.</param>
            <returns>The number of rows updated to the caller</returns>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.DoUpdateFile(IDS.Content.FileDefinition,System.String,System.Boolean,System.Data.SqlClient.SqlTransaction)">
            <summary>
            This method signature will update a file
            </summary>
            <param name="fileObj">The file object that will be updated in the database</param>
            <param name="userId">The user that is updating the file definition</param>
            <param name="recordDeleted">Allows the caller to enable(false)/disable(true) the file</param>
            <param name="transaction">The Sql Transaction used for the updating file process.</param>
            <returns>The number of rows updated to the caller</returns>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.DoDeleteFile(System.String,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            This method signature will soft delete a file
            </summary>
            <param name="fileId">The unique file id that will be deleted from the database (soft deleted)</param>
            <param name="userId">The user that is deleting the file</param>
            <param name="transaction">The Sql Transaction used for the updating file process.</param>
            <returns>The number of rows deleted to the caller</returns>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.AddFile(IDS.Content.FileDefinition,System.String,System.Boolean)">
            <summary>
            This method signature will add a file definition and update the file.Id property
            with the new database id that is generated.
            </summary>
            <param name="fileObj">The file object that will be added to the database</param>
            <param name="userId">The user that is adding the file definition</param>
            <param name="recordDeleted">Allows the caller to enable(false)/disable(true) the file</param>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.UpdateFile(System.String,System.String,System.Boolean)">
            <summary>
            This method signature will let you update a file
            </summary>
            <param name="fileId">The file id that will be updated in the database</param>
            <param name="userId">The user that is updating the file definition</param>
            <param name="recordDeleted">Allows the caller to enable(false)/disable(true) the file</param>
            <returns>The number of rows updated to the caller</returns>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.UpdateFile(IDS.Content.FileDefinition,System.String,System.Boolean)">
            <summary>
            This method signature will let you update a file
            </summary>
            <param name="fileObj">The file object that will be updated in the database</param>
            <param name="userId">The user that is updating the file definition</param>
            <param name="recordDeleted">Allows the caller to enable(false)/disable(true) the file</param>
            <returns>The number of rows updated to the caller</returns>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.DeleteFile(System.String,System.String)">
            <summary>
            This method signature will soft delete a file
            </summary>
            <param name="fileId">The unique file id that will be deleted from the database (soft deleted)</param>
            <param name="userId">The user that is deleting the file</param>
            <returns>The number of rows deleted to the caller</returns>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.GetFile(System.String)">
            <summary>
            This method signature will get a file from the database
            </summary>
            <param name="fileId">The unique file id that will be retrieved from the database</param>
            <returns>The file object requested by caller</returns>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.GetFileFromReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            This method will populate a file definition object from the DataReader.
            </summary>
            <param name="reader">The sql data reader to create the file definition from</param>
            <returns>A file definition object</returns>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.GetFileContentById(System.String)">
            <summary>
            This method signature will get a file's content by its unique FileContentId
            </summary>
            <param name="fileContentId">The unique file content id that will be retrieved from the database</param>
            <returns>The file content object requested by caller and if file content is not found it will return null</returns>  
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.GetFileContentByFileId(System.String)">
            <summary>
            This method signature will let you get a file's content by FileId
            </summary>
            <param name="fileId">The file id used to retrieve its raw content from the database</param>
            <returns>The file content object requested by caller and if file content not found it will return null</returns>  
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.GetContentFormatByName(System.String)">
            <summary>
            This method will get you a content format by businessid and the format category and returns null if none found.
            </summary>
            <param name="formatName">The name of the format to be returned</param>
            <returns>It will return a ContentFormat object.</returns>
        </member>
        <member name="M:IDS.Content.SqlContentDataProvider.GetFileContentFromReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            This method will populate a file content object from the DataReader.
            </summary>
            <param name="reader">The sql data reader to create the file content from</param>
            <returns>A file content object</returns>
        </member>
        <member name="T:IDS.DataClasses.UserSession">
            <summary>
            </summary>
        </member>
        <member name="P:IDS.DataClasses.UserSession.SessionId">
            <summary>
            </summary>
        </member>
        <member name="P:IDS.DataClasses.UserSession.MinLogDateTime">
            <summary>
            </summary>
        </member>
        <member name="P:IDS.DataClasses.UserSession.MaxLogDateTime">
            <summary>
            </summary>
        </member>
        <member name="T:IDS.DataClasses.AuditRepository">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.DataClasses.AuditRepository.#ctor(IDS.Data.SqlConnectionService)">
            <summary>
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:IDS.DataClasses.AuditRepository.GetUserSessions(IDS.Security.IUser,System.Int32)">
            <summary>
            </summary>
            <param name="user"></param>
            <param name="maxDays"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.DataClasses.AuditRepository.GetWebRequests(System.String)">
            <summary>
            </summary>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.DataClasses.AuditRepository.GetCommonTableEntries(IDS.Security.IUser,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Boolean,System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.Nullable{System.Char})">
            <summary>
            </summary>
            <param name="user"></param>
            <param name="maxRecords"></param>
            <param name="maxDays"></param>
            <param name="dataspace"></param>
            <param name="excludeFilters"></param>
            <param name="filters"></param>
            <param name="columns"></param>
            <param name="columnDelimiter"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.DataClasses.DynamicQueryable">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.DataClasses.DynamicQueryable.Where``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="values"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IDS.DataClasses.DynamicQueryable.Where(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="values"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IDS.DataClasses.DynamicQueryable.Select(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="values"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IDS.DataClasses.DynamicQueryable.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
            </summary>
            <param name="source"></param>
            <param name="ordering"></param>
            <param name="values"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IDS.DataClasses.DynamicQueryable.OrderBy(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            </summary>
            <param name="source"></param>
            <param name="ordering"></param>
            <param name="values"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IDS.DataClasses.DynamicQueryable.Take(System.Linq.IQueryable,System.Int32)">
            <summary>
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IDS.DataClasses.DynamicQueryable.Skip(System.Linq.IQueryable,System.Int32)">
            <summary>
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IDS.DataClasses.DynamicQueryable.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Object[])">
            <summary>
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="values"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IDS.DataClasses.DynamicQueryable.Any(System.Linq.IQueryable)">
            <summary>
            </summary>
            <param name="source"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:IDS.DataClasses.DynamicQueryable.Count(System.Linq.IQueryable)">
            <summary>
            </summary>
            <param name="source"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:IDS.DataClasses.DynamicClass">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.DataClasses.DynamicClass.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.DataClasses.DynamicProperty">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.DataClasses.DynamicProperty.#ctor(System.String,System.Type)">
            <summary>
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:IDS.DataClasses.DynamicProperty.Name">
            <summary>
            </summary>
        </member>
        <member name="P:IDS.DataClasses.DynamicProperty.Type">
            <summary>
            </summary>
        </member>
        <member name="T:IDS.DataClasses.DynamicExpression">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.DataClasses.DynamicExpression.Parse(System.Type,System.String,System.Object[])">
            <summary>
            </summary>
            <param name="resultType"></param>
            <param name="expression"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.DataClasses.DynamicExpression.ParseLambda(System.Type,System.Type,System.String,System.Object[])">
            <summary>
            </summary>
            <param name="itType"></param>
            <param name="resultType"></param>
            <param name="expression"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.DataClasses.DynamicExpression.ParseLambda(System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            </summary>
            <param name="parameters"></param>
            <param name="resultType"></param>
            <param name="expression"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.DataClasses.DynamicExpression.ParseLambda``2(System.String,System.Object[])">
            <summary>
            </summary>
            <param name="expression"></param>
            <param name="values"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="S"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IDS.DataClasses.DynamicExpression.CreateClass(IDS.DataClasses.DynamicProperty[])">
            <summary>
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.DataClasses.DynamicExpression.CreateClass(System.Collections.Generic.IEnumerable{IDS.DataClasses.DynamicProperty})">
            <summary>
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.DataClasses.DynamicExpression.CreateClass(System.Collections.Generic.List{IDS.DataClasses.DynamicProperty},System.Type)">
            <summary>
            </summary>
            <param name="properties"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.DataClasses.ParseException">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.DataClasses.ParseException.#ctor(System.String,System.Int32)">
            <summary>
            </summary>
            <param name="message"></param>
            <param name="position"></param>
        </member>
        <member name="P:IDS.DataClasses.ParseException.Position">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.DataClasses.ParseException.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.DataClasses.IAuditRepository">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.DataClasses.IAuditRepository.GetUserSessions(IDS.Security.IUser,System.Int32)">
            <summary>
            </summary>
            <param name="user"></param>
            <param name="maxDays"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.DataClasses.IAuditRepository.GetWebRequests(System.String)">
            <summary>
            </summary>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.DataClasses.IAuditRepository.GetCommonTableEntries(IDS.Security.IUser,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Boolean,System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.Nullable{System.Char})">
            <summary>
            </summary>
            <param name="user"></param>
            <param name="maxRecords"></param>
            <param name="maxDays"></param>
            <param name="dataspace"></param>
            <param name="excludeFilters"></param>
            <param name="filters"></param>
            <param name="columns"></param>
            <param name="columnDelimiter"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.DataClasses.ILoggingRepository">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.DataClasses.ILoggingRepository.GetLogEntries(System.Guid,System.String)">
            <summary>
            </summary>
            <param name="requestId"></param>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.DataClasses.LoggingDataClassesDataContext">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.DataClasses.LoggingDataClassesDataContext.#ctor(System.String)">
            <summary>
            </summary>
            <param name="fileOrServerOrConnection"></param>
        </member>
        <member name="M:IDS.DataClasses.LoggingDataClassesDataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
            <summary>
            </summary>
            <param name="fileOrServerOrConnection"></param>
            <param name="mapping"></param>
        </member>
        <member name="M:IDS.DataClasses.LoggingDataClassesDataContext.#ctor(System.Data.IDbConnection)">
            <summary>
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:IDS.DataClasses.LoggingDataClassesDataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)">
            <summary>
            </summary>
            <param name="connection"></param>
            <param name="mapping"></param>
        </member>
        <member name="M:IDS.DataClasses.LoggingDataClassesDataContext.LOG_GetLogEntries(System.Nullable{System.Guid},System.String)">
            <summary>
            </summary>
            <param name="requestId"></param>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.DataClasses.LoggingRepository">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.DataClasses.LoggingRepository.#ctor(IDS.Data.SqlConnectionService)">
            <summary>
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:IDS.DataClasses.LoggingRepository.GetLogEntries(System.Guid,System.String)">
            <summary>
            </summary>
            <param name="requestId"></param>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Logging.LogEntry">
            <summary>
            Represents a complete log entry that can be logged through a created logger or the LogSystem.
            </summary>
        </member>
        <member name="M:IDS.Logging.LogEntry.LoadFrom(System.String)">
            <summary>
            Loads a <see cref="T:IDS.Logging.LogEntry"/> from the given <paramref name="xml"/> string.
            </summary>
            <param name="xml">The stream from which to load the <see cref="T:IDS.Logging.LogEntry"/>.</param>
            <returns>A <see cref="T:IDS.Logging.LogEntry"/> initialized with data from the given <paramref name="xml"/> string.</returns>
        </member>
        <member name="M:IDS.Logging.LogEntry.LoadFrom(System.IO.TextReader)">
            <summary>
            Loads a <see cref="T:IDS.Logging.LogEntry"/> from the given <paramref name="reader"/>.
            </summary>
            <param name="reader">The stream from which to load the <see cref="T:IDS.Logging.LogEntry"/>.</param>
            <returns>A <see cref="T:IDS.Logging.LogEntry"/> initialized with data from the given <paramref name="reader"/>.</returns>
        </member>
        <member name="M:IDS.Logging.LogEntry.LoadFrom(System.Xml.XmlReader)">
            <summary>
            Loads a <see cref="T:IDS.Logging.LogEntry"/> from the given <paramref name="reader"/>.
            </summary>
            <param name="reader">The stream from which to load the <see cref="T:IDS.Logging.LogEntry"/>.</param>
            <returns>A <see cref="T:IDS.Logging.LogEntry"/> initialized with data from the given <paramref name="reader"/>.</returns>
        </member>
        <member name="M:IDS.Logging.LogEntry.LoadFrom(System.IO.Stream)">
            <summary>
            Loads a <see cref="T:IDS.Logging.LogEntry"/> from the given <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream from which to load the <see cref="T:IDS.Logging.LogEntry"/>.</param>
            <returns>A <see cref="T:IDS.Logging.LogEntry"/> initialized with data from the given <paramref name="stream"/>.</returns>
        </member>
        <member name="M:IDS.Logging.LogEntry.LoadFrom``1(System.String)">
            <summary>
            Loads a <see cref="T:IDS.Logging.LogEntry"/> from the given <paramref name="xml"/> string.
            </summary>
            <typeparam name="T">The specific type of <see cref="T:IDS.Logging.LogEntry"/> that should be loaded.</typeparam>
            <param name="xml">The stream from which to load the <see cref="T:IDS.Logging.LogEntry"/>.</param>
            <returns>A <see cref="T:IDS.Logging.LogEntry"/> of type <typeparamref name="T"/> initialized with data from the given <paramref name="xml"/> string.</returns>
        </member>
        <member name="M:IDS.Logging.LogEntry.LoadFrom``1(System.IO.TextReader)">
            <summary>
            Loads a <see cref="T:IDS.Logging.LogEntry"/> from the given <paramref name="reader"/>.
            </summary>
            <typeparam name="T">The specific type of <see cref="T:IDS.Logging.LogEntry"/> that should be loaded.</typeparam>
            <param name="reader">The stream from which to load the <see cref="T:IDS.Logging.LogEntry"/>.</param>
            <returns>A <see cref="T:IDS.Logging.LogEntry"/> of type <typeparamref name="T"/> initialized with data from the given <paramref name="reader"/>.</returns>
        </member>
        <member name="M:IDS.Logging.LogEntry.LoadFrom``1(System.Xml.XmlReader)">
            <summary>
            Loads a <see cref="T:IDS.Logging.LogEntry"/> from the given <paramref name="reader"/>.
            </summary>
            <typeparam name="T">The specific type of <see cref="T:IDS.Logging.LogEntry"/> that should be loaded.</typeparam>
            <param name="reader">The stream from which to load the <see cref="T:IDS.Logging.LogEntry"/>.</param>
            <returns>A <see cref="T:IDS.Logging.LogEntry"/> of type <typeparamref name="T"/> initialized with data from the given <paramref name="reader"/>.</returns>
        </member>
        <member name="M:IDS.Logging.LogEntry.LoadFrom``1(System.IO.Stream)">
            <summary>
            Loads a <see cref="T:IDS.Logging.LogEntry"/> from the given <paramref name="stream"/>.
            </summary>
            <typeparam name="T">The specific type of <see cref="T:IDS.Logging.LogEntry"/> that should be loaded.</typeparam>
            <param name="stream">The stream from which to load the <see cref="T:IDS.Logging.LogEntry"/>.</param>
            <returns>A <see cref="T:IDS.Logging.LogEntry"/> of type <typeparamref name="T"/> initialized with data from the given <paramref name="stream"/>.</returns>
        </member>
        <member name="M:IDS.Logging.LogEntry.GetSerializer(System.Type)">
            <summary>
            Gets the serializer.
            </summary>
            <param name="type">Type for which a serializer should be returned.</param>
            <returns>
            An <see cref="T:System.Xml.Serialization.XmlSerializer"/> capable of serializing the specified type.
            </returns>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor">
            <summary>
            Initializes a new log entry.
            </summary>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(System.Enum)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(System.Enum,IDS.Logging.LogSeverity)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(System.String,IDS.Logging.LogSeverity)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(System.Enum,System.Object)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(System.Enum,System.Object,System.Object)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged. This object can implement ILoggable.</param>
            <param name="details">Details to accompany the log entry. This object can implement ILoggable.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(System.Enum,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged. This object can implement ILoggable.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(System.String,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged. This object can implement ILoggable.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(System.Enum,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged. This object can implement ILoggable.</param>
            <param name="details">Details to accompany the log entry. This object can implement ILoggable.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(System.String,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged. This object can implement ILoggable.</param>
            <param name="details">Details to accompany the log entry. This object can implement ILoggable.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(IDS.Logging.LogContext,System.Enum,System.Object)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="context">The LogContext to log to the Logging System</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged. This object can implement ILoggable.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(IDS.Logging.LogContext,System.String,System.Object)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="context">The LogContext to log to the Logging System</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged. This object can implement ILoggable.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(IDS.Logging.LogContext,System.Enum,System.Object,System.Object)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="context">The LogContext to log to the Logging System</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged. This object can implement ILoggable.</param>
            <param name="details">Details to accompany the log entry. This object can implement ILoggable.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(IDS.Logging.LogContext,System.String,System.Object,System.Object)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="context">The LogContext to log to the Logging System</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged. This object can implement ILoggable.</param>
            <param name="details">Details to accompany the log entry. This object can implement ILoggable.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(IDS.Logging.LogContext,System.Enum,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="context">The LogContext to log to the Logging System</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged. This object can implement ILoggable.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(IDS.Logging.LogContext,System.String,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="context">The LogContext to log to the Logging System</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged. This object can implement ILoggable.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(IDS.Logging.LogContext,System.Enum,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="context">The LogContext to log to the Logging System</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged. This object can implement ILoggable.</param>
            <param name="details">Details to accompany the log entry. This object can implement ILoggable.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(IDS.Logging.LogContext,System.String,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="context">The LogContext to log to the Logging System</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged. This object can implement ILoggable.</param>
            <param name="details">Details to accompany the log entry. This object can implement ILoggable.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.#ctor(IDS.Logging.LogContext,System.Enum,IDS.Logging.LogSeverity,System.Object,System.Object,System.String)">
            <summary>
            Initializes a new LogEntry with the given properties.
            </summary>
            <param name="context">The LogContext to log to the Logging System</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged. This object can implement ILoggable.</param>
            <param name="details">Details to accompany the log entry. This object can implement ILoggable.</param>
            <param name="categoryName">the name of the category to use in logging.</param>
        </member>
        <member name="P:IDS.Logging.LogEntry.CommonID">
            <summary>
            The ID associated with this Log Entry.
            </summary>
        </member>
        <member name="P:IDS.Logging.LogEntry.Category">
            <summary>
            Gets or sets the category this log entry belongs to.
            </summary>
            <value>The category associated with this log entry.</value>
        </member>
        <member name="P:IDS.Logging.LogEntry.CategoryName">
            <summary>
            Gets or sets the name of the cateogry that this entry belongs to.
            </summary>
        </member>
        <member name="P:IDS.Logging.LogEntry.Context">
            <summary>
            Gets or sets the context this log entry resides within.
            </summary>
            <value>A LogContext.</value>
        </member>
        <member name="P:IDS.Logging.LogEntry.Severity">
            <summary>
            Gets or sets the severity of the log entry.
            </summary>
            <value>One of the <see cref="T:IDS.Logging.LogSeverity"/> values.</value>
        </member>
        <member name="P:IDS.Logging.LogEntry.LogDate">
            <summary>
            Gets or sets the Date and Time of the log entry.
            </summary>
            <value>A new DateTime with the same date as this instance, 
            and the time value set to 12 A.M. (00:00:00).</value>
        </member>
        <member name="P:IDS.Logging.LogEntry.Content">
            <summary>
            Gets or sets the object content of the log entry.
            <seealso cref="T:IDS.Logging.ILoggable"/>
            </summary>
            <value>Content associated with this log entry.</value>
            <remarks>
            Depending on the logger used, the content object may be converted to a string via ToString() or <see cref="M:IDS.Logging.ILoggable.ToLog"/>.
            </remarks>
        </member>
        <member name="P:IDS.Logging.LogEntry.ContentString">
            <summary>
            Gets the <see cref="P:IDS.Logging.LogEntry.Content"/> property as a string.
            </summary>
            <value>The <see cref="P:IDS.Logging.LogEntry.Content"/> property as a string.</value>
        </member>
        <member name="P:IDS.Logging.LogEntry.Details">
            <summary>
            Gets or sets the object details of the log entry -- for example, a stack trace.
            <seealso cref="T:IDS.Logging.ILoggable"/>
            </summary>
            <value>Details associated with this log entry.</value>
            <remarks>
            Depending on the logger used, the details object may be converted to a string via ToString() or <see cref="M:IDS.Logging.ILoggable.ToLog"/>.
            </remarks>
        </member>
        <member name="P:IDS.Logging.LogEntry.DetailsString">
            <summary>
            Gets the <see cref="P:IDS.Logging.LogEntry.Details"/> property as a string.
            </summary>
            <value>The <see cref="P:IDS.Logging.LogEntry.Details"/> property as a string.</value>
            <remarks>
            This property is for handling serialization and deserialization. The <see cref="P:IDS.Logging.LogEntry.Details"/>
            object is converted to a string on serialization and placed as a string back
            into the <see cref="P:IDS.Logging.LogEntry.Details"/> object on deserialization. This causes the class to lose the
            true type of the <see cref="P:IDS.Logging.LogEntry.Details"/> object.
            </remarks>
        </member>
        <member name="P:IDS.Logging.LogEntry.LocationInfo">
            <summary>
            Gets or sets the location info.
            </summary>
            <value>The location info.</value>
        </member>
        <member name="M:IDS.Logging.LogEntry.ToString(System.String)">
            <summary>
            Converts the log entry to a string, based on the given format string.
            </summary>
            <param name="formatString">The tokenized format string to use in the conversion.</param>
            <returns>A String that represents the current Log.</returns>
            <remarks>
            <list type="table">
            	<listheader>Format tokens</listheader>
            	<item>{0} - Log Context location</item>
            	<item>{1} - Log Context server name</item>
            	<item>{2} - Log Context assembly location</item>
            	<item>{3} - Log date/time</item>
            	<item>{4} - Log category</item>
            	<item>{5} - Log severity</item>
            	<item>{6} - Log content</item>
            	<item>{7} - Log details</item>
            	<item>{8} - User Defined Date</item>
            	<item>{9} - Thread ID</item>
            	<item>{10} - ASP.NET Session ID</item>
            	<item>{11} - Principal Identity Name</item>
            	<item>{12} - Windows Identity Name</item>
            	<item>{13} - Host name</item>
            	<item>{14} - IP Address</item>
            	<item>{15} - URL</item>
            	<item>{16} - URL Referrer</item>
            	<item>{17} - User Agent</item>
            	<item>{18} - Dataspace</item>
            	<item>{19} - Calling Class Name</item>
            	<item>{20} - Calling Method Name</item>
            	<item>{21} - Calling Code File Name</item>
            	<item>{22} - Calling Code Line Number</item>
            	<item>{23} - Full Calling Code Location Info (Class, Method, File, Line)</item>
            	<item>{24} - UDT Log date/time</item>
            </list>
            </remarks>
            <example>
            Format string example:
            <code>
            <![CDATA[
            <logger enabled="true" class="IDS.Logging.FileSystemLogger, IDS.System">
            	<logFormatString>{3:d}: {6} ({7}) [{4}/{5}]</logFormatString>
            	<parameters>
            		<fileName>C:\Portal.log</fileName>
            	</parameters>
            </logger>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:IDS.Logging.LogEntry.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:IDS.Logging.LogEntry.DefaultFormatString">
            <summary>
            Gets the default format string used in the <see cref="M:IDS.Logging.LogEntry.ToString"/> method.
            </summary>
            <value>The default format string.</value>
        </member>
        <member name="M:IDS.Logging.LogEntry.ToXml">
            <summary>
            Converts the LogEntry instance to an XML string.
            </summary>
            <example>
            &lt;logEntry 
            	    date=&quot;Wed, 06 Apr 2005 22:09:04 GMT&quot; 
            	    categoryType=&quot;IDS.Portal.PortalLogCategory, IDS.Portal&quot; 
            	    category=&quot;PageView&quot; severity=&quot;Information&quot; thread=&quot;36&quot; 
            	principalIdentity=&quot;DOMAIN\USERNAME&quot; windowsIdentity=&quot;DOMAIN\USERNAME&quot;&gt;
            	    &lt;context location=&quot;LOCATION&quot; server=&quot;SERVER NAME&quot; assembly=&quot;IDS.System&quot; /&gt;
            	    &lt;content&gt;
            	        Here is the content data
            	    &lt;/content&gt;
            	    &lt;details&gt;
            	        Here is the details data
            	    &lt;/details&gt;
            &lt;/logEntry&gt;
            </example>
            <returns>Returns an XML string representation of the current instance.</returns>
        </member>
        <member name="M:IDS.Logging.LogEntry.SerializeTo(System.IO.Stream)">
            <summary>
            Serializes this object to the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.SerializeTo(System.IO.TextWriter)">
            <summary>
            Serializes this object to the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.SerializeTo(System.Xml.XmlWriter)">
            <summary>
            Serializes this object to the specified <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:IDS.Logging.LogEntry.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:IDS.Logging.AuditBaseLogger">
            <summary>
            The base class for audit loggers. This class inherits from IDS.Logging.BaseLogger and so it
            inherits all of its functionality. See that class for an example.
            </summary>
        </member>
        <member name="M:IDS.Logging.AuditBaseLogger.CanLog(IDS.Logging.LogEntry)">
            <summary>
            Determines whether the logger can log the given <see cref="T:IDS.Logging.LogEntry"/>.
            </summary>
            <param name="entry">LogEntry to analyse for criteria.</param>
            <returns>true if the logger can log the given log entry, false if not.</returns>
        </member>
        <member name="T:IDS.Logging.AuditLogEntry">
            <summary>
            Represents a complete audit log entry that can be logged through a created logger or the LogSystem.
            </summary>
        </member>
        <member name="M:IDS.Logging.AuditLogEntry.#ctor">
            <summary>
            Initializes a new audit log entry.
            </summary>
        </member>
        <member name="M:IDS.Logging.AuditLogEntry.#ctor(IDS.Security.IUser,System.String,System.Boolean)">
            <summary>
            Initializes a new audit log entry.
            </summary>
            <param name="user">The user associated with the audit log entry.</param>
            <param name="actionTaken">A string describing the action taken.</param>
            <param name="result">if set to <c>true</c> the audited action was successful.</param>
        </member>
        <member name="M:IDS.Logging.AuditLogEntry.#ctor(IDS.Security.IUser,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new audit log entry.
            </summary>
            <param name="user">The user associated with the audit log entry.</param>
            <param name="actionTaken">A string describing the action taken.</param>
            <param name="result">if set to <c>true</c> the audited action was successful.</param>
            <param name="details">Details regarding what is being logged.</param>
        </member>
        <member name="M:IDS.Logging.AuditLogEntry.#ctor(System.String,System.Boolean,System.String,IDS.Security.ICredentials)">
            <summary>
            Initializes a new audit log entry.
            </summary>
            <param name="actionTaken">A string describing the action taken.</param>
            <param name="result">if set to <c>true</c> the audited action was successful.</param>
            <param name="details">Details regarding what is being logged.</param>
            <param name="credentials">The credentials associated with the failed login attempt.</param>
        </member>
        <member name="M:IDS.Logging.AuditLogEntry.#ctor(IDS.Security.ICredentials,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new audit log entry.
            </summary>
            <param name="credentials">The credentials associated with the failed login attempt.</param>
            <param name="actionTaken">A string describing the action taken.</param>
            <param name="result">if set to <c>true</c> the audited action was successful.</param>
            <param name="details">Details regarding what is being logged.</param>
        </member>
        <member name="M:IDS.Logging.AuditLogEntry.#ctor(System.String,IDS.Security.ICredentials,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new audit log entry.
            </summary>
            <param name="user">The user associated with the audit log entry.</param>
            <param name="credentials">The credentials associated with the audit log entry.</param>
            <param name="actionTaken">A string describing the action taken.</param>
            <param name="result">if set to <c>true</c> the audited action was successful.</param>
            <param name="details">Details regarding what is being logged.</param>
        </member>
        <member name="M:IDS.Logging.AuditLogEntry.#ctor(IDS.Security.IUser,IDS.Security.ICredentials,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new audit log entry.
            </summary>
            <param name="user">The user associated with the audit log entry.</param>
            <param name="credentials">The credentials associated with the audit log entry.</param>
            <param name="actionTaken">A string describing the action taken.</param>
            <param name="result">if set to <c>true</c> the audited action was successful.</param>
            <param name="details">Details regarding what is being logged.</param>
        </member>
        <member name="M:IDS.Logging.AuditLogEntry.#ctor(IDS.Security.IUser,System.String,IDS.Security.ICredentials,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new audit log entry.
            </summary>
            <param name="user">The user associated with the audit log entry.</param>
            <param name="userString">A string representing the current user. This is only used if we don't have an IUser instance available.</param>
            <param name="credentials">The credentials associated with the audit log entry.</param>
            <param name="actionTaken">A string describing the action taken.</param>
            <param name="result">if set to <c>true</c> the audited action was successful.</param>
            <param name="details">Details regarding what is being logged.</param>
        </member>
        <member name="P:IDS.Logging.AuditLogEntry.AuditId">
            <summary>
            Gets or sets the audit Id. 
            </summary>
            <value>Audit Id</value>
        </member>
        <member name="P:IDS.Logging.AuditLogEntry.Credentials">
            <summary>
            Gets or sets the credentials associated with this AuditLogEntry.
            </summary>
            <value>The credentials associated with this AuditLogEntry or null.</value>
        </member>
        <member name="P:IDS.Logging.AuditLogEntry.CredentialsString">
            <summary>
            Gets the credentials string associated with this AuditLogEntry.
            </summary>
            <value>The credentials string associated with this AuditLogEntry or null.</value>
        </member>
        <member name="P:IDS.Logging.AuditLogEntry.User">
            <summary>
            Gets or sets the user associated with this AuditLogEntry.
            </summary>
            <value>The user associated with this AuditLogEntry or null.</value>
        </member>
        <member name="P:IDS.Logging.AuditLogEntry.UserString">
            <summary>
            Gets the user string associated with this AuditLogEntry.
            </summary>
            <value>The user string associated with this AuditLogEntry or null.</value>
        </member>
        <member name="P:IDS.Logging.AuditLogEntry.Impersonator">
            <summary>
            Gets or sets the impersonator associated with the current thread.
            </summary>
            <value>The impersonator associated with the current thread or null.</value>
        </member>
        <member name="P:IDS.Logging.AuditLogEntry.ActionTaken">
            <summary>
            Gets or sets the action taken.  What was attempted to be done.
            </summary>
            <value>action</value>
        </member>
        <member name="P:IDS.Logging.AuditLogEntry.Result">
            <summary>
            Gets or sets the result of the action taken.
            </summary>
            <value>[true/false]</value>
        </member>
        <member name="M:IDS.Logging.AuditLogEntry.ToString(System.String)">
            <summary>
            Converts the audit log entry to a string, based on the given format string.
            </summary>
            <param name="formatString">The tokenized format string to use in the conversion.</param>
            <returns>A String that represents the current Log.</returns>
            <remarks>
            <list type="table">
            	<listheader>Format tokens</listheader>
            	<item>{0} - Log Context location</item>
            	<item>{1} - Log Context server name</item>
            	<item>{2} - Log Context assembly location</item>
            	<item>{3} - Log date/time</item>
            	<item>{4} - Log category</item>
            	<item>{5} - Log severity</item>
            	<item>{6} - Log content</item>
            	<item>{7} - Log details</item>
            	<item>{8} - User Defined Date</item>
            	<item>{9} - Thread ID</item>
            	<item>{10} - ASP.NET Session ID</item>
            	<item>{11} - Principal Identity Name</item>
            	<item>{12} - Windows Identity Name</item>
            	<item>{13} - Host name</item>
            	<item>{14} - IP Address</item>
            	<item>{15} - URL</item>
            	<item>{16} - URL Referrer</item>
            	<item>{17} - User Agent</item>
            	<item>{18} - Dataspace</item>
            	<item>{19} - Calling Class Name</item>
            	<item>{20} - Calling Method Name</item>
            	<item>{21} - Calling Code File Name</item>
            	<item>{22} - Calling Code Line Number</item>
            	<item>{23} - Full Calling Code Location Info (Class, Method, File, Line)</item>
            	<item>{24} - UDT Log date/time</item>
            	<item>{25} - Audit Result</item>
            	<item>{26} - Audit Action Taken</item>
            	<item>{27} - Credentials.ToString()</item>
            	<item>{28} - User.ToString()</item>
            </list>
            </remarks>
            <example>
            Format string example:
            <code>
            <![CDATA[
            <logger enabled="true" class="IDS.Logging.FileSystemLogger, IDS.System">
            	<logFormatString>{3:d}: {6} ({7}) [{4}/{5}]</logFormatString>
            	<parameters>
            		<fileName>C:\Portal.log</fileName>
            	</parameters>
            </logger>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:IDS.Logging.AuditLogEntry.DefaultFormatString">
            <summary>
            Gets the default format string used in the <see cref="M:IDS.Logging.AuditLogEntry.ToString(System.String)"/> method.
            </summary>
            <value>The default format string.</value>
        </member>
        <member name="M:IDS.Logging.AuditLogEntry.PersistToSql(System.Data.SqlClient.SqlTransaction)">
            <summary>
            When overridden in a derived type, allows the derived type to persist its data
            to a SQL Server database. The derived type must first call the base type's
            implementation, which will create the necessary base entry.
            </summary>
            <param name="transaction">
            The SqlTransaction object used to wrap the transaction while updating the database. 
            </param>
        </member>
        <member name="M:IDS.Logging.AuditLogEntry.AddIdParameters(System.Data.SqlClient.SqlParameterCollection)">
            <summary>
            Adds the unique identifier parameters.  Used for all classes derived from AuditLogEntry class
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:IDS.Logging.AuditLogEntry.AddIdParameters(System.Data.SqlClient.SqlParameterCollection,System.Boolean)">
            <summary>
            Adds the unique identifier parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="includeOutputAuditIdParameter">if set to <c>true</c> [include output audit id parameter].</param>
        </member>
        <member name="M:IDS.Logging.AuditLogEntry.CreateParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            Creates a System.Data.SqlClient.SqlParameter object.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">The type of the parameter.</param>
            <param name="size">
            The size of the parameter if the parameter is a Varchar or a Char.
            </param>
            <param name="value">The parameter's value.</param>
            <returns>The new System.Data.SqlClient.SqlParameter object.</returns>
        </member>
        <member name="M:IDS.Logging.AuditLogEntry.GetAppInfo">
            <summary>
            returns info about a native IOS or Android App
            return null if request is not executing in an app
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Logging.AuditLogEntry.AppInfo">
            <summary>
            provides info about native apps such as IOS native apps
            </summary>
        </member>
        <member name="P:IDS.Logging.AuditLogEntry.AppInfo.Version">
            <summary>
            app version number e.g. 2.0.0.424
            </summary>
        </member>
        <member name="P:IDS.Logging.AuditLogEntry.AppInfo.Platform">
            <summary>
            IOS or Android
            </summary>
        </member>
        <member name="P:IDS.Logging.AuditLogEntry.AppInfo.AppType">
            <summary>
            Tablet or Mobile
            </summary>
        </member>
        <member name="T:IDS.Logging.AuditLogEntrySQLColumnCollection">
            <summary>
             Extends a property collection to format the properties into a sql friendly xml format.
            </summary>
        </member>
        <member name="M:IDS.Logging.AuditLogEntrySQLColumnCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.AuditLogEntrySQLColumnCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Logging.AuditLogEntrySQLColumnCollection.#ctor(IDS.Collections.PropertyCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.AuditLogEntrySQLColumnCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Logging.AuditLogEntrySQLColumnCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.AuditLogEntrySQLColumnCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:IDS.Logging.AuditLogEntrySQLColumnCollection.ToSQLXML">
            <summary>
            This will return an XML string that represents the tables and columns in complete xml structure.  
            It uses a table~column format.
            </summary>
            <returns>Returns the formatted XML string for entire structure</returns>
        </member>
        <member name="M:IDS.Logging.AuditLogEntrySQLColumnCollection.ToXml(System.Char)">
            <summary>
            </summary>
            <returns>Returns XElement tree of the entire structure</returns>
        </member>
        <member name="M:IDS.Logging.AuditLogEntrySQLColumnCollection.ToXml">
            <summary>
            </summary>
            <returns>Returns XElement tree of the entire structure</returns>
        </member>
        <member name="T:IDS.Logging.AuditLogEntryFilter">
            <summary>
             Represents a complete audit log entry filter to filter audit log entries retrieval.
            </summary>
        </member>
        <member name="M:IDS.Logging.AuditLogEntryFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.AuditLogEntryFilter"/> class.
            </summary>
        </member>
        <member name="M:IDS.Logging.AuditLogEntryFilter.#ctor(System.String,System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:IDS.Logging.AuditLogEntryFilter"/> class.
            </summary>
            <param name="filterType">The filter type that is used to categorized the filters.</param>
            <param name="filterValue">The value of the filter.</param>
        </member>
        <member name="P:IDS.Logging.AuditLogEntryFilter.FilterType">
            <summary>
            Represents the filter type
            </summary>
            <value>The filter type.</value>
        </member>
        <member name="P:IDS.Logging.AuditLogEntryFilter.FilterValue">
            <summary>
            Represents the filter value
            </summary>
            <value>The filter value.</value>
        </member>
        <member name="M:IDS.Logging.AuditLogEntryFilter.ToXMLNode">
            <summary>
            This will return an XML string that represents the filter node
            </summary>
            <returns>Returns the formatted XML Node as a string</returns>
        </member>
        <member name="M:IDS.Logging.AuditLogEntryFilter.ToXML">
            <summary>
            This will return an XML string that represents the filter in complete xml structure
            </summary>
            <returns>Returns the formatted XML string for entire structure</returns>
        </member>
        <member name="T:IDS.Logging.AuditLogEntryFilterCollection">
            <summary>
            The AuditLogEntryFilterCollection class contains a collection of <see cref="T:IDS.Logging.AuditLogEntryFilter">AuditLogEntryFilter</see> objects.
            </summary>
        </member>
        <member name="M:IDS.Logging.AuditLogEntryFilterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.AuditLogEntryFilterCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Logging.AuditLogEntryFilterCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Logging.AuditLogEntryFilter})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.AuditLogEntryFilterCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Logging.AuditLogEntryFilterCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.AuditLogEntryFilterCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="P:IDS.Logging.AuditLogEntryFilterCollection.ExcludeFilters">
            <summary>
            Gets or sets a value indicating whether to include or exclude the Action Taken filters.
            </summary>
            <value><c>true</c> if exclude the action taken filters from results; otherwise, <c>false</c> it will filter results only on these 'ActionTaken' filters.</value>
        </member>
        <member name="M:IDS.Logging.AuditLogEntryFilterCollection.AddDelimitedFilterValuesToCollection(System.String,IDS.Logging.AuditLogEntryFilterTypes,System.Char)">
            <summary>
            Allows the caller to add filter.
            </summary>
            <param name="FilterValueList">A delimited list of filter values to create new <see cref="T:IDS.Logging.AuditLogEntryFilter">AuditLogEntryFilter</see> objects.</param>
            <param name="FilterType">The filter type for the list of values.</param>
            <param name="ValueListDelimitor">The delimitor that the ValueList is to be split on.</param>
        </member>
        <member name="M:IDS.Logging.AuditLogEntryFilterCollection.ToXML">
            <summary>
            This will return an XML string that represents the filter in complete xml structure
            </summary>
            <returns>Returns the formatted XML string for entire structure</returns>
        </member>
        <member name="M:IDS.Logging.AuditLogEntryFilterCollection.ToXml">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Logging.AuditLogEntryFilterTypes">
            <summary>
            An enumeration of Audit Log Entry filter types to use for audit log filtering.
            </summary>
        </member>
        <member name="F:IDS.Logging.AuditLogEntryFilterTypes.ActionTaken">
            <summary>
            Action Taken
            </summary>
        </member>
        <member name="T:IDS.Logging.AuditLogProvider">
            <summary>
            The AuditLogProvider is an abstract base class that can be used as a base for an Audit Log provider.
            </summary>
            <seealso cref="T:IDS.Logging.IAuditLogProvider"/>
        </member>
        <member name="M:IDS.Logging.AuditLogProvider.GetAuditLogEntries(IDS.Security.IUser,System.Int32,System.Int32,System.String,IDS.Logging.AuditLogEntryFilterCollection)">
            <summary>
            This method returns a collection of the <see cref="T:IDS.Logging.AuditLogEntry">AuditLogEntry</see> 
            </summary>
            <param name="CurrUser">The Current Profile User</param>
            <param name="MaxRecords">The max number of <see cref="T:IDS.Logging.AuditLogEntry">AuditLogEntry</see> results to return </param>
            <param name="MaxNumberOfDays">The max number of days back to filter results on.</param>
            <param name="dataSpace">The dataspace name to filter the results on.</param>
            <param name="sFilters">The filters that filter based on the <see cref="T:IDS.Logging.AuditLogEntryFilterTypes">AuditLogEntryFilterTypes</see></param>
            <returns>A collection of the <see cref="T:IDS.Logging.AuditLogEntry">AuditLogEntry</see></returns>
        </member>
        <member name="M:IDS.Logging.AuditLogProvider.GetAuditLogEntries(IDS.Security.IUser,System.Int32,System.Int32,System.String,IDS.Logging.AuditLogEntryFilterCollection,IDS.Logging.AuditLogEntrySQLColumnCollection,System.String)">
            <summary>
            This method returns a collection of the <see cref="T:IDS.Logging.AuditLogEntry">AuditLogEntry</see> 
            </summary>
            <param name="CurrUser">The Current Profile User</param>
            <param name="MaxRecords">The max number of <see cref="T:IDS.Logging.AuditLogEntry">AuditLogEntry</see> results to return </param>
            <param name="MaxNumberOfDays">The max number of days back to filter results on.</param>
            <param name="dataSpace">The dataspace name to filter the results on.</param>
            <param name="sFilters">The filters that filter based on the <see cref="T:IDS.Logging.AuditLogEntryFilterTypes">AuditLogEntryFilterTypes</see></param>
            <param name="columns">The extended columns and tables related to the main audit log entry</param>
            <param name="columnDelimitor">The delimitor to split the extended columns and tables that are related to the main audit log entry</param>
            <returns>A collection of the <see cref="T:IDS.Logging.AuditLogEntry">AuditLogEntry</see></returns>
        </member>
        <member name="T:IDS.Logging.BaseFilter">
            <summary>
            The BaseFilter class is the base for all Logging filters.
            </summary>
            <code>
            The logging system allows for string based filtering now.
            Either of these two can be specified in the web.config they do the same thing
            <categoryClass name="IDS.Logging.StandardCategory, IDS.System">
            	<category name="Debug">
            		<severity>Warning</severity>
            		<severity>Exception</severity>
            		<severity>Critical</severity>
            	</category>
            </categoryClass>
            
            <category name="IDS.Logging.StandardCategory.Debug">
            	<severity name="Warning" />
            	<severity name="Exception" />
            	<severity name="Critical" />
            </category>
            The string system can support * at the start or the end
            <category name="IDS.Logging.StandardCategory.*"></category>
            would get all categories that start with IDS.Logging.StandardCategory.
            
            Severity can come before category
            <severity name="Warning"></severity>
            will log only entries with warning severity
            <severity name="Warning">
            	<category name="*Debug" />
            </severity>
            will log only entries with warning severity that end with Debug
            
            There is also a ignore attribute that tells the system to not log this type of log entry
            <category name="*Debug" ignore="True"></category>
            would log everything except the entries that end in Debug
            </code>
        </member>
        <member name="M:IDS.Logging.BaseFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.BaseFilter"/> class.
            </summary>
        </member>
        <member name="M:IDS.Logging.BaseFilter.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.BaseFilter"/> class.
            </summary>
            <param name="filterString">The filter string.</param>
            <param name="ignore">if set to <c>true</c> [ignore].</param>
        </member>
        <member name="M:IDS.Logging.BaseFilter.TestSubFilters(IDS.Logging.LogEntry)">
            <summary>
            Tests the sub filters.
            </summary>
            <param name="entry">The entry to test against each sub filter.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Logging.BaseFilter.ValueMatchesFilter(System.String,System.String)">
            <summary>
            Checks if the specified value matches the specified filter.
            </summary>
            <param name="value">The value.</param>
            <param name="filter">The filter.</param>
            <returns>
            true if the value matches the specified filter, false otherwise.
            </returns>
        </member>
        <member name="M:IDS.Logging.BaseFilter.DoConfigure(System.Xml.XmlNode)">
            <summary>
            Performs the configuration of this filter based on the specified configuration node.
            </summary>
            <param name="filterNode">The filter node.</param>
        </member>
        <member name="M:IDS.Logging.BaseFilter.DoTest(IDS.Logging.LogEntry)">
            <summary>
            Tests the specified <see cref="T:IDS.Logging.LogEntry"/> for a match with this filter.
            </summary>
            <param name="entry">The entry.</param>
            <returns>true if the entry matches this filter, false otherwise.</returns>
        </member>
        <member name="P:IDS.Logging.BaseFilter.FilterString">
            <summary>
            Gets or sets the filter string.
            </summary>
            <value>The filter string.</value>
        </member>
        <member name="P:IDS.Logging.BaseFilter.Ignore">
            <summary>
            Gets or sets a value indicating whether to ignore any <see cref="T:IDS.Logging.LogEntry" /> 
            that matches this <see cref="T:IDS.Logging.ILogFilter"/>.
            </summary>
            <value><c>true</c> to ignore; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:IDS.Logging.BaseFilter.Test(IDS.Logging.LogEntry)">
            <summary>
            Tests the specified entry.
            </summary>
            <param name="entry">The entry.</param>
            <returns>True if the entry matches this filter or one of its subfilters, false otherwise.</returns>
        </member>
        <member name="P:IDS.Logging.BaseFilter.SubFilters">
            <summary>
            Gets the sub filters.
            </summary>
            <value>The sub filters.</value>
        </member>
        <member name="M:IDS.Logging.BaseFilter.Configure(System.Xml.XmlNode)">
            <summary>
            Configures this filter using the specified configuration Xml.
            </summary>
            <param name="filterNode">The configuration node.</param>
        </member>
        <member name="T:IDS.Logging.BaseLogger">
             <summary>
             The base class for all built-in loggers. Provides base functionality for asynchronous and synchronous logging. It also
             supports creation via a configuration node that contains definitions of <see cref="T:IDS.Logging.LogFilter"/>s, the
             <see cref="P:IDS.Logging.BaseLogger.LogFormatString"/>, and custom parameters.
             </summary>
             <example>
             Use BaseLogger as a base class for custom loggers you develop. Only one method is required to be implemented.
             <code>
            	public class ExampleLogger : BaseLogger
            	{
            
            		protected override void DoLog(LogEntry entry)
            		{
            			Debug.WriteLine("Example:" + entry.ToString(this.LogFormatString));
            		}
            		
            	}
             </code>
             </example>
        </member>
        <member name="F:IDS.Logging.BaseLogger.batchInterval">
            <summary>
            Number of milliseconds between when batch of logs are sent to server
            </summary>
        </member>
        <member name="F:IDS.Logging.BaseLogger.logQueue">
            <summary>
            Queue for all log entries so then can be sent every so often instead of all the time
            </summary>
        </member>
        <member name="M:IDS.Logging.BaseLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            Logs the given <see cref="T:IDS.Logging.LogEntry"/>. This method comes after the LogEntry has passed filter tests.
            </summary>
            <param name="entry">LogEntry to be logged.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(IDS.Logging.LogEntry)">
            <summary>
            Logs the given <see cref="T:IDS.Logging.LogEntry"/> synchronously or asynchronously.
            </summary>
            <param name="entry">LogEntry to be logged.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.DoLog(System.Object)">
            <summary>
            Logs the given <see cref="T:IDS.Logging.LogEntry"/>, used by the ThreadPool for asynchronous logging.
            </summary>
            <param name="logEntry">LogEntry to be logged.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(System.Enum,System.Object)">
            <summary>
            Logs the given content and category.
            </summary>
            <param name="category">Category.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(System.String,System.Object)">
            <summary>
            Logs the given content and category.
            </summary>
            <param name="category">Category.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(System.Enum,System.Object,System.Object)">
            <summary>
            Logs the given content, category, and details.
            </summary>
            <param name="category">Category.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(System.String,System.Object,System.Object)">
            <summary>
            Logs the given content, category, and details.
            </summary>
            <param name="category">Category.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(System.Enum,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Logs the given content, category, and severity.
            </summary>
            <param name="category">Category.</param>
            <param name="severity">Severity.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(System.String,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Logs the given content, category, and severity.
            </summary>
            <param name="category">Category.</param>
            <param name="severity">Severity.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(System.Enum,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Logs the given content, details, category, and severity.
            </summary>
            <param name="category">Category.</param>
            <param name="severity">Severity.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(System.String,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Logs the given content, details, category, and severity.
            </summary>
            <param name="category">Category.</param>
            <param name="severity">Severity.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(IDS.Logging.LogContext,System.Enum,System.Object)">
            <summary>
            Logs the given content and category with the given context.
            </summary>
            <param name="context">The log entry context.</param>
            <param name="category">Category.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(IDS.Logging.LogContext,System.String,System.Object)">
            <summary>
            Logs the given content and category with the given context.
            </summary>
            <param name="context">The log entry context.</param>
            <param name="category">Category.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(IDS.Logging.LogContext,System.Enum,System.Object,System.Object)">
            <summary>
            Logs the given content, category, and details with the given context.
            </summary>
            <param name="context">The log entry context.</param>
            <param name="category">Category.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(IDS.Logging.LogContext,System.String,System.Object,System.Object)">
            <summary>
            Logs the given content, category, and details with the given context.
            </summary>
            <param name="context">The log entry context.</param>
            <param name="category">Category.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(IDS.Logging.LogContext,System.Enum,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Logs the given content, category, and severity with the given context.
            </summary>
            <param name="context">The log entry context.</param>
            <param name="category">Category.</param>
            <param name="severity">Severity..</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(IDS.Logging.LogContext,System.String,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Logs the given content, category, and severity with the given context.
            </summary>
            <param name="context">The log entry context.</param>
            <param name="category">Category.</param>
            <param name="severity">Severity..</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(IDS.Logging.LogContext,System.Enum,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Logs the given content, details, category, and severity with the given context.
            </summary>
            <param name="context">The log entry context.</param>
            <param name="category">Category.</param>
            <param name="severity">Severity..</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Log(IDS.Logging.LogContext,System.String,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Logs the given content, details, category, and severity with the given context.
            </summary>
            <param name="context">The log entry context.</param>
            <param name="category">Category.</param>
            <param name="severity">Severity..</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Configure(System.Xml.XmlNode)">
            <summary>
            Configures the logger based on a custom schema. 
            </summary>
            <remarks>This method is primarily used by Logger developers to configure the logger based on custom configuration.</remarks>
            <param name="configuration">Custom configuration node.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.ConfigureLogFormatString(System.Xml.XmlNode)">
            <summary>
            Configures the log formating the logger uses.
            </summary>
            <remarks>This method is primarily used by Logger developers to configure the logger based on custom configuration.</remarks>
            <param name="configuration">Custom configuration node.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.ConfigureFilters(System.Xml.XmlNode)">
            <summary>
            Configures the log filters the logger uses.
            </summary>
            <remarks>This method is primarily used by Logger developers to configure the logger based on custom configuration.</remarks>
            <param name="filtersNode">Custom configuration node.</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.ConfigureParameters(System.Xml.XmlNode)">
            <summary>
            Load logger-specific parameters. Each logger that has specialized parameters will override this
            function and deal with the parameters.
            </summary>
            <param name="configuration">XmlNode containing the specific configuration settings</param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.CanLog(IDS.Logging.LogEntry)">
            <summary>
            Determines whether the logger can log the given <see cref="T:IDS.Logging.LogEntry"/>.
            </summary>
            <param name="entry">LogEntry to analyse for criteria.</param>
            <returns>true if the logger can log the given log entry, false if not.</returns>
        </member>
        <member name="P:IDS.Logging.BaseLogger.Filter">
            <summary>
            Gets or sets the LogFilter associated with the logger.
            </summary>
            <value>A LogFilter.</value>
        </member>
        <member name="P:IDS.Logging.BaseLogger.Asynchronous">
            <summary>
            BaseLogger implements code necessary to provide asynchronous operation. When set to true, the derived
            logger will be called asynchronously.
            </summary>
            <value>If true, the derived logger will be called asynchronously; otherwise false</value>
        </member>
        <member name="P:IDS.Logging.BaseLogger.EnableUser">
            <summary>
            Gets or sets whether to log the currently logged in user
            </summary>
            <value>Default value is false</value>
        </member>
        <member name="P:IDS.Logging.BaseLogger.Enabled">
            <summary>
            Gets or sets whether the logger is enabled. When disabled, no log entries will be logged.
            </summary>
            <value>true if the module is enabled; otherwise, false.</value>
        </member>
        <member name="P:IDS.Logging.BaseLogger.LogFormatString">
            <summary>
            Gets or sets the log format string.
            </summary>
            <value>Tokenized format string.</value>
        </member>
        <member name="M:IDS.Logging.BaseLogger.RemoveBadChars(System.String)">
            <summary>
            Removes the bad chars.
            </summary>
            <param name="originalFileName">Name of the original file.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Logging.BaseLogger.ValInt(System.String)">
            <summary>
            Vals the int.
            </summary>
            <param name="strInt">The STR int.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Logging.BaseLogger.ValBool(System.String)">
            <summary>
            Vals the bool.
            </summary>
            <param name="strBool">The STR bool.</param>
            <returns></returns>
        </member>
        <member name="P:IDS.Logging.BaseLogger.BatchSendInterval">
            <summary>
            Gets or sets the batch send interval.
            </summary>
            <value>The batch send interval.</value>
        </member>
        <member name="P:IDS.Logging.BaseLogger.IsBatchMode">
            <summary>
            Used to make logging more efficient.  Caution batch mode is not guaranteed to save all log entries.  
            If the machine is shut down or IIS is reset some log entries may be lost.
            </summary>
        </member>
        <member name="M:IDS.Logging.BaseLogger.QueueLogEntry(IDS.Logging.LogEntry)">
            <summary>
            If you are running a logger in batch mode send the log entries to this method to be queued
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.LogQueueMethod(System.Object)">
            <summary>
            This method is activated by the queueTimer
            It clones the logQueue and then empties it to make sure it is not locked for very long
            </summary>
            <param name="stateInfo"></param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.DoBatchLog(IDS.Logging.LogEntryCollection)">
            <summary>
            If you are running a logger in batch mode you must override this method
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:IDS.Logging.BaseLogger.StopTimer">
            <summary>
            This stops the queueTimer and writes out all the rest of the logEntrys in the queue
            </summary>
        </member>
        <member name="P:IDS.Logging.BaseLogger.PublicKey">
            <summary>
            Gets the public key.
            </summary>
            <value>The public key.</value>
        </member>
        <member name="P:IDS.Logging.BaseLogger.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Logging.BaseLogger.Encrypt(System.String)">
            <summary>
            Encrypts the specified plain text.
            </summary>
            <param name="plainText">The plain text.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Logging.BaseLogger.SignalShutdown">
            <summary>
            Lets the logger know that the application is about to terminate.
            </summary>
            <remarks>
            Loggers that keep a queue of log entries for batch writes should clear their queue at this time.
            </remarks>
        </member>
        <member name="T:IDS.Logging.BatchedFileSystemLogger">
             <summary>
             Writes log entries to a file on the file system.
             </summary>
             <remarks>
             For a definition of logFormatString parameters, see <see cref="M:IDS.Logging.LogEntry.ToString">LogEntry.ToString()</see>.
             </remarks>
             <example>
             web.config configuration example:
             <code>
             <![CDATA[
            	<logging enabled="true"> <!--globally turn on/off logging-->
            
            		<context>
            			<location>My Credit Union</location>
            			<server>MAServer</server> <!--determined dynamically if left out-->
            		</context>
            		
            		<loggers asynchronous="false"> <!--globally turn on/off asynchonous logging-->
            
            			<!--global filters-->
            			<filters>
            				<!--filter by the log category enumeration.... -->
            				<categoryClass name="IDS.Logging.StandardCategory, IDS.System">
            					<!--filter by a specific value of that enumeration-->
            					<category name="Configuration">
            						<!--and filter by specific serverities of that enumeration value -->
            						<severity>Warning</severity>
            						<severity>Exception</severity>
            						<severity>Critical</severity>
            					</category>
            					<category name="LifeCycle"/>
            				</categoryClass>
            				<categoryClass name="IDS.eStatements.Web.Log.EmailLog, IDS.eStatements.Web.Loader"/>
            			</filters>
            			
            			<logger enabled="true" class="IDS.Logging.BatchedFileSystemLogger, IDS.System">
            				<logFormatString>{6} ({7}) [{4}/{5}]</logFormatString>
            				<parameters>
            					<encryptFile>True</encryptFile>
            					<publicKeyFileName>C:\config\publickey.xml</publicKeyFileName>
            					<fileName>C:\Logs\Portal-{0:yyyy-MM-dd}.log</fileName>
            					<batchMode>true</batchMode>
            					<batchInterval>5000</batchInterval>
            					<batchIndicator>--- Batch Mode: Writing {0} entries at {2:MM/dd/yyyy hh:mm:ss} (last write = {1}) ---</batchIndicator>
            				</parameters>
            			</logger>
            		</loggers>
            	</logging>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:IDS.Logging.BatchedFileSystemLogger.Create(System.Xml.XmlNode)">
            <summary>
            Creates a new BatchedFileSystemLogger, configuring it based on the given configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
            <returns>A new configured BatchedFileSystemLogger.</returns>
        </member>
        <member name="M:IDS.Logging.BatchedFileSystemLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.BatchedFileSystemLogger"/> class.
            </summary>
        </member>
        <member name="M:IDS.Logging.BatchedFileSystemLogger.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:IDS.Logging.BatchedFileSystemLogger"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:IDS.Logging.BatchedFileSystemLogger.BatchMode">
            <summary>
            Gets or sets whether the logger will write entries as they arrive or write them in batches.
            </summary>
            <remarks>
            BatchMode improves performance dramatically. You can enable/disable batch mode simply by setting this property. Internally in batch mode,
            log entries aren't written immediately but are queued up, and a separate thread is created to periodically write out the queue. You can specify
            how often the batch thread should write out entries via the <see cref="P:IDS.Logging.BatchedFileSystemLogger.BatchInterval"/> setting
            </remarks>
        </member>
        <member name="P:IDS.Logging.BatchedFileSystemLogger.BatchInterval">
            <summary>
            Gets or sets how often the batch thread should output queued entries while in batch mode.
            </summary>
            <remarks>
            Value must be greater than or equal to 100 milliseconds.
            </remarks>
            <value>milliseconds between outputs</value>
        </member>
        <member name="P:IDS.Logging.BatchedFileSystemLogger.BatchIndicator">
            <summary>
            Gets or sets a string that will be written at the beginning of all batch outputs generated while in batch mode.
            </summary>
            <remarks>
            {0} = Number of queued log entries
            {1} = DateTime.Now
            </remarks>
        </member>
        <member name="P:IDS.Logging.BatchedFileSystemLogger.FileName">
            <summary>
            Gets or sets the full path and filename to which log entries are written.
            </summary>
            <value>String path to the file.</value>
        </member>
        <member name="P:IDS.Logging.BatchedFileSystemLogger.FileMaxSize">
            <summary>
            Gets or sets the file's max size in bytes.
            </summary>
            <value>size in bytes.</value>
        </member>
        <member name="M:IDS.Logging.BatchedFileSystemLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            Writes the given log entry to the assigned file.
            </summary>
            <param name="entry">LogEntry to be written to the assigned file.</param>
            <exception cref="T:IDS.Logging.LogSystemException">When the file could not be opened or written to.</exception>
        </member>
        <member name="M:IDS.Logging.BatchedFileSystemLogger.ConfigureParameters(System.Xml.XmlNode)">
            <summary>
            Configures the file system logger based on the given custom configuration node.  The fileName
            is required, while the fileMaxSize is optional.
            </summary>
            <param name="configuration">Configuration node.</param>
            <remarks>
            Supported schema:
            <code>
            <root>
            	<fileName>c:\log_{0:yyyy-MM-dd}.txt</fileName>
            	<fileMaxSize>12</fileMaxSize>
            </root>
            </code>
            or with parameters
            <code>
            <root>
            	<fileName>c:\log{0:MM}.txt</fileName>
            	<fileMaxSize>12</fileMaxSize>
            </root>
            </code>
            </remarks>
        </member>
        <member name="M:IDS.Logging.BatchedFileSystemLogger.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:IDS.Logging.BatchedFileSystemLogger.SignalShutdown">
            <summary>
            Lets the logger know that the application is about to terminate.
            </summary>
            <remarks>
            Loggers that keep a queue of log entries for batch writes should clear their queue at this time.
            </remarks>
        </member>
        <member name="T:IDS.Logging.CategoryFilter">
            <summary>
            Represents a single category filter, which includes a Category Class, a specific Category within that class,
            and optionally a list of log severities.
            </summary>
        </member>
        <member name="M:IDS.Logging.CategoryFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.CategoryFilter"/> class.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:IDS.Logging.CategoryFilter.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.CategoryFilter"/> class.
            </summary>
            <param name="category">The category.</param>
            <param name="ignore">if set to <c>true</c> [ignore].</param>
        </member>
        <member name="M:IDS.Logging.CategoryFilter.#ctor">
            <summary>
            Initializes a new CategoryFilter with no category class or category.
            </summary>
        </member>
        <member name="M:IDS.Logging.CategoryFilter.#ctor(System.Type)">
            <summary>
            Initializes a new CategoryFilter with the given category class.
            </summary>
            <param name="categoryClass">The enum type that contains custom log categories.</param>
            <example>
            <code>
            CategoryFilter filter = new CategoryFilter(typeof(MyLogCategory));
            </code>
            </example>
        </member>
        <member name="M:IDS.Logging.CategoryFilter.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.CategoryFilter"/> class.
            </summary>
            <param name="categoryClass">The category class.</param>
            <param name="onlySeverities">if set to <c>true</c> [only severities].</param>
        </member>
        <member name="M:IDS.Logging.CategoryFilter.#ctor(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.CategoryFilter"/> class.
            </summary>
            <param name="categoryClass">The category class.</param>
            <param name="onlySeverities">pass FALSE as default</param>
            <param name="includeFilter">whether to use this filter as an include or exclude</param>
        </member>
        <member name="M:IDS.Logging.CategoryFilter.#ctor(System.Enum)">
            <summary>
            Initializes a new CategoryFilter with the given category. The category class is automatically set to the class of the given category.
            </summary>
            <param name="category">The custom enumeration value the filter passes on.</param>
            <example>
            <code>
            CategoryFilter filter = new CategoryFilter(MyLogCategory.Information);
            </code>
            </example>
        </member>
        <member name="M:IDS.Logging.CategoryFilter.#ctor(System.Enum,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.CategoryFilter"/> class.
            </summary>
            <param name="category">The category.</param>
            <param name="onlySeverities">if set to <c>true</c> [only severities].</param>
        </member>
        <member name="M:IDS.Logging.CategoryFilter.#ctor(System.Enum,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.CategoryFilter"/> class.
            </summary>
            <param name="category">The category.</param>
            <param name="onlySeverities">pass FALSE as default</param>
            <param name="includeFilter">whether to use this filter as an include or exclude</param>
        </member>
        <member name="M:IDS.Logging.CategoryFilter.DoTest(IDS.Logging.LogEntry)">
            <summary>
            Tests the specified entry.
            </summary>
            <param name="entry">The entry.</param>
            <returns>
            True if the entry matches this filter, false otherwise.
            </returns>
        </member>
        <member name="T:IDS.Logging.CompositeLogger">
             <summary>
             A logger that can contain child loggers. It performs no logging of its own, it simply passes log entries on to each
             of its children, provided they pass the filter assigned to the composite logger.
             </summary>
             <remarks>
             The composite logger can contain other composite loggers. Each composite logger and child loggers can have
             unique filtering criteria. In this way, it is possible to provide an n-level deep hierarchy of filters. 
             </remarks>
             <example>
             web.config configuration example:
             <code>
             <![CDATA[
            	<logging enabled="true"> <!--globally turn on/off logging-->
            
            		<context>
            			<location>My Credit Union</location>
            			<server>MAServer</server> <!--determined dynamically if left out-->
            		</context>
            		
            		<loggers asynchronous="false"> <!--globally turn on/off asynchonous logging-->
            
            			<!--global filters-->
            			<filters>
            				<!--filter by the log category enumeration.... -->
            				<categoryClass name="IDS.Logging.StandardCategory, IDS.System">
            					<!--filter by a specific value of that enumeration-->
            					<category name="Configuration">
            						<!--and filter by specific serverities of that enumeration value -->
            						<severity>Warning</severity>
            						<severity>Exception</severity>
            						<severity>Critical</severity>
            					</category>
            					<category name="LifeCycle"/>
            				</categoryClass>
            				<categoryClass name="IDS.eStatements.Web.Log.EmailLog, IDS.eStatements.Web.Loader"/>
            			</filters>
            			
            			<logger class=”<composite logger>” asynchronous=”true|false”>
            				<filters>
            					...
            				</filters>
            				<parameters>
            					<logger enabled="true" class=”IDS.Logging.ConsoleLogger, IDS.System" asynchronous="false">
            						<logFormatString>{6} ({7}) [{4}/{5}]</logFormatString>
            						<filters>
            							...
            						</filters>
            						<parameters>
            							...
            						</parameters>
            					</logger>
            					<logger enabled="true" class="IDS.Logging.DebugLogger, IDS.System" asynchronous="false">
            						<logFormatString>{6} ({7}) [{4}/{5}]</logFormatString>
            						<filters>
            							...
            						</filters>
            						<parameters>
            							...
            						</parameters>
            					</logger>
            				</parameters>
            			</logger>
            		</loggers>
            	</logging>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:IDS.Logging.CompositeLogger.Create(System.Xml.XmlNode)">
            <summary>
            Creates a new CompositeLogger, configuring it based on the given configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
            <returns>A new configured CompositeLogger.</returns>
        </member>
        <member name="P:IDS.Logging.CompositeLogger.Loggers">
            <summary>
            Gets or sets the list of child loggers.
            </summary>
            <value> ArrayList containing each child Logger.</value>
        </member>
        <member name="M:IDS.Logging.CompositeLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            Logs the given log entry by passing it on to each child logger.
            </summary>
            <param name="entry">LogEntry to be logged.</param>
        </member>
        <member name="M:IDS.Logging.CompositeLogger.SignalShutdown">
            <summary>
            Lets the logger know that the application is about to terminate.
            </summary>
            <remarks>
            Loggers that keep a queue of log entries for batch writes should clear their queue at this time.
            </remarks>
        </member>
        <member name="T:IDS.Logging.ConsoleLogger">
             <summary>
             Logs to <see cref="T:System.Console"/>.
             </summary>
             <example>
             web.config configuration example:
             <code>
             <![CDATA[
            	<logging enabled="true"> <!--globally turn on/off logging-->
            
            		<context>
            			<location>My Credit Union</location>
            			<server>MAServer</server> <!--determined dynamically if left out-->
            		</context>
            		
            		<loggers asynchronous="false"> <!--globally turn on/off asynchonous logging-->
            
            			<!--global filters-->
            			<filters>
            				<!--filter by the log category enumeration.... -->
            				<categoryClass name="IDS.Logging.StandardCategory, IDS.System">
            					<!--filter by a specific value of that enumeration-->
            					<category name="Configuration">
            						<!--and filter by specific serverities of that enumeration value -->
            						<severity>Warning</severity>
            						<severity>Exception</severity>
            						<severity>Critical</severity>
            					</category>
            					<category name="LifeCycle"/>
            				</categoryClass>
            				<categoryClass name="IDS.eStatements.Web.Log.EmailLog, IDS.eStatements.Web.Loader"/>
            			</filters>
            			
            			<logger enabled="true" class="IDS.Logging.ConsoleLogger, IDS.System">
            				<logFormatString>{6} ({7}) [{4}/{5}]</logFormatString>
            			</logger>
            		</loggers>
            	</logging>
             ]]>
             </code>
             </example>
        </member>
        <member name="P:IDS.Logging.ConsoleLogger.NewLineReplacement">
            <summary>
            Gets or sets the replacement string for embedded newline characters in logged entries.
            </summary>
            <value>
            The replacement string for instances of <see cref="P:System.Environment.NewLine" /> in logged entries,
            or <see langword="null" /> to preserve instances of <see cref="P:System.Environment.NewLine" />.
            The default is <see langword="null" />.
            </value>
        </member>
        <member name="M:IDS.Logging.ConsoleLogger.Create(System.Xml.XmlNode)">
            <summary>
            Creates a new ConsoleLogger, configuring it based on the given configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
            <returns>A new configured ConsoleLogger.</returns>
        </member>
        <member name="M:IDS.Logging.ConsoleLogger.ConfigureParameters(System.Xml.XmlNode)">
            <summary>
            Configures the logger based on the given custom configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
            <remarks>
            <para>
            Supported schema:
            </para>
            <code><![CDATA[
            <logger class="IDS.Logging.ConsoleLogger, IDS.System">
                <newline>&#x2028;</newline>
            </logger>
            ]]></code>
            </remarks>
        </member>
        <member name="M:IDS.Logging.ConsoleLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            Logs the given log entry to the Console, using the <see cref="P:IDS.Logging.BaseLogger.LogFormatString"/> to format the log entry's content.
            </summary>
            <param name="entry">LogEntry to be logged to the Console.</param>
        </member>
        <member name="T:IDS.Logging.DebugLogger">
             <summary>
             Logs to the Debug output window.
             </summary>
             <example>
             web.config configuration example:
             <code>
             <![CDATA[
            	<logging enabled="true"> <!--globally turn on/off logging-->
            
            		<context>
            			<location>My Credit Union</location>
            			<server>MAServer</server> <!--determined dynamically if left out-->
            		</context>
            		
            		<loggers asynchronous="false"> <!--globally turn on/off asynchonous logging-->
            
            			<!--global filters-->
            			<filters>
            				<!--filter by the log category enumeration.... -->
            				<categoryClass name="IDS.Logging.StandardCategory, IDS.System">
            					<!--filter by a specific value of that enumeration-->
            					<category name="Configuration">
            						<!--and filter by specific serverities of that enumeration value -->
            						<severity>Warning</severity>
            						<severity>Exception</severity>
            						<severity>Critical</severity>
            					</category>
            					<category name="LifeCycle"/>
            				</categoryClass>
            				<categoryClass name="IDS.eStatements.Web.Log.EmailLog, IDS.eStatements.Web.Loader"/>
            			</filters>
            			
            			<logger enabled="true" class="IDS.Logging.DebugLogger, IDS.System">
            				<logFormatString>{6} ({7}) [{4}/{5}]</logFormatString>
            			</logger>
            		</loggers>
            	</logging>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:IDS.Logging.DebugLogger.Create(System.Xml.XmlNode)">
            <summary>
            Creates a new DebugLogger, configuring it based on the given configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
            <returns>A new configured DebugLogger.</returns>
        </member>
        <member name="M:IDS.Logging.DebugLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            Logs the given log entry to the Debug output window, using the <see cref="P:IDS.Logging.BaseLogger.LogFormatString"/> to format the log entry's content.
            </summary>
            <param name="entry">LogEntry to be written to the Debug output window.</param>
        </member>
        <member name="T:IDS.Logging.DelayLoadLogger">
            <summary>
            The DelayLoadLogger is a pseudo logger for handling loggers where the assembly has not been loaded yet.
            Each time 
            </summary>
        </member>
        <member name="M:IDS.Logging.DelayLoadLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.DelayLoadLogger"/> class.
            </summary>
            <param name="loggerName">Name of the logger.</param>
        </member>
        <member name="M:IDS.Logging.DelayLoadLogger.Configure(System.Xml.XmlNode)">
            <summary>
            Configures the logger based on a custom schema.
            </summary>
            <param name="configuration">Custom configuration node.</param>
            <remarks>This method is primarily used by Logger developers to configure the logger based on custom configuration.</remarks>
        </member>
        <member name="M:IDS.Logging.DelayLoadLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            Logs the given <see cref="T:IDS.Logging.LogEntry"/>. This method comes after the LogEntry has passed filter tests.
            </summary>
            <param name="entry">LogEntry to be logged.</param>
        </member>
        <member name="M:IDS.Logging.DelayLoadLogger.CanLog(IDS.Logging.LogEntry)">
            <summary>
            Determines whether the logger can log the given <see cref="T:IDS.Logging.LogEntry"/>.
            </summary>
            <param name="entry">LogEntry to analyse for criteria.</param>
            <returns>
            true if the logger can log the given log entry, false if not.
            </returns>
        </member>
        <member name="M:IDS.Logging.DelayLoadLogger.Log(IDS.Logging.LogEntry)">
            <summary>
            Logs the given <see cref="T:IDS.Logging.LogEntry"/> synchronously or asynchronously.
            </summary>
            <param name="entry">LogEntry to be logged.</param>
        </member>
        <member name="M:IDS.Logging.DelayLoadLogger.SignalShutdown">
            <summary>
            Lets the logger know that the application is about to terminate.
            </summary>
            <remarks>
            Loggers that keep a queue of log entries for batch writes should clear their queue at this time.
            </remarks>
        </member>
        <member name="M:IDS.Logging.DelayLoadLogger.LoadLogger">
            <summary>
            This internal method loads the actual logger once the environment has been fully initialized.
            </summary>
        </member>
        <member name="T:IDS.Logging.EmailLogger">
             <summary>
             Sends log entries via email.
             </summary>
             <remarks>
             For a definition of logFormatString parameters, see <see cref="M:IDS.Logging.LogEntry.ToString">LogEntry.ToString()</see>.
             </remarks>
             <example>
             web.config configuration example:
             <code>
             <![CDATA[
            	<logging enabled="true"> <!--globally turn on/off logging-->
            
            		<context>
            			<location>My Credit Union</location>
            			<server>MAServer</server> <!--determined dynamically if left out-->
            		</context>
            		
            		<loggers asynchronous="false"> <!--globally turn on/off asynchonous logging-->
            
            			<!--global filters-->
            			<filters>
            				<!--filter by the log category enumeration.... -->
            				<categoryClass name="IDS.Logging.StandardCategory, IDS.System">
            					<!--filter by a specific value of that enumeration-->
            					<category name="Configuration">
            						<!--and filter by specific serverities of that enumeration value -->
            						<severity>Warning</severity>
            						<severity>Exception</severity>
            						<severity>Critical</severity>
            					</category>
            					<category name="LifeCycle"/>
            				</categoryClass>
            				<categoryClass name="IDS.eStatements.Web.Log.EmailLog, IDS.eStatements.Web.Loader"/>
            			</filters>
            			
            			<logger enabled="true" class="IDS.Logging.EmailLogger, IDS.System">
            				<logFormatString>{6} ({7}) [{4}/{5}]</logFormatString>
            				<parameters>
            					<to>toaddress@server.com</to>
            					<from>fromaddress@server.com</from>
            					<subject>Subject line</subject>
            					<smtpServer>EmailServer.com</smtpServer>
            					<htmlFormat>[true | false]</htmlFormat>
            				</parameters>
            			</logger>
            		</loggers>
            	</logging>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:IDS.Logging.EmailLogger.Create(System.Xml.XmlNode)">
            <summary>
            Creates a new EmailLogger, configuring it based on the given configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
            <returns>A new configured EmailLogger.</returns>
        </member>
        <member name="M:IDS.Logging.EmailLogger.#ctor">
            <summary>
            Initializes a new EmailLogger with default <see cref="P:IDS.Logging.EmailLogger.From"/> and <see cref="P:IDS.Logging.EmailLogger.Subject"/>.
            </summary>
        </member>
        <member name="P:IDS.Logging.EmailLogger.To">
            <summary>
            Gets or sets the address to which log entries are sent.
            </summary>
            <value>String to email address.</value>
        </member>
        <member name="P:IDS.Logging.EmailLogger.From">
            <summary>
            Gets or sets the address log entries are sent from.
            </summary>
            <value>Where the log entries are sent from</value>
        </member>
        <member name="P:IDS.Logging.EmailLogger.Subject">
            <summary>
            Gets or sets the subject line of log emails.
            </summary>
            <value>String subject.</value>
        </member>
        <member name="P:IDS.Logging.EmailLogger.Server">
            <summary>
            Gets or sets the SMTP server used to send emails on.
            </summary>
            <value>String The domain controller name</value>
        </member>
        <member name="P:IDS.Logging.EmailLogger.HtmlFormat">
            <summary>
            Gets or sets the format of log emails.
            </summary>
            <value>One of the <see cref="T:System.Web.Mail.MailFormat"/> values.</value>
        </member>
        <member name="P:IDS.Logging.EmailLogger.Port">
            <summary>
            Gets or sets the port of the SMTP server.
            </summary>
        </member>
        <member name="P:IDS.Logging.EmailLogger.EnableSsl">
            <summary>
            Whether to use SSL when communicating with the SMTP server
            </summary>
        </member>
        <member name="P:IDS.Logging.EmailLogger.ClientUserName">
            <summary>
            User name used when sending credentials to the mail server
            </summary>
        </member>
        <member name="P:IDS.Logging.EmailLogger.ClientPassword">
            <summary>
            Password name used when sending credentials to the mail server
            </summary>
        </member>
        <member name="P:IDS.Logging.EmailLogger.ClientCertificateName">
            <summary>
             SSL Client Certificate used
            </summary>
        </member>
        <member name="M:IDS.Logging.EmailLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            E-Mails the given log entry.
            </summary>
            <param name="entry">LogEntry to be emailed.</param>
            <exception cref="T:IDS.Logging.LogSystemException">When the email could not be sent.</exception>
        </member>
        <member name="M:IDS.Logging.EmailLogger.ConfigureParameters(System.Xml.XmlNode)">
            <summary>
            Configures the email logger based on the given custom configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
            <remarks>
            Supported schema:
            <code>
            <root>
            	<to>toaddress@server.com</to>
            	<from>fromaddress@server.com</from>
            	<subject>Subject line</subject>
            	<smtpServer>EmailServer.com</smtpServer>
            	<htmlFormat>[true | false]</htmlFormat>
            </root>
            </code>
            </remarks>
        </member>
        <member name="T:IDS.Logging.ExtendedAuditLogEntry">
            <summary>
            The ExtendedAuditLogEntry class allows extended properties to be added to the AuditLogEntry class.
            </summary>
        </member>
        <member name="P:IDS.Logging.ExtendedAuditLogEntry.ExtendedProperties">
            <summary>
            Gets the properties associated with this AuditLogEntry.
            </summary>
            <value>The properties associated with this AuditLogEntry.</value>
        </member>
        <member name="T:IDS.Logging.FileSystemAuditLogger">
             <summary>
             Writes audit log entries to a file on the file system.
             </summary>
             <remarks>
             The FileSystemAuditLogger does not use the logFormatString property.
             </remarks>
             <example>
             web.config configuration example:
             <code>
             <![CDATA[
            	<logging enabled="true"> <!--globally turn on/off logging-->
            
            		<context>
            			<location>My Credit Union</location>
            			<server>MAServer</server> <!--determined dynamically if left out-->
            		</context>
            		
            		<loggers asynchronous="false"> <!--globally turn on/off asynchonous logging-->
            
            			<!--global filters-->
            			<filters>
            				<!--filter by the log category enumeration.... -->
            				<categoryClass name="IDS.Logging.StandardCategory, IDS.System">
            					<!--filter by a specific value of that enumeration-->
            					<category name="Audit">
            						<!--and filter by specific serverities of that enumeration value -->
            						<severity>Information</severity>
            					</category>
            				</categoryClass>
            			</filters>
            			
            			<logger enabled="true" class="IDS.Logging.FileSystemAuditLogger, IDS.System">
            				<parameters>
            					<fileName>c:\log{0:yyyy-MM-dd}_{1}_{{0}}.txt</fileName>
            					<fileMaxSize>1000000</fileMaxSize>
            				</parameters>
            			</logger>
            		</loggers>
            	</logging>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:IDS.Logging.FileSystemAuditLogger.#ctor">
            <summary>
            The constructor creates an instance of this class and loads the default parameter values.
            </summary>
        </member>
        <member name="M:IDS.Logging.FileSystemAuditLogger.Create(System.Xml.XmlNode)">
            <summary>
            Creates a new FileSystemAuditLogger, configuring it based on the given configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
            <returns>A new configured FileSystemAuditLogger.</returns>
        </member>
        <member name="M:IDS.Logging.FileSystemAuditLogger.ConfigureParameters(System.Xml.XmlNode)">
            <summary>
            Configures the file system audit logger based on the given custom configuration node.  The fileName
            is required, while the fileMaxSize and splitFileByType are optional.
            </summary>
            <param name="configuration">Configuration node.</param>
            <remarks>
            Supported schema:
            <code>
            <root>
            	<fileName>c:\log{0:yyyy-MM-dd}_{1}_{{0}}.txt</fileName>
            	<fileMaxSize>1000000</fileMaxSize>
            </root>
            </code>
            The fileName parameter supports the following replaceable values:
            <list type="table">
            	<listheader>Format tokens</listheader>
            	<item>{0} - the current date and time (determined at the time a log entry is made)</item>
            	<item>{1} - the audit log type (the same as specifying splitFileByType = true)</item>
            	<item>{{0}} - the file index number (only valid if fileMaxSize > 0)</item>
            </list>
            </remarks>
        </member>
        <member name="M:IDS.Logging.FileSystemAuditLogger.CanLog(IDS.Logging.LogEntry)">
            <summary>
            Determines whether the logger can log the given <see cref="T:IDS.Logging.LogEntry"/>.
            </summary>
            <param name="entry">LogEntry to analyse for criteria.</param>
            <returns>true if the logger can log the given log entry, false if not.</returns>
        </member>
        <member name="M:IDS.Logging.FileSystemAuditLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            Writes the given log entry to the assigned file.
            </summary>
            <param name="entry">LogEntry to be written to the assigned file.</param>
            <exception cref="T:IDS.Logging.LogSystemException">When the file could not be opened or written to.</exception>
        </member>
        <member name="P:IDS.Logging.FileSystemAuditLogger.SplitFileByType">
            <summary>
            Gets or sets whether or not to Split the log files based on their LogEntry.
            </summary>
            <value>size in bytes.</value>
        </member>
        <member name="T:IDS.Logging.FileSystemLogger">
             <summary>
             Writes log entries to a file on the file system.
             </summary>
             <remarks>
             For a definition of logFormatString parameters, see <see cref="M:IDS.Logging.LogEntry.ToString">LogEntry.ToString()</see>.
             </remarks>
             <example>
             web.config configuration example:
             <code>
             <![CDATA[
            	<logging enabled="true"> <!--globally turn on/off logging-->
            
            		<context>
            			<location>My Credit Union</location>
            			<server>MAServer</server> <!--determined dynamically if left out-->
            		</context>
            		
            		<loggers asynchronous="false"> <!--globally turn on/off asynchonous logging-->
            
            			<!--global filters-->
            			<filters>
            				<!--filter by the log category enumeration.... -->
            				<categoryClass name="IDS.Logging.StandardCategory, IDS.System">
            					<!--filter by a specific value of that enumeration-->
            					<category name="Configuration">
            						<!--and filter by specific serverities of that enumeration value -->
            						<severity>Warning</severity>
            						<severity>Exception</severity>
            						<severity>Critical</severity>
            					</category>
            					<category name="LifeCycle"/>
            				</categoryClass>
            				<categoryClass name="IDS.eStatements.Web.Log.EmailLog, IDS.eStatements.Web.Loader"/>
            			</filters>
            			
            			<logger enabled="true" class="IDS.Logging.FileSystemLogger, IDS.System">
            				<logFormatString>{6} ({7}) [{4}/{5}]</logFormatString>
            				<parameters>
            					<fileName>c:\log{0:yyyy-MM-dd}_{{0}}.txt</fileName>
            					<fileMaxSize>1000000</fileMaxSize>
            				</parameters>
            			</logger>
            		</loggers>
            	</logging>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:IDS.Logging.FileSystemLogger.#ctor">
            <summary>
            The constructor creates an instance of this class and loads the default parameter values.
            </summary>
        </member>
        <member name="M:IDS.Logging.FileSystemLogger.Create(System.Xml.XmlNode)">
            <summary>
            Creates a new FileSystemLogger, configuring it based on the given configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
            <returns>A new configured FileSystemLogger.</returns>
        </member>
        <member name="M:IDS.Logging.FileSystemLogger.ConfigureParameters(System.Xml.XmlNode)">
            <summary>
            Configures the file system logger based on the given custom configuration node.  The fileName
            is required, while the fileMaxSize is optional.
            </summary>
            <param name="configuration">Configuration node.</param>
            <remarks>
            Supported schema:
            <code>
            <root>
            	<fileName>c:\log{0:yyyy-MM-dd}_{{0}}.txt</fileName>
            	<fileMaxSize>1000000</fileMaxSize>
            </root>
            </code>
            The fileName parameter supports the following replaceable values:
            <list type="table">
            	<listheader>Format tokens</listheader>
            	<item>{0} - the current date and time (determined at the time a log entry is made)</item>
            	<item>{{0}} - the file index number (only valid if fileMaxSize > 0)</item>
            </list>
            </remarks>
        </member>
        <member name="P:IDS.Logging.FileSystemLogger.FileName">
            <summary>
            Gets or sets the full path and filename to which log entries are written.
            </summary>
            <value>String path to the file.</value>
        </member>
        <member name="P:IDS.Logging.FileSystemLogger.FileMaxSize">
            <summary>
            Gets or sets the file's max size in bytes.
            </summary>
            <value>size in bytes.</value>
        </member>
        <member name="M:IDS.Logging.FileSystemLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            Writes the given log entry to the assigned file.
            </summary>
            <param name="entry">LogEntry to be written to the assigned file.</param>
            <exception cref="T:IDS.Logging.LogSystemException">When the file could not be opened or written to.</exception>
        </member>
        <member name="M:IDS.Logging.FileSystemLogger.WriteLogFileEntry(System.String,System.String)">
            <summary>
            Given a file name and a string, appends the string to the end of the file.
            </summary>
            <param name="logFileName">The name of the file.</param>
            <param name="entry">The string to append to the end of the file.</param>
        </member>
        <member name="M:IDS.Logging.FileSystemLogger.GetFileNameWithIndex(System.String)">
            <summary>
            Called if the fileMaxSize xmlNode was supplied.  If the file on the system is larger than
            the maxSize, then move to the next file, log.x.txt where x is 1, 2, 3, 4, etc. until a
            file is found, or created, which is smaller than maxSize.  The new fileName is returned.
            </summary>
            <param name="originalFileName">
            The original file name used as the basis to determine the actual file name.
            </param>
        </member>
        <member name="T:IDS.Logging.Web.HttpTraceLoggerWriteMode">
            <summary>
            The mode used by the HttpTraceLogger to write to the ASP.NET Trace.
            </summary>
        </member>
        <member name="F:IDS.Logging.Web.HttpTraceLoggerWriteMode.Write">
            <summary>
            Use Trace.Write.
            </summary>
        </member>
        <member name="F:IDS.Logging.Web.HttpTraceLoggerWriteMode.Warn">
            <summary>
            Use Trace.Warn (causes the message to appear in red).
            </summary>
        </member>
        <member name="T:IDS.Logging.Web.LoggedHttpModule">
            <summary>
            An HttpModule that logs details of each web request and unhandeled error thrown by an ASP.NET page.
            </summary>
        </member>
        <member name="M:IDS.Logging.Web.LoggedHttpModule.Init(System.Web.HttpApplication)">
            <summary>
            Sets up the event handlers into the application
            </summary>
            <param name="context">The HttpApplication to log</param>
        </member>
        <member name="M:IDS.Logging.Web.LoggedHttpModule.Dispose">
            <summary>
            Disposes the module.
            </summary>
        </member>
        <member name="T:IDS.Logging.Web.LoggedHttpModuleCategory">
            <summary>
            Categorizes the types of messages logged by LoggedHttpModule
            </summary>
        </member>
        <member name="F:IDS.Logging.Web.LoggedHttpModuleCategory.BeginRequest">
            <summary>
            Beginning of an Http Request.
            </summary>
        </member>
        <member name="F:IDS.Logging.Web.LoggedHttpModuleCategory.EndRequest">
            <summary>
            End of an Http Request.
            </summary>
        </member>
        <member name="F:IDS.Logging.Web.LoggedHttpModuleCategory.Error">
            <summary>
            When an error occurs on an ASP.NET page.
            </summary>
        </member>
        <member name="T:IDS.Logging.IAuditLogFilter">
            <summary>
             Defines the properties and methods that any object wishing to act as an audit log filter must implement. 
            </summary>
        </member>
        <member name="P:IDS.Logging.IAuditLogFilter.FilterType">
            <summary>
            Represents the filter type
            </summary>
            <value>The filter type.</value>
        </member>
        <member name="P:IDS.Logging.IAuditLogFilter.FilterValue">
            <summary>
            Represents the filter value
            </summary>
            <value>The filter value.</value>
        </member>
        <member name="M:IDS.Logging.IAuditLogFilter.ToXMLNode">
            <summary>
            This will return an XML string that represents the filter node
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Logging.IAuditLogFilter.ToXML">
            <summary>
            This will return an XML string that represents the filter in complete xml structure
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Logging.IAuditLogProvider">
            <summary>
            The IAuditLogProvider interface exposes the methods necessary to implement an audit log entry provider
            that retrieves audit entries associated with a user.
            </summary>
        </member>
        <member name="M:IDS.Logging.IAuditLogProvider.GetAuditLogEntries(IDS.Security.IUser,System.Int32,System.Int32,System.String,IDS.Logging.AuditLogEntryFilterCollection)">
            <summary>
            This method returns a collection of the <see cref="T:IDS.Logging.AuditLogEntry">AuditLogEntry</see> 
            </summary>
            <param name="CurrUser">The Current Profile User</param>
            <param name="MaxRecords">The max number of <see cref="T:IDS.Logging.AuditLogEntry">AuditLogEntry</see> results to return </param>
            <param name="MaxNumberOfDays">The max number of days back to filter results on.</param>
            <param name="dataSpace">The dataspace name to filter the results on.</param>
            <param name="sFilters">The filters that filter based on the <see cref="T:IDS.Logging.AuditLogEntryFilterTypes">AuditLogEntryFilterTypes</see></param>
            <returns>A collection of the <see cref="T:IDS.Logging.AuditLogEntry">AuditLogEntry</see></returns>
        </member>
        <member name="M:IDS.Logging.IAuditLogProvider.GetAuditLogEntries(IDS.Security.IUser,System.Int32,System.Int32,System.String,IDS.Logging.AuditLogEntryFilterCollection,IDS.Logging.AuditLogEntrySQLColumnCollection,System.String)">
            <summary>
            This method returns a collection of the <see cref="T:IDS.Logging.ExtendedAuditLogEntry">ExtendedAuditLogEntry</see> 
            </summary>
            <param name="CurrUser">The Current Profile User</param>
            <param name="MaxRecords">The max number of <see cref="T:IDS.Logging.AuditLogEntry">AuditLogEntry</see> results to return </param>
            <param name="MaxNumberOfDays">The max number of days back to filter results on.</param>
            <param name="dataSpace">The dataspace name to filter the results on.</param>
            <param name="sFilters">The filters that filter based on the <see cref="T:IDS.Logging.AuditLogEntryFilterTypes">AuditLogEntryFilterTypes</see></param>
            <param name="columns">The extended columns and tables related to the main audit log entry</param>
            <param name="columnDelimitor">The delimitor to split the extended columns and tables that are related to the main audit log entry</param>
            <returns>A collection of the <see cref="T:IDS.Logging.ExtendedAuditLogEntry">ExtendedAuditLogEntry</see></returns>
        </member>
        <member name="T:IDS.Logging.ILogFilter">
            <summary>
            Defines the properties and methods that any object wishing to act as a Log filter must implement.
            </summary>
        </member>
        <member name="P:IDS.Logging.ILogFilter.SubFilters">
            <summary>
            Gets the sub filters.
            </summary>
            <value>The sub filters.</value>
        </member>
        <member name="P:IDS.Logging.ILogFilter.Ignore">
            <summary>
            Gets or sets a value indicating whether to ignore this <see cref="T:IDS.Logging.ILogFilter"/>.
            </summary>
            <value><c>true</c> to ignore; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:IDS.Logging.ILogFilter.Test(IDS.Logging.LogEntry)">
            <summary>
            Tests the specified entry.
            </summary>
            <param name="entry">The entry.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Logging.ILogFilter.Configure(System.Xml.XmlNode)">
            <summary>
            Configures this <see cref="T:IDS.Logging.ILogFilter"/> using the specified configuration.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:IDS.Logging.ILoggable">
            <summary>
            Objects which implement ILoggable can control the manner in which they appear in log entries. If an object is logged that
            does not implement ILoggable, it's ToString method is used to convert it to a loggable format.
            </summary>
            <remarks>
            While all the base loggers in the <see cref="N:IDS.Logging"/> and <see cref="N:IDS.Logging.Web"/> namespaces attempt to convert
            logged objects to strings, not all loggers may do so. Consult the documentation on any custom loggers you may be using to
            determine whether or not that logger is affected by ILoggable or ToString.
            </remarks>
        </member>
        <member name="M:IDS.Logging.ILoggable.ToLog">
            <summary>
            Converts the object to a loggable string.
            </summary>
            <returns>A loggable string.</returns>
        </member>
        <member name="T:IDS.Logging.ILogger">
            <summary>
            Interface for classes meant to deliver/record a LogEntry in a specific way.
            </summary>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(IDS.Logging.LogEntry)">
            <summary>
            Logs the given log entry.
            </summary>
            <param name="entry">LogEntry to be logged.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(System.Enum,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(System.String,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(System.Enum,System.Object,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(System.String,System.Object,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(System.Enum,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(System.String,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(System.Enum,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(System.String,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(IDS.Logging.LogContext,System.Enum,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(IDS.Logging.LogContext,System.String,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(IDS.Logging.LogContext,System.Enum,System.Object,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(IDS.Logging.LogContext,System.String,System.Object,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(IDS.Logging.LogContext,System.Enum,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(IDS.Logging.LogContext,System.String,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(IDS.Logging.LogContext,System.Enum,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Log(IDS.Logging.LogContext,System.String,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.Configure(System.Xml.XmlNode)">
            <summary>
            Configures the logger based on the given configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.ConfigureFilters(System.Xml.XmlNode)">
            <summary>
            Configures the <see cref="T:IDS.Logging.LogFilter"/> based on the configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.ConfigureParameters(System.Xml.XmlNode)">
            <summary>
            Configures any custom parameters the logger uses based on the configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
        </member>
        <member name="M:IDS.Logging.ILogger.CanLog(IDS.Logging.LogEntry)">
            <summary>
            Returns whether the logger is configured to log the given Log Entry.
            </summary>
            <param name="entry">LogEntry to analyse for criteria.</param>
            <returns>true if the logger can configure the given log entry, false if not</returns>
        </member>
        <member name="P:IDS.Logging.ILogger.LogFormatString">
            <summary>
            Specifies the format of the text that will represent logged LogEntry's.
            <list type="table">
            	<listheader>Format tokens</listheader>
            	<item>{0}</item><description>Location (or client) the entry originated from</description>
            	<item>{1}</item><description>Server name the entry originated from</description>
            	<item>{2}</item><description>Location of executing assembly where entry originated from</description>
            	<item>{3}</item><description>Log date/time</description>
            	<item>{4}</item><description>Log category</description>
            	<item>{5}</item><description>Log severity</description>
            	<item>{6}</item><description>Log content (converted by ToString or <see cref="M:IDS.Logging.ILoggable.ToLog"/>)</description>
            	<item>{7}</item><description>Log details</description>
            </list>
            <seealso cref="T:IDS.Logging.ILoggable"/>
            </summary>
            <value>Tokenized format string.</value>
        </member>
        <member name="P:IDS.Logging.ILogger.Filter">
            <summary>
            A LogFilter object representing all of the categorical filters configured for the logger. 
            </summary>
            <value>A LogFilter.</value>
        </member>
        <member name="P:IDS.Logging.ILogger.Enabled">
            <summary>
            Enables or Disables the logger.
            </summary>
            <value>true if the module is enabled; otherwise, false.</value>
        </member>
        <member name="T:IDS.Logging.IShutdownListener">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Logging.IShutdownListener.SignalShutdown">
            <summary>
            Lets the logger know that the application is about to terminate.
            </summary>
            <remarks>
            Loggers that keep a queue of log entries for batch writes should clear their queue at this time.
            </remarks>
        </member>
        <member name="T:IDS.Logging.LocationInfo">
            <summary>
            The LocationInfo class contains program location information where the log entry was logged.
            </summary>
        </member>
        <member name="F:IDS.Logging.LocationInfo.Empty">
            <summary>
            Represents an empty LocationInfo instance.
            </summary>
        </member>
        <member name="M:IDS.Logging.LocationInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LocationInfo"/> class.
            </summary>
        </member>
        <member name="M:IDS.Logging.LocationInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.LocationInfo"/> class.
            </summary>
            <param name="callStackBoundaryType">The type on which the call stack boundary is drawn.</param>
        </member>
        <member name="M:IDS.Logging.LocationInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.LocationInfo"/> class.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="methodName">Name of the method.</param>
            <param name="fileName">Name of the file.</param>
            <param name="lineNumber">The line number.</param>
        </member>
        <member name="M:IDS.Logging.LocationInfo.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.LocationInfo"/> class.
            </summary>
            <param name="xmlNode">The XML node.</param>
        </member>
        <member name="P:IDS.Logging.LocationInfo.ClassName">
            <summary>
            Gets the name of the class.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:IDS.Logging.LocationInfo.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:IDS.Logging.LocationInfo.LineNumber">
            <summary>
            Gets the line number.
            </summary>
            <value>The line number.</value>
        </member>
        <member name="P:IDS.Logging.LocationInfo.MethodName">
            <summary>
            Gets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="M:IDS.Logging.LocationInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:IDS.Logging.LocationInfo.ToXml">
            <summary>
            Converts this instance to XML.
            </summary>
        </member>
        <member name="M:IDS.Logging.LocationInfo.ToXml(System.Xml.XmlWriter)">
            <summary>
            Converts this instance to XML.
            </summary>
            <param name="writer">The XML writer.</param>
        </member>
        <member name="M:IDS.Logging.LocationInfo.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads from XML.
            </summary>
            <param name="xmlNode">The XML node.</param>
        </member>
        <member name="M:IDS.Logging.LocationInfo.LoadFromXml(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Loads from XML.
            </summary>
            <param name="xmlNode">The XML node.</param>
            <param name="ignoreErrors">if set to <c>true</c> [ignore errors].</param>
        </member>
        <member name="M:IDS.Logging.LocationInfo.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:IDS.Logging.LogContext">
            <summary>
            Represents a context for log entries, such as what client originated the log entry, which server, and what assembly.
            </summary>
        </member>
        <member name="M:IDS.Logging.LogContext.GetAspSessionCookieName">
            <summary>
            Get the ASP.NET Session cookie name, typically "ASP.NET_SessionId"
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Logging.LogContext.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Logging.LogContext.#ctor(System.String,System.String)">
            <summary>
            Initializes a new LogContext with a location and server name.
            </summary>
            <param name="location">The physical locale of this context.</param>
            <param name="server">Server name of this context.</param>
        </member>
        <member name="M:IDS.Logging.LogContext.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new LogContext, referencing the given assembly.
            </summary>
            <param name="assembly">The assembly this context is a part of.</param>
        </member>
        <member name="M:IDS.Logging.LogContext.#ctor(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Initializes a new LogContext with a location, server name, and referencing the given assembly.
            </summary>
            <param name="location">The physical locale of this context.</param>
            <param name="server">Server name of this context.</param>
            <param name="assembly">The assembly this context is a part of.</param>
        </member>
        <member name="M:IDS.Logging.LogContext.#ctor(System.String,System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new LogContext with a location, server name, and referencing the given assembly.
            </summary>
            <param name="location">The physical locale of this context.</param>
            <param name="server">Server name of this context.</param>
            <param name="assembly">The assembly this context is a part of.</param>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:IDS.Logging.LogContext.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.LogContext"/> class.
            </summary>
            <param name="xmlNode">The XML node to initialize the class with.</param>
        </member>
        <member name="P:IDS.Logging.LogContext.Dataspace">
            <summary>
            Gets or sets the Dataspace
            </summary>
        </member>
        <member name="P:IDS.Logging.LogContext.Location">
            <summary>
            Gets or sets the context's location.
            </summary>
            <value>String of the context's location.</value>
            <example>
            <code>context.Location = "IDS Headquaraters";</code>
            </example>
        </member>
        <member name="P:IDS.Logging.LogContext.Server">
            <summary>
            Gets or sets the context's server.
            </summary>
            <value>String The domain controller name</value>
            <example>
            <code>context.Server = "DEVELOPMENT";</code>
            </example>
        </member>
        <member name="P:IDS.Logging.LogContext.Assembly">
            <summary>
            Gets or sets the context's assembly. This is set automatically by the framework of omitted at the time of logging.
            </summary>
            <value>An Assembly object.</value>
        </member>
        <member name="P:IDS.Logging.LogContext.AssemblyName">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Logging.LogContext.AddUserInformation">
            <summary>
            Adds the user information.
            </summary>
        </member>
        <member name="P:IDS.Logging.LogContext.IPAddress">
            <summary>
            Gets or sets the IP Address of the host machine.
            </summary>
            <value>IP Address</value>
        </member>
        <member name="P:IDS.Logging.LogContext.URL">
            <summary>
            Gets or sets the User ID of the user.
            </summary>
            <value>User ID</value>
        </member>
        <member name="P:IDS.Logging.LogContext.URLReferer">
            <summary>
            Gets or sets the User ID of the user.
            </summary>
            <value>User ID</value>
        </member>
        <member name="P:IDS.Logging.LogContext.HostName">
            <summary>
            Gets or sets the host name of the user.
            </summary>
            <value>User ID</value>
        </member>
        <member name="P:IDS.Logging.LogContext.Browser">
            <summary>
            Gets or sets the User's Browser.
            </summary>
            <value>User ID</value>
        </member>
        <member name="P:IDS.Logging.LogContext.BrowserCapabilities">
            <summary>
            Gets or sets the user's browser capabilities.
            </summary>
        </member>
        <member name="P:IDS.Logging.LogContext.ClientInfo">
            <summary>
            Gets or sets the user's browser capabilities.
            </summary>
        </member>
        <member name="P:IDS.Logging.LogContext.UserAgent">
            <summary>
            Gets or sets the UserAgent
            </summary>
            <value>HttpContext.Current.Session.SessionID.ToString()</value>
        </member>
        <member name="P:IDS.Logging.LogContext.RequestInfo">
            <summary>
            Gets or sets the request info associated with the request that created this log entry.
            </summary>
            <value>The request info associated with the request that created this log entry.</value>
        </member>
        <member name="P:IDS.Logging.LogContext.SessionID">
            <summary>
            Gets or sets the SessionID
            </summary>
            <value>HttpContext.Current.Session.SessionID.ToString()</value>
        </member>
        <member name="P:IDS.Logging.LogContext.HttpMethod">
            <summary>
            Gets or sets the HTTP method.
            </summary>
            <value>The HTTP method.</value>
        </member>
        <member name="P:IDS.Logging.LogContext.DefaultSessionID">
            <summary>
            Gets or sets the <see cref="P:IDS.Logging.LogContext.SessionID" /> to log when no <see cref="T:System.Web.HttpContext" /> is available.
            </summary>
            <remarks>
            This property is set per thread.
            </remarks>
        </member>
        <member name="P:IDS.Logging.LogContext.ThreadID">
            <summary>
            Gets the ID of the thread that logged this entry.
            </summary>
        </member>
        <member name="P:IDS.Logging.LogContext.PrincipalIdentity">
            <summary>
            Gets the <see cref="P:System.Security.Principal.IIdentity.Name">principal identity name</see>
            that logged this entry.
            </summary>
        </member>
        <member name="P:IDS.Logging.LogContext.WindowsIdentity">
            <summary>
            Gets the <see cref="P:System.Security.Principal.WindowsIdentity.Name">Windows identity name</see>
            that logged this entry.
            </summary>
        </member>
        <member name="P:IDS.Logging.LogContext.UserId">
            <summary>
            Current user user id
            </summary>
        </member>
        <member name="P:IDS.Logging.LogContext.Credentials">
            <summary>
            current user credentials
            </summary>
        </member>
        <member name="M:IDS.Logging.LogContext.ToXml">
            <summary>
            Converts the LogEntry instance to an XML string.
            </summary>
            <example>
            &lt;logEntry 
            	    date=&quot;Wed, 06 Apr 2005 22:09:04 GMT&quot; 
            	    categoryType=&quot;IDS.Portal.PortalLogCategory, IDS.Portal&quot; 
            	    category=&quot;PageView&quot; severity=&quot;Information&quot; thread=&quot;36&quot; 
            	principalIdentity=&quot;DOMAIN\USERNAME&quot; windowsIdentity=&quot;DOMAIN\USERNAME&quot;&gt;
            	    &lt;context location=&quot;LOCATION&quot; server=&quot;SERVER NAME&quot; assembly=&quot;IDS.System&quot; /&gt;
            	    &lt;content&gt;
            	        Here is the content data
            	    &lt;/content&gt;
            	    &lt;details&gt;
            	        Here is the details data
            	    &lt;/details&gt;
            &lt;/logEntry&gt;
            </example>
            <returns>Returns an XML string representation of the current instance.</returns>
        </member>
        <member name="M:IDS.Logging.LogContext.ToXml(System.Xml.XmlWriter)">
            <summary>
            Toes the XML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:IDS.Logging.LogContext.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads from XML.
            </summary>
            <param name="xmlNode">The XML node.</param>
        </member>
        <member name="M:IDS.Logging.LogContext.LoadFromXml(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Loads from XML.
            </summary>
            <param name="xmlNode">The XML node.</param>
            <param name="ignoreErrors">if set to <c>true</c> [ignore errors].</param>
        </member>
        <member name="M:IDS.Logging.LogContext.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:IDS.Logging.LogEntryCollection">
            <summary>
            The LogEntryCollection class contains a collection of <see cref="T:IDS.Logging.LogEntry">LogEntry</see> objects.
            </summary>
        </member>
        <member name="M:IDS.Logging.LogEntryCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.LogEntryCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Logging.LogEntryCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Logging.LogEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.LogEntryCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Logging.LogEntryCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.LogEntryCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:IDS.Logging.LogEntryCollection.ToString">
            <summary>
            Returns a string that represents the contents of this LogEntryCollection using the default format string.
            </summary>
            <returns>Returns a string that represents the contents of this LogEntryCollection.</returns>
        </member>
        <member name="M:IDS.Logging.LogEntryCollection.ToString(System.String)">
            <summary>
            Returns a string that represents the contents of this LogEntryCollection using a custom format string.
            </summary>
            <param name="formatString">The format string to pass to the LogEntry.ToString(formatString) method.</param>
            <returns>Returns a string that represents the contents of this LogEntryCollection.</returns>
        </member>
        <member name="T:IDS.Logging.LogFileEncryption">
            <summary>
            This class is used to write out encrypted log files.  
            the file format is :
            keyStart - 128 byte encrypted key - 128 byte encrypted IV - encrypted log text
            keyStart is not encrypted
            key and iv are encrypted using the public key
            log text is encrypted using the key and iv
            </summary>
        </member>
        <member name="M:IDS.Logging.LogFileEncryption.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.LogFileEncryption"/> class.
            </summary>
        </member>
        <member name="M:IDS.Logging.LogFileEncryption.#ctor(System.String)">
            <summary>
            Creats a new LogFileEncryption object
            </summary>
            <param name="publicKey">public key to use to encrypt the logs</param>
        </member>
        <member name="M:IDS.Logging.LogFileEncryption.Write(System.String,System.String)">
            <summary>
            Encrypts the given text and writes it to a file in the given location
            </summary>
            <param name="text">text to encrypt</param>
            <param name="filePath">path of file where encrypted text will be placed</param>
        </member>
        <member name="M:IDS.Logging.LogFileEncryption.Read(System.String,System.String)">
            <summary>
            Reads the encrtyped file spcified in filePath, file should be in the format specified in the LogFileEncryption class summary
            </summary>
            <param name="filePath">the path of the encrypted file to read</param>
            <param name="privateKey">xml of private key used to decrypt the rijndael key used to encrypted the log files</param>
            <returns>unencrypted file text</returns>
        </member>
        <member name="T:IDS.Logging.LogFilter">
            <summary>
            A LogFilter can filter through log entries to restrict the types of log entries a particular logger reacts to.
            </summary>
        </member>
        <member name="P:IDS.Logging.LogFilter.Filters">
            <summary>
            Gets or sets the collection of <see cref="T:IDS.Logging.CategoryFilter"/>s associated with this filter. If no category filters
            are set, the filter will match all category classes. If category filters exists, the filter passes as long as at
            least one of the category filters matches.
            </summary>
            <value>An ArrayList containing the category filters.</value>
        </member>
        <member name="M:IDS.Logging.LogFilter.Test(IDS.Logging.LogEntry)">
            <summary>
            Determines if the <see cref="T:IDS.Logging.LogEntry" /> matches the filter.
            </summary>
            <param name="entry">The <see cref="T:IDS.Logging.LogEntry" /> to test for a filter match.</param>
            <returns>true if the <see cref="T:IDS.Logging.LogEntry" /> matches the filter.</returns>
        </member>
        <member name="T:IDS.Logging.LogFilterFactory">
            <summary>
            Static class for creating <see cref="T:IDS.Logging.ILogFilter"/>s.
            </summary>
        </member>
        <member name="M:IDS.Logging.LogFilterFactory.GetLogFilter(System.Xml.XmlNode)">
            <summary>
            Creates an <see cref="T:IDS.Logging.ILogFilter"/> instance using the specified configuration.
            </summary>
            <param name="filterConfiguration">The filter configuration.</param>
            <returns>A new <see cref="T:IDS.Logging.ILogFilter"/> instance.</returns>
        </member>
        <member name="T:IDS.Logging.LoggerFactory">
            <summary>
            LoggerFactory is capable of creating specific loggers and configuring them based on a given logger configuration xml node.
            Reflection is utilized to create the logger in the Name attribute of the given XmlNode. The specified class must implement ILogger.
            </summary>
        </member>
        <member name="M:IDS.Logging.LoggerFactory.GetLogger(System.String,System.Xml.XmlNode)">
            <summary>
            Gets and configures a logger by the specified class name and configuration node.
            </summary>
            <param name="loggerName">Fully qualified class name and assembly name of the logger to create.</param>
            <param name="configuration">Configuration node containing any custom configuration parameters the logger uses.</param>
            <returns>A new configured logger.</returns>
        </member>
        <member name="M:IDS.Logging.LoggerFactory.GetLogger(System.Xml.XmlNode)">
            <summary>
            Gets and configures a logger by the specified configuration node.
            </summary>
            <param name="configuration">Configuration node containing the logger class and assembly name and any custom configuration parameters the logger uses.</param>
            <returns>A new configured logger.</returns>
            <remarks>The root node must contain a "class" attribute containing the fully qualified logger class name and assembly.</remarks>
        </member>
        <member name="T:IDS.Logging.LoggingConfiguration">
            <summary>
            Represents a logging configuration instance as defined in the app.config file.
            </summary>
        </member>
        <member name="M:IDS.Logging.LoggingConfiguration.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Logging.LoggingConfiguration.DefaultContext">
            <summary>
            Gets or sets the default context for log entries logged through <see cref="T:IDS.Logging.LogSystem"/>.
            </summary>
            <value>A LogContext object.</value>
        </member>
        <member name="P:IDS.Logging.LoggingConfiguration.ActiveLogger">
            <summary>
            Gets or sets the active logger used by the <see cref="T:IDS.Logging.LogSystem"/>.
            </summary>
            <value>An ILogger object.</value>
        </member>
        <member name="M:IDS.Logging.LoggingConfiguration.LoadConfiguration(System.Xml.XmlNode)">
            <summary>
            Loads a new LoggingConfiguration based on the given configuration node.
            </summary>
            <param name="node">Configuration node.</param>
            <returns>A new logging configuration object.</returns>
            <remarks>
            Supported Schema example:
            <code>
            //TODO: example
            </code>
            </remarks>
        </member>
        <member name="M:IDS.Logging.LoggingConfiguration.LoadContext(System.Xml.XmlNode)">
            <summary>
            Loads a new Log Context based on the given configuration node.
            </summary>
            <param name="node">Configuration node.</param>
            <returns>A newly configured LogContext.</returns>
        </member>
        <member name="M:IDS.Logging.LoggingConfiguration.LoadLoggers(System.Xml.XmlNode)">
            <summary>
            Configures a new <see cref="T:IDS.Logging.CompositeLogger"/> containing child loggers as configured by the given configuration node.
            </summary>
            <param name="node">Configuration node.</param>
            <returns>A newly configured CompositeLogger.</returns>
        </member>
        <member name="T:IDS.Logging.LoggingConfigurationHandler">
            <summary>
            Handles a custom ids.config/logging section in app.config.
            </summary>
        </member>
        <member name="M:IDS.Logging.LoggingConfigurationHandler.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Logging.LoggingConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Implemented by all configuration section handlers to parse the XML 
            of the configuration section. The returned object is added to the 
            configuration collection and is accessed by <see cref="M:System.Configuration.ConfigurationSettings.GetConfig(System.String)"/>.
            </summary>
            <param name="parent">The configuration settings in a corresponding parent configuration section.</param>
            <param name="configContext">An <see cref="T:System.Web.Configuration.HttpConfigurationContext"/>  when Create is called from the ASP.NET configuration system. 
            Otherwise, this parameter is reserved and is a null reference </param>
            <param name="section">The <see cref="T:System.Xml.XmlNode"/> that contains the configuration information from the configuration file. Provides 
            direct access to the XML contents of the configuration section.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:IDS.Logging.LogHelper">
            <summary>
            The LogHelper class assists with wrapping a logger to provide higher level methods such as LogInfo,
            LogDebug, LogWarn and LogCritical.
            </summary>
            <remarks>
            The primary purpose of this class if to wrap an instance of the <see cref="T:IDS.Logging.TypeContextLogger"/>.
            For example, the following declaration can be placed at the top of your class for logging:
            <example>
            	private static LogHelper logger = new LogHelper(LogSystem.CreateTypeContextLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType));
            </example>
            
            Then in your methods, you can just do the following:
            <example>
            	logger.LogDebug("Debugging message");
            </example>
            </remarks>
        </member>
        <member name="M:IDS.Logging.LogHelper.#ctor(IDS.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.LogHelper"/> class.
            </summary>
            <param name="logger">The logger to associate with this LogHelper instance.</param>
        </member>
        <member name="P:IDS.Logging.LogHelper.Logger">
            <summary>
            Gets the associated logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="M:IDS.Logging.LogHelper.LogInfo(System.String)">
            <summary>
            Writes an informational message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Information"/> severity.
            </summary>
            <param name="message">The message to write to the log.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.LogInfo(System.String,System.Object[])">
            <summary>
            Writes an informational message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Information"/> severity.
            </summary>
            <param name="message">The message to write to the log.</param>
            <param name="args">An array of objects to write using Format().</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.LogDebug(System.String)">
            <summary>
            Writes a debug message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Debug"/> severity.
            </summary>
            <param name="message">The message to write to the log.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.LogDebug(System.String,System.Object[])">
            <summary>
            Writes a debug message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Debug"/> severity.
            </summary>
            <param name="message">The message to write to the log.</param>
            <param name="args">An array of objects to write using Format().</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.LogWarn(System.String)">
            <summary>
            Writes a warning message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Warning"/> severity.
            </summary>
            <param name="message">The message to write to the log.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.LogWarn(System.String,System.Object[])">
            <summary>
            Writes a warning message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Warning"/> severity.
            </summary>
            <param name="message">The message to write to the log.</param>
            <param name="args">An array of objects to write using Format().</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.LogCritical(System.String)">
            <summary>
            Writes a critical message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Critical"/> severity.
            </summary>
            <param name="message">The message to write to the log.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.LogCritical(System.String,System.Object[])">
            <summary>
            Writes a critical message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Critical"/> severity.
            </summary>
            <param name="message">The message to write to the log.</param>
            <param name="args">An array of objects to write using Format().</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.LogException(System.Exception,System.Enum,System.String)">
            <summary>
            Logs the details of an Exception and its inner most Exception.
            </summary>
            <param name="ex">Exception</param>
            <param name="category">The log category</param>
            <param name="message">Any extra message you care to add.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.LogException(System.Exception,System.String)">
            <summary>
            Logs an Exception and it's inner most Exception.
            Places the stack trace in details.
            </summary>
            <param name="ex">Exception</param>
            <param name="message">Any extra message you care to add.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.LogException(System.Exception,System.String,System.Object[])">
            <summary>
            Writes a critical message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Critical"/> severity.
            </summary>
            <param name="ex">Exception</param>
            <param name="message">The message to write to the log.</param>
            <param name="args">An array of objects to write using Format().</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.LogException(System.Exception,System.Enum)">
            <summary>
            Logs an Exception and it's inner most Exception.
            Places the stack trace in details.
            </summary>
            <param name="ex">Exception</param>
            <param name="category">The log category</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.LogException(System.Exception)">
            <summary>
            Logs an Exception and it's inner most Exception.
            Places the stack trace in details.
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="P:IDS.Logging.LogHelper.IsDebugEnabled">
            <summary>
            Gets a Boolean value that indicates whether Debug entries are being logged.
            </summary>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(IDS.Logging.LogEntry)">
            <summary>
            Logs the given log entry.
            </summary>
            <param name="entry">LogEntry to be logged.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(System.Enum,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(System.String,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(System.Enum,System.Object,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(System.String,System.Object,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(System.Enum,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(System.String,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(System.Enum,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(System.String,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(IDS.Logging.LogContext,System.Enum,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(IDS.Logging.LogContext,System.String,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(IDS.Logging.LogContext,System.Enum,System.Object,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(IDS.Logging.LogContext,System.String,System.Object,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(IDS.Logging.LogContext,System.Enum,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(IDS.Logging.LogContext,System.String,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(IDS.Logging.LogContext,System.Enum,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Log(IDS.Logging.LogContext,System.String,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Logs the given parameters.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="content">Content to be logged.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.Configure(System.Xml.XmlNode)">
            <summary>
            Configures the logger based on the given configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.ConfigureFilters(System.Xml.XmlNode)">
            <summary>
            Configures the <see cref="T:IDS.Logging.LogFilter"/> based on the configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.ConfigureParameters(System.Xml.XmlNode)">
            <summary>
            Configures any custom parameters the logger uses based on the configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
        </member>
        <member name="M:IDS.Logging.LogHelper.CanLog(IDS.Logging.LogEntry)">
            <summary>
            Returns whether the logger is configured to log the given Log Entry.
            </summary>
            <param name="entry">LogEntry to analyse for criteria.</param>
            <returns>
            true if the logger can configure the given log entry, false if not
            </returns>
        </member>
        <member name="P:IDS.Logging.LogHelper.LogFormatString">
            <summary>
            Specifies the format of the text that will represent logged LogEntry's.
            <list type="table">
            		<listheader>Format tokens</listheader>
            		<item>{0}</item><description>Location (or client) the entry originated from</description>
            		<item>{1}</item><description>Server name the entry originated from</description>
            		<item>{2}</item><description>Location of executing assembly where entry originated from</description>
            		<item>{3}</item><description>Log date/time</description>
            		<item>{4}</item><description>Log category</description>
            		<item>{5}</item><description>Log severity</description>
            		<item>{6}</item><description>Log content (converted by ToString or <see cref="M:IDS.Logging.ILoggable.ToLog"/>)</description>
            		<item>{7}</item><description>Log details</description>
            	</list>
            	<seealso cref="T:IDS.Logging.ILoggable"/>
            </summary>
            <value>Tokenized format string.</value>
        </member>
        <member name="P:IDS.Logging.LogHelper.Filter">
            <summary>
            A LogFilter object representing all of the categorical filters configured for the logger.
            </summary>
            <value>A LogFilter.</value>
        </member>
        <member name="P:IDS.Logging.LogHelper.Enabled">
            <summary>
            Enables or Disables the logger.
            </summary>
            <value>true if the module is enabled; otherwise, false.</value>
        </member>
        <member name="T:IDS.Logging.LogManager">
            <summary>
            The LogManager class is used to log messages to the log as well as store a collection of the
            messages logged for future reference.
            </summary>
        </member>
        <member name="M:IDS.Logging.LogManager.#ctor">
            <summary>
            Initializes a new instance of the LogManager class using the default logger.
            </summary>
        </member>
        <member name="M:IDS.Logging.LogManager.#ctor(IDS.Logging.ILogger)">
            <summary>
            Initializes a new instance of the LogManager class and sets the Logger to a particular logger.
            </summary>
            <param name="logger">The ILogger instance to use for logging within the LogManager.</param>
        </member>
        <member name="P:IDS.Logging.LogManager.LogEntries">
            <summary>
            Gets the current contents of the log for this LogManager instance.
            </summary>
            <value>A collection of LogEntries.</value>
        </member>
        <member name="M:IDS.Logging.LogManager.Log(IDS.Logging.LogEntry)">
            <summary>
            Logs a message to the Logging System.
            </summary>
            <param name="logEntry">The LogEntry to log to the Logging System.</param>
        </member>
        <member name="M:IDS.Logging.LogManager.Log(System.Enum,System.Object)">
            <summary>
            Logs a message to the Logging System.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="message">The object to log to the Logging System.</param>
        </member>
        <member name="M:IDS.Logging.LogManager.Log(System.Enum,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Logs a message to the Logging System.
            </summary>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="message">The object to log to the Logging System.</param>
        </member>
        <member name="M:IDS.Logging.LogManager.Log(IDS.Logging.LogContext,System.Enum,System.Object)">
            <summary>
            Logs a message to the Logging System.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="message">The object to log to the Logging System.</param>
        </member>
        <member name="M:IDS.Logging.LogManager.Log(IDS.Logging.LogContext,System.Enum,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Logs a message to the Logging System.
            </summary>
            <param name="context">The LogContext to log to the Logging System.</param>
            <param name="category">The category to use in logging to the Logging System.</param>
            <param name="severity">The severity to use in logging to the Logging System.</param>
            <param name="message">The text to log to the Logging System.</param>
        </member>
        <member name="T:IDS.Logging.LogSeverity">
            <summary>
            The severity of a log entry.
            </summary>
        </member>
        <member name="F:IDS.Logging.LogSeverity.Unspecified">
            <summary>
            Unknown log severity.
            </summary>
        </member>
        <member name="F:IDS.Logging.LogSeverity.Debug">
            <summary>
            A log entry that contains debug information for debugging / development purposes.
            </summary>
        </member>
        <member name="F:IDS.Logging.LogSeverity.Information">
            <summary>
            Information that might be useful for reports or auditing purposes.
            </summary>
        </member>
        <member name="F:IDS.Logging.LogSeverity.Audit">
            <summary>
            An audit denotes the entry is auditing some user activity.
            </summary>
        </member>
        <member name="F:IDS.Logging.LogSeverity.Warning">
            <summary>
            A warning that something did not go as expected or the system is not operating at peek performance.
            May also indicate a recoverable condition that is not considered serious by the application.
            </summary>
        </member>
        <member name="F:IDS.Logging.LogSeverity.Exception">
            <summary>
            An exception has occured and the application has aborted some operation unexpectedly.
            </summary>
        </member>
        <member name="F:IDS.Logging.LogSeverity.Critical">
            <summary>
            A critical, unrecoverable error has occurred. This is the highest severity a message can have.
            </summary>
        </member>
        <member name="T:IDS.Logging.LogSystem">
            <summary>
            Allows easy logging of information by creating a hiearchy of loggers based on the app.config. By logging log entries
            via the LogSystem's many static methods, applications can allow implementers to configure when, where, and how log messages
            are persisted.
            </summary>
        </member>
        <member name="P:IDS.Logging.LogSystem.Configuration">
            <summary>
            Gets the logging configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:IDS.Logging.LogSystem.#cctor">
            <summary>
            Initializes the LogSystem when the assembly is loaded.
            </summary>
        </member>
        <member name="P:IDS.Logging.LogSystem.ConfigurationSectionPath">
            <summary>
            The path to the logging configuration node in app.config. If changed, the logging configuration will be reloaded.
            </summary>
            <value>The path to the logging configuration node in app.config.</value>
        </member>
        <member name="P:IDS.Logging.LogSystem.LoggingConfiguration">
            <summary>
            Gets or sets the LoggingConfiguration used by the LogSystem. LoggingConfiguration is loaded from app.config if not
            specified.
            </summary>
            <value>A LoggingConfiguration object.</value>
        </member>
        <member name="P:IDS.Logging.LogSystem.ActiveLogger">
            <summary>
            Gets or sets the log system's active logger, to which log entries are logged when the static methods are invoked.
            When loaded from app.config, this will be a composite logger containing all the configured child loggers.
            </summary>
            <value>An ILogger object.</value>
        </member>
        <member name="M:IDS.Logging.LogSystem.CreateTypeContextLogger">
            <summary>
            Creates a logger that populates Log Entries with call stack information.
            </summary>
            <remarks>
            The type that declares the calling method is used as the call stack boundary.
            </remarks>
        </member>
        <member name="M:IDS.Logging.LogSystem.CreateTypeContextLogger(System.Type)">
            <summary>
            Creates a logger that populates Log Entries with call stack information.
            </summary>
            <param name="type">The type that is desired at the top of the call stack.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Logging.LogSystem.LogInfo(System.String)">
            <summary>
            Writes an informational message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Information"/> severity.
            </summary>
            <param name="message">The message to write to the log.</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.LogInfo(System.String,System.Object[])">
            <summary>
            Writes an informational message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Information"/> severity.
            </summary>
            <param name="message">The message to write to the log.</param>
            <param name="args">An array of objects to write using Format().</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.LogDebug(System.String)">
            <summary>
            Writes a debug message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Debug"/> severity.
            </summary>
            <param name="message">The message to write to the log.</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.LogDebug(System.String,System.Object[])">
            <summary>
            Writes a debug message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Debug"/> severity.
            </summary>
            <param name="message">The message to write to the log.</param>
            <param name="args">An array of objects to write using Format().</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.LogWarn(System.String)">
            <summary>
            Writes a warning message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Warning"/> severity.
            </summary>
            <param name="message">The message to write to the log.</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.LogWarn(System.String,System.Object[])">
            <summary>
            Writes a warning message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Warning"/> severity.
            </summary>
            <param name="message">The message to write to the log.</param>
            <param name="args">An array of objects to write using Format().</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.LogCritical(System.String)">
            <summary>
            Writes a critical message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Critical"/> severity.
            </summary>
            <param name="message">The message to write to the log.</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.LogCritical(System.String,System.Object[])">
            <summary>
            Writes a critical message to the active logger using the <see cref="F:IDS.Logging.StandardCategory.Debug"/> category
            and the <see cref="F:IDS.Logging.LogSeverity.Critical"/> severity.
            </summary>
            <param name="message">The message to write to the log.</param>
            <param name="args">An array of objects to write using Format().</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.LogException(System.Exception,System.Enum,System.String)">
            <summary>
            Logs the details of an Exception and its inner most Exception.
            </summary>
            <param name="ex">Exception</param>
            <param name="category">The log category</param>
            <param name="message">Any extra message you care to add.</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.LogException(System.Exception,System.String)">
            <summary>
            Logs an Exception and it's inner most Exception.
            Places the stack trace in details.
            </summary>
            <param name="ex">Exception</param>
            <param name="message">Any extra message you care to add.</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.LogException(System.Exception,System.Enum)">
            <summary>
            Logs an Exception and it's inner most Exception.
            Places the stack trace in details.
            </summary>
            <param name="ex">Exception</param>
            <param name="category">The log category</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.LogException(System.Exception)">
            <summary>
            Logs an Exception and it's inner most Exception.
            Places the stack trace in details.
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.Log(IDS.Logging.LogEntry)">
            <summary>
            Logs the given log entry to the <see cref="P:IDS.Logging.LogSystem.ActiveLogger"/>.
            </summary>
            <param name="entry">LogEntry to be logged.</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.Log(System.Enum,System.Object)">
            <summary>
            Logs the given parameters to the <see cref="P:IDS.Logging.LogSystem.ActiveLogger"/>.
            </summary>
            <param name="category">The log category</param>
            <param name="message">Any extra message you care to add.</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.Log(System.Enum,System.Object,System.Object)">
            <summary>
            Logs the given parameters to the <see cref="P:IDS.Logging.LogSystem.ActiveLogger"/>.
            </summary>
            <param name="category">The log category</param>
            <param name="message">Any extra message you care to add.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.Log(System.Enum,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Logs the given parameters to the <see cref="P:IDS.Logging.LogSystem.ActiveLogger"/>.
            </summary>
            <param name="category">The log category</param>
            <param name="severity">The log severity.</param>
            <param name="message">Message to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.Log(System.String,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Logs the specified category.
            </summary>
            <param name="category">The category.</param>
            <param name="severity">The severity.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.Log(System.Enum,IDS.Logging.LogSeverity,System.Object,System.Object)">
            <summary>
            Logs the given parameters to the <see cref="P:IDS.Logging.LogSystem.ActiveLogger"/>.
            </summary>
            <param name="category">The log category</param>
            <param name="severity">The log severity.</param>
            <param name="message">Message to accompany the log entry.</param>
            <param name="details">Details to accompany the log entry.</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.EnvironmentInitialized">
            <summary>
            This method is called after the environment has been fully initialized. This call is necessary if 
            the log system has any delay loaded loggers.
            </summary>
            <see cref="T:IDS.Logging.DelayLoadLogger"/>
        </member>
        <member name="M:IDS.Logging.LogSystem.SignalShutdown">
            <summary>
            Signals the shutdown.
            </summary>
        </member>
        <member name="M:IDS.Logging.LogSystem.Configure(System.Xml.XmlNode)">
            <summary>
            Configures the active logger based on the given configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.ConfigureFilters(System.Xml.XmlNode)">
            <summary>
            Configures the active logger's filtering criteria based on the configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
        </member>
        <member name="M:IDS.Logging.LogSystem.CanLog(IDS.Logging.LogEntry)">
            <summary>
            Determines if the active logger can log the given log entry.
            </summary>
            <param name="entry">LogEntry to analyse for criteria.</param>
            <returns>true if the active logger can log the given entry.</returns>
        </member>
        <member name="P:IDS.Logging.LogSystem.Filter">
            <summary>
            Gets or sets the active logger's log filter.
            </summary>
            <value>A LogFilter object.</value>
        </member>
        <member name="P:IDS.Logging.LogSystem.Enabled">
            <summary>
            Gets or sets whether the active logger is enabled. When disabled, no log entries will be logged.
            </summary>
            <value>true if the module is enabled; otherwise, false.</value>
        </member>
        <member name="T:IDS.Logging.LogSystemException">
            <summary>
            An exception that occurs when an invalid condition exists in a logger or the log system itself.
            </summary>
        </member>
        <member name="M:IDS.Logging.LogSystemException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.LogSystemException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Logging.LogSystemException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the LogSystemException class with a 
            specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error. </param>
            <param name="innerException">The exception that is the cause of the 
            current exception. If the innerException parameter is not a null reference 
            that handles the inner exception. </param>
        </member>
        <member name="M:IDS.Logging.LogSystemException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the LogSystemException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:IDS.Logging.LogSystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the LogSystemException class.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:IDS.Logging.RemoteEventHandler">
            <summary>
            The RemoteEventHandler class is used for raise events in a remote logger.
            </summary>
        </member>
        <member name="E:IDS.Logging.RemoteEventHandler.MessageArrived">
            <summary>
            The MessageArrived event is raised when a message has arrived.
            </summary>
        </member>
        <member name="E:IDS.Logging.RemoteEventHandler.GroupMessageArrived">
            <summary>
            The GroupMessageArrived event is raised when a group message has arrived.
            </summary>
        </member>
        <member name="M:IDS.Logging.RemoteEventHandler.#ctor(IDS.Logging.RemoteLogging)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.RemoteEventHandler"/> class.
            </summary>
            <param name="remoteLog">The remote log.</param>
        </member>
        <member name="P:IDS.Logging.RemoteEventHandler.Handler">
            <summary>
            Gets or sets the handler.
            </summary>
            <value>The handler.</value>
        </member>
        <member name="P:IDS.Logging.RemoteEventHandler.GroupHandler">
            <summary>
            Gets or sets the group handler.
            </summary>
            <value>The group handler.</value>
        </member>
        <member name="M:IDS.Logging.RemoteEventHandler.eventObject_MessageArrived(IDS.Logging.LogEntry)">
            <summary>
            Raises the MessageArrived Event.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:IDS.Logging.RemoteEventHandler.eventObject_GroupMessageArrived(IDS.Logging.LogEntryCollection)">
            <summary>
            Raises the GroupMessageArrived event
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:IDS.Logging.RemoteEventHandler.UnRegister">
            <summary>
            Unregister this event handler.
            </summary>
        </member>
        <member name="T:IDS.Logging.RemoteLogger">
            <summary>
            Remote logger inherits from base logger
            </summary>
            <code>
            <logger class="IDS.Logging.RemoteLogger, IDS.System">
            	<logFormatString><![CDATA[=> "{3:g}: {6}" ({7}) [{4}/{5}] ]]></logFormatString>
            	<parameters>
            		<batchMode>true</batchMode>
            		<batchInterval>5000</batchInterval>
            		<configFileName>C:\config\client.config</configFileName>
            		<encryptedFileName>C:\logs\log.enc</encryptedFileName>
            		<publicKeyFileName>C:\config\publickey.xml</publicKeyFileName>
            	</parameters>
            </logger>
            </code>
        </member>
        <member name="F:IDS.Logging.RemoteLogger.configurationFileName">
            <summary>
            The RSA algorithm will not allow blocks much larger than this
            </summary>
        </member>
        <member name="M:IDS.Logging.RemoteLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.RemoteLogger"/> class.
            </summary>
        </member>
        <member name="M:IDS.Logging.RemoteLogger.RegisterForRemoteLoggingEvents(System.String,IDS.Logging.RemoteLogging@)">
            <summary>
            Registers for remote logging events.
            </summary>
            <param name="clientConfigFileName">Name of the client config file.</param>
            <param name="remoteLogging">The remote logging.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Logging.RemoteLogger.UnRegisterRemoteLoggingEvents(IDS.Logging.RemoteEventHandler)">
            <summary>
            Unregisters remote logging events.
            </summary>
            <param name="eventHandler">The event handler.</param>
        </member>
        <member name="M:IDS.Logging.RemoteLogger.Create(System.Xml.XmlNode)">
            <summary>
            Creates a new RemoteLogger and sets up the specified configuration properties
            </summary>
            <param name="configuration">Configuration from the app.config file</param>
            <returns>new RemoteLogger</returns>
        </member>
        <member name="M:IDS.Logging.RemoteLogger.ConfigureParameters(System.Xml.XmlNode)">
            <summary>
            Sets up the parameters for this logger
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:IDS.Logging.RemoteLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            Logs the entry passed in.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:IDS.Logging.RemoteLogger.DoBatchLog(IDS.Logging.LogEntryCollection)">
            <summary>
            Sends all the log entries in the given arrayList to the remote server
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:IDS.Logging.RemoteLogger.FailedLog(IDS.Logging.LogEntry)">
            <summary>
            This method is called if a remoting log call fails.  This then writes the logEntry to an encrypted file
            </summary>
            <param name="logEntry"></param>
        </member>
        <member name="M:IDS.Logging.RemoteLogger.FailedLogs(IDS.Logging.LogEntryCollection)">
            <summary>
            This method is called if a remoting log call fails.  This writes all the log entries in the the arraylist to an encrypted file.
            </summary>
            <param name="logs"></param>
        </member>
        <member name="M:IDS.Logging.RemoteLogger.AddToEncryptedFile(System.String)">
            <summary>
            Encrypts the given text and puts it in the file specified in the config file under encryptedFileName
            </summary>
            <param name="fileText"></param>
        </member>
        <member name="T:IDS.Logging.MessageArrivedHandler">
            <summary>
            The MessageArrivedHandler is a delegate that is used to handle the arrival of messages to the remote logger.
            </summary>
            <param name="entry">The LogEntry that arrived.</param>
        </member>
        <member name="T:IDS.Logging.GroupMessageArrivedHandler">
            <summary>
            The GroupMessageArrivedHandler is a delegate that is used to handle the arrival of a group of LogEntries to the remote logger.
            </summary>
            <param name="list">The LogEntryCollection of the group of LogEntries that arrived.</param>
        </member>
        <member name="T:IDS.Logging.RemoteLogging">
            <summary>
            This class is used as a Remoting object to send log entries to a remote server
            </summary>
        </member>
        <member name="E:IDS.Logging.RemoteLogging.MessageArrived">
            <summary>
            Event that others subscribe to, it is fired when a log message arrives at the server.
            </summary>
        </member>
        <member name="E:IDS.Logging.RemoteLogging.GroupArrived">
            <summary>
            Event that others subscribe to that is fired when a group of log messages arrives at the server.
            </summary>
        </member>
        <member name="M:IDS.Logging.RemoteLogging.#ctor">
            <summary>
            Initializes a RemoteLogging object
            </summary>
        </member>
        <member name="M:IDS.Logging.RemoteLogging.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"></see> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"></see> property.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/></PermissionSet>
        </member>
        <member name="M:IDS.Logging.RemoteLogging.SetLogEntry(IDS.Logging.LogEntry)">
            <summary>
            Calls LogSystem.Log with the given LogEntry
            This function is called by a remote server using Remoting
            </summary>
            <param name="logEntry">Entry to log</param>
        </member>
        <member name="M:IDS.Logging.RemoteLogging.SetLogEntries(IDS.Logging.LogEntryCollection)">
            <summary>
            Calls LogSystem.Log for all the LogEntries in the logs ArrayList
            This function is called by a remote server using Remoting
            </summary>
            <param name="logs">List of LogEntries</param>
        </member>
        <member name="M:IDS.Logging.RemoteLogging.FireMessageArrivedEvent(IDS.Logging.LogEntry)">
            <summary>
            This method is used to send the MessageArrived event 
            so that if a client has is not responding it can be removed from the list
            </summary>
            <param name="entry">LogEntry to send</param>
        </member>
        <member name="M:IDS.Logging.RemoteLogging.Ping">
            <summary>
            this method is used by the remote application to keep the connection alive or check if the connection is no longer active
            </summary>
        </member>
        <member name="T:IDS.Logging.SeverityFilter">
            <summary>
            The SeverityFilter class is used to filter logging entries based on the severity.
            </summary>
        </member>
        <member name="M:IDS.Logging.SeverityFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.SeverityFilter"/> class.
            </summary>
        </member>
        <member name="M:IDS.Logging.SeverityFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.SeverityFilter"/> class.
            </summary>
            <param name="severity">The severity.</param>
        </member>
        <member name="M:IDS.Logging.SeverityFilter.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.SeverityFilter"/> class.
            </summary>
            <param name="severity">The severity.</param>
            <param name="ignore">if set to <c>true</c> [ignore].</param>
        </member>
        <member name="M:IDS.Logging.SeverityFilter.DoTest(IDS.Logging.LogEntry)">
            <summary>
            Tests the specified <see cref="T:IDS.Logging.LogEntry"/> for a match with this filter.
            </summary>
            <param name="entry">The entry.</param>
            <returns>
            true if the entry matches this filter, false otherwise.
            </returns>
        </member>
        <member name="T:IDS.Logging.SQLAuditLogger">
             <summary>
             Writes log entries to a set of tables on the database.
             </summary>
             <example>
             web.config configuration example:
             <code>
             <![CDATA[
            	<logging enabled="true"> <!--globally turn on/off logging-->
            
            		<context>
            			<location>My Credit Union</location>
            			<server>MAServer</server> <!--determined dynamically if left out-->
            		</context>
            		
            		<loggers asynchronous="false"> <!--globally turn on/off asynchonous logging-->
            
            			<!--global filters-->
            			<filters>
            				<!--filter by the log category enumeration.... -->
            				<categoryClass name="IDS.Logging.StandardCategory, IDS.System">
            					<!--filter by a specific value of that enumeration-->
            					<category name="Audit">
            						<!--and filter by specific serverities of that enumeration value -->
            						<severity>Information</severity>
            					</category>
            				</categoryClass>
            			</filters>
            			
            			<logger enabled="true" class="IDS.Logging.SQLAuditLogger, IDS.System">
            				<parameters>
            					<connectionString>server=(local);database=Audit;Connect Timeout=60;Integrated Security=SSPI;Persist Security Info=False</connectionString>
            					<connectionStringName>AuditDatabase</connectionStringName>
            				</parameters>
            			</logger>
            		</loggers>
            	</logging>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:IDS.Logging.SQLAuditLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.SQLAuditLogger"/> class.
            </summary>
        </member>
        <member name="M:IDS.Logging.SQLAuditLogger.#ctor(IDS.Data.SqlConnectionService)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.SQLAuditLogger"/> class.
            </summary>
            <param name="connectionService">The connection service.</param>
        </member>
        <member name="M:IDS.Logging.SQLAuditLogger.Create(System.Xml.XmlNode)">
            <summary>Creates a new SQLAuditLogger, configuring it based on the given configuration node.</summary>
             <param name="configuration">Configuration node.</param>
             <returns>A new configured SQLAuditLogger.</returns>
        </member>
        <member name="M:IDS.Logging.SQLAuditLogger.ConfigureParameters(System.Xml.XmlNode)">
            <summary>
            Configures the SQL audit logger based on the given custom configuration node.  The connection
            string is required, while the Sql exception log file path is optional.
            </summary>
            <param name="configuration">Configuration node.</param>
            <remarks>
            Supported schema:
            <code>
            <root>
            	<connectionString>...</connectionString>
            	<sqlErrorFilePath>...</sqlErrorFilePath>
            </root>
            </code>
            </remarks>
        </member>
        <member name="M:IDS.Logging.SQLAuditLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            Writes the given log entry to the assigned area.
            </summary>
            <param name="entry">AuditLogEntry to be written to the database.</param>
        </member>
        <member name="P:IDS.Logging.SQLAuditLogger.ConnectionString">
            <summary>
            Gets or sets the connection string to which log entries are written.
            </summary>
        </member>
        <member name="P:IDS.Logging.SQLAuditLogger.ConnectionService">
            <summary>
            Gets or sets the connection string to which log entries are written.
            </summary>
        </member>
        <member name="P:IDS.Logging.SQLAuditLogger.SqlErrorLogFilePath">
            <summary>
            Gets or sets the file path of where to log sql errors.
            </summary>
            <value>File Path.</value>
        </member>
        <member name="P:IDS.Logging.SQLAuditLogger.FileSystemAuditLogger">
            <summary>Audit logger for logging errors</summary>
        </member>
        <member name="T:IDS.Logging.SQLAuditLogProvider">
            <summary>
            Retrieves Audit Log Entry details.
            </summary>
        </member>
        <member name="M:IDS.Logging.SQLAuditLogProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.SQLAuditLogProvider"/> class.
            </summary>
        </member>
        <member name="M:IDS.Logging.SQLAuditLogProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.SQLAuditLogProvider"/> class.
            </summary>
        </member>
        <member name="M:IDS.Logging.SQLAuditLogProvider.#ctor(IDS.Data.SqlConnectionService)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.SQLAuditLogProvider"/> class.
            </summary>
        </member>
        <member name="P:IDS.Logging.SQLAuditLogProvider.ConnectionString">
            <summary>
            Gets or sets the connection string to which audit log entries are stored.
            </summary>
        </member>
        <member name="P:IDS.Logging.SQLAuditLogProvider.AuditSQLConnectionService">
            <summary>
            Gets or sets the Audit Connection Service.
            </summary>
        </member>
        <member name="M:IDS.Logging.SQLAuditLogProvider.GetAuditLogEntries(IDS.Security.IUser,System.Int32,System.Int32,System.String,IDS.Logging.AuditLogEntryFilterCollection)">
            <summary>
            This method returns a collection of the <see cref="T:IDS.Logging.AuditLogEntry">AuditLogEntry</see> 
            </summary>
            <param name="CurrUser">The Current Profile User</param>
            <param name="MaxRecords">The max number of <see cref="T:IDS.Logging.AuditLogEntry">AuditLogEntry</see> results to return </param>
            <param name="MaxNumberOfDays">The max number of days back to filter results on.</param>
            <param name="dataSpace">The dataspace name to filter the results on.</param>
            <param name="sFilters">The filters that filter based on the <see cref="T:IDS.Logging.AuditLogEntryFilterTypes">AuditLogEntryFilterTypes</see></param>
            <returns>A collection of the <see cref="T:IDS.Logging.AuditLogEntry">AuditLogEntry</see></returns>
        </member>
        <member name="M:IDS.Logging.SQLAuditLogProvider.GetAuditLogEntries(IDS.Security.IUser,System.Int32,System.Int32,System.String,IDS.Logging.AuditLogEntryFilterCollection,IDS.Logging.AuditLogEntrySQLColumnCollection,System.String)">
            <summary>
            This method returns a collection of the <see cref="T:IDS.Logging.ExtendedAuditLogEntry">ExtendedAuditLogEntry</see> 
            </summary>
            <param name="currentUser">The Current Profile User</param>
            <param name="maxRecords">The max number of <see cref="T:IDS.Logging.ExtendedAuditLogEntry">ExtendedAuditLogEntry</see> results to return </param>
            <param name="maxNumberOfDays">The max number of days back to filter results on.</param>
            <param name="dataSpace">The dataspace name to filter the results on.</param>
            <param name="sFilters">The filters that filter based on the <see cref="T:IDS.Logging.AuditLogEntryFilterTypes">AuditLogEntryFilterTypes</see></param>
            <param name="columns">The extended columns and tables related to the main audit log entry</param>
            <param name="columnDelimiter">The delimitor to split the extended columns and tables that are related to the main audit log entry</param>
            <returns>A collection of the <see cref="T:IDS.Logging.ExtendedAuditLogEntry">ExtendedAuditLogEntry</see></returns>
        </member>
        <member name="T:IDS.Logging.SQLLogger">
            <summary>
            Log the entries into a sql server database
            <logger enabled="true" class="IDS.Logging.SQLLogger, IDS.System">
            	<parameters>
            		<batchMode>true</batchMode>
            		<batchInterval>10000</batchInterval>
            		<connectionString>Data Source=localhost;Initial Catalog=Logging;Integrated Security=SSPI</connectionString>
            		<connectionStringName>LoggingDatabase</connectionStringName>
            		<optimizeSql>True</optimizeSql>
            	</parameters>
            </logger>
            </summary>
        </member>
        <member name="M:IDS.Logging.SQLLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.SQLLogger"/> class.
            </summary>
        </member>
        <member name="M:IDS.Logging.SQLLogger.#ctor(IDS.Data.SqlConnectionService)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.SQLLogger"/> class.
            </summary>
            <param name="connectionService">The connection service.</param>
        </member>
        <member name="M:IDS.Logging.SQLLogger.ConfigureParameters(System.Xml.XmlNode)">
            <summary>
            Loads the configuration parameters for this logger
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:IDS.Logging.SQLLogger.OptimizeSql">
            <summary>
            Gets or sets a value indicating whether to optimize SQL by batching SQL commands together.
            </summary>
            <value><c>true</c> if SQL should be optimized by batching SQL commands together; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:IDS.Logging.SQLLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            Logs the entries
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:IDS.Logging.SQLLogger.DoBatchLog(IDS.Logging.LogEntryCollection)">
            <summary>
            If you are running a logger in batch mode you must override this method
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:IDS.Logging.SQLLogger.CreateParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            Creates a System.Data.SqlClient.SqlParameter object.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">The type of the parameter.</param>
            <param name="size">
            The size of the parameter if the parameter is a Varchar or a Char.
            </param>
            <param name="value">The parameter's value.</param>
            <returns>The new System.Data.SqlClient.SqlParameter object.</returns>
        </member>
        <member name="T:IDS.Logging.StandardCategory">
            <summary>
            A standard category class for log entries. It is recommended that every application defined its own category class and
            categories by defining its own category enumeration. This enumeration serves as an example and as a default category
            class to utilize if desired.
            </summary>
        </member>
        <member name="F:IDS.Logging.StandardCategory.Unspecified">
            <summary>
            Category was not specified. This is the default category for new log entries.
            </summary>
        </member>
        <member name="F:IDS.Logging.StandardCategory.Debug">
            <summary>
            Log entry contains debug information useful for debugging / development.
            </summary>
        </member>
        <member name="F:IDS.Logging.StandardCategory.LifeCycle">
            <summary>
            Log entry contains information reguarding the lifecycle of the application.
            </summary>
        </member>
        <member name="F:IDS.Logging.StandardCategory.UserInput">
            <summary>
            Log entry contains information reguarding user input it has gathered.
            </summary>
        </member>
        <member name="F:IDS.Logging.StandardCategory.Configuration">
            <summary>
            Log entry contains information reguarding configuration parameters it utilizes.
            </summary>
        </member>
        <member name="F:IDS.Logging.StandardCategory.Communication">
            <summary>
            Log entry contains information reguarding communication with external programs or systems.
            </summary>
        </member>
        <member name="F:IDS.Logging.StandardCategory.Operation">
            <summary>
            Log entry contains information reguarding internal operations the application performs.
            </summary>
        </member>
        <member name="F:IDS.Logging.StandardCategory.Audit">
            <summary>
            Log entry contains information reguarding Audit Log Entries.
            </summary>
        </member>
        <member name="T:IDS.Logging.TerminatingLogger">
             <summary>
             The TerminatingLogger causes a LogSystemException to be thrown in place of log messages. 
             This is only intended for debugging purposes.
             </summary>
             <example>
             web.config configuration example:
             <code>
             <![CDATA[
            	<logging enabled="true"> <!--globally turn on/off logging-->
            
            		<context>
            			<location>My Credit Union</location>
            			<server>MAServer</server> <!--determined dynamically if left out-->
            		</context>
            		
            		<loggers asynchronous="false"> <!--globally turn on/off asynchonous logging-->
            
            			<!--global filters-->
            			<filters>
            				<!--filter by the log category enumeration.... -->
            				<categoryClass name="IDS.Logging.StandardCategory, IDS.System">
            					<!--filter by a specific value of that enumeration-->
            					<category name="Configuration">
            						<!--and filter by specific serverities of that enumeration value -->
            						<severity>Warning</severity>
            						<severity>Exception</severity>
            						<severity>Critical</severity>
            					</category>
            					<category name="LifeCycle"/>
            				</categoryClass>
            				<categoryClass name="IDS.eStatements.Web.Log.EmailLog, IDS.eStatements.Web.Loader"/>
            			</filters>
            			
            			<logger enabled="true" class="IDS.Logging.TerminatingLogger, IDS.System">
            				<logFormatString>{6} ({7}) [{4}/{5}]</logFormatString>
            			</logger>
            		</loggers>
            	</logging>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:IDS.Logging.TerminatingLogger.Create(System.Xml.XmlNode)">
            <summary>
            Creates a new TerminatingLogger, configuring it based on the given configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
            <returns>A new configured TerminatingLogger.</returns>
        </member>
        <member name="M:IDS.Logging.TerminatingLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            Throws a <see cref="T:IDS.Logging.LogSystemException"/> with the log message as the exception message.
            </summary>
            <param name="entry">LogEntry associated with the message.</param>
        </member>
        <member name="T:IDS.Logging.TraceLogger">
             <summary>
             Writes log entries to the trace.
             </summary>
             <example>
             web.config configuration example:
             <code>
             <![CDATA[
            	<logging enabled="true"> <!--globally turn on/off logging-->
            
            		<context>
            			<location>My Credit Union</location>
            			<server>MAServer</server> <!--determined dynamically if left out-->
            		</context>
            		
            		<loggers asynchronous="false"> <!--globally turn on/off asynchonous logging-->
            
            			<!--global filters-->
            			<filters>
            				<!--filter by the log category enumeration.... -->
            				<categoryClass name="IDS.Logging.StandardCategory, IDS.System">
            					<!--filter by a specific value of that enumeration-->
            					<category name="Configuration">
            						<!--and filter by specific serverities of that enumeration value -->
            						<severity>Warning</severity>
            						<severity>Exception</severity>
            						<severity>Critical</severity>
            					</category>
            					<category name="LifeCycle"/>
            				</categoryClass>
            				<categoryClass name="IDS.eStatements.Web.Log.EmailLog, IDS.eStatements.Web.Loader"/>
            			</filters>
            			
            			<logger enabled="true" class="IDS.Logging.TraceLogger, IDS.System">
            				<logFormatString>{6} ({7}) [{4}/{5}]</logFormatString>
            			</logger>
            		</loggers>
            	</logging>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:IDS.Logging.TraceLogger.Create(System.Xml.XmlNode)">
            <summary>
            Creates a new TraceLogger, configuring it based on the given configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
            <returns>A new configured TraceLogger.</returns>
        </member>
        <member name="M:IDS.Logging.TraceLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            Writes the given log entry to the trace.
            </summary>
            <param name="entry">LogEntry to be written.</param>
        </member>
        <member name="T:IDS.Logging.TypeContextLogger">
            <summary>
            The TypeContextLogger is a logger that adds type context such as class name, method name and line number to the logging information.
            </summary>
        </member>
        <member name="M:IDS.Logging.TypeContextLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.TypeContextLogger"/> class.
            </summary>
            <param name="type">The type on which the call stack boundary is drawn.</param>
        </member>
        <member name="M:IDS.Logging.TypeContextLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            Logs the given <see cref="T:IDS.Logging.LogEntry"/>. This method comes after the LogEntry has passed filter tests.
            </summary>
            <param name="entry">LogEntry to be logged.</param>
        </member>
        <member name="M:IDS.Logging.TypeContextLogger.Log(IDS.Logging.LogEntry)">
            <summary>
            Logs the given <see cref="T:IDS.Logging.LogEntry"/> synchronously or asynchronously.
            </summary>
            <param name="entry">LogEntry to be logged.</param>
        </member>
        <member name="T:IDS.Logging.TypeFilter">
            <summary>
            A filter that evaluates the <see cref="T:IDS.Logging.LocationInfo"/> associated with a <see cref="T:IDS.Logging.LogEntry"/>.
            </summary>
        </member>
        <member name="P:IDS.Logging.TypeFilter.ClassName">
            <summary>
            Gets or sets the name of the calling class to filter on.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:IDS.Logging.TypeFilter.MethodName">
            <summary>
            Gets or sets the name of the calling method to filter on.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:IDS.Logging.TypeFilter.FileName">
            <summary>
            Gets or sets the name of the calling code's file to filter on.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="M:IDS.Logging.TypeFilter.DoTest(IDS.Logging.LogEntry)">
            <summary>
            Tests the specified <see cref="T:IDS.Logging.LogEntry"/> for a match with this filter.
            </summary>
            <param name="entry">The entry.</param>
            <returns>
            true if the entry matches this filter, false otherwise.
            </returns>
        </member>
        <member name="M:IDS.Logging.TypeFilter.DoConfigure(System.Xml.XmlNode)">
            <summary>
            Performs the configuration of this filter based on the specified configuration node.
            </summary>
            <param name="filterNode">The filter node.</param>
        </member>
        <member name="T:IDS.Logging.UdpLogger">
             <summary>
             Sends logging events as connectionless UDP datagrams to a remote host or a 
             multicast group using an <see cref="T:System.Net.Sockets.UdpClient" />.
             </summary>
             <remarks>
             <para>
             UDP guarantees neither that messages arrive, nor that they arrive in the correct order.
             </para>
             <para>
             To view the logging results, a custom application can be developed that listens for logging 
             events.
             </para>
             <para>
             When decoding events send via this logger remember to use the same encoding
             to decode the events as was used to send the events. See the <see cref="P:IDS.Logging.UdpLogger.Encoding"/>
             property to specify the encoding to use.
             </para>
             </remarks>
             <example>
             This example shows how to log receive logging events that are sent 
             on IP address 244.0.0.1 and port 8080 to the console. The event is 
             encoded in the packet as a unicode string and it is decoded as such. 
             <code lang="C#">
             IPEndPoint remoteEndPoint = new IPEndPoint(IPAddress.Any, 0);
             UdpClient udpClient;
             byte[] buffer;
             string loggingEvent;
             
             try {
                 udpClient = new UdpClient(8080);
                 
                 while(true) 
                 {
                     buffer = udpClient.Receive(ref remoteEndPoint);
                     loggingEvent = System.Text.Encoding.Unicode.GetString(buffer);
                     Console.WriteLine(loggingEvent);
                 }
             } 
             catch(Exception e) 
             {
                 Console.WriteLine(e.ToString());
             }
             </code>
             <code lang="Visual Basic">
             Dim remoteEndPoint as IPEndPoint
             Dim udpClient as UdpClient
             Dim buffer as Byte()
             Dim loggingEvent as String
             
             Try 
                 remoteEndPoint = new IPEndPoint(IPAddress.Any, 0)
                 udpClient = new UdpClient(8080)
            
                 While True
                     buffer = udpClient.Receive(ByRef remoteEndPoint)
                     loggingEvent = System.Text.Encoding.Unicode.GetString(buffer)
                     Console.WriteLine(loggingEvent)
                 Wend
             Catch e As Exception
                 Console.WriteLine(e.ToString())
             End Try
             </code>
             <para>
             An example configuration section to log information using this logger to the 
             IP 224.0.0.1 on port 8080 using encryption and UTF-16 encoding:
             </para>
             <code>
            	<root>
            		<remoteAddress>224.0.0.1</remoteAddress>
            		<remotePort>8080</remotePort>
            		<localPort>8181</localPort>
            		<encoding>UTF8</encoding>
            		<encryption cryptoProviderType="System.Security.Cryptography.TripleDESCryptoServiceProvider, mscorlib, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" 
            			iv="pklqQYr+niY=" key="oL1shHJJpDe2a4t9tNUB6Gq2/aO6BWXZ"/>
            	</root>
             </code>
             </example>
        </member>
        <member name="M:IDS.Logging.UdpLogger.Create(System.Xml.XmlNode)">
            <summary>
            Creates a new UdpLogger, configuring it based on the given configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
            <returns>A new configured UdpLogger.</returns>
        </member>
        <member name="M:IDS.Logging.UdpLogger.ConfigureParameters(System.Xml.XmlNode)">
            <summary>
            Configures the UdpLogger based on the given custom configuration node.  The remoteAddress and
            remotePort fields are required. The localPort and encryption nodes are optional. 
            </summary>
            <param name="configuration">Configuration node.</param>
            <remarks>
            If the encryption node is provided, the data stream sent to the client will be encrypted using 
            the crypto Provider and these values.
            NOTE:	The IV and KEY should be unique to each eStatements installation
            		The IV is an 8 byte base64 encoded string (size might be different for a different crypto provider)
            The KEY is a 24 byte base64 encoded string (size might be different for a different crypto provider)
            The following code can be used to get the cryptoProviderType and a random IV and KEY:
            	System.Security.Cryptography.TripleDES cryptoProvider = new System.Security.Cryptography.TripleDESCryptoServiceProvider();
            	Console.WriteLine(cryptoProvider.GetType().AssemblyQualifiedName);
            	cryptoProvider.GenerateIV();
            	cryptoProvider.GenerateKey();
            	Console.WriteLine(Convert.ToBase64String(cryptoProvider.IV));
            	Console.WriteLine(Convert.ToBase64String(cryptoProvider.Key));
            	
            Sample configuration XML:
            <code>
            <root>
            	<remoteAddress>224.0.0.1</remoteAddress>
            	<remotePort>8080</remotePort>
            	<localPort>8181</localPort>
            	<encoding>UTF8</encoding>
            	<encryption cryptoProviderType="System.Security.Cryptography.TripleDESCryptoServiceProvider, mscorlib, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" 
            		iv="pklqQYr+niY=" key="oL1shHJJpDe2a4t9tNUB6Gq2/aO6BWXZ"/>
            </root>
            </code>
            The encoding
            </remarks>
        </member>
        <member name="P:IDS.Logging.UdpLogger.RemoteAddress">
            <summary>
            Gets or sets the IP address of the remote host or multicast group to which
            the underlying <see cref="T:System.Net.Sockets.UdpClient" /> should send the logging event.
            </summary>
            <value>
            The IP address of the remote host or multicast group to which the logging event 
            will be sent.
            </value>
            <remarks>
            <para>
            Multicast addresses are identified by IP class <b>D</b> addresses (in the range 224.0.0.0 to
            239.255.255.255).  Multicast packets can pass across different networks through routers, so
            it is possible to use multicasts in an Internet scenario as long as your network provider 
            supports multicasting.
            </para>
            <para>
            Hosts that want to receive particular multicast messages must register their interest by joining
            the multicast group.  Multicast messages are not sent to networks where no host has joined
            the multicast group.  Class <b>D</b> IP addresses are used for multicast groups, to differentiate
            them from normal host addresses, allowing nodes to easily detect if a message is of interest.
            </para>
            <para>
            Static multicast addresses that are needed globally are assigned by IANA.  A few examples are listed in the table below :
            </para>
            <para>
            <list type="table">
                <listheader>
                    <term>IP Address</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>224.0.0.1</term>
                    <description>
                        <para>
                        Sends a message to all system on the subnet.
                        </para>
                    </description>
                </item>
                <item>
                    <term>224.0.0.2</term>
                    <description>
                        <para>
                        Sends a message to all routers on the subnet.
                        </para>
                    </description>
                </item>
                <item>
                    <term>224.0.0.12</term>
                    <description>
                        <para>
                        The DHCP server answers messages on the IP address 224.0.0.12, but only on a subnet.
                        </para>
                    </description>
                </item>
            </list>
            </para>
            <para>
            A complete list of actually reserved multicast addresses and their owners in the ranges
            defined by RFC 3171 can be found at the <A href="http://www.iana.org/assignments/multicast-addresses">IANA web site</A>. 
            </para>
            <para>
            The address range 239.0.0.0 to 239.255.255.255 is reserved for administrative scope-relative 
            addresses.  These addresses can be reused with other local groups.  Routers are typically 
            configured with filters to prevent multicast traffic in this range from flowing outside
            of the local network.
            </para>
            </remarks>
        </member>
        <member name="P:IDS.Logging.UdpLogger.RemotePort">
            <summary>
            Gets or sets the TCP port number of the remote host or multicast group to which 
            the underlying <see cref="T:System.Net.Sockets.UdpClient" /> should sent the logging event.
            </summary>
            <value>
            An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> 
            indicating the TCP port number of the remote host or multicast group to which the logging event 
            will be sent.
            </value>
            <remarks>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" /> will send messages to this TCP port number
            on the remote host or multicast group.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        </member>
        <member name="P:IDS.Logging.UdpLogger.LocalPort">
            <summary>
            Gets or sets the TCP port number from which the underlying <see cref="T:System.Net.Sockets.UdpClient" /> will communicate.
            </summary>
            <value>
            An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> 
            indicating the TCP port number from which the underlying <see cref="T:System.Net.Sockets.UdpClient" /> will communicate.
            </value>
            <remarks>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" /> will bind to this port for sending messages.
            </remarks>
            <remarks>
            Setting the value to 0 (the default) will cause the udp client not to bind to
            a local port.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        </member>
        <member name="P:IDS.Logging.UdpLogger.Encoding">
            <summary>
            Gets or sets <see cref="P:IDS.Logging.UdpLogger.Encoding"/> used to write the packets.
            </summary>
            <value>
            The <see cref="P:IDS.Logging.UdpLogger.Encoding"/> used to write the packets.
            </value>
        </member>
        <member name="P:IDS.Logging.UdpLogger.CryptoProvider">
            <summary>
            The data stream can be encrypted by providing a SymmetricAlgorithm CryptoProvider.
            If this value is not null, the data stream will be encrypted using this provider.
            </summary>
        </member>
        <member name="M:IDS.Logging.UdpLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            Logs the given <see cref="T:IDS.Logging.LogEntry"/>. This method comes after the LogEntry has passed filter tests.
            </summary>
            <param name="entry">LogEntry to be logged.</param>
        </member>
        <member name="P:IDS.Logging.UdpLogger.Client">
            <summary>
            Gets or sets the underlying <see cref="T:System.Net.Sockets.UdpClient" />.
            </summary>
            <value>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" />.
            </value>
            <remarks>
            <see cref="T:IDS.Logging.UdpLogger" /> creates a <see cref="T:System.Net.Sockets.UdpClient" /> to send logging events 
            over a network.  Classes deriving from <see cref="T:IDS.Logging.UdpLogger" /> can use this
            property to get or set this <see cref="T:System.Net.Sockets.UdpClient" />.  Use the underlying <see cref="T:System.Net.Sockets.UdpClient" />
            returned from <see cref="P:IDS.Logging.UdpLogger.Client" /> if you require access beyond that which 
            <see cref="T:IDS.Logging.UdpLogger" /> provides.
            </remarks>
        </member>
        <member name="P:IDS.Logging.UdpLogger.RemoteEndPoint">
            <summary>
            Gets or sets the cached remote endpoint to which the logging events should be sent.
            </summary>
            <value>
            The cached remote endpoint to which the logging events will be sent.
            </value>
            <remarks>
            The ActivateOptions method will initialize the remote endpoint 
            with the values of the <see cref="P:IDS.Logging.UdpLogger.RemoteAddress" /> and <see cref="P:IDS.Logging.UdpLogger.RemotePort"/>
            properties.
            </remarks>
        </member>
        <member name="T:IDS.Logging.UserProfileAuditLogEntry">
            <summary>
            The UserProfileAuditLogEntry class is an implementation of an AuditLogEntry for creating auditing entries
            for User Profile change activities.
            </summary>
        </member>
        <member name="F:IDS.Logging.UserProfileAuditLogEntry.USER_PROFILE_CHANGE">
            <summary>
            This is the actionTaken string.
            </summary>
        </member>
        <member name="M:IDS.Logging.UserProfileAuditLogEntry.#ctor">
            <summary>
            Initializes a new user profile audit log entry.
            </summary>
        </member>
        <member name="M:IDS.Logging.UserProfileAuditLogEntry.#ctor(System.Boolean,System.String,IDS.Security.IUser,System.String,System.String,System.String,IDS.Security.IUser,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Logging.UserProfileAuditLogEntry"/> class.
            </summary>
            <param name="result">if set to <c>true</c> if the audited action was successful.</param>
            <param name="details">The details.</param>
            <param name="user">The user who initiated this action.</param>
            <param name="fieldName">The field name that is changing.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <param name="changedProfileUser">The profile user being changed.</param>
            <param name="explanation">The explanation for the change.</param>
        </member>
        <member name="P:IDS.Logging.UserProfileAuditLogEntry.FieldName">
            <summary>
            Gets or sets the field name that is being changed.
            </summary>
            <value>The database field name.</value>
        </member>
        <member name="P:IDS.Logging.UserProfileAuditLogEntry.OldValue">
            <summary>
            Gets or sets the old value of the field being changed.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="P:IDS.Logging.UserProfileAuditLogEntry.NewValue">
            <summary>
            Gets or sets the new value of the field being changed.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:IDS.Logging.UserProfileAuditLogEntry.Explanation">
            <summary>
            Gets or sets the reason for the change.
            </summary>
            <value>The user's reason for change.</value>
        </member>
        <member name="M:IDS.Logging.UserProfileAuditLogEntry.PersistToSql(System.Data.SqlClient.SqlTransaction)">
            <summary>
            Allows the AuditLogEntry to persist its data to a SQL Server database.
            </summary>
            <param name="transaction">The SqlTransaction object used to wrap the transaction while updating the database.</param>
        </member>
        <member name="T:IDS.Logging.WindowsEventLogger">
             <summary>
             Writes log entries to the windows event log.
             </summary>
             <example>
             web.config configuration example:
             <code>
             <![CDATA[
            	<logging enabled="true"> <!--globally turn on/off logging-->
            
            		<context>
            			<location>My Credit Union</location>
            			<server>MAServer</server> <!--determined dynamically if left out-->
            		</context>
            		
            		<loggers asynchronous="false"> <!--globally turn on/off asynchonous logging-->
            
            			<!--global filters-->
            			<filters>
            				<!--filter by the log category enumeration.... -->
            				<categoryClass name="IDS.Logging.StandardCategory, IDS.System">
            					<!--filter by a specific value of that enumeration-->
            					<category name="Configuration">
            						<!--and filter by specific serverities of that enumeration value -->
            						<severity>Warning</severity>
            						<severity>Exception</severity>
            						<severity>Critical</severity>
            					</category>
            					<category name="LifeCycle"/>
            				</categoryClass>
            				<categoryClass name="IDS.eStatements.Web.Log.EmailLog, IDS.eStatements.Web.Loader"/>
            			</filters>
            			
            			<logger enabled="true" class="IDS.Logging.WindowsEventLogger, IDS.System">
            				<logFormatString>{6} ({7}) [{4}/{5}]</logFormatString>
            				<parameters>
            					<machine>LOCALHOST</machine>
            					<log>Application</log>
            					<source>MyApp</source>
            					<!-- Possible values for entryType are: Information,SuccessAudit,FailureAudit,Warning,Error -->
            					<entryType>SuccessAudit</entryType>
            					<!-- Possible values for severity are: Unspecified,Debug,Information,Warning,Exception,Critical -->
            					<entryTypeMap>
            						<entryType severity="Success">SuccessAudit</entryType>
            						<entryType severity="Information">SuccessAudit</entryType>
            						<entryType severity="Warning">Warning</entryType>
            						<entryType severity="Critical">Error</entryType>
            						<entryType severity="Exception">Error</entryType>
            					</entryTypeMap>
            				</parameters>
            			</logger>
            		</loggers>
            	</logging>
             ]]>
             </code>
             </example>
        </member>
        <member name="P:IDS.Logging.WindowsEventLogger.EventLog">
            <summary>
            Gets or sets the event log to which log entries are written.
            </summary>
            <value>An EventLog that specifies the event log to write to.</value>
        </member>
        <member name="P:IDS.Logging.WindowsEventLogger.LogEntryType">
            <summary>
            Gets or sets the log entry type that log entries are logged as.
            </summary>
            <value>The LogEntryType that indicates the event type associated with the entry in the event log.</value>
        </member>
        <member name="P:IDS.Logging.WindowsEventLogger.LogEntryTypeMap">
            <summary>
            Gets or sets the log entry type map that determines how log entries are logged.
            </summary>
            <value>A hashtable of severity/entrytype mappings.</value>
            <remarks>
            This method returns a hash table where the key is the severity name and the value
            is the EventLogEntryType. This hash table can be null if there are no mappings. If
            the category is not found in the hash table, the default EventLogEntryType is used.
            </remarks>
        </member>
        <member name="M:IDS.Logging.WindowsEventLogger.Create(System.Xml.XmlNode)">
            <summary>
            Creates a new WindowsEventLogger, configuring it based on the given configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
            <returns>A new configured WindowsEventLogger.</returns>
        </member>
        <member name="M:IDS.Logging.WindowsEventLogger.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Logging.WindowsEventLogger.DoLog(IDS.Logging.LogEntry)">
            <summary>
            Writes the given log entry to the windows event log.
            </summary>
            <param name="entry">The entry to be logged.</param>
        </member>
        <member name="M:IDS.Logging.WindowsEventLogger.ConfigureParameters(System.Xml.XmlNode)">
            <summary>
            Configures the windows event logger based on the given custom configuration node.
            </summary>
            <param name="configuration">Configuration node.</param>
            <remarks>
            Supported schema:
            <code>
            <root>
            	<machine>LOCALHOST</machine>
            	<log>Application</log>
            	<source>MyApp</source>
            	<entryType>SuccessAudit</entryType>
            	<entryTypeMap>
            		<entryType severity="Success">SuccessAudit</entryType>
            		<entryType severity="Information">SuccessAudit</entryType>
            		<entryType severity="Warning">Warning</entryType>
            		<entryType severity="Critical">Error</entryType>
            		<entryType severity="Exception">Error</entryType>
            	</entryTypeMap>
            </root>
            </code>
            </remarks>
        </member>
        <member name="T:IDS.Data.ConfigurableListOption">
            <summary>
            Represents an option in a list.
            </summary>
        </member>
        <member name="M:IDS.Data.ConfigurableListOption.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ConfigurableListOption" /> class.
            </summary>
        </member>
        <member name="M:IDS.Data.ConfigurableListOption.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ConfigurableListOption" /> class
            with a specified ID.
            </summary>
            <param name="id">
            A string that uniquely identifies the option.
            </param>
        </member>
        <member name="P:IDS.Data.ConfigurableListOption.Id">
            <summary>
            Gets or sets a string that uniquely identifies the option.
            </summary>
        </member>
        <member name="P:IDS.Data.ConfigurableListOption.Text">
            <summary>
            Gets or sets the text of the option.
            </summary>
        </member>
        <member name="P:IDS.Data.ConfigurableListOption.Order">
            <summary>
            Gets or sets the order of the option in a <see cref="T:IDS.Data.ConfigurableListOptionCollection" />.
            </summary>
        </member>
        <member name="T:IDS.Data.ConfigurableListOptionCollection">
            <summary>
            Represents a collection of <see cref="T:IDS.Data.ConfigurableListOption" /> objects.
            </summary>
        </member>
        <member name="M:IDS.Data.ConfigurableListOptionCollection.Add(System.String)">
            <summary>
            Adds a <see cref="T:IDS.Data.ConfigurableListOption" /> with a specified ID.
            </summary>
            <param name="id">
            The ID of the <see cref="T:IDS.Data.ConfigurableListOption" /> to add.
            </param>
        </member>
        <member name="T:IDS.Data.NamedConnectionStringNotFoundException">
            <summary>
            The NamedConnectionStringNotFoundException is thrown when a connection service that is configured to use a named connection
            can't find the named connection string.
            </summary>
        </member>
        <member name="M:IDS.Data.NamedConnectionStringNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.NamedConnectionStringNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Data.NamedConnectionStringNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.NamedConnectionStringNotFoundException"/> class.
            </summary>
            <param name="namedConnectionStringName">Name of the named connection string.</param>
        </member>
        <member name="M:IDS.Data.NamedConnectionStringNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.NamedConnectionStringNotFoundException"/> class.
            </summary>
            <param name="namedConnectionStringName">Name of the named connection string.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:IDS.Data.NamedConnectionStringNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.NamedConnectionStringNotFoundException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:IDS.Data.ConnectionStringType">
            <summary>
            The ConnectionStringType enumeration determines the type of connection string.
            </summary>
        </member>
        <member name="F:IDS.Data.ConnectionStringType.Normal">
            <summary>
            Connection string that is manually entered.
            </summary>
        </member>
        <member name="F:IDS.Data.ConnectionStringType.Named">
            <summary>
            A named connection string that is named to the application
            </summary>
        </member>
        <member name="T:IDS.Data.ConnectionServiceSettings">
            <summary>
            The ConnectionServiceSettings class stores the settings associated with a connection string.
            </summary>
        </member>
        <member name="M:IDS.Data.ConnectionServiceSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ConnectionServiceSettings"/> class.
            </summary>
        </member>
        <member name="M:IDS.Data.ConnectionServiceSettings.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ConnectionServiceSettings"/> class.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the connectionStringValue parameter is null.</exception>
        </member>
        <member name="M:IDS.Data.ConnectionServiceSettings.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ConnectionServiceSettings"/> class.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="connectionStringValue">The connection string value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the providerName parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the connectionStringValue parameter is null.</exception>
        </member>
        <member name="M:IDS.Data.ConnectionServiceSettings.#ctor(System.String,IDS.Data.ConnectionStringType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ConnectionServiceSettings"/> class.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="connectionStringType">Type of the connection string.</param>
            <param name="connectionStringValue">The connection string value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the connectionStringValue parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the providerName parameter is null.</exception>
        </member>
        <member name="P:IDS.Data.ConnectionServiceSettings.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:IDS.Data.ConnectionServiceSettings.ConnectionStringType">
            <summary>
            Gets or sets the type of the connection string.
            </summary>
            <value>The type of the connection string.</value>
        </member>
        <member name="P:IDS.Data.ConnectionServiceSettings.ConnectionStringValue">
            <summary>
            Gets or sets the connection string value. The meaning of this value depends on the ConnectionStringType.
            </summary>
            <value>The connection string value.</value>
        </member>
        <member name="M:IDS.Data.ConnectionServiceSettings.Parse(System.String)">
            <summary>
            This method takes an XML string saved using the <see cref="M:IDS.Data.ConnectionServiceSettings.ToString"/> method and creates
            a ConnectionServiceSettings instance with the appropriate values.
            </summary>
            <param name="xml">The XML string returned from the <see cref="M:IDS.Data.ConnectionServiceSettings.ToString"/> method.</param>
        </member>
        <member name="M:IDS.Data.ConnectionServiceSettings.Parse(System.Xml.XmlDocument)">
            <summary>
            This method takes an XML document saved using the <see cref="M:IDS.Data.ConnectionServiceSettings.ToString"/> method and creates
            a ConnectionServiceSettings instance with the appropriate values.
            </summary>
            <param name="doc">The XML document returned from the <see cref="M:IDS.Data.ConnectionServiceSettings.ToString"/> method.</param>
        </member>
        <member name="M:IDS.Data.ConnectionServiceSettings.Parse(System.Xml.XmlNode)">
            <summary>
            This method takes an XML node saved using the <see cref="M:IDS.Data.ConnectionServiceSettings.ToString"/> method and creates
            a ConnectionServiceSettings instance with the appropriate values.
            </summary>
            <param name="node">The XML node returned from the <see cref="M:IDS.Data.ConnectionServiceSettings.ToString"/> method.</param>
        </member>
        <member name="M:IDS.Data.ConnectionServiceSettings.ToXml">
            <summary>
            Converts the object to XML.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.ConnectionServiceSettings.ToString">
            <summary>
            This method saves the connection service settings to an XML string which can then be reloaded
            with the Parse() method.
            </summary>
            <returns>Returns an XML string representing this instance of the connection service settings.</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:IDS.Data.ConnectionServiceSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:IDS.Data.ConnectionService">
            <summary>
            The ConnectionService allows an implementer to configure one connection string
            and share that connection string with an module that supports the ConnectionService.
            The ConnectionService is an abstract service that gets implemented by services
            such as the SqlConnectionService.
            </summary>
        </member>
        <member name="M:IDS.Data.ConnectionService.#ctor(System.String,IDS.Data.ConnectionStringType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ConnectionService"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="connectionStringType">Type of the connection string.</param>
            <param name="connectionStringValue">The connection string value.</param>
        </member>
        <member name="M:IDS.Data.ConnectionService.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ConnectionService"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:IDS.Data.ConnectionService.#ctor(System.String,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ConnectionService"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="node">The XML configuration node.</param>
        </member>
        <member name="P:IDS.Data.ConnectionService.ConnectionString">
            <summary>
            Get the connection string associated with this ConnectionService.
            </summary>
        </member>
        <member name="P:IDS.Data.ConnectionService.ConnectionStringName">
            <summary>
            Get the connection string name associated with this ConnectionService.
            </summary>
            <value>The name of the connection string.</value>
            <exception cref="T:System.InvalidOperationException">An InvalidOperationException is thrown if attempting to get the ConnectionStringName property when
            the type of the ConnectionService is not ConnectionStringType.Named. Check the ConnectionStrinType property before trying to read this value.</exception>
        </member>
        <member name="P:IDS.Data.ConnectionService.ConnectionStringType">
            <summary>
            Gets the type of the connection string.
            </summary>
            <value>The type of the connection string.</value>
        </member>
        <member name="P:IDS.Data.ConnectionService.ConnectionServiceSettings">
            <summary>
            Gets the connection settings associated with this service.
            </summary>
        </member>
        <member name="P:IDS.Data.ConnectionService.ProviderName">
            <summary>
            Get the name of the provider of this ConnectionService.
            </summary>
        </member>
        <member name="M:IDS.Data.ConnectionService.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:IDS.Data.ConnectionService.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:IDS.Data.ConnectionService.OnConnectionStringChanged">
            <summary>
            Called when the connection string has changed. This allows a sibling to 
            do something when the connection string has changed.
            </summary>
        </member>
        <member name="T:IDS.Data.DefaultDependencyAnalyzer">
            <summary>
            Used to analyze dependencies
            </summary>
        </member>
        <member name="M:IDS.Data.DefaultDependencyAnalyzer.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:IDS.Data.DefaultDependencyAnalyzer.AddDependency(System.String,System.String[])">
            <summary>
            Method called to add dependencies
            </summary>
            <param name="subject"></param>
            <param name="dependencies"></param>
        </member>
        <member name="M:IDS.Data.DefaultDependencyAnalyzer.GetAllTransitiveClosure">
            <summary>
            Method called to calculate all transitive dependencies
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.DefaultDependencyAnalyzer.GetTransitiveClosureFor(System.String)">
            <summary>
            Method used to calculate transitive closure of all dependencies
            Just a hint - this is a simple-minded implementation of 
            worklist algorithm. Transitive closure computation is 
            computationally expensive. However, a sophisticated algorithm (using
            adjecency matrix will be much faster)
            </summary>
            <param name="subject"></param>
        </member>
        <member name="M:IDS.Data.DefaultDependencyAnalyzer.GetDependency(System.String)">
            <summary>
            Method called to get all immediate dependencies for a subject
            </summary>
            <param name="subject"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Data.DefaultDependencyBasedSorter">
            <summary>
            Class implements default dependency based sorter 
            </summary>
        </member>
        <member name="M:IDS.Data.DefaultDependencyBasedSorter.AddProduct(System.String)">
            <summary>
            Method called to add a product 
            </summary>
            <param name="dependentProductName"></param>
        </member>
        <member name="M:IDS.Data.DefaultDependencyBasedSorter.AddDependency(System.String,System.String)">
            <summary>
            Called to add dependency between two products
            </summary>
            <param name="dependeeProductName"></param>
            <param name="dependentProductName"></param>
        </member>
        <member name="M:IDS.Data.DefaultDependencyBasedSorter.GetSortedList">
            <summary>
            Method called to get sorted list of product - the "sort" honours dependencies
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.DefaultDependencyBasedSorter.Clear">
            <summary>
            Method called to clear the state of the dependency based sorter
            </summary>
        </member>
        <member name="M:IDS.Data.DefaultDependencyBasedSorter.AddKnownProduct(System.String)">
            <summary>
            Method called to add a known product
            </summary>
            <param name="knownProductName"></param>
        </member>
        <member name="M:IDS.Data.DefaultDependencyBasedSorter.AddToDependencyMatrix(System.String)">
            <summary>
            Method called to add a product to dependency list
            </summary>
            <param name="dependentProductName"></param>
        </member>
        <member name="T:IDS.Data.DeltaDataSet`1">
            <summary>
            Represents a set of changes (row insertions, updates, and deletions) that can be applied
            to a typed or untyped <see cref="T:System.Data.DataSet" />.
            </summary>
            <typeparam name="TMasterDataSet">
            The type of the typed <see cref="T:System.Data.DataSet" />, or <see cref="T:System.Data.DataSet" /> itself.
            </typeparam>
        </member>
        <member name="M:IDS.Data.DeltaDataSet`1.#ctor(`0,IDS.Data.DeltaDataSetOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.DeltaDataSet`1" /> class.
            </summary>
            <param name="masterDataSet">
            A <typeparamref name="TMasterDataSet" /> whose schema will be used to initialize
            the new <see cref="T:IDS.Data.DeltaDataSet`1" />.
            </param>
            <param name="options">
            A <see cref="T:IDS.Data.DeltaDataSetOptions" /> object.
            </param>
        </member>
        <member name="M:IDS.Data.DeltaDataSet`1.CloneSchema(System.Data.DataSet)">
            <summary>
            Initializes the <see cref="T:IDS.Data.DeltaDataSet`1" /> by cloning the schema
            of a specified <typeparamref name="TMasterDataSet" />.
            </summary>
        </member>
        <member name="M:IDS.Data.DeltaDataSet`1.#ctor(`0,`0,IDS.Data.DeltaDataSetOptions)">
            <summary>
            Initializes a new instance of the <ese cref="T:IDS.Data.DeltaDataSet`1" /> class
            that represents the set of changes needed to transform one specified <typeparamref name="TMasterDataSet" />
            to another.
            </summary>
        </member>
        <member name="M:IDS.Data.DeltaDataSet`1.MergeInto(`0)">
            <summary>
            Applies the set of changes represented by the <see cref="T:IDS.Data.DeltaDataSet`1" />
            to a specified <typeparamref name="TMasterDataSet" />.
            </summary>
            <param name="targetDataSet">
            The <typeparamref name="TMasterDataSet" /> to transform.
            </param>
        </member>
        <member name="M:IDS.Data.DeltaDataSet`1.GetKeys(System.Data.DataRow)">
            <summary>
            Gets the primary key value(s) for a specified <see cref="T:System.Data.DataRow" />.
            </summary>
        </member>
        <member name="M:IDS.Data.DeltaDataSet`1.GetMatchingRow(System.Data.DataRow,System.Data.DataTable)">
            <summary>
            Finds the row in a specified target table with the same primary key value(s) as a specified source row.
            </summary>
        </member>
        <member name="M:IDS.Data.DeltaDataSet`1.ToString">
            <summary>
            Converts the <see cref="T:IDS.Data.DeltaDataSet`1" /> to its equivalent XML representation.
            </summary>
        </member>
        <member name="T:IDS.Data.DeltaDataSetOptions">
            <summary>
            Customizes the behavior of a <see cref="T:IDS.Data.DeltaDataSet`1" />.
            </summary>
        </member>
        <member name="M:IDS.Data.DeltaDataSetOptions.PreserveRowOrder(System.String)">
            <summary>
            Gets a Boolean value that indicates whether the relative order of rows in a specified table
            needs to be preserved.
            </summary>
            <remarks>
            The default implementation returns <see langword="false" /> for all tables.
            </remarks>
        </member>
        <member name="M:IDS.Data.DeltaDataSetOptions.UseInsertActionForUpdates(System.String)">
            <summary>
            Gets a Boolean value that indicates whether rows with changed values in a specified table
            should be marked as insertions instead of updates.
            </summary>
            <remarks>
            The default implementation returns <see langword="false" /> for all tables.
            </remarks>
        </member>
        <member name="T:IDS.Data.ExceptionBase">
            <summary>
            This Exception is the base class for all exceptions thrown by the IDS.Data assembly.
            </summary>
            <remarks>
            This class cannot be used directly, but must be derived by another exception class.
            </remarks>
        </member>
        <member name="M:IDS.Data.ExceptionBase.#ctor(System.String)">
            <summary>
            The constructor that creates an exception and sets the exception message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:IDS.Data.ExceptionBase.#ctor(System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that caused this exception to be thrown.</param>
        </member>
        <member name="M:IDS.Data.ExceptionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="M:IDS.Data.ExceptionBase.ToString">
            <summary>
            Returns detailed information about the exception, including all inner exceptions.
            </summary>
            <returns>Detailed information about the exception, including all inner exceptions.</returns>
        </member>
        <member name="T:IDS.Data.ExecutionContext">
            <summary>
            This is just a execution context class, introduced to re-structure/refactor code in 
            ProductDatabase schema. 
            </summary>
        </member>
        <member name="P:IDS.Data.ExecutionContext.AccumulatedScriptText">
            <summary>
            Stores generated sql script
            </summary>
        </member>
        <member name="P:IDS.Data.ExecutionContext.CurrentTransaction">
            <summary>
            This stores current transaction
            </summary>
        </member>
        <member name="P:IDS.Data.ExecutionContext.CurrentScriptHasExplicitTransactionToken">
            <summary>
            This indicates if current script has explicit transaction
            declaration token
            </summary>
        </member>
        <member name="P:IDS.Data.ExecutionContext.Connection">
            <summary>
            Stores current connection
            </summary>
        </member>
        <member name="P:IDS.Data.ExecutionContext.CurrentScriptFileName">
            <summary>
            This stores the file name of the sql script being processed
            </summary>
        </member>
        <member name="P:IDS.Data.ExecutionContext.CurrentScriptText">
            <summary>
            This stores the sql text contents of the currently being processed file
            </summary>
        </member>
        <member name="P:IDS.Data.ExecutionContext.VersionsUsedForHistGen">
            <summary>
            Property called to get which versions were used only for hist gen
            </summary>
        </member>
        <member name="P:IDS.Data.ExecutionContext.TransactionHasBeenCommitted">
            <summary>
            Check to see if transaction has been committed
            </summary>
        </member>
        <member name="P:IDS.Data.ExecutionContext.VersionUpgradeHistTableHadToBeCreated">
            <summary>
            Member indicates if version hist table had to be created
            This means version hist has never been created for a product
            </summary>
        </member>
        <member name="M:IDS.Data.ExecutionContext.#ctor">
            <summary>
            Default constructor that initializes the members
            </summary>
        </member>
        <member name="M:IDS.Data.ExecutionContext.Reset">
            <summary>
            This resets the execution context. Except that it does not reset
            the accumulated text
            </summary>
        </member>
        <member name="M:IDS.Data.ExecutionContext.Rollback">
            <summary>
            Rollback if there is a transaction
            </summary>
        </member>
        <member name="M:IDS.Data.ExecutionContext.Commit">
            <summary>
            Commit if there is a transaction
            </summary>
        </member>
        <member name="M:IDS.Data.ExecutionContext.HasAlreadyBeenUsedForHistGeneration(IDS.Data.SchemaVersion)">
            <summary>
            Method called to check if a version has been used for status generation
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Data.IDependencyAnalyzerStrategy">
            <summary>
            Dependency analyser strategy interface
            </summary>
        </member>
        <member name="M:IDS.Data.IDependencyAnalyzerStrategy.AddDependency(System.String,System.String[])">
            <summary>
            Method called to add dependencies
            </summary>
            <param name="subject"></param>
            <param name="dependencies"></param>
        </member>
        <member name="M:IDS.Data.IDependencyAnalyzerStrategy.GetAllTransitiveClosure">
            <summary>
            Method called to get fully resolved transitive dependencies
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.IDependencyAnalyzerStrategy.GetTransitiveClosureFor(System.String)">
            <summary>
            Method called to get fully resolved transitive dependencies
            for a specific subject
            </summary>
            <param name="subject"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Data.IDependencyBasedSorter">
            <summary>
            Interface for Dependency based sorter
            </summary>
        </member>
        <member name="M:IDS.Data.IDependencyBasedSorter.AddDependency(System.String,System.String)">
            <summary>
            Called to add dependency between two products
            </summary>
            <param name="dependentProductName">dependent product</param>
            <param name="dependeeProductName">product name on which the dependent product depends on</param>
        </member>
        <member name="M:IDS.Data.IDependencyBasedSorter.GetSortedList">
            <summary>
            Method called to get a sorted list (topological sort based on dependency)
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.IDependencyBasedSorter.Clear">
            <summary>
            Method called to clear the state
            </summary>
        </member>
        <member name="M:IDS.Data.IDependencyBasedSorter.AddProduct(System.String)">
            <summary>
            Method called to add a product
            </summary>
            <param name="productName">name of the product</param>
        </member>
        <member name="T:IDS.Data.ListOption">
            <summary>
            List Option 
            </summary>
        </member>
        <member name="M:IDS.Data.ListOption.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ListOption"/> class.
            </summary>
        </member>
        <member name="M:IDS.Data.ListOption.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ListOption"/> class.
            </summary>
            <param name="displayText">The option display text.</param>
        </member>
        <member name="M:IDS.Data.ListOption.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ListOption"/> class.
            </summary>
            <param name="optionId">The option id.</param>
            <param name="displayText">The option display text.</param>
        </member>
        <member name="P:IDS.Data.ListOption.Id">
            <summary>
            Unique Id of the option
            </summary>
            <value></value>
        </member>
        <member name="P:IDS.Data.ListOption.DisplayText">
            <summary>
            DisplayText of the option
            </summary>
            <value></value>
        </member>
        <member name="P:IDS.Data.ListOption.IsArchived">
            <summary>
            The flag that tells if the option has been is hidden/archived (soft deleted)
            </summary>
            <value></value>
        </member>
        <member name="P:IDS.Data.ListOption.ExtendedData">
            <summary>
            Represents the Extended Data Attributes that a option may contain
            </summary>
        </member>
        <member name="T:IDS.Data.ListOptionDataProvider">
            <summary>
            List Option Data Provider 
            </summary>
        </member>
        <member name="M:IDS.Data.ListOptionDataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ListOptionDataProvider"/> class.
            </summary>
        </member>
        <member name="M:IDS.Data.ListOptionDataProvider.DoSaveListOption(IDS.Data.ListOption,System.String)">
            <summary>
            Saves a list option to the data provider store.
            </summary>
        </member>
        <member name="M:IDS.Data.ListOptionDataProvider.DoGetAllListOptions(System.Boolean)">
            <summary>
             Gets all the list options from data store by option group
            </summary>
            <param name="excludeArchived">Allows you to excluded or include the archived list options</param>
        </member>
        <member name="M:IDS.Data.ListOptionDataProvider.DoGetAllListOptionsAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Gets all the list options from data store by option group
            </summary>
            <param name="excludeArchived">Allows you to excluded or include the archived list options</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:IDS.Data.ListOptionDataProvider.DoGetListOptionByDisplayText(System.String)">
            <summary>
             Gets list option from data store by option value
            </summary>
            <param name="displayText">Display Text of the Option filter the list options</param>
        </member>
        <member name="M:IDS.Data.ListOptionDataProvider.DoGetListOptionById(System.String)">
            <summary>
             Gets list option from data store by option value
            </summary>
            <param name="optionId">Id of the Option to filter the list options</param>
        </member>
        <member name="M:IDS.Data.ListOptionDataProvider.SaveListOption(IDS.Data.ListOption,System.String)">
            <summary>
             Adds a list option to the data provider store.
            </summary>
            <param name="option">List Option object to be added</param>
            <param name="userId">UserId that is requesting the list option to be added</param>
        </member>
        <member name="M:IDS.Data.ListOptionDataProvider.GetAllListOptions">
            <summary>
            Gets all list options by configured List Option Group.
            </summary>
            <returns>Returns a list of list option objects for all list options that are not archived.</returns>
        </member>
        <member name="M:IDS.Data.ListOptionDataProvider.GetAllListOptionsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all list options by configured List Option Group.
            </summary>
            <returns>Returns a list of list option objects for all list options that are not archived.</returns>
        </member>
        <member name="M:IDS.Data.ListOptionDataProvider.GetAllListOptions(System.Boolean)">
            <summary>
             Gets all the list options from data store by option group
            </summary>
            <param name="excludeArchived">Allows you to excluded or include the archived list options</param>
        </member>
        <member name="M:IDS.Data.ListOptionDataProvider.GetListOptionsByOptionDisplayText(System.String)">
            <summary>
             Gets list option from data store by option display text
            </summary>
            <param name="displayText">DisplayText of the Option filter the list options</param>
        </member>
        <member name="M:IDS.Data.ListOptionDataProvider.GetListOptionsById(System.String)">
            <summary>
             Gets list option from data store by option value
            </summary>
            <param name="optionId">Id of the Option to filter the list options</param>
        </member>
        <member name="T:IDS.Data.NamedConnection">
            <summary>
            The NamedConnection class encapsulates a named connection string.
            </summary>
        </member>
        <member name="F:IDS.Data.NamedConnection.AuditDatabase">
            <summary>
            The name of the named connection for the Audit database
            </summary>
        </member>
        <member name="F:IDS.Data.NamedConnection.LoggingDatabase">
            <summary>
            The name of the named connection for the Logging database
            </summary>
        </member>
        <member name="F:IDS.Data.NamedConnection.ConfigurationDatabase">
            <summary>
            The name of the named connection for the Configuration database
            </summary>
        </member>
        <member name="F:IDS.Data.NamedConnection.ApplicationDatabase">
            <summary>
            The name of the named connection for the Application database
            </summary>
        </member>
        <member name="F:IDS.Data.NamedConnection.ApplicationStateDatabase">
            <summary>
            The name of the named connection for the Application State database
            </summary>
        </member>
        <member name="F:IDS.Data.NamedConnection.ApplicationCacheDatabase">
            <summary>
            The name of the named connection for the Application Cache database
            </summary>
        </member>
        <member name="F:IDS.Data.NamedConnection.MaintenanceDatabase">
            <summary>
            The name of the named connection for the Maintenance database
            </summary>
        </member>
        <member name="F:IDS.Data.NamedConnection.DeploymentDatabase">
            <summary>
            The name of the named connection for the Deployment database
            </summary>
        </member>
        <member name="F:IDS.Data.NamedConnection.ReportDatabase">
            <summary>
            The name of the named connection for the Report Data database
            </summary>
        </member>
        <member name="M:IDS.Data.NamedConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.NamedConnection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Data.NamedConnection.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.NamedConnection"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:IDS.Data.NamedConnection.#ctor(System.Configuration.ConnectionStringSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.NamedConnection"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:IDS.Data.NamedConnection.GetNamedConnection(System.String)">
            <summary>
            Gets the named connection with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>Returns the NamedConnection if found or null.</returns>
        </member>
        <member name="P:IDS.Data.NamedConnection.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:IDS.Data.NamedConnection.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:IDS.Data.NamedConnection.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="T:IDS.Data.NamedConnectionCollection">
            <summary>
            The NamedConnectionCollection contains objects of the <see cref="T:IDS.Data.NamedConnection"/> type.
            </summary>
        </member>
        <member name="M:IDS.Data.NamedConnectionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.NamedConnectionCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Data.NamedConnectionCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Data.NamedConnection})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.NamedConnectionCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Data.NamedConnectionCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.NamedConnectionCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="P:IDS.Data.NamedConnectionCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:IDS.Data.NamedConnection"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="M:IDS.Data.NamedConnectionCollection.CreateNamedConnectionsFromConfiguration">
            <summary>
            Creates the named connections from configuration.
            </summary>
            <returns>Returns a NamedConnectionCollection of the named connections based on the current configuration.</returns>
        </member>
        <member name="M:IDS.Data.NamedConnectionCollection.CreateNamedConnectionsFromConfiguration(System.String)">
            <summary>
            Creates the named connections from configuration for the specified provider.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns>
            Returns a NamedConnectionCollection of the named connections based on the current configuration for the specified provider.
            </returns>
        </member>
        <member name="M:IDS.Data.NamedConnectionCollection.FilterByProvider(System.String)">
            <summary>
            Filters the collection of NamedConnections by the specified provider.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns>
            Returns a NamedConnectionCollection of the named connections contained in this collection filtered by the specified provider.
            </returns>
        </member>
        <member name="T:IDS.Data.ProductDatabaseSchemaLog">
            <summary>
            The log types for the ProductDatabaseSchema type.
            </summary>
        </member>
        <member name="F:IDS.Data.ProductDatabaseSchemaLog.Debug">
            <summary>
            The log contains debug information.
            </summary>
        </member>
        <member name="F:IDS.Data.ProductDatabaseSchemaLog.Exception">
            <summary>
            The log contains exception information.
            </summary>
        </member>
        <member name="T:IDS.Data.ProductDatabaseSchema">
            <summary>
            This class performs database schema upgrades for a product.
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ProductDatabaseSchema"/> class.
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of this class, using the caller's assembly as the Sql Resource Assembly.
            </summary>
            <param name="product">The product.</param>
            <param name="connectionStringName">Name of the connection string.</param>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.#ctor(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Creates an instance of this class, using the caller's assembly as the Sql Resource Assembly.
            </summary>
            <param name="product">The product.</param>
            <param name="connectionStringName">Name of the connection string.</param>
            <param name="sqlResourceAssembly">The SQL resource assembly.</param>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.#ctor(System.String,System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="product">The product.</param>
            <param name="connectionStringName">Name of the connection string.</param>
            <param name="sqlResourceAssembly">The assembly that contains the Sql resources to upgrade the product database schema.</param>
            <param name="sqlScriptPrefix">The prefix on which to filter the SQL scripts. An empty string will select all SQL scripts.</param>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.#ctor(System.String,System.String,System.Reflection.Assembly,System.String,System.String[])">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="product">The product.</param>
            <param name="connectionStringName">Name of the connection string.</param>
            <param name="sqlResourceAssembly">The assembly that contains the Sql resources to upgrade the product database schema.</param>
            <param name="sqlScriptPrefix">The prefix on which to filter the SQL scripts. An empty string will select all SQL scripts.</param>
            <param name="dependsOn">The dependencies of this product schema.</param>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.#ctor(System.String,System.String,System.Reflection.Assembly,System.String,System.Boolean,System.String[])">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="product">The product.</param>
            <param name="connectionStringName">Name of the connection string.</param>
            <param name="sqlResourceAssembly">The assembly that contains the Sql resources to upgrade the product database schema.</param>
            <param name="sqlScriptPrefix">The prefix on which to filter the SQL scripts. An empty string will select all SQL scripts.</param>
            <param name="tenantData"></param>
            <param name="dependsOn">The dependencies of this product schema.</param>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.#ctor(System.String,IDS.Data.SqlConnectionService,System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ProductDatabaseSchema"/> class.
            </summary>
            <param name="product">The product.</param>
            <param name="connectionService">The connection service.</param>
            <param name="sqlResourceAssembly">The SQL resource assembly.</param>
            <param name="sqlScriptPrefix">The SQL script prefix.</param>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.#ctor(System.String,IDS.Data.SqlConnectionService,System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ProductDatabaseSchema"/> class.
            </summary>
            <param name="product">The product.</param>
            <param name="connectionService">The connection service.</param>
            <param name="connectionStringName">Name of the connection string.</param>
            <param name="sqlResourceAssembly">The SQL resource assembly.</param>
            <param name="sqlScriptPrefix">The SQL script prefix.</param>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.#ctor(System.String,IDS.Data.SqlConnectionService,System.String,System.Reflection.Assembly,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ProductDatabaseSchema"/> class.
            </summary>
            <param name="product">The product.</param>
            <param name="connectionService">The connection service.</param>
            <param name="connectionStringName">Name of the connection string.</param>
            <param name="sqlResourceAssembly">The SQL resource assembly.</param>
            <param name="sqlScriptPrefix">The SQL script prefix.</param>
            <param name="dependsOn">List of names of products that this product is dependent on.</param>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.#ctor(System.String,IDS.Data.SqlConnectionService,System.String,System.Reflection.Assembly,System.String,System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ProductDatabaseSchema"/> class.
            </summary>
            <param name="product">The product.</param>
            <param name="connectionService">The connection service.</param>
            <param name="connectionStringName">Name of the connection string.</param>
            <param name="sqlResourceAssembly">The SQL resource assembly.</param>
            <param name="sqlScriptPrefix">The SQL script prefix.</param>
            <param name="tenantData"></param>
            <param name="dependsOn">List of names of products that this product is dependent on.</param>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.ScriptVersionsFromAssembly">
            <summary>
            Called to return script versions in the assembly
            </summary>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.DependsOn">
            <summary>
            Method that returns names of products that this product depends on. Before
            a product can be upgraded, all its dependencies must have been upgraded
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.GetProductDatabaseSchemasFromLoadedAssemblies">
            <summary>
            Searches all of the loaded assemblies in the current app domain for the ProductDatabaseSchemaAttribute. For
            each assembly found that is decorated with this attribute, an instance of this class is constructed. An array
            of the instances of this class are returned.
            </summary>
            <returns>
            An array of instances of this class containing one instance for each assembly loaded in the current
            app domain that is decorated with the ProductDatabaseSchemaAttribute. If an assembly is decorated
            multiple times with the attribute, then one instance of this class will be created for each instance
            of the attribute.
            </returns>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.GetProductDatabaseSchemasFromLoadedAssemblies(System.Boolean,System.String[]@)">
            <summary>
            Searches all of the loaded assemblies in the current app domain for the ProductDatabaseSchemaAttribute. For
            each assembly found that is decorated with this attribute, an instance of this class is constructed. An array
            of the instances of this class are returned.
            </summary>
            <param name="continueOnError">If true, errors are caught and added to errors[]</param>
            <param name="errors">String Array of errors</param>
            <returns>
            An array of instances of this class containing one instance for each assembly loaded in the current
            app domain that is decorated with the ProductDatabaseSchemaAttribute. If an assembly is decorated
            multiple times with the attribute, then one instance of this class will be created for each instance
            of the attribute.
            </returns>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.Resource(System.String,System.Object[])">
            <summary>
            Returns the requested resource value.
            </summary>
            <param name="key">The key of the resource value.</param>
            <param name="args">The arguments to supply to the resource value.</param>
            <returns>The requested resource value.</returns>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.Product">
            <summary>
            Gets the product.
            </summary>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.SqlScriptPrefix">
            <summary>
            Gets the SQL script prefix.
            </summary>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.ConnectionService">
            <summary>
            Gets the connection service.
            </summary>
            <value>The connection service.</value>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.ConnectionStringType">
            <summary>
            Gets the type of the connection string.
            </summary>
            <value>The type of the connection string.</value>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.ConnectionStringName">
            <summary>
            Gets or sets the name of the connection string.
            </summary>
            <value>The name of the connection string.</value>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.ConnectionString">
            <summary>
            Gets or sets the connection string to the product database.
            </summary>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.ConnectionStringOverridden">
            <summary>
            Gets or sets a value indicating whether the connection string has been overridden.
            </summary>
            <value>
            	<c>true</c> if the connection string has been overridden; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.MasterDatabaseConnectionString">
            <summary>
            Gets the connection string to the master database of the Sql Server that contains the product database.
            </summary>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.SqlResourceAssembly">
            <summary>
            Gets the assembly that contains the Sql resources to upgrade the product database schema.
            </summary>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.DatabaseName">
            <summary>
            Gets the product database name.
            </summary>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.LatestVersion">
            <summary>
            The latest version of the product database schema.
            </summary>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.RecordOnly">
            <summary>
            Gets or sets a value indicating whether to only record the SQL, not execute the SQL.
            </summary>
            <value><c>true</c> if only the SQL should be recorded, not execute the SQL.</value>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.SavedSqlScripts">
            <summary>
            Gets the saved SQL scripts from a recorded upgrade.
            </summary>
            <value>The saved SQL scripts.</value>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.CurrentVersion">
            <summary>
            Gets the current version. This value is calculated the first time by looking at the database
            and cached on subsequent access to this property.
            </summary>
            <value>The current version.</value>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.IsVersionTableSchemaUpdated">
            <summary>
            Property accessor to check if version table schema has an updated data type
            </summary>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.IsDatabaseCreated">
            <summary>
            Returns true if the database has already been created; false if it has not.
            </summary>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.IsVersionTableCreated">
            <summary>
            Returns true if the IDS_Version table has been created; false if it hasn't.
            </summary>
            <remarks>
            This method is private and is only called from the GetCurrentVersion method after confirming that the database exists.
            </remarks>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchema.HasVersionHistoryBeenGenerated">
            <summary>
            Checks to see if version history has been generated
            </summary>
            <returns>The current version of the product database schema.</returns>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"></see> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"></see> property.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/></PermissionSet>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.ClearCurrentVersionCache">
            <summary>
            Clears the current version cache.
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.AllScriptsNeedToBeApplied">
            <summary>
            Determines if any schema scripts been applied
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.AllScriptsHaveBeenApplied">
            <summary>
            Determines if all scripts have been applied and there is nothing to apply
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.DetermineApplicability">
            <summary>
            Computes applicable versions
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.GetSortedApplicableVersions">
            <summary>
            Method called to explicitly sort the applicable versions
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.GetVersionsForHistGeneration">
            <summary>
            Method that returns all the versions smaller than current version
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.AllVersionsAvailableFromAssembly">
            <summary>
            Method called to explicitly sort the applicable versions
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.IsUpgradeRequired">
            <summary>
            Called to determine if upgrade is required
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.ThereIsSomethingToApply">
            <summary>
            Returns true if there is some script to appply
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.DetermineVersionsToBeApplied">
            <summary>
            This method returns list of all versions that need to be applied
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.GetAllAppliedSchemaVersions">
            <summary>
            Retrieves the current version of the product database schema. This method will retrieve the current version from
            the database each time it is called.
            </summary>
            <returns>The current version of the product database schema.</returns>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.GetCurrentVersion">
            <summary>
            This method returns current version from the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.UpdateVersionTableAndPopulateVersionHistory">
            <summary>
            Method called to make necessary schema changes to Version table and update version
            history
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.UpdateVersionTableAndPopulateVersionHistory(IDS.Data.ExecutionContext)">
            <summary>
            Method called to make necessary schema changes to Version table and update version
            history
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.Upgrade">
            <summary>
            Upgrades a product database schema to the latest version.
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.Upgrade(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Upgrades a product database schema to the latest version.
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.GetSqlScriptFromResourceStream(System.String)">
            <summary>
            Gets the SQL script from the resource stream for the specified filename.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Returns a string containing the SQL script for the specified filename.</returns>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.GetMasterDatabaseConnectionString">
            <summary>
            Creates the master database connection string from the product database connection string.
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.GetAllSqlScriptInfo">
            <summary>
            Retrieves all of the Sql scripts in the Sql Resource assembly and confirms that at least one exists.
            </summary>
            <exception cref="T:IDS.Data.NoSqlResourcesFoundException">If no Sql scripts are found in the Sql Resource Assembly.</exception>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.EnsureDatabaseIsCreated(IDS.Data.ExecutionContext)">
            <summary>
            Creates the product database if it doesn't exist.
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.EnsureVersionTableIsCreated(IDS.Data.ExecutionContext)">
            <summary>
            Creates the IDS_Version table if it doesn't exist.
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.EnsureProtectedColumnObjectsAreCreated(IDS.Data.ExecutionContext)">
            <summary>
            Creates the IDS_ProtectedColumn table and IDS_P_ProtectedColumn_InsertOrUpdate Procedure if it doesn't exist.
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.GetSummaryOfApplicableUpgrade">
            <summary>
            Method returns summary of applicable upgrade version/sql scripts
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.GetSummaryOfToBeGeneratedVersionHistory(System.Collections.Generic.IList{IDS.Data.SchemaVersion})">
            <summary>
            Method called to generate a summary of version history to be populated
            in the version table
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchema.GetAllApplicableVersionsLessThanTheCurrentVersion">
            <summary>
            Returns all versions less than cur version
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Data.ProductDatabaseSchemaAttribute">
            <summary>
            The ProductDatabaseSchemaAttribute class is an assembly attribute that describes a product
            database schema contained in the assembly.
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchemaAttribute.#ctor(System.String)">
            <summary>
            Constructs an instance of this attribute with the specified parameters.
            </summary>
            <param name="product">The name of the product.</param>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchemaAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructs an instance of this attribute with the specified parameters.
            </summary>
            <param name="product">The name of the product.</param>
            <param name="sqlScriptPrefix">The SQL script prefix.</param>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchemaAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs an instance of this attribute with the specified parameters.
            </summary>
            <param name="product">The name of the product.</param>
            <param name="sqlScriptPrefix">The SQL script prefix.</param>
            <param name="connectionStringName">Name of the connection string.</param>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchemaAttribute.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Constructs an instance of this attribute with the specified parameters.
            </summary>
            <param name="product">The name of the product.</param>
            <param name="sqlScriptPrefix">The SQL script prefix.</param>
            <param name="connectionStringName">Name of the connection string.</param>
            <param name="dependsOn">All the products that this product depends on</param>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchemaAttribute.#ctor(System.String,System.String,System.String,System.Type)">
            <summary>
            Constructs an instance of this attribute with the specified parameters.
            </summary>
            <param name="product">The name of the product.</param>
            <param name="sqlScriptPrefix">The SQL script prefix.</param>
            <param name="connectionStringName">Name of the connection string.</param>
            <param name="schemaType">Type of the schema.</param>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchemaAttribute.#ctor(System.String,System.String,System.String,System.Type,System.String[])">
            <summary>
            Constructs an instance of this attribute with the specified parameters.
            </summary>
            <param name="product">The name of the product.</param>
            <param name="sqlScriptPrefix">The SQL script prefix.</param>
            <param name="connectionStringName">Name of the connection string.</param>
            <param name="schemaType">Type of the schema.</param>
            <param name="dependsOn">All the products that this product depends on</param>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchemaAttribute.Product">
            <summary>
            Gets the product name.
            </summary>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchemaAttribute.SqlScriptPrefix">
            <summary>
            Gets or sets the SQL script prefix. A blank prefix will select all SQL scripts in the assembly.
            </summary>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchemaAttribute.DependsOn">
            <summary>
            Returns the names of products that the attributed product depends on
            </summary>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchemaAttribute.ConnectionStringName">
            <summary>
            Gets or sets the connection string name.
            </summary>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchemaAttribute.SchemaType">
            <summary>
            Gets or sets the type of the schema.
            </summary>
            <value>The type of the schema.</value>
        </member>
        <member name="T:IDS.Data.InvalidConnectionStringException">
            <summary>
            This Exception is thrown when the ProductDatabaseSchema class is passed an invalid connection string.
            </summary>
        </member>
        <member name="M:IDS.Data.InvalidConnectionStringException.#ctor(System.String)">
            <summary>
            The constructor that creates an exception and sets the exception message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:IDS.Data.InvalidConnectionStringException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that caused this exception to be thrown.</param>
        </member>
        <member name="M:IDS.Data.InvalidConnectionStringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:IDS.Data.SqlQueryErrorException">
            <summary>
            This Exception is thrown when a Sql query returns a System.Data.SqlClient.SqlException exception.
            </summary>
        </member>
        <member name="M:IDS.Data.SqlQueryErrorException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that caused this exception to be thrown.</param>
        </member>
        <member name="M:IDS.Data.SqlQueryErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:IDS.Data.ProductDatabaseNotCreatedException">
            <summary>
            This Exception is thrown when product database must exist before doing further operations
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseNotCreatedException.#ctor(System.String)">
            <summary>
            The constructor that creates an exception and sets the exception message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:IDS.Data.ProductDatabaseNotCreatedException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that caused this exception to be thrown.</param>
        </member>
        <member name="M:IDS.Data.ProductDatabaseNotCreatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:IDS.Data.VersionTableNotCreatedException">
            <summary>
            This Exception is thrown when version table must exist before doing further operations
            </summary>
        </member>
        <member name="M:IDS.Data.VersionTableNotCreatedException.#ctor(System.String)">
            <summary>
            The constructor that creates an exception and sets the exception message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:IDS.Data.VersionTableNotCreatedException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that caused this exception to be thrown.</param>
        </member>
        <member name="M:IDS.Data.VersionTableNotCreatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:IDS.Data.NoSqlResourcesFoundException">
            <summary>
            This Exception is thrown when no Sql resources can be found in the specified assembly.
            </summary>
        </member>
        <member name="M:IDS.Data.NoSqlResourcesFoundException.#ctor(System.String)">
            <summary>
            The constructor that creates an exception and sets the exception message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:IDS.Data.NoSqlResourcesFoundException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that caused this exception to be thrown.</param>
        </member>
        <member name="M:IDS.Data.NoSqlResourcesFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:IDS.Data.SqlQueryPermissionException">
            <summary>
            This Exception is thrown when a Sql query returns a System.Data.SqlClient.SqlException exception that
            corresponds to a permission error.
            </summary>
            <remarks>
            The following Sql errors map to this exception:	229, 230, 262, 1777, 2557, 2571, 2760, 3110, 3704, 4060, 4613, 4618, 4834, 5011, 5116, 5812, 6004, 6102,
            7314, 7956, 7983, 9010, 10024, 11010, 11045, 14076, 14126, 14260, 15247, 15622, 20604, 20618, 20623, 21049.
            </remarks>
        </member>
        <member name="M:IDS.Data.SqlQueryPermissionException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that caused this exception to be thrown.</param>
        </member>
        <member name="M:IDS.Data.SqlQueryPermissionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="M:IDS.Data.SqlQueryPermissionException.IsSqlQueryPermissionException(System.Data.SqlClient.SqlException)">
            <summary>
            Returns true if the System.Data.SqlClient.SqlException corresponds to a Sql Server permission error.
            </summary>
            <param name="exception">The SqlException.</param>
            <returns>True if the System.Data.SqlClient.SqlException corresponds to a Sql Server permission error.</returns>
        </member>
        <member name="T:IDS.Data.InvalidTransactionOperationException">
            <summary>
            This Exception is thrown when a SQL transaction is already started and a command
            to start another one is encountered, or when a command to commit a transaction is
            encountered and no SQL transaction has been started.
            </summary>
        </member>
        <member name="M:IDS.Data.InvalidTransactionOperationException.#ctor(System.String)">
            <summary>
            The constructor that creates an exception and sets the exception message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:IDS.Data.InvalidTransactionOperationException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that caused this exception to be thrown.</param>
        </member>
        <member name="M:IDS.Data.InvalidTransactionOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:IDS.Data.CyclicDependencyFoundException">
            <summary>
            Exception thrown when cyclic dependency spec is encountered
            </summary>
        </member>
        <member name="M:IDS.Data.CyclicDependencyFoundException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:IDS.Data.CyclicDependencyFoundException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IDS.Data.CyclicDependencyFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:IDS.Data.CyclicDependencyFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:IDS.Data.ProductDatabaseSchemaLoader">
            <summary>
            The ProductDatabaseSchemaLoader is a MarshalByRefObject class that facilitates retrieving ProductDatabaseSchema
            objects from a remote AppDomain. It also supports retrieving other objects such as NamedConnections and to support the DBAdmin program
            </summary>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchemaLoader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.ProductDatabaseSchemaLoader"/> class.
            </summary>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchemaLoader.NamedConnections">
            <summary>
            Gets the connection strings.
            </summary>
            <value>The connection strings.</value>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchemaLoader.Dataspaces">
            <summary>
            Gets the collection of dataspaces associated with this AppDomain.
            </summary>
            <value>The dataspace collection.</value>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchemaLoader.DataspaceManager">
            <summary>
            Gets the dataspace manager.
            </summary>
            <value>The dataspace manager.</value>
        </member>
        <member name="P:IDS.Data.ProductDatabaseSchemaLoader.CurrentDataspace">
            <summary>
            Gets or sets the current dataspace.
            </summary>
            <value>The current dataspace.</value>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchemaLoader.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"></see> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"></see> property.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/></PermissionSet>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchemaLoader.GetProductDatabaseSchemas">
            <summary>
            Gets the product database schemas.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.ProductDatabaseSchemaLoader.GetProductDatabaseSchemas(System.Boolean,System.String[]@)">
            <summary>
            Gets the product database schemas.
            </summary>
            <param name="continueOnError">if set to <c>true</c> [continue on error].</param>
            <param name="errors">The errors.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Data.SchemaVersion">
            <summary>
            This class captures has the logic to parse schema and file info
            </summary>
        </member>
        <member name="F:IDS.Data.SchemaVersion.SchemaVersionRegEx">
            <summary>
            Shared Schema Version Regex
            </summary>
        </member>
        <member name="F:IDS.Data.SchemaVersion.TenantDataVersionRegEx">
            <summary>
            TenantData Version Regex
            </summary>
        </member>
        <member name="F:IDS.Data.SchemaVersion.Unknown">
            <summary>
            Represents convenience -1 version
            </summary>
        </member>
        <member name="F:IDS.Data.SchemaVersion.Zero">
            <summary>
            Represents convenience zero version
            </summary>
        </member>
        <member name="M:IDS.Data.SchemaVersion.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDS.Data.SchemaVersion.#ctor(System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="sqlScriptFileNameWithVersionInfo">the sql script file name</param>
        </member>
        <member name="P:IDS.Data.SchemaVersion.VersionParts">
            <summary>
            Returns the parsed version parts sorted list
            </summary>
        </member>
        <member name="P:IDS.Data.SchemaVersion.VersionPartCount">
            <summary>
            This property returns the count of version parts
            </summary>
        </member>
        <member name="P:IDS.Data.SchemaVersion.DottedVersion">
            <summary>
            Retuns the dotted (if multi-part) version info
            </summary>
        </member>
        <member name="M:IDS.Data.SchemaVersion.CompareTo(IDS.Data.SchemaVersion)">
            <summary>
            Method used to compare two SchemaVersion objects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.SchemaVersion.CreateFromVersionString(System.String)">
            <summary>
            Factory method - to hydrate SchemaVersion from dotted representation
            </summary>
            <param name="versionString"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.SchemaVersion.AssertFormatIsValid(System.String)">
            <summary>
            Method that checks for version string validity
            </summary>
            <param name="versionString"></param>
        </member>
        <member name="M:IDS.Data.SchemaVersion.CreateFromFileName(System.String)">
            <summary>
            Factory method to create Schema version info from full file name
            </summary>
            <param name="sqlScriptFileNameWithVersionInfo"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.SchemaVersion.Equals(System.Object)">
            <summary>
            Override the equals method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.SchemaVersion.GetHashCode">
            <summary>
            Overrides GetHashCode method to bring it in sync with Equals override
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.SchemaVersion.GetVersionParts(System.String)">
            <summary>
            Returns a sorted list 
            </summary>
            <param name="dottedVersion"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.SchemaVersion.ToString">
            <summary>
            Returns the dotted version info
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.SchemaVersion.OnlyScriptName(System.String)">
            <summary>
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.SchemaVersion.IsGreaterThan(IDS.Data.SchemaVersion)">
            <summary>
            Method called to check of this version is greater than the passed version
            </summary>
            <param name="versionToBeCompared"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.SchemaVersion.IsLessThan(IDS.Data.SchemaVersion)">
            <summary>
            Method called to check if this version is smaller than the passed version
            </summary>
            <param name="versionToBeCompared"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.SchemaVersion.IsGreaterThanEqual(IDS.Data.SchemaVersion)">
            <summary>
            Method called to see if this version is equal or greater than the version to be compared
            </summary>
            <param name="versionToBeCompared"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Data.SchemaVersionComparer">
            <summary>
            Compares schema version info
            </summary>
        </member>
        <member name="M:IDS.Data.SchemaVersionComparer.Compare(IDS.Data.SchemaVersion,IDS.Data.SchemaVersion)">
            <summary>
            This method is called to compare wto schema versions
            </summary>
            <param name="firstSchemaVersion"></param>
            <param name="secondSchemaVersion"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Data.SqlCommandSet">
            <summary>
            The SqlCommandSet is a wrapper class to access the sealed internal <see cref="T:System.Data.SqlClient.SqlCommandSet"/>
            class which allows numerous SqlCommands to be batched together significantly improving performance.
            </summary>
        </member>
        <member name="M:IDS.Data.SqlCommandSet.#cctor">
            <summary>
            Initializes the <see cref="T:IDS.Data.SqlCommandSet"/> class.
            </summary>
        </member>
        <member name="M:IDS.Data.SqlCommandSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.SqlCommandSet"/> class.
            </summary>
        </member>
        <member name="M:IDS.Data.SqlCommandSet.Append(System.Data.SqlClient.SqlCommand)">
            <summary>
            Appends a command to the batch
            </summary>
            <param name="command"></param>
        </member>
        <member name="P:IDS.Data.SqlCommandSet.BatchCommand">
            <summary>
            Return the batch command to be executed
            </summary>
        </member>
        <member name="P:IDS.Data.SqlCommandSet.CommandCount">
            <summary>
            Gets the number of commands in the set.
            </summary>
            <value>The number of commands in the set.</value>
        </member>
        <member name="M:IDS.Data.SqlCommandSet.ExecuteNonQuery">
            <summary>
            Executes the batch
            </summary>
            <returns>
            Returns the total number of affected rows in all queries
            </returns>
        </member>
        <member name="P:IDS.Data.SqlCommandSet.Connection">
            <summary>
            Gets or sets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:IDS.Data.SqlCommandSet.Transaction">
            <summary>
            Sets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="M:IDS.Data.SqlCommandSet.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:IDS.Data.SqlConnectionService">
            <summary>
            The SqlConnectionService allows an implementer to configure one connection string
            and share that connection string with an module that supports the SqlConnectionService.
            </summary>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.#ctor">
            <summary>
            Create an instance of the SqlConnectionService class.
            </summary>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.#ctor(System.String)">
            <summary>
            Create an instance of the SqlConnectionService class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.#ctor(IDS.Data.ConnectionServiceSettings)">
            <summary>
            Create an instance of the SqlConnectionService class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.SqlConnectionService"/> class.
            </summary>
            <param name="node">The XML configuration node.</param>
            <exception cref="T:System.ArgumentNullException">The ArgumentNullException is thrown if the node argument is null.</exception>
        </member>
        <member name="P:IDS.Data.SqlConnectionService.StoredProcedureToExecute">
            <summary>
            Gets or sets the stored procedure to execute.
            </summary>
            <value>The stored procedure to execute.</value>
        </member>
        <member name="P:IDS.Data.SqlConnectionService.ConnectionStringBuilder">
            <summary>
            Gets the connection string builder.
            </summary>
            <value>The connection string builder.</value>
        </member>
        <member name="P:IDS.Data.SqlConnectionService.MaskedConnectionString">
            <summary>
            Gets the connection string with the sensitive information masked (currently just the password is masked)
            </summary>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.GetOpenConnection">
            <summary>
            Get an open connection to the configured database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.GetOpenConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously get an open connection to the configured database.
            </summary>
            <returns>
            A task that represents the asynchronous operation. Its result is the opened connection.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.CreateSqlCommand(System.Data.CommandType,System.String)">
            <summary>
            Creates the requested SqlCommand object.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandText">Either the stored procedure name or the query.</param>
            <returns>The requested SqlCommand object.</returns>
            <remarks>All other overloads call this version to do the actual work.</remarks>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.CreateSqlCommand(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creates the requested SqlCommand object.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandText">Either the stored procedure name or the query.</param>
            <param name="commandParameters">An array of parameters for the command.</param>
            <returns>The requested SqlCommand object.</returns>
            <remarks>All other overloads call this version to do the actual work.</remarks>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.CreateSqlCommand(System.String)">
            <summary>
            Creates the requested SqlCommand object with a default command type of StoredProcedure.
            </summary>
            <param name="storedProcedureName">The stored procedure name.</param>
            <returns>The requested SqlCommand object.</returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.CreateSqlCommand(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creates the requested SqlCommand object with a default command type of StoredProcedure.
            </summary>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="commandParameters">An array of parameters for the command.</param>
            <returns>The requested SqlCommand object.</returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a connection and returns the resulting DataSet.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>
            The value in the first column of the first row.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes a command on a connection and returns the resulting DataSet.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>
            The value in the first column of the first row.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteDataSet(System.String,System.Boolean,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure on a connection and returns the resulting DataSet.
            </summary>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>
            The value in the first column of the first row.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteDataSet(System.String,System.Boolean)">
            <summary>
            Executes a stored procedure on a connection and returns the resulting DataSet.
            </summary>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>
            The value in the first column of the first row.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteList``1(System.Converter{System.Data.SqlClient.SqlDataReader,``0},System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a connection and returns the resulting data as a <see cref="T:System.Collections.Generic.List`1" />.
            </summary>
            <typeparam name="T">The type of objects in the resulting list.</typeparam>
            <param name="converter">A method that converts each row in the result set to an object of type <typeparamref name="T" />.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The resulting list of converted objects.</returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteListAsync``1(System.Converter{System.Data.SqlClient.SqlDataReader,``0},System.Data.CommandType,System.String,System.Threading.CancellationToken,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Asynchronously executes a command on a connection and returns the resulting data as a <see cref="T:System.Collections.Generic.List`1" />.
            </summary>
            <typeparam name="T">The type of objects in the resulting list.</typeparam>
            <param name="converter">A method that converts each row in the result set to an object of type <typeparamref name="T" />.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>A task that represents the asynchronous operation. Its result is the list of converted objects.</returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteObject``1(System.Converter{System.Data.SqlClient.SqlDataReader,``0},System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a connection and returns the resulting data as a single object.
            </summary>
            <typeparam name="T">The type of the resulting object.</typeparam>
            <param name="converter">A method that converts the first row in the result set to an object of type <typeparamref name="T" />.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The resulting object.</returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteObjectAsync``1(System.Converter{System.Data.SqlClient.SqlDataReader,``0},System.Data.CommandType,System.String,System.Threading.CancellationToken,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Asynchronously executes a command on a connection and returns the resulting data as a single object.
            </summary>
            <typeparam name="T">The type of the resulting object.</typeparam>
            <param name="converter">A method that converts the first row in the result set to an object of type <typeparamref name="T" />.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>A task that represents the asynchronous operation. Its result is the converted object.</returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.FillDataSet(System.Data.CommandType,System.String,System.Data.DataSet,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a connection and fills the specified DataSet.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="srcTable">The name of the data source table.</param>
            <param name="commandParameters">The parameters for the command.</param>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.FillDataSet(System.Data.CommandType,System.String,System.Data.DataSet,System.String)">
            <summary>
            Executes a command on a connection and fills the specified DataSet.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="srcTable">The name of the data source table.</param>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.FillDataSet(System.String,System.Boolean,System.Data.DataSet,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure on a connection and fills the specified DataSet.
            </summary>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="srcTable">The name of the data source table.</param>
            <param name="commandParameters">The parameters for the command.</param>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.FillDataSet(System.String,System.Boolean,System.Data.DataSet,System.String)">
            <summary>
            Executes a stored procedure on a connection and fills the specified DataSet.
            </summary>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="srcTable">The name of the data source table.</param>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a non-query command on a connection and returns the rows affected.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes a non-query command on a connection and returns the rows affected.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteNonQuery(System.String,System.Boolean,IDS.Data.SqlHelper.ReturnType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a non-query stored procedure on a connection and returns either the rows
            affected or the stored procedure's return value.
            </summary>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="returnChoice">Whether to return the number of rows affected or
            the stored procedure's return value.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>
            The number of rows affected or the stored procedure's return value.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteNonQuery(System.String,System.Boolean,IDS.Data.SqlHelper.ReturnType)">
            <summary>
            Executes a non-query stored procedure on a connection and returns either the rows
            affected or the stored procedure's return value.
            </summary>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="returnChoice">Whether to return the number of rows affected or
            the stored procedure's return value.</param>
            <returns>
            The number of rows affected or the stored procedure's return value.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteNonQueryAsync(System.Data.CommandType,System.String,System.Threading.CancellationToken,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Asynchronously executes a non-query command on a connection and returns the rows affected.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>A task that represents the asynchronous operation. Its result is the number of rows affected.</returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteReader(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a connection and returns the resulting data reader.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes a command on a connection and returns the resulting data reader.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure on a connection and returns the resulting data reader.
            </summary>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteReader(System.String)">
            <summary>
            Executes a stored procedure on a connection and returns the resulting data reader.
            </summary>
            <param name="storedProcedureName">The stored procedure name.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteReaderAsync(System.Data.CommandType,System.String,System.Threading.CancellationToken,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Asynchronously executes a command on a connection and returns the resulting data reader.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>A task that represents the asynchronous operation. Its result is the data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteScalar(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a connection and returns the value in the first column
            of the first row.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>
            The value in the first column of the first row.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes a command on a connection and returns the value in the first column
            of the first row.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>
            The value in the first column of the first row.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteScalar(System.String,System.Boolean,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a connection and returns the value in the first column
            of the first row.
            </summary>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>
            The value in the first column of the first row.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteScalar(System.String,System.Boolean)">
            <summary>
            Executes a command on a connection and returns the value in the first column
            of the first row.
            </summary>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>
            The value in the first column of the first row.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteXmlReader(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a connection and returns the resultset as XML in an
            XmlReader object.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>
            The resultset as XML in an XmlReader object.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteXmlReader(System.Data.CommandType,System.String)">
            <summary>
            Executes a command on a connection and returns the resultset as XML in an
            XmlReader object.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>
            The resultset as XML in an XmlReader object.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteXmlReader(System.String,System.Boolean,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure on a connection and returns the resultset as XML in an
            XmlReader object.
            </summary>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>
            The resultset as XML in an XmlReader object.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteXmlReader(System.String,System.Boolean)">
            <summary>
            Executes a stored procedure on a connection and returns the resultset as XML in an
            XmlReader object.
            </summary>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>
            The resultset as XML in an XmlReader object.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ConvertDBNullToValue(System.Object,System.Object)">
            <summary>
            If the value parameter is not DBNull.Value, returns the value parameter. If 
            the value parameter is DBNull.Value, returns the nullValue parameter.
            </summary>
            <remarks>
            This method can be used to ensure that a database column that can contain
            nulls never returns DBNull.Value. By passing the database column value to
            this method as the value parameter, and providing a nullValue parameter value,
            this method will ensure that DBNull.Value is never returned.
            </remarks>
            <example>
            Int32 countryID = SqlHelper.ConvertDBNullToValue(myDataReader["CountryID"], 0);
            DateTime effective = SqlHelper.ConvertDBNullToValue(myDataRow["EffectiveDateTime"], DateTime.MinValue);
            bool ok = SqlHelper.ConvertDBNullToValue(myDataRow["OKFlag"], false);
            string help = SqlHelper.ConvertDBNullToValue(myDataReader[2], string.Empty);
            </example>
            <param name="value">
            The value to test for DBNull.Value equavalency. This value is usually the 
            data stored in a datareader column or datacolumn (e.g., myDataReader[i] or
            myDataRow[i]). Cannot be null.
            </param>
            <param name="nullValue">
            The value to return if the value parameter is DBNull.Value.
            </param>
            <returns>
            If the value parameter is not DBNull.Value, returns the value parameter. If 
            the value parameter is DBNull.Value, returns the nullValue parameter.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteTransaction(System.Action{System.Data.SqlClient.SqlTransaction})">
            <summary>
            Executes a specified method within a SQL transaction.
            The method takes a <see cref="T:System.Data.SqlClient.SqlTransaction" /> argument and
            does not return a value.
            </summary>
            <param name="action">
            The method to execute within a SQL transaction.
            </param>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteTransaction``1(System.Func{System.Data.SqlClient.SqlTransaction,``0})">
            <summary>
            Executes a specified method within a SQL transaction.
            The method takes a <see cref="T:System.Data.SqlClient.SqlTransaction" /> argument and
            returns a value.
            </summary>
            <typeparam name="TResult">
            The return type of the <paramref name="function" />.
            </typeparam>
            <param name="function">
            The method to execute within a SQL transaction.
            </param>
            <returns>
            The value returned by the <paramref name="function" />.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.ExecuteTransactionAsync(System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a specified method within a SQL transaction.
            The method takes a <see cref="T:System.Data.SqlClient.SqlTransaction" /> argument and
            does not return a value.
            </summary>
            <param name="action">
            The method to execute within a SQL transaction.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the operation.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlConnectionService.CheckHealth">
            <summary>
            The CheckHealth method is responsible for validating the health of a SignalPoint
            service.
            </summary>
            <returns>
            Returns a LogEntryCollection that can contain a combination of information, warnings
            and exceptions.
            </returns>
            <remarks>
            The CheckHealth method is responsible for validating the health of a SignalPoint
            service. The method returns a LogEntryCollection which contains a collection of log entries.
            The LogEntryCollection can contain zero LogEntries but it must never be null. The CheckHealth()
            method will populate this collection with log entries. These entries can be informational,
            warnings, exceptions or other types of information. The SignalPoint module will interate
            through this collection and display the log entries on its monitoring page. The SignalPoint
            module will be configured to determine the minimum acceptable severity (IDS.Logging.LogSeverity)
            and possibly the minimum display severity. For example, if the minimum acceptable severity was configured as Exception, severities of Warnings, Information, Debug and Unspecified would be considered acceptable and would not cause SignalPoint to signal a failure. Only severities of Exception and Critical would cause a failure. This same logic could be used to determine what log entries to display on the SignalPoint monitoring page.
            </remarks>
        </member>
        <member name="T:IDS.Data.SqlHelperException">
            <summary>
            The Exception class for general exceptions thrown by the SqlHelper class.
            </summary>
        </member>
        <member name="M:IDS.Data.SqlHelperException.#ctor">
            <summary>
            An empty default constructor always calls the base default constructor.
            </summary>
        </member>
        <member name="M:IDS.Data.SqlHelperException.#ctor(System.String)">
            <summary>
            The constructor that creates an exception and sets the exception message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IDS.Data.SqlHelperException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:IDS.Data.SqlHelperException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:IDS.Data.SqlHelperNonZeroReturnValueException">
            <summary>
            The Exception class for stored procedures whose return values are not zero. This exception is optional, and is only thrown when specifically requested by the caller.
            </summary>
        </member>
        <member name="M:IDS.Data.SqlHelperNonZeroReturnValueException.#ctor">
            <summary>
            An empty default constructor always calls the base default constructor.
            </summary>
        </member>
        <member name="M:IDS.Data.SqlHelperNonZeroReturnValueException.#ctor(System.String)">
            <summary>
            The constructor that creates an exception and sets the exception message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IDS.Data.SqlHelperNonZeroReturnValueException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:IDS.Data.SqlHelperNonZeroReturnValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:IDS.Data.SqlHelper">
            <summary>
            Provides helper functions for working with the System.Data.SqlClient namespace classes.
            </summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.SELECTION_FAILED">
            <summary>
            Error selecting from '[table name]' table
            </summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.INSERT_FAILED">
            <summary>
            Error inserting into '[table name]' table.
            </summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.UPDATE_FAILED">
            <summary>
            Error updating '[table name]' table.
            </summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.DELETE_FAILED">
            <summary>
            Error deleting from '[table name]' table.
            </summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.PARENT_RECORD_DOES_NOT_EXIST">
            <summary>
            Parent record not exists in '[table name]' table.
            </summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.RECORD_DOES_NOT_EXIST_OR_OUT_OF_DATE">
            <summary>
            Record does not exists or was updated by other process in '[table name]' table.
            </summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.CHILD_RECORDS_EXIST">
            <summary>
            Children record exists in '[table name]' table.
            </summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.INVALID_ARGUMENT">
            <summary>
            Input parameter error.  '[table name]'
            </summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.DUPLICATE_KEY_FOUND">
            <summary>
            Duplicate key(s) found in '[table name]' table.
            </summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.CONCURRENT_UPDATE">
            <summary>
            Concurrent update of '[table name]' table.
            </summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.SYSTEM_ERROR">
            <summary>
            System Error EXEC sp_addmessage  '[table name]'.
            </summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.RECORD_LOCKED">
            <summary>
            '[table name]' record is locked for processing.
            </summary>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlParameter(System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            Creates the requested SqlParameter object.  This overloaded version can create
            any SqlParameter object since it contains all (commonly used) parameters.
            </summary>
            <remarks>All other overloads call this version to do the actual work.</remarks>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">The SQL Server parameter type.</param>
            <param name="size">The size of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <param name="parmValue">The value of the parameter.</param>
            <returns>The requested SqlParameter object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlParameter(System.String,System.Data.SqlDbType,System.Data.ParameterDirection,System.Object)">
            <summary>
            Creates the requested SqlParameter object, using a default size of zero.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">The SQL Server parameter type.</param>
            <param name="direction">The direction of the parameter.</param>
            <param name="parmValue">The value of the parameter.</param>
            <returns>The requested SqlParameter object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            Creates the requested SqlParameter object, using a default direction of 
            ParameterDirection.Input.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">The SQL Server parameter type.</param>
            <param name="size">The size of the parameter.</param>
            <param name="parmValue">The value of the parameter.</param>
            <returns>The requested SqlParameter object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlParameter(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            Creates the requested SqlParameter object, using a default size of zero and a 
            default direction of ParameterDirection.Input.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">The SQL Server parameter type.</param>
            <param name="parmValue">The value of the parameter.</param>
            <returns>The requested SqlParameter object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlOutParameter(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            Creates the requested SqlParameter object with a default direction of 
            ParameterDirection.Output.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">The SQL Server parameter type.</param>
            <param name="size">The size of the parameter.</param>
            <returns>The requested SqlParameter object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlOutParameter(System.String,System.Data.SqlDbType)">
            <summary>
            Creates the requested SqlParameter object with a default size of zero and a 
            direction of ParameterDirection.Output.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">The SQL Server parameter type.</param>
            <returns>The requested SqlParameter object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlReturnValueParameter(System.String,System.Data.SqlDbType)">
            <summary>
            Creates the requested SqlParameter object with a default size of zero and a 
            direction of ParameterDirection.ReturnValue.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">The SQL Server parameter type.</param>
            <returns>The requested SqlParameter object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlReturnValueParameter(System.String)">
            <summary>
            Creates the requested SqlParameter object with a default size of zero and a 
            default SqlDbType of SqlDbType.Int and direction of ParameterDirection.ReturnValue.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <returns>The requested SqlParameter object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlReturnValueParameter">
            <summary>
            Creates the requested SqlParameter object with a default size of zero and a 
            default SqlDbType of SqlDbType.Int and direction of ParameterDirection.ReturnValue
            and a default name of <c>ReturnValue</c>.
            </summary>
            <returns>The requested SqlParameter object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.AttachParametersToCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach an array of SqlParameters to a SqlCommand.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlCommand(System.Data.SqlClient.SqlConnection@,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creates the requested SqlCommand object.
            </summary>
            <remarks>All other overloads call this version to do the actual work.</remarks>
            <param name="connection">The connection object for the command.</param>
            <param name="transaction">An active transaction created by a call to 
            SqlConnection.BeginTransaction(), or null if this command does not participtate
            in a transaction.</param>
            <param name="commandType">The type of command.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">An array of parameters to be used by the command.</param>
            <returns>A prepared SqlCommand object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlCommand(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Creates the requested SqlCommand object.
            </summary>
            <param name="connection">The connection to use for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">Either the stored procedure name or the query.</param>
            <returns>The requested SqlCommand object.</returns>
            <remarks>All other overloads call this version to do the actual work.</remarks>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlCommand(System.String,System.Data.CommandType,System.String)">
            <summary>
            Creates the requested SqlCommand object with a default command type of StoredProcedure.
            </summary>
            <param name="connectionString">The connection string to use for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">Either the stored procedure name or the query.</param>
            <returns>The requested SqlCommand object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlCommand(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creates the requested SqlCommand object.
            </summary>
            <param name="connection">The connection to use for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">Either the stored procedure name or the query.</param>
            <param name="commandParameters">An array of parameters for the command.</param>
            <returns>The requested SqlCommand object.</returns>
            <remarks>All other overloads call this version to do the actual work.</remarks>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlCommand(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creates the requested SqlCommand object.
            </summary>
            <param name="connectionString">The connection string to use for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">Either the stored procedure name or the query.</param>
            <param name="commandParameters">An array of parameters for the command.</param>
            <returns>The requested SqlCommand object.</returns>
            <remarks>All other overloads call this version to do the actual work.</remarks>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlCommand(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Creates the requested SqlCommand object with a default command type of StoredProcedure.
            </summary>
            <param name="connection">The connection to use for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <returns>The requested SqlCommand object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlCommand(System.String,System.String)">
            <summary>
            Creates the requested SqlCommand object with a default command type of StoredProcedure.
            </summary>
            <param name="connectionString">The connection string to use for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <returns>The requested SqlCommand object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlCommand(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creates the requested SqlCommand object with a default command type of StoredProcedure.
            </summary>
            <param name="connection">The connection to use for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="commandParameters">An array of parameters for the command.</param>
            <returns>The requested SqlCommand object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlCommand(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creates the requested SqlCommand object with a default command type of StoredProcedure.
            </summary>
            <param name="connectionString">The connection string to use for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="commandParameters">An array of parameters for the command.</param>
            <returns>The requested SqlCommand object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlCommand(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Creates the requested SqlCommand object.
            </summary>
            <param name="transaction">The transaction to use for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">Either the stored procedure name or the query.</param>
            <returns>The requested SqlCommand object.</returns>
            <remarks>All other overloads call this version to do the actual work.</remarks>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlCommand(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creates the requested SqlCommand object.
            </summary>
            <param name="transaction">The transaction to use for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">Either the stored procedure name or the query.</param>
            <param name="commandParameters">An array of parameters for the command.</param>
            <returns>The requested SqlCommand object.</returns>
            <remarks>All other overloads call this version to do the actual work.</remarks>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlCommand(System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            Creates the requested SqlCommand object with a default command type of StoredProcedure.
            </summary>
            <param name="transaction">The transaction to use for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <returns>The requested SqlCommand object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.CreateSqlCommand(System.Data.SqlClient.SqlTransaction,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creates the requested SqlCommand object with a default command type of StoredProcedure.
            </summary>
            <param name="transaction">The transaction to use for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="commandParameters">An array of parameters for the command.</param>
            <returns>The requested SqlCommand object.</returns>
        </member>
        <member name="P:IDS.Data.SqlHelper.CommandTimeOut">
            <summary>
            Gets and sets the Command TimeOut (in seconds) that CreateSqlCommand assigns to the command.
            </summary>
        </member>
        <member name="T:IDS.Data.SqlHelper.ExecuteType">
            <summary>
            This enum indicates which specific SqlCommand.ExecuteXXX method we should call.
            </summary>
        </member>
        <member name="M:IDS.Data.SqlHelper.Execute(IDS.Data.SqlHelper.ExecuteType,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],IDS.Data.SqlHelper.SqlConnectionOwnership,IDS.Data.SqlHelper.ReturnType,System.Data.DataSet,System.Boolean,System.String)">
            <summary>
            This generic Execute method calls the appropriate SqlCommand.ExecuteXXX method.
            </summary>
            <param name="executeType">Which SqlCommand.ExecuteXXX method to call.</param>
            <param name="connection">The connection object for the command.</param>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <param name="connectionOwnership">An enum that indicates whether we
            created the SqlConnection object or the caller did; if we did, we will
            automatically close it when the data reader is closed.  Not required unless
            executeType == ExecuteType.Reader.</param>
            <param name="returnChoice">An enum that indicates for ExecuteNonQuery whether
            we should return the number of rows affected or the stored procedure's return
            value.</param>
            <param name="dataSet">The specified DataSet to fill.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="srcTable"></param>
            <returns>The appropriate object returned by SqlCommand.ExecuteXXX.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteNonQueryAsync(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation. Its result is the number of rows affected.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteReaderAsync(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation. Its result is the data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean)">
            <summary>
            Executes a command on a connection and returns the resulting DataSet.
            </summary>
            <remarks>
            All other overloads call this private version to do the actual work.  This method
            delegates to the generic Execute method to do the actual work.
            </remarks>
            <param name="connection">The connection object for the command.</param>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>The resulting DataSet.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a connection and returns the resulting DataSet.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Executes a command on a connection and returns the resulting DataSet.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure on a connection and returns the resulting DataSet.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Executes a stored procedure on a connection and returns the resulting DataSet.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command using a connection string and returns the resulting DataSet.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String)">
            <summary>
            Executes a command using a connection string and returns the resulting DataSet.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteDataSet(System.String,System.String,System.Boolean,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure using a connection string and returns the resulting DataSet.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteDataSet(System.String,System.String,System.Boolean)">
            <summary>
            Executes a stored procedure using a connection string and returns the resulting DataSet.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteDataSet(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a transacted connection and returns the resulting DataSet.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteDataSet(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Executes a command on a transacted connection and returns the resulting DataSet.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteDataSet(System.Data.SqlClient.SqlTransaction,System.String,System.Boolean,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure on a transacted connection and returns the resulting DataSet.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteDataSet(System.Data.SqlClient.SqlTransaction,System.String,System.Boolean)">
            <summary>
            Executes a stored procedure on a transacted connection and returns the resulting DataSet.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.FillDataSet(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.Data.SqlClient.SqlParameter[],System.Boolean,System.String)">
            <summary>
            Executes a command on a connection and fills the specified DataSet.
            </summary>
            <remarks>
            All other overloads call this private version to do the actual work.  This method
            delegates to the generic Execute method to do the actual work.
            </remarks>
            <param name="connection">The connection object for the command.</param>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="srcTable">The name of the data source table.</param>
        </member>
        <member name="M:IDS.Data.SqlHelper.FillDataSet(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a connection and fills the specified DataSet.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="srcTable">The name of the data source table.</param>
            <param name="commandParameters">The parameters for the command.</param>
        </member>
        <member name="M:IDS.Data.SqlHelper.FillDataSet(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String)">
            <summary>
            Executes a command on a connection and fills the specified DataSet.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="srcTable">The name of the data source table.</param>
        </member>
        <member name="M:IDS.Data.SqlHelper.FillDataSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean,System.Data.DataSet,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure on a connection and fills the specified DataSet.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="srcTable">The name of the data source table.</param>
            <param name="commandParameters">The parameters for the command.</param>
        </member>
        <member name="M:IDS.Data.SqlHelper.FillDataSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean,System.Data.DataSet,System.String)">
            <summary>
            Executes a stored procedure on a connection and fills the specified DataSet.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="srcTable">The name of the data source table.</param>
        </member>
        <member name="M:IDS.Data.SqlHelper.FillDataSet(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command using a connection string and fills the specified DataSet.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="srcTable">The name of the data source table.</param>
            <param name="commandParameters">The parameters for the command.</param>
        </member>
        <member name="M:IDS.Data.SqlHelper.FillDataSet(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String)">
            <summary>
            Executes a command using a connection string and fills the specified DataSet.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="srcTable">The name of the data source table.</param>
        </member>
        <member name="M:IDS.Data.SqlHelper.FillDataSet(System.String,System.String,System.Boolean,System.Data.DataSet,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure using a connection string and fills the specified DataSet.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="srcTable">The name of the data source table.</param>
            <param name="commandParameters">The parameters for the command.</param>
        </member>
        <member name="M:IDS.Data.SqlHelper.FillDataSet(System.String,System.String,System.Boolean,System.Data.DataSet,System.String)">
            <summary>
            Executes a stored procedure using a connection string and fills the specified DataSet.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="srcTable">The name of the data source table.</param>
        </member>
        <member name="M:IDS.Data.SqlHelper.FillDataSet(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a transacted connection and fills the specified DataSet.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="srcTable">The name of the data source table.</param>
            <param name="commandParameters">The parameters for the command.</param>
        </member>
        <member name="M:IDS.Data.SqlHelper.FillDataSet(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String)">
            <summary>
            Executes a command on a transacted connection and fills the specified DataSet.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="srcTable">The name of the data source table.</param>
        </member>
        <member name="M:IDS.Data.SqlHelper.FillDataSet(System.Data.SqlClient.SqlTransaction,System.String,System.Boolean,System.Data.DataSet,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure on a transacted connection and fills the specified DataSet.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="srcTable">The name of the data source table.</param>
            <param name="commandParameters">The parameters for the command.</param>
        </member>
        <member name="M:IDS.Data.SqlHelper.FillDataSet(System.Data.SqlClient.SqlTransaction,System.String,System.Boolean,System.Data.DataSet,System.String)">
            <summary>
            Executes a stored procedure on a transacted connection and fills the specified DataSet.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="dataSet">The strongly-typed dataset to fill.</param>
            <param name="srcTable">The name of the data source table.</param>
        </member>
        <member name="T:IDS.Data.SqlHelper.ReturnType">
            <summary>
            This enum is used to indicate whether the ExecuteNonQuery should return the
            number of rows affected or the stored procedure return value. 
            </summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.ReturnType.RowsAffected">
            <summary>ExecuteNonQuery will return the rows affected.</summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.ReturnType.StoredProcedureReturnValue">
            <summary>ExecuteNonQuery will return the stored procedure's return value.</summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.ReturnType.NotRequired">
            <summary>The ReturnType enum is only required for ExecuteNonQuery.</summary>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,IDS.Data.SqlHelper.ReturnType,System.Data.SqlClient.SqlParameter[],System.Boolean)">
            <summary>
            Executes a non-query command on a connection and returns either the rows
            affected or the stored procedure's return value.
            </summary>
            <remarks>
            All other overloads call this private version to do the actual work.  This method
            delegates to the generic Execute method to do the actual work.
            </remarks>
            <param name="connection">The connection object for the command.</param>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="returnChoice">Whether to return the number of rows affected or
            the stored procedure's return value.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>The number of rows affected or the stored procedure's return value.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a non-query command on a connection and returns the rows affected.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Executes a non-query command on a connection and returns the rows affected.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Boolean,IDS.Data.SqlHelper.ReturnType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a non-query stored procedure on a connection and returns either the rows
            affected or the stored procedure's return value.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="returnChoice">Whether to return the number of rows affected or
            the stored procedure's return value.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The number of rows affected or the stored procedure's return value.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Boolean,IDS.Data.SqlHelper.ReturnType)">
            <summary>
            Executes a non-query stored procedure on a connection and returns either the rows
            affected or the stored procedure's return value.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="returnChoice">Whether to return the number of rows affected or
            the stored procedure's return value.</param>
            <returns>The number of rows affected or the stored procedure's return value.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a non-query command on using a connection string and returns the rows affected.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Executes a non-query command using a connection string and returns the rows affected.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Boolean,IDS.Data.SqlHelper.ReturnType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a non-query stored procedure using a connection string and returns 
            either the rows affected or the stored procedure's return value.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="returnChoice">Whether to return the number of rows affected or
            the stored procedure's return value.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The number of rows affected or the stored procedure's return value.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Boolean,IDS.Data.SqlHelper.ReturnType)">
            <summary>
            Executes a non-query stored procedure using a connection string and returns 
            either the rows affected or the stored procedure's return value.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="returnChoice">Whether to return the number of rows affected or
            the stored procedure's return value.</param>
            <returns>The number of rows affected or the stored procedure's return value.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a non-query command on a transacted connection and returns the rows affected.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Executes a non-query command on a transacted connection and returns the rows affected.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Boolean,IDS.Data.SqlHelper.ReturnType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a non-query stored procedure on a transacted connection and returns 
            either the rows affected or the stored procedure's return value.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="returnChoice">Whether to return the number of rows affected or
            the stored procedure's return value.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The number of rows affected or the stored procedure's return value.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Boolean,IDS.Data.SqlHelper.ReturnType)">
            <summary>
            Executes a non-query stored procedure on a transacted connection and returns 
            either the rows affected or the stored procedure's return value.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="returnChoice">Whether to return the number of rows affected or
            the stored procedure's return value.</param>
            <returns>The number of rows affected or the stored procedure's return value.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteNonQueryAsync(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Threading.CancellationToken,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Asynchronously executes a non-query command on a connection and returns the rows affected.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>A task that represents the asynchronous operation. Its result is the number of rows affected.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteNonQueryAsync(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Threading.CancellationToken,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Asynchronously executes a non-query command on a transacted connection and returns the rows affected.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>A task that represents the asynchronous operation. Its result is the number of rows affected.</returns>
        </member>
        <member name="T:IDS.Data.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller,
            or created by us, so that we can set the appropriate CommandBehavior when 
            calling ExecuteReader().
            </summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by us.</summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller.</summary>
        </member>
        <member name="F:IDS.Data.SqlHelper.SqlConnectionOwnership.NotRequired">
            <summary>Ownership information is only required for ExecuteReader.</summary>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],IDS.Data.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Executes a command on a connection and returns the resulting data reader.
            </summary>
            <remarks>
            All other overloads call this private version to do the actual work.  This method
            delegates to the generic Execute method to do the actual work.
            </remarks>
            <param name="connection">The connection object for the command.</param>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <param name="connectionOwnership">An enum that indicates whether we
            created the SqlConnection object or the caller did; if we did, we will
            automatically close it when the data reader is closed.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a connection and returns the resulting data reader.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Executes a command on a connection and returns the resulting data reader.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure on a connection and returns the resulting data reader.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Executes a stored procedure on a connection and returns the resulting data reader.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command using a connection string and returns the resulting data reader.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Executes a command using a connection string and returns the resulting data reader.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteReader(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure using a connection string and returns the resulting data reader.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteReader(System.String,System.String)">
            <summary>
            Executes a stored procedure using a connection string and returns the resulting data reader.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a transacted connection and returns the resulting data reader.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Executes a command on a transacted connection and returns the resulting data reader.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure on a transacted connection and returns the resulting data reader.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            Executes a stored procedure on a transacted connection and returns the resulting data reader.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <returns>The resulting data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteReaderAsync(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Threading.CancellationToken,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Asynchronously executes a command on a connection and returns the resulting data reader.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>A task that represents the asynchronous operation. Its result is the data reader.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean)">
            <summary>
            Executes a command on a connection and returns the value in the first column
            of the first row.
            </summary>
            <remarks>
            All other overloads call this private version to do the actual work.  This method
            delegates to the generic Execute method to do the actual work.
            </remarks>
            <param name="connection">The connection object for the command.</param>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a connection and returns the value in the first column
            of the first row.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Executes a command on a connection and returns the value in the first column
            of the first row.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Boolean,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a connection and returns the value in the first column
            of the first row.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Executes a command on a connection and returns the value in the first column
            of the first row.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command using a connection string and returns the value in the first 
            column of the first row.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Executes a command using a connection string and returns the value in the first 
            column of the first row.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteScalar(System.String,System.String,System.Boolean,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure using a connection string and returns the value in 
            the first column of the first row.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteScalar(System.String,System.String,System.Boolean)">
            <summary>
            Executes a stored procedure using a connection string and returns the value in 
            the first column of the first row.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a transacted connection and returns the value in the 
            first column of the first row.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Executes a command on a transacted connection and returns the value in the 
            first column of the first row.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Boolean,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure on a transacted connection and returns the value 
            in the first column of the first row.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Boolean)">
            <summary>
            Executes a stored procedure on a transacted connection and returns the value 
            in the first column of the first row.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>The value in the first column of the first row.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean)">
            <summary>
            Executes a command on a connection and returns the resultset as XML in an 
            XmlReader object.
            </summary>
            <remarks>
            All other overloads call this private version to do the actual work.  This method
            delegates to the generic Execute method to do the actual work.
            </remarks>
            <param name="connection">The connection object for the command.</param>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>The resultset as XML in an XmlReader object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a connection and returns the resultset as XML in an 
            XmlReader object.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The resultset as XML in an XmlReader object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Executes a command on a connection and returns the resultset as XML in an 
            XmlReader object.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The resultset as XML in an XmlReader object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Boolean,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure on a connection and returns the resultset as XML in an 
            XmlReader object.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The resultset as XML in an XmlReader object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Executes a stored procedure on a connection and returns the resultset as XML in an 
            XmlReader object.
            </summary>
            <param name="connection">The connection object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>The resultset as XML in an XmlReader object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteXmlReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command using a connection string and returns the resultset as XML in an 
            XmlReader object.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The resultset as XML in an XmlReader object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteXmlReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Executes a command using a connection string and returns the resultset as XML in an 
            XmlReader object.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The resultset as XML in an XmlReader object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteXmlReader(System.String,System.String,System.Boolean,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure using a connection string and returns the resultset 
            as XML in an XmlReader object.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The resultset as XML in an XmlReader object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteXmlReader(System.String,System.String,System.Boolean)">
            <summary>
            Executes a stored procedure using a connection string and returns the resultset 
            as XML in an XmlReader object.
            </summary>
            <param name="connectionString">The connection string for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>The resultset as XML in an XmlReader object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command on a transacted connection and returns the resultset as XML in an 
            XmlReader object.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The resultset as XML in an XmlReader object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Executes a command on a transacted connection and returns the resultset as XML in an 
            XmlReader object.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="commandType">The command type.</param>
            <param name="commandText">The stored procedure name or the query.</param>
            <returns>The resultset as XML in an XmlReader object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Boolean,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure on a transacted connection and returns the resultset 
            as XML in an XmlReader object.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <param name="commandParameters">The parameters for the command.</param>
            <returns>The resultset as XML in an XmlReader object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Boolean)">
            <summary>
            Executes a stored procedure on a transacted connection and returns the resultset 
            as XML in an XmlReader object.
            </summary>
            <param name="transaction">The transaction object for the command.</param>
            <param name="storedProcedureName">The stored procedure name.</param>
            <param name="throwExceptionOnNonZeroReturnValue">True if an exception should be thrown
            if the stored procedure has a non-zero return value.</param>
            <returns>The resultset as XML in an XmlReader object.</returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.ConvertDBNullToValue(System.Object,System.Object)">
            <summary>
            If the value parameter is not DBNull.Value, returns the value parameter. If 
            the value parameter is DBNull.Value, returns the nullValue parameter.
            </summary>
            <remarks>
            This method can be used to ensure that a database column that can contain
            nulls never returns DBNull.Value. By passing the database column value to
            this method as the value parameter, and providing a nullValue parameter value,
            this method will ensure that DBNull.Value is never returned.
            </remarks>
            <example>
            Int32 countryID = SqlHelper.ConvertDBNullToValue(myDataReader["CountryID"], 0);
            DateTime effective = SqlHelper.ConvertDBNullToValue(myDataRow["EffectiveDateTime"], DateTime.MinValue);
            bool ok = SqlHelper.ConvertDBNullToValue(myDataRow["OKFlag"], false);
            string help = SqlHelper.ConvertDBNullToValue(myDataReader[2], string.Empty);
            </example>
            <param name="value">
            The value to test for DBNull.Value equavalency. This value is usually the 
            data stored in a datareader column or datacolumn (e.g., myDataReader[i] or
            myDataRow[i]). Cannot be null.
            </param>
            <param name="nullValue">
            The value to return if the value parameter is DBNull.Value.
            </param>
            <returns>
            If the value parameter is not DBNull.Value, returns the value parameter. If 
            the value parameter is DBNull.Value, returns the nullValue parameter.
            </returns>
        </member>
        <member name="M:IDS.Data.SqlHelper.DBNullToNull``1(System.Object)">
            <summary>
            Converts value read from db to actual value or null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Data.SqlListOptionDataProvider">
            <summary>
             SqlListOptionDataProvider Class
            </summary>
        </member>
        <member name="M:IDS.Data.SqlListOptionDataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.SqlListOptionDataProvider"/> class.
            </summary>
        </member>
        <member name="P:IDS.Data.SqlListOptionDataProvider.ConnectionService">
            <summary>
            Gets or sets the connection service.
            </summary>
            <value>The connection service.</value>
        </member>
        <member name="P:IDS.Data.SqlListOptionDataProvider.ListOptionGroup">
            <summary>
            Gets or sets the list option group name
            </summary>
            <value>The list option group name.</value>
        </member>
        <member name="M:IDS.Data.SqlListOptionDataProvider.DoSaveListOption(IDS.Data.ListOption,System.String)">
            <summary>
            This method signature will save a list option to the database and if the option is a new option, update the option.Id property 
            with the new database id that is generated.
            </summary>
            <param name="option">The option object that will be saved to the database</param>
            <param name="userId">The user that is saving the list option</param>
        </member>
        <member name="M:IDS.Data.SqlListOptionDataProvider.SaveListOption(IDS.Data.ListOption,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            This method signature will save a list option to the database and if the option is a new option, update the option.Id property 
            with the new database id that is generated.
            </summary>
            <param name="option">The option object that will be saved to the database</param>
            <param name="userId">The user that is saving the list option</param>
            <param name="trn">The sql transaction used for saving the list option.</param>
        </member>
        <member name="M:IDS.Data.SqlListOptionDataProvider.DoGetAllListOptions(System.Boolean)">
            <summary>
            Gets all the list options from data store by option group
            </summary>
            <param name="excludeArchived">Allows you to excluded or include the archived list options</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.SqlListOptionDataProvider.DoGetAllListOptionsAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets all the list options from data store by option group
            </summary>
            <param name="excludeArchived">Allows you to excluded or include the archived list options</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.SqlListOptionDataProvider.DoGetListOptionByDisplayText(System.String)">
            <summary>
            Gets list option from data store by option display text
            </summary>
            <param name="displayText">Display Text of the Option filter the list options</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.SqlListOptionDataProvider.DoGetListOptionById(System.String)">
            <summary>
            Gets list option from data store by option value
            </summary>
            <param name="optionId">Id of the Option to filter the list options</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Data.SqlListOptionDataProvider.SaveExtendedListOptionData(IDS.Data.ListOption,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Saves the extended list option data.
            </summary>
            <param name="option">The list option.</param>
            <param name="userId">The user that is saving the list option</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:IDS.Data.SqlListOptionDataProvider.InsertUpdateListOption(IDS.Data.ListOption,System.Data.SqlClient.SqlTransaction,System.String,System.String)">
            <summary>
            Saves the list option.
            </summary>
            <param name="option">The list option to be saved.</param>
            <param name="trn">The TRN.</param>
            <param name="userId">The user id.</param>
            <param name="executingProcName">Name of the executing proc.</param>
        </member>
        <member name="M:IDS.Data.SqlListOptionDataProvider.InsertUpdateExtendedListOptionData(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.String,System.String,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            Inserts the update extended list option data.
            </summary>
            <param name="extendedListOptionDataAttribute">The extended list option data attribute.</param>
            <param name="optionId">The list option id.</param>
            <param name="userId">The user id updating the list option.</param>
            <param name="trn">The TRN.</param>
            <param name="executingProcName">Name of the executing proc.</param>
        </member>
        <member name="M:IDS.Data.SqlListOptionDataProvider.AddExtendedListOptionAttributesToListOption(System.Data.SqlClient.SqlDataReader,IDS.Data.ListOption)">
            <summary>
            Adds the extended list option attributes to option.
            </summary>
            <param name="reader">The reader.</param>
            <param name="option">The option.</param>
        </member>
        <member name="M:IDS.Data.SqlListOptionDataProvider.AddExtendedListOptionAttributesToListOption(System.Data.SqlClient.SqlDataReader,System.Collections.Generic.List{IDS.Data.ListOption})">
            <summary>
            Adds the extended list option attributes to option.
            </summary>
            <param name="reader">The reader.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:IDS.Data.SqlListOptionDataProvider.GetListOptionFromDataReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Gets the list option from data reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:IDS.Data.SqlListOptionDataProvider.GetExtendedListOptionDataFromDataReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Gets the extended list option data from data reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns>Returns a KeyValuePair for the Extended List Option Data from a data reader row.</returns>
        </member>
        <member name="T:IDS.Data.UrlConnectionService">
            <summary>
            The UrlConnectionService allows an implementer to configure one URL
            and share that URL with an module that supports the UrlConnectionService.
            </summary>
        </member>
        <member name="M:IDS.Data.UrlConnectionService.#ctor">
            <summary>
            Create an instance of the SqlConnectionService class.
            </summary>
        </member>
        <member name="M:IDS.Data.UrlConnectionService.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.UrlConnectionService"/> class.
            </summary>
            <param name="node">The XML configuration node.</param>
            <exception cref="T:System.ArgumentNullException">The ArgumentNullException is thrown if the node argument is null.</exception>
        </member>
        <member name="T:IDS.Data.Validator">
            <summary>
            Common guard clauses
            </summary>
        </member>
        <member name="M:IDS.Data.Validator.ArgumentNotNullOrEmptyString(System.String,System.String)">
            <summary>
            Checks a string argument to ensure it isn't null or empty
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:IDS.Data.Validator.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Checks an argument to ensure it isn't null
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="T:IDS.Data.StaleObjectException">
            <summary>
            The exception that is thrown when an attempt is made to update a record with stale information
            </summary>
        </member>
        <member name="M:IDS.Data.StaleObjectException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.StaleObjectException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Data.StaleObjectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.StaleObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:IDS.Data.StaleObjectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.StaleObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:IDS.Data.StaleObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Data.StaleObjectException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:IDS.DateTimeHelper">
            <summary>
            The DateTimeHelper class is a helper class for working with the DateTime value type.
            </summary>
        </member>
        <member name="M:IDS.DateTimeHelper.#cctor">
            <summary>
            Initializes the <see cref="T:IDS.DateTimeHelper"/> class.
            </summary>
        </member>
        <member name="P:IDS.DateTimeHelper.HolidayCalculator">
            <summary>
            Gets and sets the IHolidayCalculator object used for determining if a particular date is a holiday
            </summary>
        </member>
        <member name="M:IDS.DateTimeHelper.DateIsHoliday(System.DateTime)">
            <summary>
            Is the specified date a holiday?.
            </summary>
            <param name="date">The date to check whether it is a holiday.</param>
            <returns>Returns true if the date is a holiday, else false.</returns>
        </member>
        <member name="M:IDS.DateTimeHelper.DateIsHoliday(System.DateTime,IDS.IHolidayCalculator)">
            <summary>
            Is the specified date a holiday?.
            </summary>
            <param name="date">The date to check whether it is a holiday.</param>
            <param name="holidayCalculator">The holiday calculator to use in determining if a date is a holiday.</param>
            <returns>
            Returns true if the date is a holiday, else false.
            </returns>
        </member>
        <member name="M:IDS.DateTimeHelper.DateIsBusinessDay(System.DateTime)">
            <summary>
            Use the default calendar to see if the specified date a business day?.
            </summary>
            <param name="date">The date to check whether it is a business day.</param>
            <returns>
            Returns true if the date is a business day, else false.
            </returns>
        </member>
        <member name="M:IDS.DateTimeHelper.DateIsBusinessDay(System.DateTime,IDS.IHolidayCalculator)">
            <summary>
            Use the specified holidayCalculator to see if the specified date a business day?.
            </summary>
            <param name="date">The date to check whether it is a business day.</param>
            <param name="holidayCalculator">The holiday calculator to use in determining if a date is a business day.</param>
            <returns>
            Returns true if the date is a business day, else false.
            </returns>
        </member>
        <member name="M:IDS.DateTimeHelper.GetAllHolidays(System.Int32)">
            <summary>
            Gets all holidays using the default holiday calculator.
            </summary>
            <param name="year">The year to get all holidays for.</param>
            <returns>Returns a HolidayCollection containing the holidays for the default calendar.</returns>
        </member>
        <member name="M:IDS.DateTimeHelper.GetAllHolidays(System.Int32,IDS.IHolidayCalculator)">
            <summary>
            Gets all holidays using the specified holiday calculator.
            </summary>
            <param name="year">The year to get all holidays for.</param>
            <param name="holidayCalculator">The holiday calculator to use in determining if a day is a holiday.</param>
            <returns>
            Returns a HolidayCollection containing the holidays using the specified holiday calculator.
            </returns>
        </member>
        <member name="M:IDS.DateTimeHelper.GetStaticHolidays(System.Int32)">
            <summary>
            Gets all static holidays using the default holiday calculator.
            </summary>
            <param name="year">The year to get all holidays for.</param>
            <returns>
            Returns a HolidayCollection containing the holidays using the specified holiday calculator.
            </returns>
            <remarks>
            A static holiday is one where the date doesn't change from year to year.
            </remarks>
        </member>
        <member name="M:IDS.DateTimeHelper.GetStaticHolidays(System.Int32,IDS.IHolidayCalculator)">
            <summary>
            Gets all static holidays using the specified holiday calculator.
            </summary>
            <param name="year">The year to get all holidays for.</param>
            <param name="holidayCalculator">The holiday calculator to use in determining if a day is a holiday.</param>
            <returns>
            Returns a HolidayCollection containing the holidays using the specified holiday calculator.
            </returns>
            <remarks>
            A static holiday is one where the date doesn't change from year to year.
            </remarks>
        </member>
        <member name="M:IDS.DateTimeHelper.GetDynamicHolidays(System.Int32)">
            <summary>
            Gets all dynamic holidays using the default holiday calculator.
            </summary>
            <param name="year">The year to get all holidays for.</param>
            <returns>
            Returns a HolidayCollection containing the holidays using the specified holiday calculator.
            </returns>
            <remarks>
            A dynamic holiday is one where the actual day can change from year to year.
            </remarks>
        </member>
        <member name="M:IDS.DateTimeHelper.GetDynamicHolidays(System.Int32,IDS.IHolidayCalculator)">
            <summary>
            Gets all dynamic holidays using the specified holiday calculator.
            </summary>
            <param name="year">The year to get all holidays for.</param>
            <param name="holidayCalculator">The holiday calculator to use in determining if a day is a holiday.</param>
            <returns>
            Returns a HolidayCollection containing the holidays using the specified holiday calculator.
            </returns>
            <remarks>
            A dynamic holiday is one where the actual day can change from year to year.
            </remarks>
        </member>
        <member name="M:IDS.DateTimeHelper.GetEndOfMonth(System.DateTime)">
            <summary>
            Gets a new date corresponding to the last day of month for a given date.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.DateTimeHelper.NextBusinessDay(System.DateTime)">
            <summary>
            Gets the next the business day after the specified date using the default holiday calculator.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns a DateTime of the next business day.</returns>
        </member>
        <member name="M:IDS.DateTimeHelper.NextBusinessDay(System.DateTime,IDS.IHolidayCalculator)">
            <summary>
            Gets the next the business day after the specified date using the specified holiday calculator.
            </summary>
            <param name="date">The date.</param>
            <param name="holidayCalculator">The holiday calculator to use in determining if a day is a business day.</param>
            <returns>
            Returns a DateTime of the next business day.
            </returns>
        </member>
        <member name="M:IDS.DateTimeHelper.PreviousBusinessDay(System.DateTime)">
            <summary>
            Gets the previous the business day after the specified date using the specified holiday calculator.
            </summary>
            <param name="date">The date.</param>
            <returns>
            Returns a DateTime of the previous business day.
            </returns>
        </member>
        <member name="M:IDS.DateTimeHelper.PreviousBusinessDay(System.DateTime,IDS.IHolidayCalculator)">
            <summary>
            Gets the previous the business day after the specified date using the specified holiday calculator.
            </summary>
            <param name="date">The date.</param>
            <param name="holidayCalculator">The holiday calculator to use in determining if a day is a business day.</param>
            <returns>
            Returns a DateTime of the previous business day.
            </returns>
        </member>
        <member name="M:IDS.DateTimeHelper.AddBusinessDays(System.DateTime,System.Double)">
            <summary>
            Adds a certain number of business days to the specified date using the default holiday calculator.
            </summary>
            <param name="date">The initial date to add business days to.</param>
            <param name="interval">The number of business days to add.</param>
            <returns>Returns a DateTime that has been incremented by the specified number of business days.</returns>
        </member>
        <member name="M:IDS.DateTimeHelper.AddBusinessDays(System.DateTime,IDS.IHolidayCalculator,System.Double)">
            <summary>
            Adds a certain number of business days to the specified date using the specified holiday calculator.
            </summary>
            <param name="date">The initial date to add business days to.</param>
            <param name="holidayCalculator">The holiday calculator to use in determining if a day is a business day.</param>
            <param name="interval">The number of business days to add.</param>
            <returns>
            Returns a DateTime that has been incremented by the specified number of business days.
            </returns>
        </member>
        <member name="M:IDS.DateTimeHelper.IsValidTimeOfDay(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.DateTimeHelper.GetUSTaxDay(System.Int32)">
            <summary>
            Gets the US tax day for a given year. Algorithm is based on http://en.wikipedia.org/wiki/Tax_Day
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.DateRange">
            <summary>
            The DateRange class is used to contain a range of dates.
            </summary>
        </member>
        <member name="F:IDS.DateRange.Forever">
            <summary>
            Represents a date range that covers all dates.
            </summary>
        </member>
        <member name="M:IDS.DateRange.Parse(System.String)">
            <summary>
            Parses the specified date string and return a date range instance.
            </summary>
            <param name="s">The string containing the date range. The dates should be separated by "-".</param>
            <returns>
            Returns a DateRange instance representing the date range.
            </returns>
        </member>
        <member name="M:IDS.DateRange.Parse(System.String,System.String)">
            <summary>
            Parses the specified date string and return a date range instance.
            </summary>
            <param name="s">The string containing the date range. The dates should be separated by the separator.</param>
            <param name="separator">The string that separates the date ranges.</param>
            <returns>Returns a DateRange instance representing the date range.</returns>
        </member>
        <member name="M:IDS.DateRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.DateRange"/> class.
            </summary>
        </member>
        <member name="M:IDS.DateRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.DateRange"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="P:IDS.DateRange.Beginning">
            <summary>
            Gets or sets the beginning date in the date range.
            </summary>
            <value>The beginning date in the date range.</value>
        </member>
        <member name="P:IDS.DateRange.End">
            <summary>
            Gets or sets the ending date in the date range.
            </summary>
            <value>The ending date in the date range.</value>
        </member>
        <member name="P:IDS.DateRange.LastDays">
            <summary>
            Gets or sets the last days.
            </summary>
            <value>The last days.</value>
        </member>
        <member name="M:IDS.DateRange.SetDaysAgo(System.Int32)">
            <summary>
            Sets the date range based on the number of days to go from today.
            </summary>
            <param name="days">The number of days to go.</param>
            <remarks>
            This method sets the date range based on a number of days to go from today.
            The beginning date is calculated by substracting the number of "days" from today.
            </remarks>
        </member>
        <member name="M:IDS.DateRange.SetDaysAgo(System.Int32,System.DateTime)">
            <summary>
            Sets the date range based on the number of days to go.
            </summary>
            <param name="days">The number of days to go.</param>
            <param name="from">The date to calculate the number of days to go.</param>
            <remarks>
            This method sets the date range based on a number of days to go. The ending date is the specified "from" date.
            The beginning date is calculated by substracting the number of "days" from that date.
            </remarks>
        </member>
        <member name="M:IDS.DateRange.IsWithin(System.DateTime)">
            <summary>
            Determines whether the specified date is within the date range.
            </summary>
            <param name="date">The date.</param>
            <returns>
            	<c>true</c> if the specified date is within; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.DateRange.IsValid">
            <summary>
            Determines whether this instance is valid.
            </summary>
            <returns>
            	<c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.DateRange.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.DateRange.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:IDS.DateRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.DateTimeHelper"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.DateTimeHelper"></see>.
            </returns>
        </member>
        <member name="M:IDS.DateRange.Equals(System.Object)">
            <summary>
            Checks to see if the passed DateRange's values are equal to this
            </summary>
            <param name="dateRange"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.DateRange.op_Equality(IDS.DateRange,IDS.DateRange)">
            <summary>
            Checks to see if the DateRange values are equal
            </summary>
            <param name="dateRange1"></param>
            <param name="dateRange2"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.DateRange.op_Inequality(IDS.DateRange,IDS.DateRange)">
            <summary>
            Checks to see if the DateRange values are equal
            </summary>
            <param name="dateRange1"></param>
            <param name="dateRange2"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.DateRange.GetHashCode">
            <summary>
            Gets the HashCode
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.DirectoryServices.ActiveDirectoryAuthentication">
            <summary>
            The ActiveDirectoryAuthentication class handles authentication into Active Directory.
            </summary>
        </member>
        <member name="M:IDS.DirectoryServices.ActiveDirectoryAuthentication.AuthenticateUser(System.String,System.String)">
            <summary>
            Authenticates the user.
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.DirectoryServices.ActiveDirectoryAuthentication.AuthenticateUser(System.String,System.String,System.Boolean)">
            <summary>
            Authenticates the user.
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <param name="throwOnError">if set to <c>true</c> if an exception should be thrown if unable to authenticate the user.</param>
            <returns>Returns true if able to authenticate the user. Otherwise, false.</returns>
        </member>
        <member name="M:IDS.DirectoryServices.ActiveDirectoryAuthentication.AuthenticateUser(System.String,System.String,System.DirectoryServices.AuthenticationTypes)">
            <summary>
            Authenticates the user.
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <param name="authenticationTypes">The authentication types.</param>
            <returns>Returns true if able to authenticate the user. Otherwise, false.</returns>
        </member>
        <member name="M:IDS.DirectoryServices.ActiveDirectoryAuthentication.AuthenticateUser(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes,System.Boolean)">
            <summary>
            Authenticates the user.
            </summary>
            <param name="adsPath">The Active Directory path.</param>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <param name="authenticationTypes">The authentication types.</param>
            <param name="throwOnError">if set to <c>true</c> if an exception should be thrown if unable to authenticate the user.</param>
            <returns>Returns true if able to authenticate the user. Otherwise, false.</returns>
        </member>
        <member name="T:IDS.EntityModel.Address">
            <summary>
            Default implementation of <see cref="T:IDS.EntityModel.IAddress"/> interface.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.Address.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.Address"/> class
            that has an unlimited number of street address lines.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.Address.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.Address"/> class
            that has a specified maximum number of street address lines.
            </summary>
            <param name="maxStreetAddressLineCount">
            The maximum number of street address lines.
            </param>
        </member>
        <member name="M:IDS.EntityModel.Address.Populate(IDS.EntityModel.IAddress)">
            <summary>
            Populates this Address from the passed IAddress
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:IDS.EntityModel.Address.Persist(IDS.EntityModel.IAddress)">
            <summary>
            Write the values from this Address to the passed IAddress
            </summary>
            <param name="address"></param>
        </member>
        <member name="P:IDS.EntityModel.Address.City">
            <summary>
            Gets or sets the city.
            </summary>
            <value>The city.</value>
        </member>
        <member name="P:IDS.EntityModel.Address.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:IDS.EntityModel.Address.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
            <value>The postal code.</value>
        </member>
        <member name="P:IDS.EntityModel.Address.AddressType">
            <summary>
            Gets or sets the type of address.
            </summary>
            <value>The type of address.</value>
        </member>
        <member name="P:IDS.EntityModel.Address.Country">
            <summary>
            Gets or sets the country.
            </summary>
            <value>The country.</value>
        </member>
        <member name="P:IDS.EntityModel.Address.StreetAddressLines">
            <summary>
            Gets the street address.
            </summary>
            <value>The street address.</value>
        </member>
        <member name="P:IDS.EntityModel.Address.StreetAddressLine1">
            <summary>
            Gets or sets line 1 of the StreetAddressLines collection or an empty string
            </summary>
        </member>
        <member name="P:IDS.EntityModel.Address.StreetAddressLine2">
            <summary>
            Gets or sets line 2 of the StreetAddressLines collection or an empty string
            </summary>
        </member>
        <member name="P:IDS.EntityModel.Address.StreetAddressLine3">
            <summary>
            Gets or sets line 3 of the StreetAddressLines collection or an empty string
            </summary>
        </member>
        <member name="P:IDS.EntityModel.Address.CityLine">
            <summary>
            Gets the city, state, and postal code in USPS format.
            </summary>
        </member>
        <member name="P:IDS.EntityModel.Address.LastUpdateDate">
            <summary>
            Gets the last update date.
            </summary>
            <value>The last update date.</value>
        </member>
        <member name="P:IDS.EntityModel.Address.FullAddress">
            <summary>
            Gets the full address in proper USPS formatted format.
            </summary>
            <value>The full address in proper USPS formatted format.</value>
        </member>
        <member name="P:IDS.EntityModel.Address.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:IDS.EntityModel.Address.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:IDS.EntityModel.AddressCollection">
            <summary>
            Represents a collection of <see cref="T:IDS.EntityModel.IAddress" /> objects.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.AddressCollection.Create">
            <summary>
            Creates an instance of the default implementation of the
            <see cref="T:IDS.EntityModel.AddressCollection" /> class.
            </summary>
            <returns>
            A new <see cref="T:IDS.EntityModel.AddressCollection" />.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.AddressCollection.Item(System.Int32)">
            <summary>
            Gets or sets the address at a specified index in the collection.
            </summary>
            <param name="index">
            The zero-based index of the <see cref="T:IDS.EntityModel.IAddress" /> to get or set.
            </param>
            <returns>
            The <see cref="T:IDS.EntityModel.IAddress" /> at the specified <paramref name="index" />.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.AddressCollection.Count">
            <summary>
            Gets the number of addresses contained in the collection.
            </summary>
            <value>
            The number of addresses contained in the collection.
            </value>
        </member>
        <member name="M:IDS.EntityModel.AddressCollection.Add(IDS.EntityModel.IAddress)">
            <summary>
            Adds a specified address to the collection.
            </summary>
            <param name="address">
            The <see cref="T:IDS.EntityModel.IAddress" /> to add to the collection.
            </param>
        </member>
        <member name="M:IDS.EntityModel.AddressCollection.Clear">
            <summary>
            Removes all addresses from the collection.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.AddressCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the collection.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.AddressCollection.Remove(IDS.EntityModel.IAddress)">
            <summary>
            Removes a specified address from the collection.
            </summary>
            <param name="address">
            The <see cref="T:IDS.EntityModel.IAddress" /> to remove from the collection.
            </param>
            <returns>
            <see langword="true" /> if the <paramref name="address" />
            was found and successfully removed from the collection;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="T:IDS.EntityModel.AddressType">
            <summary>
            The set of address types. Currently only Foreign, Domestic, and Unknown.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.AddressType.Unknown">
            <summary>
            The type of address is unknown
            </summary>
        </member>
        <member name="F:IDS.EntityModel.AddressType.Domestic">
            <summary>
            The address is a domestic (U.S.) address
            </summary>
        </member>
        <member name="F:IDS.EntityModel.AddressType.Foreign">
            <summary>
            The address is a foreign (non-U.S.) address
            </summary>
        </member>
        <member name="T:IDS.EntityModel.ConcreteAddressCollection">
            <summary>
            Provides a default concrete implementation of the
            <see cref="T:IDS.EntityModel.AddressCollection" /> abstract base class.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.ConcreteAddressCollection.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:IDS.EntityModel.ConcreteAddressCollection"/> class.
            </summary>
        </member>
        <member name="P:IDS.EntityModel.ConcreteAddressCollection.Item(System.Int32)">
            <summary>
            Gets or sets the address at a specified index in the collection.
            </summary>
            <param name="index">
            The zero-based index of the <see cref="T:IDS.EntityModel.IAddress" /> to get or set.
            </param>
            <returns>
            The <see cref="T:IDS.EntityModel.IAddress" /> at the specified <paramref name="index" />.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.ConcreteAddressCollection.Count">
            <summary>
            Gets the number of addresses contained in the collection.
            </summary>
            <value>
            The number of addresses contained in the collection.
            </value>
        </member>
        <member name="M:IDS.EntityModel.ConcreteAddressCollection.Add(IDS.EntityModel.IAddress)">
            <summary>
            Adds a specified address to the collection.
            </summary>
            <param name="address">
            The <see cref="T:IDS.EntityModel.IAddress" /> to add to the collection.
            </param>
        </member>
        <member name="M:IDS.EntityModel.ConcreteAddressCollection.Clear">
            <summary>
            Removes all addresses from the collection.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.ConcreteAddressCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the collection.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.ConcreteAddressCollection.Remove(IDS.EntityModel.IAddress)">
            <summary>
            Removes a specified address from the collection.
            </summary>
            <param name="address">
            The <see cref="T:IDS.EntityModel.IAddress" /> to remove from the collection.
            </param>
            <returns>
            <see langword="true" /> if the <paramref name="address" />
            was found and successfully removed from the collection;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="T:IDS.EntityModel.ConcreteEmailAddress">
            <summary>
            Provides a default concrete implementation of the
            <see cref="T:IDS.EntityModel.EmailAddress" /> abstract base class.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.ConcreteEmailAddress.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.ConcreteEmailAddress"/> class.
            </summary>
            <param name="type">The type of the address.</param>
            <param name="address">The address.</param>
            <param name="isPrimary">if set to <c>true</c> this is the primary email address.</param>
        </member>
        <member name="P:IDS.EntityModel.ConcreteEmailAddress.Type">
            <summary>
            Gets the type of the email address (such as "Primary" or "Secondary").
            </summary>
            <value>
            The type of the email address, or <see langword="null" /> if the type is unspecified.
            </value>
        </member>
        <member name="P:IDS.EntityModel.ConcreteEmailAddress.Address">
            <summary>
            Set and get e-mail address
            </summary>
        </member>
        <member name="P:IDS.EntityModel.ConcreteEmailAddress.IsPrimary">
            <summary>
            Gets a value indicating whether this email address is the primary email address.
            </summary>
            <value>
            	<c>true</c> if this instance is the primary address; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.EntityModel.ConcreteEmailAddress.LastUpdateDate">
            <summary>
            Gets the last update date.
            </summary>
            <value>The last update date.</value>
        </member>
        <member name="T:IDS.EntityModel.ConcreteIdentificationCollection">
            <summary>
            Provides a default concrete implementation of the
            <see cref="T:IDS.EntityModel.IdentificationCollection" /> abstract base class.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.ConcreteIdentificationCollection.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:IDS.EntityModel.ConcreteIdentificationCollection"/> class.
            </summary>
        </member>
        <member name="P:IDS.EntityModel.ConcreteIdentificationCollection.Item(System.Int32)">
            <summary>
            Gets or sets the identification at a specified index in the collection.
            </summary>
            <param name="index">
            The zero-based index of the <see cref="T:IDS.EntityModel.IIdentification" /> to get or set.
            </param>
            <returns>
            The <see cref="T:IDS.EntityModel.IIdentification" /> at the specified <paramref name="index" />.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.ConcreteIdentificationCollection.Count">
            <summary>
            Gets the number of identifications contained in the collection.
            </summary>
            <value>
            The number of identifications contained in the collection.
            </value>
        </member>
        <member name="M:IDS.EntityModel.ConcreteIdentificationCollection.Add(IDS.EntityModel.IIdentification)">
            <summary>
            Adds a specified identification to the collection.
            </summary>
            <param name="identification">
            The <see cref="T:IDS.EntityModel.IIdentification" /> to add to the collection.
            </param>
        </member>
        <member name="M:IDS.EntityModel.ConcreteIdentificationCollection.Clear">
            <summary>
            Removes all identifications from the collection.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.ConcreteIdentificationCollection.Clone">
            <summary>
            Creates a copy of the collection.
            </summary>
            <returns>
            A copy of the collection.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.ConcreteIdentificationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the collection.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.ConcreteIdentificationCollection.Remove(IDS.EntityModel.IIdentification)">
            <summary>
            Removes a specified identification from the collection.
            </summary>
            <param name="identification">
            The <see cref="T:IDS.EntityModel.IIdentification" /> to remove from the collection.
            </param>
            <returns>
            <see langword="true" /> if the <paramref name="identification" />
            was found and successfully removed from the collection;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="T:IDS.EntityModel.ConcretePhoneNumber">
            <summary>
            Provides a default concrete implementation of the
            <see cref="T:IDS.EntityModel.PhoneNumber" /> abstract base class.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.ConcretePhoneNumber.#ctor(System.String,IDS.EntityModel.PhoneNumberType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.ConcretePhoneNumber"/> class.
            </summary>
            <param name="rawPhoneNumber">The raw phone number. It can contain formatting.</param>
            <param name="phoneNumberType">Type of the phone number.</param>
            <param name="preferred">if set to <c>true</c> this phone number is the preferred number to contact the person.</param>
        </member>
        <member name="M:IDS.EntityModel.ConcretePhoneNumber.#ctor(System.String,System.String,IDS.EntityModel.PhoneNumberType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.ConcretePhoneNumber"/> class.
            </summary>
            <param name="rawPhoneNumber">The raw phone number. It can contain formatting.</param>
            <param name="extension">The phone extension.</param>
            <param name="phoneNumberType">Type of the phone number.</param>
            <param name="preferred">if set to <c>true</c> this phone number is the preferred number to contact the person.</param>
        </member>
        <member name="P:IDS.EntityModel.ConcretePhoneNumber.RawPhoneNumber">
            <summary>
            Gets or sets the raw phone number (which can contain formatting).
            </summary>
        </member>
        <member name="P:IDS.EntityModel.ConcretePhoneNumber.Extension">
            <summary>
            Gets or sets the phone extension.
            </summary>
            <value>The phone extension.</value>
        </member>
        <member name="P:IDS.EntityModel.ConcretePhoneNumber.PhoneNumberType">
            <summary>
            Gets or sets the type of the phone number.
            </summary>
            <value>The type of the phone number.</value>
        </member>
        <member name="P:IDS.EntityModel.ConcretePhoneNumber.Preferred">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:IDS.EntityModel.PhoneNumber"/> is the 
            preferred phone number to contact the person.
            </summary>
            <value><c>true</c> if this phone number is the preferred phone number to contact the person; 
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.EntityModel.ConcretePhoneNumber.LastUpdateDate">
            <summary>
            Gets the last update date.
            </summary>
            <value>The last update date.</value>
        </member>
        <member name="T:IDS.EntityModel.ConcreteStreetAddressLineCollection">
            <summary>
            Provides a default concrete implementation of the
            <see cref="T:IDS.EntityModel.StreetAddressLineCollection" /> abstract base class.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.ConcreteStreetAddressLineCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the
            <see cref="T:IDS.EntityModel.ConcreteStreetAddressLineCollection" /> class.
            </summary>
            <param name="maxCount">
            The maximum number of lines the collection can contain.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxCount" /> is less than or equal to zero.
            </exception>
        </member>
        <member name="P:IDS.EntityModel.ConcreteStreetAddressLineCollection.Item(System.Int32)">
            <summary>
            Gets the line at a specified index in the collection.
            </summary>
            <param name="index">
            The zero-based index of the line to get.
            </param>
            <returns>
            The line at the specified <paramref name="index" />.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.ConcreteStreetAddressLineCollection.Count">
            <summary>
            Gets the number of lines in the collection.
            </summary>
            <value>
            The number of lines in the collection.
            </value>
        </member>
        <member name="P:IDS.EntityModel.ConcreteStreetAddressLineCollection.MaxCount">
            <summary>
            Gets the maximum number of lines the collection can contain.
            </summary>
            <value>
            The maximum number of lines the collection can contain.
            </value>
        </member>
        <member name="M:IDS.EntityModel.ConcreteStreetAddressLineCollection.Add(System.String)">
            <summary>
            Adds a specified line to the collection.
            </summary>
            <param name="line">
            The line to add to the collection.
            Leading and trailing whitespace is automatically removed.
            </param>
        </member>
        <member name="M:IDS.EntityModel.ConcreteStreetAddressLineCollection.Clear">
            <summary>
            Removes all lines from the collection.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.ConcreteStreetAddressLineCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the collection.
            </returns>
        </member>
        <member name="T:IDS.EntityModel.EmailAddress">
            <summary>
            Represents an e-mail address.
            </summary>
        </member>
        <member name="P:IDS.EntityModel.EmailAddress.EmailRegex">
            <summary>
            Gets or sets the email regex.
            </summary>
            <value>The email regex.</value>
        </member>
        <member name="M:IDS.EntityModel.EmailAddress.Validate(System.String)">
            <summary>
            Determines whether the specified email address is valid.
            </summary>
            <param name="emailAddress">The email address to validate.</param>
            <returns>
            	<c>true</c> if the specified email address is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.EmailAddress.Create">
            <summary>
            Creates an instance of the default implementation of the
            <see cref="T:IDS.EntityModel.EmailAddress" /> class.
            </summary>
            <returns>
            A new <see cref="T:IDS.EntityModel.EmailAddress" />.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.EmailAddress.Create(System.String)">
            <summary>
            Creates an instance of the default implementation of the
            <see cref="T:IDS.EntityModel.EmailAddress" /> class.
            </summary>
            <param name="address">The address.</param>
            <returns>
            A new <see cref="T:IDS.EntityModel.EmailAddress" />.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.EmailAddress.Create(System.String,System.Boolean)">
            <summary>
            Creates an instance of the default implementation of the
            <see cref="T:IDS.EntityModel.EmailAddress" /> class.
            </summary>
            <param name="address">The address.</param>
            <param name="isPrimary">if set to <c>true</c> this is the primary email address.</param>
            <returns>
            A new <see cref="T:IDS.EntityModel.EmailAddress" />.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.EmailAddress.Create(System.String,System.String,System.Boolean)">
            <summary>
            Creates an instance of the default implementation of the
            <see cref="T:IDS.EntityModel.EmailAddress" /> class.
            </summary>
            <param name="type">The type of the email address.</param>
            <param name="address">The address.</param>
            <param name="isPrimary">if set to <c>true</c> this is the primary email address.</param>
            <returns>
            A new <see cref="T:IDS.EntityModel.EmailAddress" />.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.EmailAddress.Type">
            <summary>
            Gets the type of the email address (such as "Primary" or "Secondary").
            </summary>
            <value>
            The type of the email address, or <see langword="null" /> if the type is unspecified.
            </value>
        </member>
        <member name="P:IDS.EntityModel.EmailAddress.Address">
            <summary>
            Set and get e-mail address
            </summary>
        </member>
        <member name="P:IDS.EntityModel.EmailAddress.Mailbox">
            <summary>
            Gets the mailbox part (the part to the left of the @ symbol) from the email address.
            </summary>
            <value>The mailbox.</value>
        </member>
        <member name="P:IDS.EntityModel.EmailAddress.Domain">
            <summary>
            Gets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:IDS.EntityModel.EmailAddress.IsPrimary">
            <summary>
            Gets a value indicating whether this email address is the primary email address.
            </summary>
            <value>
            	<c>true</c> if this instance is the primary address; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.EntityModel.EmailAddress.LastUpdateDate">
            <summary>
            Gets the last update date.
            </summary>
            <value>The last update date.</value>
        </member>
        <member name="M:IDS.EntityModel.EmailAddress.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.EntityModel.EmailAddress"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.EntityModel.EmailAddress"></see>.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.EmailAddress.IsValid">
            <summary>
            Gets a value indicating whether the email address is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.EntityModel.EmailAddress.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:IDS.EntityModel.EmailAddressCollection">
            <summary>
            Represents a collection of <see cref="T:IDS.EntityModel.EmailAddress" /> instances, indexed by type.
            </summary>
        </member>
        <member name="P:IDS.EntityModel.EmailAddressCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:IDS.EntityModel.EmailAddress" /> in the collection with a specified type.
            </summary>
            <param name="type">
            The <see cref="P:IDS.EntityModel.EmailAddress.Type" /> of an <see cref="T:IDS.EntityModel.EmailAddress" /> in the collection.
            </param>
            <returns>
            The <see cref="T:IDS.EntityModel.EmailAddress" /> in the collection with the specified <paramref name="type" />,
            or <see langword="null" /> if the <paramref name="type" /> could not be found.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.EmailAddressCollection.Add(IDS.EntityModel.EmailAddress)">
            <summary>
            Adds a specified <see cref="T:IDS.EntityModel.EmailAddress" /> to the collection.
            </summary>
            <param name="address">
            The <see cref="T:IDS.EntityModel.EmailAddress" /> to add to the collection.
            </param>
        </member>
        <member name="M:IDS.EntityModel.EmailAddressCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.EmailAddressCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.EmailAddressCollection.Remove(System.String)">
            <summary>
            Removes a specified <see cref="T:IDS.EntityModel.EmailAddress" /> from the collection.
            </summary>
            <param name="type">
            The <see cref="P:IDS.EntityModel.EmailAddress.Type" /> of the <see cref="T:IDS.EntityModel.EmailAddress" /> in the collection to remove.
            </param>
        </member>
        <member name="T:IDS.EntityModel.IAddress">
            <summary>
            Interface for implementing an object that represents an address.
            </summary>
        </member>
        <member name="P:IDS.EntityModel.IAddress.StreetAddressLines">
            <summary>
            Gets the street address.
            </summary>
            <value>The street address.</value>
        </member>
        <member name="P:IDS.EntityModel.IAddress.City">
            <summary>
            Gets or sets the city.
            </summary>
            <value>The city.</value>
        </member>
        <member name="P:IDS.EntityModel.IAddress.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:IDS.EntityModel.IAddress.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
            <value>The postal code.</value>
        </member>
        <member name="P:IDS.EntityModel.IAddress.Country">
            <summary>
            Gets or sets the country.
            </summary>
            <value>The country.</value>
        </member>
        <member name="P:IDS.EntityModel.IAddress.AddressType">
            <summary>
            Gets or sets the type of address.
            </summary>
            <value>The type of address.</value>
        </member>
        <member name="P:IDS.EntityModel.IAddress.FullAddress">
            <summary>
            Gets the full address in proper USPS formatted format.
            </summary>
            <value>The full address in proper USPS formatted format.</value>
        </member>
        <member name="P:IDS.EntityModel.IAddress.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:IDS.EntityModel.Identification">
            <summary>
            Class implementin IIdentification
            </summary>
        </member>
        <member name="F:IDS.EntityModel.Identification.TaxID">
            <summary>
            The identification type string for a tax ID.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.Identification.PseudoPan">
            <summary>
            The identification type string for a pseudo pan.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.Identification.MothersMaidenName">
            <summary>
            The identification type string for a mothers maiden name.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.Identification.DriverLicense">
            <summary>
            The identification type string for a drivers license.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.Identification.AuthValue">
            <summary>
            The identification type string for a authentication value.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.Identification.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.Identification" /> class.
            </summary>
            <param name="identificationType">Type of the identification.</param>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:IDS.EntityModel.Identification.#ctor(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.Identification"/> class.
            </summary>
            <param name="identificationType">Type of the identification.</param>
            <param name="identifier">The identifier.</param>
            <param name="issuedBy">The issued by.</param>
            <param name="issueDate">The issue date.</param>
            <param name="expirationDate">The expiration date.</param>
        </member>
        <member name="P:IDS.EntityModel.Identification.IdentificationType">
            <summary>
            Get identification type
            </summary>
        </member>
        <member name="P:IDS.EntityModel.Identification.Identifier">
            <summary>
            Get identifier
            </summary>
        </member>
        <member name="P:IDS.EntityModel.Identification.IssuedBy">
            <summary>
            Get identifier info
            </summary>
        </member>
        <member name="P:IDS.EntityModel.Identification.IssueDate">
            <summary>
            Get issued date
            </summary>
        </member>
        <member name="P:IDS.EntityModel.Identification.ExpirationDate">
            <summary>
            Get identifier expiration date
            </summary>
        </member>
        <member name="P:IDS.EntityModel.Identification.LastUpdateDate">
            <summary>
            Gets the last update date.
            </summary>
            <value>The last update date.</value>
        </member>
        <member name="P:IDS.EntityModel.Identification.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:IDS.EntityModel.IdentificationCollection">
            <summary>
            Represents a collection of <see cref="T:IDS.EntityModel.IIdentification" /> objects.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.IdentificationCollection.Create">
            <summary>
            Creates an instance of the default implementation of the
            <see cref="T:IDS.EntityModel.IdentificationCollection" /> class.
            </summary>
            <returns>
            A new <see cref="T:IDS.EntityModel.IdentificationCollection" />.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.IdentificationCollection.Item(System.Int32)">
            <summary>
            Gets or sets the identification at a specified index in the collection.
            </summary>
            <param name="index">
            The zero-based index of the <see cref="T:IDS.EntityModel.IIdentification" /> to get or set.
            </param>
            <returns>
            The <see cref="T:IDS.EntityModel.IIdentification" /> at the specified <paramref name="index" />.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.IdentificationCollection.Count">
            <summary>
            Gets the number of identifications contained in the collection.
            </summary>
            <value>
            The number of identifications contained in the collection.
            </value>
        </member>
        <member name="M:IDS.EntityModel.IdentificationCollection.Add(IDS.EntityModel.IIdentification)">
            <summary>
            Adds a specified identification to the collection.
            </summary>
            <param name="identification">
            The <see cref="T:IDS.EntityModel.IIdentification" /> to add to the collection.
            </param>
        </member>
        <member name="M:IDS.EntityModel.IdentificationCollection.Clear">
            <summary>
            Removes all identifications from the collection.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.IdentificationCollection.Clone">
            <summary>
            Creates a copy of the collection.
            </summary>
            <returns>
            A copy of the collection.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.IdentificationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the collection.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.IdentificationCollection.Remove(IDS.EntityModel.IIdentification)">
            <summary>
            Removes a specified identification from the collection.
            </summary>
            <param name="identification">
            The <see cref="T:IDS.EntityModel.IIdentification" /> to remove from the collection.
            </param>
            <returns>
            <see langword="true" /> if the <paramref name="identification" />
            was found and successfully removed from the collection;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.IdentificationCollection.Item(System.String)">
            <summary>
            Gets the identification by the identifier type.
            Returns the first object found if more than one exists.
            </summary>
            <param name="identifierType">Type of the identifier.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.EntityModel.IdentificationCollection.GetIdentificationByIdentifierType(System.String)">
            <summary>
            Gets the identification by the identifier type.
            Note: returns the first object found if more than one exists
            </summary>
            <param name="identifierType">Type of the identifier.</param>
            <returns></returns>
        </member>
        <member name="P:IDS.EntityModel.IdentificationCollection.MothersMaidenName">
            <summary>
            Gets the name of the mothers maiden.
            </summary>
            <value>The name of the mothers maiden.</value>
        </member>
        <member name="P:IDS.EntityModel.IdentificationCollection.TaxID">
            <summary>
            Gets the tax ID.
            </summary>
            <value>The tax ID.</value>
        </member>
        <member name="P:IDS.EntityModel.IdentificationCollection.PseudoPan">
            <summary>
            Gets the pseudo PAN.
            </summary>
            <value>The pseudo PAN.</value>
        </member>
        <member name="P:IDS.EntityModel.IdentificationCollection.DriverLicense">
            <summary>
            Gets the state driver license.
            </summary>
            <value>The state driver license.</value>
        </member>
        <member name="P:IDS.EntityModel.IdentificationCollection.AuthValue">
            <summary>
            Gets the authentication value.
            </summary>
            <value>The authentication value.</value>
        </member>
        <member name="T:IDS.EntityModel.IIdentification">
            <summary>
            Idenfication interface
            </summary>
        </member>
        <member name="P:IDS.EntityModel.IIdentification.IdentificationType">
            <summary>
            Get identification type
            </summary>
        </member>
        <member name="P:IDS.EntityModel.IIdentification.Identifier">
            <summary>
            Get identifier
            </summary>
        </member>
        <member name="P:IDS.EntityModel.IIdentification.IssuedBy">
            <summary>
            Get identifier info
            </summary>
        </member>
        <member name="P:IDS.EntityModel.IIdentification.IssueDate">
            <summary>
            Get issued date
            </summary>
        </member>
        <member name="P:IDS.EntityModel.IIdentification.ExpirationDate">
            <summary>
            Get identifier expiration date
            </summary>
        </member>
        <member name="P:IDS.EntityModel.IIdentification.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:IDS.EntityModel.IName">
            <summary>
            Interface for implementing an object that represents a person's name.
            </summary>
        </member>
        <member name="P:IDS.EntityModel.IName.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:IDS.EntityModel.IName.FirstName">
            <summary>
            Gets or sets the name of the first.
            </summary>
            <value>The name of the first.</value>
        </member>
        <member name="P:IDS.EntityModel.IName.MiddleName">
            <summary>
            Gets or sets the name of the middle.
            </summary>
            <value>The name of the middle.</value>
        </member>
        <member name="P:IDS.EntityModel.IName.LastName">
            <summary>
            Gets or sets the name of the last.
            </summary>
            <value>The name of the last.</value>
        </member>
        <member name="P:IDS.EntityModel.IName.Suffix">
            <summary>
            Gets or sets the suffix.
            </summary>
            <value>The suffix.</value>
        </member>
        <member name="P:IDS.EntityModel.IName.FullName">
            <summary>
            Gets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:IDS.EntityModel.IName.LastNameFirstInitial">
            <summary>
            Gets the Last name and first initial, seperated by a comma
            </summary>
            <value>The last name first initial.  If there is no first name, only last name will be returned (no comma).</value>
        </member>
        <member name="T:IDS.EntityModel.IPerson">
            <summary>
            Interface for implementing an object that represents a person.
            </summary>
        </member>
        <member name="P:IDS.EntityModel.IPerson.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:IDS.EntityModel.IPerson.PhoneNumbers">
            <summary>
            Gets the phone numbers.
            </summary>
            <value>The phone numbers.</value>
        </member>
        <member name="P:IDS.EntityModel.IPerson.EmailAddress">
            <summary>
            Gets or sets the person's primary email address.
            </summary>
            <value>
            An <see cref="P:IDS.EntityModel.IPerson.EmailAddress" /> that represents the person's primary email address, 
            or <see langword="null" /> if no email address has been provided.
            </value>
        </member>
        <member name="P:IDS.EntityModel.IPerson.AlternateEmailAddresses">
            <summary>
            Gets the persons's alternate email addresses.
            </summary>
            <value>
            An <see cref="T:IDS.EntityModel.EmailAddressCollection" /> that contains the person's alternate email addresses.
            </value>
        </member>
        <member name="P:IDS.EntityModel.IPerson.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:IDS.EntityModel.IPerson.PreviousAddresses">
            <summary>
            Gets the previous addresses.
            </summary>
            <value>The previous addresses.</value>
        </member>
        <member name="P:IDS.EntityModel.IPerson.DateOfBirth">
            <summary>
            Gets or sets the date of birth.
            </summary>
            <value>The date of birth.</value>
        </member>
        <member name="P:IDS.EntityModel.IPerson.Identifications">
            <summary>
            Gets the identifications.
            </summary>
            <value>The identifications.</value>
        </member>
        <member name="T:IDS.EntityModel.IsoCountry">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDS.EntityModel.IsoCountry.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.EntityModel.IsoCountry.UnitedStates">
            <summary>
            Gets the <see cref="T:IDS.EntityModel.IsoCountry"/> for United States.
            </summary>
            <value>The <see cref="T:IDS.EntityModel.IsoCountry"/> for United States.</value>
        </member>
        <member name="M:IDS.EntityModel.IsoCountry.IsNullOrEmpty(IDS.EntityModel.IsoCountry)">
            <summary>
            Determines whether the specified country is null or <see cref="F:IDS.EntityModel.IsoCountry.Empty"/>.
            </summary>
            <param name="country">The country.</param>
            <returns>
            	<c>true</c> if the specified country is null or <see cref="F:IDS.EntityModel.IsoCountry.Empty"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.IsoCountry.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:IDS.EntityModel.IsoCountry.#ctor(System.String,System.String)">
            <summary>
            counstructor
            </summary>
            <param name="countryName"></param>
            <param name="countryCode"></param>
        </member>
        <member name="M:IDS.EntityModel.IsoCountry.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            counstructor
            </summary>
            <param name="countryName"></param>
            <param name="countryCode"></param>
            <param name="countryCode3"></param>
            <param name="countryCodePhone"></param>
        </member>
        <member name="P:IDS.EntityModel.IsoCountry.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:IDS.EntityModel.IsoCountry.Code">
            <summary>
            Gets or sets the code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:IDS.EntityModel.IsoCountry.Code3">
            <summary>
            Gets or sets the 3 character code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:IDS.EntityModel.IsoCountry.CodePhone">
            <summary>
            Gets or sets the country phone code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:IDS.EntityModel.IsoCountry.CallingCode">
            <summary>
            Gets the country calling code.
            </summary>
        </member>
        <member name="T:IDS.EntityModel.IUpdatableObjectSettable">
            <summary>
            Interface that adds a setter to the LastUpdateDate property on an updatable object.
            </summary>
        </member>
        <member name="P:IDS.EntityModel.IUpdatableObjectSettable.LastUpdateDate">
            <summary>
            Gets the last update date.
            </summary>
            <value>The last update date.</value>
        </member>
        <member name="T:IDS.EntityModel.IUpdatableObject">
            <summary>
            Interface that implements an updatable object
            </summary>
        </member>
        <member name="P:IDS.EntityModel.IUpdatableObject.LastUpdateDate">
            <summary>
            Gets the last update date.
            </summary>
            <value>The last update date.</value>
        </member>
        <member name="T:IDS.EntityModel.MissingParentObjectException">
            <summary>
            The exception that is thrown when an attempt is made to create or update an orphan record.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.MissingParentObjectException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.MissingParentObjectException"/> class.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.MissingParentObjectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.MissingParentObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:IDS.EntityModel.MissingParentObjectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.MissingParentObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:IDS.EntityModel.MissingParentObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.MissingParentObjectException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:IDS.EntityModel.Name">
            <summary>
            Default implementation of the <see cref="T:IDS.EntityModel.IName"/> interface.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.Name.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.Name"/> class.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.Name.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.Name"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="firstName">The first name.</param>
            <param name="middleName">The middle name.</param>
            <param name="lastName">The last name.</param>
            <param name="suffix">The suffix.</param>
        </member>
        <member name="P:IDS.EntityModel.Name.Title">
            <summary>
            Gets or sets the person's title or honorific.
            </summary>
            <value>The person's title or honorific.</value>
        </member>
        <member name="P:IDS.EntityModel.Name.FirstName">
            <summary>
            Gets or sets the person's first name.
            </summary>
            <value>The person's first name.</value>
        </member>
        <member name="P:IDS.EntityModel.Name.MiddleName">
            <summary>
            Gets or sets the person's middle name or initial.
            </summary>
            <value>The person's middle name or initial.</value>
        </member>
        <member name="P:IDS.EntityModel.Name.LastName">
            <summary>
            Gets or sets the person's last name.
            </summary>
            <value>The person's last name.</value>
        </member>
        <member name="P:IDS.EntityModel.Name.Suffix">
            <summary>
            Gets or sets the person's generational suffix.
            </summary>
            <value>The person's generational suffix.</value>
        </member>
        <member name="P:IDS.EntityModel.Name.FullName">
            <summary>
            Gets the person's full name.
            </summary>
            <value>The person's full name.</value>
        </member>
        <member name="P:IDS.EntityModel.Name.LastNameFirstInitial">
            <summary>
            Gets the person's last name and first initial, separated by a comma.
            </summary>
            <value>
            The person's last name and first initial. If there is no first name, only the last name will be returned (no comma).
            </value>
        </member>
        <member name="M:IDS.EntityModel.Name.GetFullName(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the full name.
            </summary>
            <param name="includeTitle">if set to <c>true</c> include title.</param>
            <param name="includeMiddleName">if set to <c>true</c> include middle name.</param>
            <param name="includeSuffix">if set to <c>true</c> include suffix.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.EntityModel.Name.GetFullName(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the full name.
            </summary>
            <param name="includeTitle">if set to <c>true</c> include title.</param>
            <param name="includeMiddleName">if set to <c>true</c> include middle name.</param>
            <param name="useMiddleInitial">if set to <c>true</c> use middle initial instead of middle name.  If <paramref name="includeMiddleName"/> is <c>false</c>, this parameter has no effect.</param>
            <param name="includeSuffix">if set to <c>true</c> include suffix.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.EntityModel.Name.GetFullName(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the full name.
            </summary>
            <param name="includeTitle">if set to <c>true</c> include title.</param>
            <param name="useFirstInitial">if set to <c>true</c> use first initial instead of first name.</param>
            <param name="includeMiddleName">if set to <c>true</c> include middle name.</param>
            <param name="useMiddleInitial">if set to <c>true</c> use middle initial instead of middle name.  If <paramref name="includeMiddleName"/> is <c>false</c>, this parameter has no effect.</param>
            <param name="includeSuffix">if set to <c>true</c> include suffix.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.EntityModel.NameParser">
            <summary>
            Represents an algorithm to parse a person's full name into its components (title, first, middle, last, suffix).
            </summary>
        </member>
        <member name="M:IDS.EntityModel.NameParser.Normalize(IDS.EntityModel.IName)">
            <summary>
            If a specified <see cref="T:IDS.EntityModel.IName" /> instance contains the person's full name
            in the <see cref="P:IDS.EntityModel.IName.LastName" /> property, returns a new <see cref="T:IDS.EntityModel.IName" /> instance
            containing the parsed name. Otherwise, returns the original instance unchanged.
            </summary>
            <param name="name">
            The <see cref="T:IDS.EntityModel.IName" /> instance to normalize.
            </param>
            <returns>
            A normalized <see cref="T:IDS.EntityModel.IName" /> instance.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.NameParser.Parse(System.String)">
            <summary>
            Parses a specified name.
            </summary>
            <param name="fullName">
            The full name of a person.
            </param>
            <returns>
            A <see cref="T:IDS.EntityModel.NameParserOutput" /> instance that contains the parsed components of the <paramref name="fullName" />.
            </returns>
        </member>
        <member name="T:IDS.EntityModel.NameParserOutput">
            <summary>
            Represents the result of parsing a person's full name.
            </summary>
        </member>
        <member name="P:IDS.EntityModel.NameParserOutput.Title">
            <summary>
            Any title or honorific (such as "Mr." or "Dr.") that appears before the person's name.
            </summary>
        </member>
        <member name="P:IDS.EntityModel.NameParserOutput.FirstName">
            <summary>
            The person's first name(s).
            </summary>
        </member>
        <member name="P:IDS.EntityModel.NameParserOutput.MiddleName">
            <summary>
            The person's middle name(s) or initial(s).
            </summary>
        </member>
        <member name="P:IDS.EntityModel.NameParserOutput.LastName">
            <summary>
            The person's last name(s).
            </summary>
        </member>
        <member name="P:IDS.EntityModel.NameParserOutput.GenerationalSuffix">
            <summary>
            The person's generational suffix, such as "Jr." or "III".
            </summary>
        </member>
        <member name="P:IDS.EntityModel.NameParserOutput.AdditionalSuffixes">
            <summary>
            Any additional suffixes (post-nominal letters such as "Ph.D.") that appear after the person's name.
            </summary>
        </member>
        <member name="T:IDS.EntityModel.PersistentPhoneNumber">
            <summary>
            Providers persistent implementation of phone number (has database id)
            </summary>
        </member>
        <member name="P:IDS.EntityModel.PersistentPhoneNumber.PersistentID">
            <summary>
            Database id
            </summary>
        </member>
        <member name="M:IDS.EntityModel.PersistentPhoneNumber.#ctor(System.String,System.String,IDS.EntityModel.PhoneNumberType,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.ConcretePhoneNumber"/> class.
            </summary>
            <param name="rawPhoneNumber">The raw phone number. It can contain formatting.</param>
            <param name="extension">The phone extension.</param>
            <param name="phoneNumberType">Type of the phone number.</param>
            <param name="preferred">if set to <c>true</c> this phone number is the preferred number to contact the person.</param>
            <param name="persistentID">database id</param>
        </member>
        <member name="M:IDS.EntityModel.PersistentPhoneNumber.#ctor(System.String,IDS.EntityModel.PhoneNumberType,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.ConcretePhoneNumber"/> class.
            </summary>
            <param name="rawPhoneNumber">The raw phone number. It can contain formatting.</param>
            <param name="phoneNumberType">Type of the phone number.</param>
            <param name="preferred">if set to <c>true</c> this phone number is the preferred number to contact the person.</param>
            <param name="persistentID">database id</param>
        </member>
        <member name="T:IDS.EntityModel.Person">
            <summary>
            Default implementation of the <see cref="T:IDS.EntityModel.IPerson"/> interface.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.Person.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.Person"/> class.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.Person.#ctor(IDS.EntityModel.IName)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.Person"/> class.
            </summary>
            <param name="name">The name.</param>S
        </member>
        <member name="M:IDS.EntityModel.Person.#ctor(IDS.EntityModel.IName,IDS.EntityModel.IdentificationCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.Person"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="identifications">The identifications.</param>
        </member>
        <member name="M:IDS.EntityModel.Person.#ctor(IDS.EntityModel.IName,IDS.EntityModel.IAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.Person"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="currentAddress">The current address.</param>
        </member>
        <member name="M:IDS.EntityModel.Person.#ctor(IDS.EntityModel.IName,IDS.EntityModel.IAddress,IDS.EntityModel.AddressCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.Person"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="currentAddress">The current address.</param>
            <param name="previousAddresses">The previous addresses.</param>
        </member>
        <member name="M:IDS.EntityModel.Person.#ctor(IDS.EntityModel.IName,IDS.EntityModel.IAddress,IDS.EntityModel.AddressCollection,IDS.EntityModel.IdentificationCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.Person"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="currentAddress">The current address.</param>
            <param name="previousAddresses">The previous addresses.</param>
            <param name="identifications">The identifications.</param>
        </member>
        <member name="M:IDS.EntityModel.Person.#ctor(IDS.EntityModel.IName,IDS.EntityModel.IAddress,IDS.EntityModel.AddressCollection,IDS.EntityModel.IdentificationCollection,IDS.EntityModel.EmailAddress,IDS.EntityModel.PhoneNumberCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.Person"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="currentAddress">The current address.</param>
            <param name="previousAddresses">The previous addresses.</param>
            <param name="identifications">The identifications.</param>
            <param name="emailAddress">The email address.</param>
            <param name="phoneNumbers">The phone numbers.</param>
        </member>
        <member name="M:IDS.EntityModel.Person.#ctor(IDS.EntityModel.IPerson)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.Person"/> class.
            </summary>
            <param name="person">The person.</param>
        </member>
        <member name="P:IDS.EntityModel.Person.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:IDS.EntityModel.Person.PhoneNumbers">
            <summary>
            Gets the phone numbers.
            </summary>
            <value>The phone numbers.</value>
        </member>
        <member name="P:IDS.EntityModel.Person.EmailAddress">
            <summary>
            Gets or sets the person's primary email address.
            </summary>
            <value>
            An <see cref="P:IDS.EntityModel.Person.EmailAddress" /> that represents the person's primary email address, 
            or <see langword="null" /> if no email address has been provided.
            </value>
        </member>
        <member name="P:IDS.EntityModel.Person.AlternateEmailAddresses">
            <summary>
            Gets the persons's alternate email addresses.
            </summary>
            <value>
            An <see cref="T:IDS.EntityModel.EmailAddressCollection" /> that contains the person's alternate email addresses.
            </value>
        </member>
        <member name="P:IDS.EntityModel.Person.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:IDS.EntityModel.Person.PreviousAddresses">
            <summary>
            Gets the previous addresses.
            </summary>
            <value>The previous addresses.</value>
        </member>
        <member name="P:IDS.EntityModel.Person.DateOfBirth">
            <summary>
            Gets or sets the date of birth.
            </summary>
            <value>The date of birth.</value>
        </member>
        <member name="P:IDS.EntityModel.Person.Identifications">
            <summary>
            Gets the identifications.
            </summary>
            <value>The identifications.</value>
        </member>
        <member name="P:IDS.EntityModel.Person.LastUpdateDate">
            <summary>
            Gets or sets the last update date.
            </summary>
            <value>The last update date.</value>
        </member>
        <member name="M:IDS.EntityModel.Person.System#ICloneable#Clone">
            <summary>
            Creates a new Person object that is a copy of the current instance.
            </summary>
            <returns>
            A new Person object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:IDS.EntityModel.PhoneNumber">
            <summary>
            The PhoneNumber class stores the information related to a phone number.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.PhoneNumber.InternationalPrefix">
            <summary>
            International numbers will be by convention prefixed with this string to differentiate between domestic. NOTE: domestic numbers will not contain the leading '1'
            </summary>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumber.Create">
            <summary>
            Creates an instance of the default implementation of the
            <see cref="T:IDS.EntityModel.PhoneNumber" /> class.
            </summary>
            <returns>
            A new <see cref="T:IDS.EntityModel.PhoneNumber" />.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumber.Create(System.String)">
            <summary>
            Creates an instance of the default implementation of the
            <see cref="T:IDS.EntityModel.PhoneNumber" /> class.
            </summary>
            <param name="rawPhoneNumber">The raw phone number. It can contain formatting.</param>
            <returns>
            A new <see cref="T:IDS.EntityModel.PhoneNumber" />.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumber.Create(System.String,IDS.EntityModel.PhoneNumberType)">
            <summary>
            Creates an instance of the default implementation of the
            <see cref="T:IDS.EntityModel.PhoneNumber" /> class.
            </summary>
            <param name="rawPhoneNumber">The raw phone number. It can contain formatting.</param>
            <param name="phoneNumberType">Type of the phone number.</param>
            <returns>
            A new <see cref="T:IDS.EntityModel.PhoneNumber" />.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumber.Create(System.String,IDS.EntityModel.PhoneNumberType,System.Boolean)">
            <summary>
            Creates an instance of the default implementation of the
            <see cref="T:IDS.EntityModel.PhoneNumber" /> class.
            </summary>
            <param name="rawPhoneNumber">The raw phone number. It can contain formatting.</param>
            <param name="phoneNumberType">Type of the phone number.</param>
            <param name="preferred">if set to <c>true</c> this phone number is the preferred number to contact the person.</param>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumber.CreatePersistent(System.String,IDS.EntityModel.PhoneNumberType,System.Boolean,System.String)">
            <summary>
            Creates an instance of the persistent implementation of the
            <see cref="T:IDS.EntityModel.PhoneNumber" /> class.
            </summary>
            <param name="rawPhoneNumber">The raw phone number. It can contain formatting.</param>
            <param name="phoneNumberType">Type of the phone number.</param>
            <param name="preferred">if set to <c>true</c> this phone number is the preferred number to contact the person.</param>
            <param name="persistentID">persistent id</param>
            <returns></returns>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumber.CreatePersistent(System.String,IDS.EntityModel.PhoneNumberType,System.String)">
            <summary>
            Creates an instance of the persistent implementation of the
            <see cref="T:IDS.EntityModel.PhoneNumber" /> class.
            </summary>
            <param name="rawPhoneNumber">The raw phone number. It can contain formatting.</param>
            <param name="phoneNumberType">Type of the phone number.</param>
            <param name="persistentID">persistent id</param>
            <returns></returns>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumber.RawPhoneNumber">
            <summary>
            Gets or sets the raw phone number (which can contain formatting).
            </summary>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumber.Extension">
            <summary>
            Gets or sets the phone extension.
            </summary>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumber.PhoneNumberDigits">
            <summary>
            Gets just the digits from the phone number.
            </summary>
            <value>The phone number digits.</value>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumber.IsInternational">
            <summary>
            Gets a Boolean value that indicates whether this instance represents an international phone number.
            </summary>
            <value>
            <see langword="true" /> if <see cref="P:IDS.EntityModel.PhoneNumber.RawPhoneNumber" /> begins with a '+' character;
            otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumber.CountryCode">
            <summary>
            Gets the country code if this instance represents an international phone number.
            </summary>
            <value>
            The country code if this instance represents an international phone number and the country code is valid;
            otherwise, <see langword="null" />.
            </value>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumber.NationalNumber">
            <summary>
            Gets the national number as a string of digits without any formatting.
            </summary>
            <value>
            The national number if this instance represents an international phone number and the country code is valid;
            otherwise, <see cref="P:IDS.EntityModel.PhoneNumber.PhoneNumberDigits" />.
            </value>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumber.IsValid">
            <summary>
            Gets a Boolean value that indicates whether the format of the <see cref="P:IDS.EntityModel.PhoneNumber.RawPhoneNumber" /> is valid.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumber.NormalizeRawNumber(System.String)">
            <summary>
            
            </summary>
            <param name="phoneNumber"></param>
            <returns></returns>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumber.AreaCode">
            <summary>
            Gets the area code or, if this instance represents an international phone number, the national destination code.
            </summary>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumber.SubscriberNumber">
            <summary>
            Gets the subscriber number.
            </summary>
            <remarks>
            For a domestic phone number, this comprises the seven digits after the three-digit area code.
            </remarks>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumber.SevenDigitNumber">
            <summary>
            Returns the base phone number.  Assumes the number is stored as 10 digits
            </summary>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumber.FormattedPhoneNumber">
            <summary>
            Gets the formatted phone number in the (xxx) xxx-xxxx or +xxx... format.
            </summary>
            <value>The formatted phone number in the (xxx) xxx-xxxx or +xxx... format.</value>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumber.PhoneNumberType">
            <summary>
            Gets or sets the type of the phone number.
            </summary>
            <value>The type of the phone number.</value>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumber.Preferred">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:IDS.EntityModel.PhoneNumber"/> is the 
            preferred phone number to contact the person.
            </summary>
            <value><c>true</c> if this phone number is the preferred phone number to contact the person; 
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumber.LastUpdateDate">
            <summary>
            Gets the last update date.
            </summary>
            <value>The last update date.</value>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumber.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumber.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumber.IsSameNumber(IDS.EntityModel.PhoneNumber,IDS.EntityModel.PhoneNumber)">
            <summary>
            Determines whether two PhoneNumber instances represent the same phone number and extension.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.EntityModel.PhoneNumberCollection">
            <summary>
            Collection of <see cref="T:IDS.EntityModel.PhoneNumber"/> objects, indexable by name.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.PhoneNumberCollection.WorkPhoneNumberName">
            <summary>
            Name of the key to identify the work phone number.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.PhoneNumberCollection.HomePhoneNumberName">
            <summary>
            Name of the key to identify the home phone number.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.PhoneNumberCollection.MobilePhoneNumberName">
            <summary>
            Name of the key to identify the mobile phone number.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.PhoneNumberCollection.FaxPhoneNumberName">
            <summary>
            Name of the key to identify the fax phone number.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.PhoneNumberCollection.OtherPhoneNumberName">
            <summary>
            Name of the key to identify the &quot;other&quot; phone number.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.PhoneNumberCollection.UnknownPhoneNumberName">
            <summary>
            Name of the key to identify the &quot;other&quot; phone number.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumberCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.PhoneNumberCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumberCollection.#ctor(System.Collections.Generic.IDictionary{System.String,IDS.EntityModel.PhoneNumber})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.PhoneNumberCollection"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumberCollection.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.PhoneNumberCollection"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumberCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.PhoneNumberCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumberCollection.#ctor(System.Collections.Generic.IDictionary{System.String,IDS.EntityModel.PhoneNumber},System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.PhoneNumberCollection"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumberCollection.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.PhoneNumberCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumberCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.PhoneNumberCollection"/> class.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object containing the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2"></see>.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> structure containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2"></see>.</param>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumberCollection.WorkPhone">
            <summary>
            Gets the work phone number.
            </summary>
            <value>The work phone number.</value>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumberCollection.HomePhone">
            <summary>
            Gets the home phone number.
            </summary>
            <value>The home phone number.</value>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumberCollection.MobilePhone">
            <summary>
            Gets the mobile phone number.
            </summary>
            <value>The mobile phone number.</value>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumberCollection.Fax">
            <summary>
            Gets the fax number.
            </summary>
            <value>The fax number.</value>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumberCollection.OtherPhone">
            <summary>
            Gets the other phone number.
            </summary>
            <value>The other phone number.</value>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumberCollection.Add(IDS.EntityModel.PhoneNumber)">
            <summary>
            Adds the specified phone number to the collection. This method automatically calculates the correct
            collection key based on the PhoneNumberType and the number of items already in the collection.
            </summary>
            <param name="phoneNumber">The phone number.</param>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumberCollection.FaxPhoneNumbers">
            <summary>
            Gets the phone numbers in the collection whose <see cref="T:IDS.EntityModel.PhoneNumberType"/> is <see cref="F:IDS.EntityModel.PhoneNumberType.Fax"/>.
            </summary>
            <returns>
            An enumerator containing phone numbers in the collection whose <see cref="T:IDS.EntityModel.PhoneNumberType"/>
            is <see cref="F:IDS.EntityModel.PhoneNumberType.Fax"/>.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumberCollection.HomePhoneNumbers">
            <summary>
            Gets the phone numbers in the collection whose <see cref="T:IDS.EntityModel.PhoneNumberType"/> is <see cref="F:IDS.EntityModel.PhoneNumberType.Home"/>.
            </summary>
            <returns>
            An enumerator containing phone numbers in the collection whose <see cref="T:IDS.EntityModel.PhoneNumberType"/>
            is <see cref="F:IDS.EntityModel.PhoneNumberType.Home"/>.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumberCollection.MobilePhoneNumbers">
            <summary>
            Gets the phone numbers in the collection whose <see cref="T:IDS.EntityModel.PhoneNumberType"/> is <see cref="F:IDS.EntityModel.PhoneNumberType.Mobile"/>.
            </summary>
            <returns>
            An enumerator containing phone numbers in the collection whose <see cref="T:IDS.EntityModel.PhoneNumberType"/>
            is <see cref="F:IDS.EntityModel.PhoneNumberType.Mobile"/>.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumberCollection.OtherPhoneNumbers">
            <summary>
            Gets the phone numbers in the collection whose <see cref="T:IDS.EntityModel.PhoneNumberType"/> is <see cref="F:IDS.EntityModel.PhoneNumberType.Other"/>.
            </summary>
            <returns>
            An enumerator containing phone numbers in the collection whose <see cref="T:IDS.EntityModel.PhoneNumberType"/>
            is <see cref="F:IDS.EntityModel.PhoneNumberType.Other"/>.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumberCollection.UnknownPhoneNumbers">
            <summary>
            Gets the phone numbers in the collection whose <see cref="T:IDS.EntityModel.PhoneNumberType"/> is <see cref="F:IDS.EntityModel.PhoneNumberType.Unknown"/>.
            </summary>
            <returns>
            An enumerator containing phone numbers in the collection whose <see cref="T:IDS.EntityModel.PhoneNumberType"/>
            is <see cref="F:IDS.EntityModel.PhoneNumberType.Unknown"/>.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.PhoneNumberCollection.WorkPhoneNumbers">
            <summary>
            Gets the phone numbers in the collection whose <see cref="T:IDS.EntityModel.PhoneNumberType"/> is <see cref="F:IDS.EntityModel.PhoneNumberType.Work"/>.
            </summary>
            <returns>
            An enumerator containing phone numbers in the collection whose <see cref="T:IDS.EntityModel.PhoneNumberType"/>
            is <see cref="F:IDS.EntityModel.PhoneNumberType.Work"/>.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.PhoneNumberCollection.PhoneNumbersOfType(IDS.EntityModel.PhoneNumberType)">
            <summary>
            Gets the phone numbers in the collection that have the specified <see cref="T:IDS.EntityModel.PhoneNumberType"/>.
            </summary>
            <param name="phoneNumberType">Type of the phone number.</param>
            <returns>
            An enumerator containing phone numbers in the collection that are of the requested <see cref="T:IDS.EntityModel.PhoneNumberType"/>.
            </returns>
        </member>
        <member name="T:IDS.EntityModel.PhoneNumberType">
            <summary>
            The PhoneNumberType enumeration determines the type of phone number.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.PhoneNumberType.Unknown">
            <summary>
            The phone number type is unknown.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.PhoneNumberType.Work">
            <summary>
            The phone number is a work phone number.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.PhoneNumberType.Home">
            <summary>
            The phone number is a home phone number.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.PhoneNumberType.Mobile">
            <summary>
            The phone number is a mobile phone number.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.PhoneNumberType.Fax">
            <summary>
            The phone number is a fax phone number.
            </summary>
        </member>
        <member name="F:IDS.EntityModel.PhoneNumberType.Other">
            <summary>
            The phone number is neither a work phone, home phone or mobile phone.
            </summary>
        </member>
        <member name="T:IDS.EntityModel.ServiceLocation">
            <summary>
            Represents a service location (e.g., a financial institution branch).
            </summary>
        </member>
        <member name="P:IDS.EntityModel.ServiceLocation.Id">
            <summary>
            Gets or sets an integer that uniquely identifies the service location.
            </summary>
        </member>
        <member name="P:IDS.EntityModel.ServiceLocation.Name">
            <summary>
            Gets or sets the name of the service location.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.ServiceLocation.ToString">
            <summary>
            Gets a string representation of the object.
            </summary>
        </member>
        <member name="T:IDS.EntityModel.ServiceLocationManager">
            <summary>
            Provides methods for retrieving and updating service locations
            as well as for assigning them to users.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.ServiceLocationManager.AddServiceLocation(IDS.EntityModel.ServiceLocation)">
            <summary>
            Adds a specified service location.
            </summary>
            <param name="location">
            The <see cref="T:IDS.EntityModel.ServiceLocation" /> to add.
            </param>
            <exception cref="T:System.ArgumentException">
            The ID of the <paramref name="location" /> conflicts with an existing location.
            </exception>
        </member>
        <member name="M:IDS.EntityModel.ServiceLocationManager.DeleteServiceLocation(IDS.EntityModel.ServiceLocation)">
            <summary>
            Deletes a specified service location.
            </summary>
            <param name="location">
            The <see cref="T:IDS.EntityModel.ServiceLocation" /> to delete.
            </param>
            <exception cref="T:System.InvalidOperationException">
            One or more users are associated with the specified <paramref name="location" />.
            </exception>
        </member>
        <member name="M:IDS.EntityModel.ServiceLocationManager.Dispose">
            <summary>
            Releases all resources used by the service.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.ServiceLocationManager.GetAllServiceLocations">
            <summary>
            Gets all service locations.
            </summary>
            <returns>
            A <see cref="T:IDS.EntityModel.ServiceLocation" /> collection that contains
            all service locations.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.ServiceLocationManager.GetAllUserServiceLocations">
            <summary>
            Gets the service locations for all users.
            </summary>
            <returns>
            A dictionary that maps user IDs to service locations.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.ServiceLocationManager.GetServiceLocation(System.Int32)">
            <summary>
            Gets the service location with a specified ID.
            </summary>
            <param name="id">
            The <see cref="P:IDS.EntityModel.ServiceLocation.Id" /> of the <see cref="T:IDS.EntityModel.ServiceLocation" />
            to retrieve.
            </param>
            <returns>
            The <see cref="T:IDS.EntityModel.ServiceLocation" /> with the specified <paramref name="id" />.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.ServiceLocationManager.GetUserServiceLocation(IDS.Security.IUser)">
            <summary>
            Gets the service location for a specified user.
            </summary>
            <param name="user">
            An <see cref="T:IDS.Security.IUser" />.
            </param>
            <returns>
            The <see cref="T:IDS.EntityModel.ServiceLocation" /> for the specified user,
            or <see langword="null" /> if no service location has been assigned.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.ServiceLocationManager.SetUserServiceLocation(IDS.Security.IUser,IDS.EntityModel.ServiceLocation)">
            <summary>
            Sets the service location for a specified user.
            </summary>
            <param name="user">
            An <see cref="T:IDS.Security.IUser" />.
            </param>
            <param name="location">
            The <see cref="T:IDS.EntityModel.ServiceLocation" /> for the specified user,
            or <see langword="null" /> if no service location has been assigned.
            </param>
        </member>
        <member name="M:IDS.EntityModel.ServiceLocationManager.UpdateServiceLocation(IDS.EntityModel.ServiceLocation)">
            <summary>
            Updates a specified service location.
            </summary>
            <param name="location">
            The <see cref="T:IDS.EntityModel.ServiceLocation" /> to update.
            </param>
        </member>
        <member name="M:IDS.EntityModel.ServiceLocationManager.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the service
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:IDS.EntityModel.SqlServiceLocationManager">
            <summary>
            Provides an implementation of the <see cref="T:IDS.EntityModel.ServiceLocationManager" />
            class for SQL Server.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.SqlServiceLocationManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.EntityModel.SqlServiceLocationManager" /> class.
            </summary>
        </member>
        <member name="P:IDS.EntityModel.SqlServiceLocationManager.ConnectionService">
            <summary>
            Gets or sets the configured <see cref="T:IDS.Data.SqlConnectionService" />.
            </summary>
        </member>
        <member name="P:IDS.EntityModel.SqlServiceLocationManager.ProviderKeyTokenString">
            <summary>
            Gets or sets a string that distinguished the roles managed by this provider
            from other providers.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.SqlServiceLocationManager.AddServiceLocation(IDS.EntityModel.ServiceLocation)">
            <summary>
            Adds a specified service location.
            </summary>
            <param name="location">
            The <see cref="T:IDS.EntityModel.ServiceLocation" /> to add.
            </param>
            <exception cref="T:System.ArgumentException">
            The ID of the <paramref name="location" /> conflicts with an existing location.
            </exception>
        </member>
        <member name="M:IDS.EntityModel.SqlServiceLocationManager.DeleteServiceLocation(IDS.EntityModel.ServiceLocation)">
            <summary>
            Deletes a specified service location.
            </summary>
            <param name="location">
            The <see cref="T:IDS.EntityModel.ServiceLocation" /> to delete.
            </param>
            <exception cref="T:System.InvalidOperationException">
            One or more users are associated with the specified <paramref name="location" />.
            </exception>
        </member>
        <member name="M:IDS.EntityModel.SqlServiceLocationManager.GetAllServiceLocations">
            <summary>
            Gets all service locations.
            </summary>
            <returns>
            A <see cref="T:IDS.EntityModel.ServiceLocation" /> collection that contains
            all service locations.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.SqlServiceLocationManager.GetAllUserServiceLocations">
            <summary>
            Gets the service locations for all users.
            </summary>
            <returns>
            A dictionary that maps user IDs to service locations.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.SqlServiceLocationManager.GetServiceLocation(System.Int32)">
            <summary>
            Gets the service location with a specified ID.
            </summary>
            <param name="id">
            The <see cref="P:IDS.EntityModel.ServiceLocation.Id" /> of the <see cref="T:IDS.EntityModel.ServiceLocation" />
            to retrieve.
            </param>
            <returns>
            The <see cref="T:IDS.EntityModel.ServiceLocation" /> with the specified <paramref name="id" />.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.SqlServiceLocationManager.GetUserServiceLocation(IDS.Security.IUser)">
            <summary>
            Gets the service location for a specified user.
            </summary>
            <param name="user">
            An <see cref="T:IDS.Security.IUser" />.
            </param>
            <returns>
            The <see cref="T:IDS.EntityModel.ServiceLocation" /> for the specified user,
            or <see langword="null" /> if no service location has been assigned.
            </returns>
        </member>
        <member name="M:IDS.EntityModel.SqlServiceLocationManager.SetUserServiceLocation(IDS.Security.IUser,IDS.EntityModel.ServiceLocation)">
            <summary>
            Sets the service location for a specified user.
            </summary>
            <param name="user">
            An <see cref="T:IDS.Security.IUser" />.
            </param>
            <param name="location">
            The <see cref="T:IDS.EntityModel.ServiceLocation" /> for the specified user,
            or <see langword="null" /> if no service location has been assigned.
            </param>
        </member>
        <member name="M:IDS.EntityModel.SqlServiceLocationManager.UpdateServiceLocation(IDS.EntityModel.ServiceLocation)">
            <summary>
            Updates a specified service location.
            </summary>
            <param name="location">
            The <see cref="T:IDS.EntityModel.ServiceLocation" /> to update.
            </param>
        </member>
        <member name="M:IDS.EntityModel.SqlServiceLocationManager.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the service
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:IDS.EntityModel.SqlServiceLocationManager.GetConnectionService">
            <summary>
            Returns the <see cref="P:IDS.EntityModel.SqlServiceLocationManager.ConnectionService" /> after validating that
            it is not <see langword="null" />.
            </summary>
            <returns>
            The <see cref="P:IDS.EntityModel.SqlServiceLocationManager.ConnectionService" />.
            </returns>
        </member>
        <member name="T:IDS.EntityModel.StreetAddressLineCollection">
            <summary>
            Represents a collection of street address lines.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.StreetAddressLineCollection.Create(System.Int32)">
            <summary>
            Creates an instance of the default implementation of the
            <see cref="T:IDS.EntityModel.StreetAddressLineCollection" /> class.
            </summary>
            <param name="maxCount">
            The maximum number of lines the collection can contain.
            </param>
            <returns>
            A new <see cref="T:IDS.EntityModel.StreetAddressLineCollection" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxCount" /> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:IDS.EntityModel.StreetAddressLineCollection.Create(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Creates an instance of the default implementation of the
            <see cref="T:IDS.EntityModel.StreetAddressLineCollection" /> class.
            </summary>
            <param name="lines">
            The initial contents of the collection.
            </param>
            <param name="maxCount">
            The maximum number of lines the collection can contain.
            </param>
            <returns>
            A new <see cref="T:IDS.EntityModel.StreetAddressLineCollection" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxCount" /> is less than or equal to zero.
            </exception>
        </member>
        <member name="P:IDS.EntityModel.StreetAddressLineCollection.Item(System.Int32)">
            <summary>
            Gets the line at a specified index in the collection.
            </summary>
            <param name="index">
            The zero-based index of the line to get.
            </param>
            <returns>
            The line at the specified <paramref name="index" />.
            </returns>
        </member>
        <member name="P:IDS.EntityModel.StreetAddressLineCollection.Count">
            <summary>
            Gets the number of lines in the collection.
            </summary>
            <value>
            The number of lines in the collection.
            </value>
        </member>
        <member name="P:IDS.EntityModel.StreetAddressLineCollection.MaxCount">
            <summary>
            Gets the maximum number of lines the collection can contain.
            </summary>
            <value>
            The maximum number of lines the collection can contain.
            </value>
        </member>
        <member name="P:IDS.EntityModel.StreetAddressLineCollection.Text">
            <summary>
            Gets or sets a newline-delimited string containing the lines
            in the collection.
            </summary>
            <value>
            A newline-delimited string containing the lines
            in the collection, or an empty string if the collection is empty.
            </value>
        </member>
        <member name="M:IDS.EntityModel.StreetAddressLineCollection.Add(System.String)">
            <summary>
            Adds a specified line to the collection.
            </summary>
            <param name="line">
            The line to add to the collection.
            Leading and trailing whitespace is automatically removed.
            </param>
            <remarks>
            <para>
            The <paramref name="line" /> is added to the collection only if
            both the following are true:
            </para>
            <list type="number">
            <item>
            <description>
            <see cref="P:IDS.EntityModel.StreetAddressLineCollection.Count" /> is less than <see cref="P:IDS.EntityModel.StreetAddressLineCollection.MaxCount" />.
            </description>
            </item>
            <item>
            <description>
            <paramref name="line" /> is not <see langword="null" /> and contains
            at least one non-whitespace character.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:IDS.EntityModel.StreetAddressLineCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds zero or more lines to the end of the collection.
            </summary>
            <param name="lines">
            The collection of lines to add to the collection.
            </param>
        </member>
        <member name="M:IDS.EntityModel.StreetAddressLineCollection.Clear">
            <summary>
            Removes all lines from the collection.
            </summary>
        </member>
        <member name="M:IDS.EntityModel.StreetAddressLineCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the collection.
            </returns>
        </member>
        <member name="T:IDS.Security.UserCollection">
            <summary>
            A collection of IUser objects.
            </summary>
        </member>
        <member name="M:IDS.Security.UserCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.UserCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Security.IUser})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Security.UserCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than 0.</exception>
        </member>
        <member name="T:IDS.Security.AccessControlSettings">
            <summary>
            Used to check access by a token.
            </summary>
        </member>
        <member name="M:IDS.Security.AccessControlSettings.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.AccessControlSettings.Provider">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.AccessControlSettings.AccessDeniedErrorMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Security.AccessControlSettings.Validate(System.String)">
            <summary>
            
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.AccessControlSettings.Validate(System.String,IDS.Presentation.IMessageQueue)">
            <summary>
            
            </summary>
            <param name="accessToken"></param>
            <param name="messageQueue"> </param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.AccessSpecification">
            <summary>
            Access specification for a role
            </summary>
        </member>
        <member name="P:IDS.Security.AccessSpecification.Role">
            <summary>
            Role this access spec belongs to
            </summary>
        </member>
        <member name="M:IDS.Security.AccessSpecification.#ctor">
            <summary>
            Default
            </summary>
        </member>
        <member name="M:IDS.Security.AccessSpecification.#ctor(IDS.Security.AccessSpecification)">
            <summary>
            Copy constructor
            </summary>
            <param name="prototype"></param>
        </member>
        <member name="M:IDS.Security.AccessSpecification.#ctor(IDS.Security.Role,IDS.Security.NamedStateCollection)">
            <summary>
            Used to construct access spec for a role
            </summary>
            <param name="role">role</param>
            <param name="accessList">all the access tokens for role</param>
        </member>
        <member name="P:IDS.Security.AccessSpecification.AccessList">
            <summary>
            Access list
            </summary>
        </member>
        <member name="M:IDS.Security.AccessSpecification.GetByName(System.String)">
            <summary>
            Get named state by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.AccessTokenAttribute">
            <summary>
            This class creates a custom attribute to hold the access control tokens
            </summary>
        </member>
        <member name="P:IDS.Security.AccessTokenAttribute.AccessToken">
            <summary>
            gets or sets the access token
            </summary>
        </member>
        <member name="M:IDS.Security.AccessTokenAttribute.#ctor(System.String)">
            <summary>
            Constructor which takes in the Access Token and Initializes the Access token attribute
            </summary>
            <param name="accessToken"></param>
        </member>
        <member name="T:IDS.Security.ActiveDirectory.ActiveDirectoryCredentialValidationProvider">
            <summary>
            Active Directory Validation Provider (implements ICredentialValidationProvider)
            </summary>
        </member>
        <member name="P:IDS.Security.ActiveDirectory.ActiveDirectoryCredentialValidationProvider.CheckDataStorePassword">
            <summary>
            Checks the data store password first before authenticating against directory.
            </summary>
        </member>
        <member name="P:IDS.Security.ActiveDirectory.ActiveDirectoryCredentialValidationProvider.DefaultDomain">
            <summary>
            Gets or sets the default domain.
            </summary>
            <value>The default domain.</value>
        </member>
        <member name="M:IDS.Security.ActiveDirectory.ActiveDirectoryCredentialValidationProvider.Validate(IDS.Security.ICredentials)">
            <summary>
            Performs a validation check against credentials
            </summary>
            <param name="credentials">Credentials to validate</param>
            <returns>true if validated</returns>
        </member>
        <member name="T:IDS.Security.Windows.ActiveDirectoryRoleProvider">
            <summary>
            The ActiveDirectoryRoleProvider exposes roles based on groups within Active Directory.
            </summary>
        </member>
        <member name="F:IDS.Security.Windows.ActiveDirectoryRoleProvider.PasswordIsDirectoryManaged">
            <summary>
            Role which indicates the password for this user provider is managed by a directory.
            </summary>
        </member>
        <member name="P:IDS.Security.Windows.ActiveDirectoryRoleProvider.UserProvider">
            <summary>
            Active Directory User Provider
            </summary>
        </member>
        <member name="M:IDS.Security.Windows.ActiveDirectoryRoleProvider.GetAllRoles">
            <summary>
            RoleCollection containing all the roles associated with this provider
            </summary>
            <value></value>
        </member>
        <member name="P:IDS.Security.Windows.ActiveDirectoryRoleProvider.Groups">
            <summary>
            Gets or sets the Active Directory groups.
            </summary>
            <value>The Active Directory groups.</value>
        </member>
        <member name="P:IDS.Security.Windows.ActiveDirectoryRoleProvider.GroupsString">
            <summary>
            Gets or sets the Active Directory groups string which filters out all AD groups except the following comma-delimited list.
            </summary>
            <value>The Active Directory groups string.</value>
        </member>
        <member name="M:IDS.Security.Windows.ActiveDirectoryRoleProvider.GetRolesForUser(IDS.Security.IUser)">
            <summary>
            Returns a RoleCollection with all the roles associated with the user provided
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.ActiveStatus">
            <summary>
            The ActiveStatus enumeration denotes the current status for an entity.
            </summary>
        </member>
        <member name="F:IDS.Security.ActiveStatus.Unknown">
            <summary>
            The entity has an unknown status.
            </summary>
        </member>
        <member name="F:IDS.Security.ActiveStatus.Active">
            <summary>
            The entity has an active status.
            </summary>
        </member>
        <member name="F:IDS.Security.ActiveStatus.Locked">
            <summary>
            The entity has a locked status.
            </summary>
        </member>
        <member name="F:IDS.Security.ActiveStatus.Disabled">
            <summary>
            The entity has a disabled status.
            </summary>
        </member>
        <member name="F:IDS.Security.ActiveStatus.Deleted">
            <summary>
            The entity has a deleted status. This has been added for Business Banking.
            </summary>
        </member>
        <member name="T:IDS.Security.AdvancedRoleExpression">
            <summary>
            The AdvancedRoleExpression class represents an advanced role expression that supports boolean operators.
            </summary>
        </member>
        <member name="M:IDS.Security.AdvancedRoleExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AdvancedRoleExpression"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.AdvancedRoleExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AdvancedRoleExpression"/> class.
            </summary>
            <param name="strExpression">The STR expression.</param>
        </member>
        <member name="T:IDS.Security.AnonymousCredentials">
            <summary>
            The AnonymousCredentials represents credentials for the anonymous user.
            </summary>
        </member>
        <member name="F:IDS.Security.AnonymousCredentials.Instance">
            <summary>
            The default instance of the AnonymousCredentials class.
            </summary>
        </member>
        <member name="M:IDS.Security.AnonymousCredentials.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AnonymousCredentials"/> class.
            </summary>
        </member>
        <member name="T:IDS.Security.AnonymousUser">
            <summary>
            The AnonymousUser class represents an anonymous user who hasn't yet authenticated.
            </summary>
        </member>
        <member name="M:IDS.Security.AnonymousUser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AnonymousUser"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.AnonymousUser.#ctor(IDS.Security.AnonymousUser)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AnonymousUser"/> class.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="P:IDS.Security.AnonymousUser.Credentials">
            <summary>
            Gets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="P:IDS.Security.AnonymousUser.UserID">
            <summary>
            Gets the user ID which uniquely identifies a user within a user provider.
            </summary>
            <value>The user ID.</value>
        </member>
        <member name="P:IDS.Security.AnonymousUser.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:IDS.Security.AnonymousUser.IsAnonymous">
            <summary>
            Gets a value indicating whether this instance is anonymous.
            </summary>
            <value>
            	<c>true</c> if this instance is anonymous; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:IDS.Security.AnonymousUser.Clone">
            <summary>
            Creates a new User object that is a copy of the current instance.
            </summary>
            <returns>
            A new User object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:IDS.Security.ApplicationRole">
            <summary>
            Default implementation of the <see cref="T:IDS.Security.IApplicationRole"/> interface.
            </summary>
        </member>
        <member name="M:IDS.Security.ApplicationRole.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.ApplicationRole"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.ApplicationRole.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.ApplicationRole"/> class.
            </summary>
            <param name="name">The name of this application role.</param>
        </member>
        <member name="P:IDS.Security.ApplicationRole.Name">
            <summary>
            Gets or sets the name of the application role.
            </summary>
            <value>The name of the application role.</value>
        </member>
        <member name="T:IDS.Security.ApplicationRoleCollection">
            <summary>
            A collection of IApplicationRole objects
            </summary>
        </member>
        <member name="M:IDS.Security.ApplicationRoleCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.ApplicationRoleCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.ApplicationRoleCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Security.IApplicationRole})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.ApplicationRoleCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Security.ApplicationRoleCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.ApplicationRoleCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than 0.</exception>
        </member>
        <member name="T:IDS.Security.AuthenticatedUser">
            <summary>
            The AuthenticatedUser class represents an authenticated user.
            </summary>
            <seealso cref="T:IDS.Security.IAuthenticatedUser"/>
            <seealso cref="T:IDS.Security.User"/>
        </member>
        <member name="E:IDS.Security.AuthenticatedUser.UserLoggedOut">
            <summary>
            The UserLoggedOut event is raised when the user has logged out.
            This event is typically used by an <see cref="T:IDS.Security.IUserProvider"/>
            to provide custom handling of a user logout.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticatedUser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticatedUser.#ctor(IDS.Security.IUserProvider,IDS.Security.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
            <param name="userProvider">The user provider that created this user instance.</param>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="M:IDS.Security.AuthenticatedUser.#ctor(IDS.Security.IUserProvider,IDS.Security.ICredentials,IDS.EntityModel.IPerson)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticatedUser"/> class.
            </summary>
            <param name="userProvider">The user provider.</param>
            <param name="credentials">The credentials.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:IDS.Security.AuthenticatedUser.#ctor(IDS.Security.IUserProvider,IDS.Security.ICredentials,IDS.EntityModel.IName)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
            <param name="userProvider">The user provider that created this user instance.</param>
            <param name="credentials">The credentials.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:IDS.Security.AuthenticatedUser.#ctor(IDS.Security.IUserProvider,IDS.Security.ICredentials,IDS.EntityModel.IName,IDS.EntityModel.IdentificationCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
            <param name="userProvider">The user provider that created this user instance.</param>
            <param name="credentials">The credentials.</param>
            <param name="name">The name.</param>
            <param name="identifications">The identifications.</param>
        </member>
        <member name="M:IDS.Security.AuthenticatedUser.#ctor(IDS.Security.IUserProvider,IDS.Security.ICredentials,IDS.EntityModel.IName,IDS.EntityModel.IAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
            <param name="userProvider">The user provider that created this user instance.</param>
            <param name="credentials">The credentials.</param>
            <param name="name">The name.</param>
            <param name="currentAddress">The current address.</param>
        </member>
        <member name="M:IDS.Security.AuthenticatedUser.#ctor(IDS.Security.IUserProvider,IDS.Security.ICredentials,IDS.EntityModel.IName,IDS.EntityModel.IAddress,IDS.EntityModel.AddressCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
            <param name="userProvider">The user provider that created this user instance.</param>
            <param name="credentials">The credentials.</param>
            <param name="name">The name.</param>
            <param name="currentAddress">The current address.</param>
            <param name="previousAddresses">The previous addresses.</param>
        </member>
        <member name="M:IDS.Security.AuthenticatedUser.#ctor(IDS.Security.IUserProvider,IDS.Security.ICredentials,IDS.EntityModel.IName,IDS.EntityModel.IAddress,IDS.EntityModel.AddressCollection,IDS.EntityModel.IdentificationCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
            <param name="userProvider">The user provider that created this user instance.</param>
            <param name="credentials">The credentials.</param>
            <param name="name">The name.</param>
            <param name="currentAddress">The current address.</param>
            <param name="previousAddresses">The previous addresses.</param>
            <param name="identifications">The identifications.</param>
        </member>
        <member name="M:IDS.Security.AuthenticatedUser.#ctor(IDS.Security.AuthenticatedUser)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticatedUser"/> class.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:IDS.Security.AuthenticatedUser.Logout">
            <summary>
            Logouts this user.
            </summary>
        </member>
        <member name="P:IDS.Security.AuthenticatedUser.IsAuthenticated">
            <summary>
            Gets a value indicating whether this instance is authenticated.
            </summary>
            <value>
            	<c>true</c> if this instance is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:IDS.Security.AuthenticatedUser.Clone">
            <summary>
            Creates a new User object that is a copy of the current instance.
            </summary>
            <returns>
            A new User object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:IDS.Security.AuthenticationException">
            <summary>
            The AuthenticationException class is thrown when a <see cref="T:IDS.Security.IUserProvider"/> is unable to successfully
            authenticate a set of <see cref="T:IDS.Security.ICredentials"/>.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationException.#ctor(IDS.Security.ICredentials,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationException.#ctor(IDS.Security.ICredentials,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:IDS.Security.AuthenticationException.Credentials">
            <summary>
            Gets the credentials associated with this authentication exception.
            </summary>
            <value>The credentials associated with this authentication exception or null.</value>
        </member>
        <member name="P:IDS.Security.AuthenticationException.UserID">
            <summary>
            Gets the user ID that attempted authentication, if known, otherwise it is null.
            </summary>
            <value>The user ID.</value>
        </member>
        <member name="P:IDS.Security.AuthenticationException.Details">
            <summary>
            Gets the details regarding the failure.
            </summary>
            <value>The details regarding the failure.</value>
        </member>
        <member name="P:IDS.Security.AuthenticationException.User">
            <summary>
            Get the user that attempted for authentication
            </summary>
        </member>
        <member name="T:IDS.Security.AuthenticationInvalidLoginNameException">
            <summary>
            The AuthenticationInvalidLoginNameException class is thrown when a <see cref="T:IDS.Security.IUserProvider"/> is unable to successfully
            authenticate a set of <see cref="T:IDS.Security.ICredentials"/> because the login name was invalid.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationInvalidLoginNameException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationInvalidLoginNameException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationInvalidLoginNameException.#ctor(IDS.Security.ICredentials,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationInvalidLoginNameException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationInvalidLoginNameException.#ctor(IDS.Security.ICredentials,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationInvalidLoginNameException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationInvalidLoginNameException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationInvalidLoginNameException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationInvalidLoginNameException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationInvalidLoginNameException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationInvalidLoginNameException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationInvalidLoginNameException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationInvalidLoginNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationInvalidLoginNameException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:IDS.Security.AuthenticationInvalidPasswordException">
            <summary>
            The AuthenticationInvalidPasswordException class is thrown when a <see cref="T:IDS.Security.IUserProvider"/> is unable to successfully
            authenticate a set of <see cref="T:IDS.Security.ICredentials"/> because the login name was invalid.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationInvalidPasswordException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationInvalidPasswordException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationInvalidPasswordException.#ctor(IDS.Security.ICredentials,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationInvalidPasswordException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationInvalidPasswordException.#ctor(IDS.Security.ICredentials,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationInvalidPasswordException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationInvalidPasswordException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationInvalidPasswordException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationInvalidPasswordException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationInvalidPasswordException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationInvalidPasswordException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationInvalidPasswordException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationInvalidPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationInvalidPasswordException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:IDS.Security.AuthenticationLockedException">
            <summary>
            The AuthenticationLockedException class is thrown when a <see cref="T:IDS.Security.IUserProvider"/> is unable to successfully
            authenticate a set of <see cref="T:IDS.Security.ICredentials"/> because the account has been locked or frozen.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationLockedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationLockedException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationLockedException.#ctor(IDS.Security.ICredentials,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationLockedException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationLockedException.#ctor(IDS.Security.ICredentials,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationLockedException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationLockedException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationLockedException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationLockedException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationLockedException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationLockedException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationLockedException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationLockedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationLockedException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:IDS.Security.AuthenticationNewPasswordSameAsCurrentException">
            <summary>
            The AuthenticationNewPasswordSameAsCurrentException class is thrown when a <see cref="T:IDS.Security.IUserProvider"/> determines
            the the password is in violation of our password uniqueness policy.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationNewPasswordSameAsCurrentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationNewPasswordSameAsCurrentException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationNewPasswordSameAsCurrentException.#ctor(IDS.Security.ICredentials,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationNewPasswordSameAsCurrentException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationNewPasswordSameAsCurrentException.#ctor(IDS.Security.ICredentials,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationNewPasswordSameAsCurrentException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationNewPasswordSameAsCurrentException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationNewPasswordSameAsCurrentException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationNewPasswordSameAsCurrentException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationNewPasswordSameAsCurrentException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationNewPasswordSameAsCurrentException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationNewPasswordSameAsCurrentException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationNewPasswordSameAsCurrentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationNewPasswordSameAsCurrentException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:IDS.Security.AuthenticationPasswordDuplicateException">
            <summary>
            The AuthenticationPasswordDuplicateException class is thrown when a <see cref="T:IDS.Security.IUserProvider"/> determines
            the the password is in violation of our password uniqueness policy.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationPasswordDuplicateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationPasswordDuplicateException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationPasswordDuplicateException.#ctor(IDS.Security.ICredentials,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationPasswordDuplicateException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationPasswordDuplicateException.#ctor(IDS.Security.ICredentials,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationPasswordDuplicateException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationPasswordDuplicateException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationPasswordDuplicateException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationPasswordDuplicateException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationPasswordDuplicateException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationPasswordDuplicateException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationPasswordDuplicateException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationPasswordDuplicateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationPasswordDuplicateException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:IDS.Security.AuthenticationPasswordExpiredException">
            <summary>
            The AuthenticationPasswordExpiredException class is thrown when a <see cref="T:IDS.Security.IUserProvider"/> is unable to successfully
            authenticate a set of <see cref="T:IDS.Security.ICredentials"/> because the login name was invalid.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationPasswordExpiredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationPasswordExpiredException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationPasswordExpiredException.#ctor(IDS.Security.ICredentials,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationPasswordExpiredException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationPasswordExpiredException.#ctor(IDS.Security.ICredentials,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationPasswordExpiredException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationPasswordExpiredException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationPasswordExpiredException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationPasswordExpiredException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationPasswordExpiredException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationPasswordExpiredException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationPasswordExpiredException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationPasswordExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationPasswordExpiredException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:IDS.Security.AuthenticationRestrictedException">
            <summary>
            The AuthenticationRestrictedException class is thrown when a <see cref="T:IDS.Security.IUserProvider"/> is unable to successfully
            authenticate a set of <see cref="T:IDS.Security.ICredentials"/> because the account has been locked or frozen.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationRestrictedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationRestrictedException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationRestrictedException.#ctor(IDS.Security.ICredentials,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationRestrictedException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationRestrictedException.#ctor(IDS.Security.ICredentials,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationRestrictedException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationRestrictedException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationRestrictedException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationRestrictedException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationRestrictedException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationRestrictedException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationRestrictedException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationRestrictedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationRestrictedException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:IDS.Security.AuthenticationToken">
            <summary>
            Default implementation of <see cref="T:IDS.Security.IAuthenticationToken"/> interface.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationToken.Destroy">
            <summary>
            Destroy the authentication token.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationToken.Renew">
            <summary>
            Perform renew the authentication
            </summary>
        </member>
        <member name="T:IDS.Security.AuthenticationUserNotAuthorizedException">
            <summary>
            The AuthenticationUserNotAuthorizedException class is thrown when an User is unable to be successfully
            authenticated due to the user not being authorized.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationUserNotAuthorizedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationUserNotAuthorizedException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthenticationUserNotAuthorizedException.#ctor(IDS.Security.ICredentials,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationUserNotAuthorizedException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationUserNotAuthorizedException.#ctor(IDS.Security.ICredentials,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationUserNotAuthorizedException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationUserNotAuthorizedException.#ctor(IDS.Security.ICredentials,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationUserNotAuthorizedException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationUserNotAuthorizedException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationUserNotAuthorizedException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationUserNotAuthorizedException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationUserNotAuthorizedException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
        </member>
        <member name="M:IDS.Security.AuthenticationUserNotAuthorizedException.#ctor(IDS.Security.ICredentials,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationUserNotAuthorizedException"/> class.
            </summary>
            <param name="credentials">The credentials associated with this authentication exception.</param>
            <param name="userID">The user ID, if known, otherwise null.</param>
            <param name="message">The reason for the failure.</param>
            <param name="details">The details regarding the failure.</param>
            <param name="inner">The inner exception associated with this exception (if any).</param>
        </member>
        <member name="M:IDS.Security.AuthenticationUserNotAuthorizedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthenticationUserNotAuthorizedException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:IDS.Security.AuthorizationException">
            <summary>
            The exception that is thrown when a user is not authorized to access a function.	
            </summary>
        </member>
        <member name="M:IDS.Security.AuthorizationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthorizationException" /> class.
            </summary>
        </member>
        <member name="M:IDS.Security.AuthorizationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthorizationException" /> class.
            </summary>
            <param name="message">
            A localized error message, suitable for display to the user, that explains the reason for the exception.
            </param>
        </member>
        <member name="T:IDS.Security.AuthorizationRequiredException">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Security.AuthorizationRequiredException.#ctor(IDS.Security.ICredentials,System.String)">
            <summary>
            
            </summary>
            <param name="credentials"></param>
            <param name="userId"></param>
        </member>
        <member name="M:IDS.Security.AuthorizationRequiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.AuthorizationRequiredException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:IDS.Security.BaseLoginDataValidationService">
            <summary>
            The BaseLoginDataValidationService is a base abstract class for implementing the common functionality
            for the <see cref="T:IDS.Security.ILoginDataValidationService"/>.
            </summary>
        </member>
        <member name="F:IDS.Security.BaseLoginDataValidationService.DEFAULT_PASSWORD_REQUIREMENTS_MESSAGE">
            <summary>
            A constant value for the default password requirements message.
            </summary>
        </member>
        <member name="F:IDS.Security.BaseLoginDataValidationService.VALIDATE_LOGINNAME_METHOD">
            <summary>
            A constant value for the query string parameter for the ValidateLoginName method.
            </summary>
        </member>
        <member name="F:IDS.Security.BaseLoginDataValidationService.VALIDATE_PASSWORD_METHOD">
            <summary>
            A constant value for the query string parameter for the ValidatePassword method.
            </summary>
        </member>
        <member name="F:IDS.Security.BaseLoginDataValidationService.VALIDATE_VALUE_PARAMETER">
            <summary>
            A constant value for the query string parameter that contains the value to pass to the method.
            </summary>
        </member>
        <member name="M:IDS.Security.BaseLoginDataValidationService.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.BaseLoginDataValidationService"/> class.
            </summary>
            <param name="loginNameClientRegularExpression">The login name regular expression to use on the client's browser. This value can be null.</param>
            <param name="passwordClientRegularExpression">The password regular expression to use on the client's browser. This value can be null.</param>
        </member>
        <member name="P:IDS.Security.BaseLoginDataValidationService.LoginNameMinimumLength">
            <summary>
            Gets or sets the minimum length of the login name.
            </summary>
            <value>The minimum length of the login name.</value>
        </member>
        <member name="P:IDS.Security.BaseLoginDataValidationService.LoginNameMaximumLength">
            <summary>
            Gets or sets the maximum length of the login name.
            </summary>
            <value>The maximum length of the login name.</value>
        </member>
        <member name="P:IDS.Security.BaseLoginDataValidationService.PasswordMinimumLength">
            <summary>
            Gets or sets the minimum length of the password.
            </summary>
            <value>The minimum length of the password.</value>
        </member>
        <member name="P:IDS.Security.BaseLoginDataValidationService.PasswordMaximumLength">
            <summary>
            Gets or sets the maximum length of the password.
            </summary>
            <value>The maximum length of the password.</value>
        </member>
        <member name="M:IDS.Security.BaseLoginDataValidationService.ValidateLoginNameString(IDS.Security.IUser,System.String,IDS.Security.LoginDataValidationFailureReason@)">
            <summary>
            Validates the login name string to make sure it conforms to the site requirements.
            </summary>
            <param name="user">The user who this login name is being changed for.</param>
            <param name="loginName">The login name string to validate.</param>
            <param name="failureReason">The reason the validation failed. This is only valid if the method returns false.</param>
            <returns>
            Returns true if the login name conforms to the site requirements.
            </returns>
        </member>
        <member name="M:IDS.Security.BaseLoginDataValidationService.ValidatePasswordString(IDS.Security.IUser,System.String,IDS.Security.LoginDataValidationFailureReason@)">
            <summary>
            Validates the login name string to make sure it conforms to the site requirements.
            </summary>
            <param name="user">The user who this password is being changed for.</param>
            <param name="password">The password string to validate.</param>
            <param name="failureReason">The reason the validation failed. This is only valid if the method returns false.</param>
            <returns>
            Returns true if the login name conforms to the site requirements.
            </returns>
        </member>
        <member name="P:IDS.Security.BaseLoginDataValidationService.LoginNameClientRegularExpression">
            <summary>
            Gets the regular expression for validating the login name. This regular expression should be
            useable in a browser and compatible with the Javascript regular expression engine.
            </summary>
            <value>
            The client side login name regular expression. This value can be null if a client side regular expression is not supported.
            </value>
        </member>
        <member name="P:IDS.Security.BaseLoginDataValidationService.PasswordClientRegularExpression">
            <summary>
            Gets the regular expression for validating the login name. This regular expression should be
            useable in a browser and compatible with the Javascript regular expression engine.
            </summary>
            <value>
            The client side password regular expression. This value can be null if a client side regular expression is not supported.
            </value>
        </member>
        <member name="P:IDS.Security.BaseLoginDataValidationService.SupportsLoginNameExistsMethod">
            <summary>
            Returns true if the service supports the <see cref="M:IDS.Security.ILoginDataValidationService.LoginNameExists(System.String)"/> method. 
            </summary>
            <value>The supports login name exists method.</value>
        </member>
        <member name="M:IDS.Security.BaseLoginDataValidationService.LoginNameExists(System.String)">
            <summary>
            Determines if the name exists already exists.
            </summary>
            <param name="loginName">The login name string to check if it already exists.</param>
            <returns>
            Returns true if the login name already exists.
            </returns>
            <exception cref="T:System.InvalidOperationException">is thrown if the <see cref="T:IDS.Security.ILoginDataValidationService"/>
            doesn't support checking if a login name exists. The <see cref="P:IDS.Security.BaseLoginDataValidationService.SupportsLoginNameExistsMethod"/> method
            should be called before calling this method.</exception>
        </member>
        <member name="P:IDS.Security.BaseLoginDataValidationService.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"/> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"/> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="M:IDS.Security.BaseLoginDataValidationService.ProcessRequest(System.Web.HttpContext)">
            <summary>
            The ProcessRequest method supports two web methods. One to validate the login name and another to validate the password.
            A simple "1" is returned if the value is valid. Otherwise a "0" is returned. After the success value a comma will be returned
            with the reason for the failure. In the case of a success, no value will be after the comma. In the case of a failure, a flag
            will be returned to denote what caused the failure. See the <see cref="T:IDS.Security.LoginDataValidationFailureReason"/> enumeration for
            a list of those flags.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="T:IDS.Security.BasicCredentialPolicy">
            <summary>
            Implements a <see cref="T:IDS.Security.CredentialPolicy" /> with configurable length and format requirements.
            </summary>
        </member>
        <member name="P:IDS.Security.BasicCredentialPolicy.MinLength">
            <inheritdoc />
        </member>
        <member name="P:IDS.Security.BasicCredentialPolicy.MaxLength">
            <inheritdoc />
        </member>
        <member name="P:IDS.Security.BasicCredentialPolicy.ValidChars">
            <inheritdoc />
        </member>
        <member name="P:IDS.Security.BasicCredentialPolicy.RegexPattern">
            <summary>
            Gets or sets a regular expression to be used to validate the entire credential.
            </summary>
        </member>
        <member name="P:IDS.Security.BasicCredentialPolicy.InstructionsTokenString">
            <summary>
            Gets or sets a message that describes the length and format requirements for the credential.
            </summary>
        </member>
        <member name="P:IDS.Security.BasicCredentialPolicy.InvalidCredentialErrorMessage">
            <summary>
            Gets or sets a generic error message for an invalid credential.
            </summary>
        </member>
        <member name="P:IDS.Security.BasicCredentialPolicy.Instructions">
            <inheritdoc />
        </member>
        <member name="M:IDS.Security.BasicCredentialPolicy.Validate(IDS.Security.IUser,System.String)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Security.BasicCredentialPolicy.GetErrorMessage(IDS.Security.LoginDataValidationFailureReason)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Security.BestPracticeLoginDataValidationService">
            <summary>
            The BestPracticeLoginDataValidationService implements the <see cref="T:IDS.Security.ILoginDataValidationService"/>
            and validates the login name and password using the corporate best practices policy.
            </summary>
        </member>
        <member name="F:IDS.Security.BestPracticeLoginDataValidationService.VALID_LOGINNAME_SYMBOLS">
            <summary>
            A constant string containing the symbols that are valid in a login name.
            </summary>
        </member>
        <member name="F:IDS.Security.BestPracticeLoginDataValidationService.VALID_PASSWORD_SYMBOLS">
            <summary>
            A constant string containing the symbols that are valid in a password.
            </summary>
        </member>
        <member name="F:IDS.Security.BestPracticeLoginDataValidationService.LOGINNAME_DEFAULT_REGEX_CLIENTSIDE">
            <summary>
            A constant string containing the regular expression in Javascript format for characters that are valid in a login name. 
            </summary>
        </member>
        <member name="F:IDS.Security.BestPracticeLoginDataValidationService.PASSWORD_DEFAULT_REGEX_CLIENTSIDE">
            <summary>
            A constant string containing the regular expression in Javascript format for characters that are valid in a password. 
            </summary>
        </member>
        <member name="M:IDS.Security.BestPracticeLoginDataValidationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.BestPracticeLoginDataValidationService"/> class.
            </summary>
        </member>
        <member name="P:IDS.Security.BestPracticeLoginDataValidationService.LoginNameClientRegularExpression">
            <summary>
            Gets the regular expression for validating the login name. This regular expression should be
            useable in a browser and compatible with the Javascript regular expression engine.
            </summary>
            <value>
            The client side login name regular expression. This value can be null if a client side regular expression is not supported.
            </value>
            This is overwritten to prevent it from being edited as a ComponentSetting.
        </member>
        <member name="P:IDS.Security.BestPracticeLoginDataValidationService.PasswordClientRegularExpression">
            <summary>
            Gets the regular expression for validating the login name. This regular expression should be
            useable in a browser and compatible with the Javascript regular expression engine.
            </summary>
            <value>
            The client side password regular expression. This value can be null if a client side regular expression is not supported.
            </value>
            This is overwritten to prevent it from being edited as a ComponentSetting.
        </member>
        <member name="M:IDS.Security.BestPracticeLoginDataValidationService.ValidateLoginNameString(IDS.Security.IUser,System.String,IDS.Security.LoginDataValidationFailureReason@)">
            <summary>
            Validates the login name string to make sure it conforms to the corporate best practices requirements.
            </summary>
            <param name="user">The user who this login name is being changed for.</param>
            <param name="loginName">The login name string to validate.</param>
            <param name="failureReason">The reason the validation failed. This is only valid if the method returns false.</param>
            <returns>
            Returns true if the login name conforms to the corporate best practices requirements.
            </returns>
            <remarks>
            The current best practices for login name are:
            Minimum of 8 characters (or the minimum length configured)
            Maximum of 32 characters (or the maximum length configured)
            Upper, Lower-Case Letters and digits allowed.
            </remarks>
        </member>
        <member name="M:IDS.Security.BestPracticeLoginDataValidationService.ValidatePasswordString(IDS.Security.IUser,System.String,IDS.Security.LoginDataValidationFailureReason@)">
            <summary>
            Validates the password string to make sure it conforms to the site requirements.
            </summary>
            <param name="user">The user who this password is being changed for.</param>
            <param name="password">The password string to validate.</param>
            <param name="failureReason">The reason the validation failed. This is only valid if the method returns false.</param>
            <returns>
            Returns true if the password conforms to the site requirements.
            </returns>
            <remarks>
            The current best practices for password are:
            Can't be the same as the login name
            Minimum of 8 characters (or the minimum length configured)
            Maximum of 32 characters (or the maximum length configured)
            Must contain three of four:
            One Upper Case Letter
            One Lower Case Letter
            One Numeral
            One Symbol.
            </remarks>
        </member>
        <member name="T:IDS.Security.BestPracticePasswordPolicy">
            <summary>
            Implements a configurable "best practice" <see cref="T:IDS.Security.CredentialPolicy" /> for passwords.
            </summary>
        </member>
        <member name="P:IDS.Security.BestPracticePasswordPolicy.MinCategoryCount">
            <summary>
            Gets or sets the minimum acceptable number of character categories in the credential.
            </summary>
        </member>
        <member name="P:IDS.Security.BestPracticePasswordPolicy.Symbols">
            <summary>
            Gets or sets the set of characters that are considered to be "symbols".
            </summary>
        </member>
        <member name="P:IDS.Security.BestPracticePasswordPolicy.InstructionsTokenString">
            <inheritdoc />
        </member>
        <member name="P:IDS.Security.BestPracticePasswordPolicy.InvalidCredentialErrorMessage">
            <inheritdoc />
        </member>
        <member name="P:IDS.Security.BestPracticePasswordPolicy.PasswordSameAsLoginNameErrorMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.BestPracticePasswordPolicy.PasswordContainsLoginNameErrorMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Security.BestPracticePasswordPolicy.Validate(IDS.Security.IUser,System.String)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Security.BestPracticePasswordPolicy.GetErrorMessage(IDS.Security.LoginDataValidationFailureReason)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Security.ChangePasswordParameters">
            <summary>
            Data used to change a users password. User and new password must be supplied
            </summary>
        </member>
        <member name="M:IDS.Security.ChangePasswordParameters.#ctor(IDS.Security.IUser,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.ChangePasswordParameters"/> class with the minimum required parameters..
            </summary>
            <param name="user">The user.</param>
            <param name="newPassword">The new password.</param>
        </member>
        <member name="P:IDS.Security.ChangePasswordParameters.User">
            <summary>
            User whose password is being changed. Must be supplied.
            </summary>
        </member>
        <member name="P:IDS.Security.ChangePasswordParameters.ChangedByUser">
            <summary>
            Gets or sets the user who is authorizing the change. Should be supplied
            </summary>
            <value>The user authorizing the change.</value>
        </member>
        <member name="P:IDS.Security.ChangePasswordParameters.NewPassword">
            <summary>
            The value for the new password. Must be supplied.
            </summary>
        </member>
        <member name="P:IDS.Security.ChangePasswordParameters.OldPassword">
            <summary>
            The value given for the old password if the user is required to input this. If provided this value will be verified.
            </summary>
        </member>
        <member name="P:IDS.Security.ChangePasswordParameters.CheckPasswordHistory">
            <summary>
            if set to <c>true</c> the password history will be checked to see if the current password has been used before.
            </summary>
        </member>
        <member name="P:IDS.Security.ChangePasswordParameters.PasswordChangeRequired">
            <summary>
            Gets or sets a value indicating whether [set password change required].
            If null nothing is done. If true user is flagged to change password on next login
            If false user is flagged to not have to change password on next login
            </summary>
            <value>
            	<c>true</c> if [set password change required]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.ChangePasswordParameters.ChangeReason">
            <summary>
            Reason for password change. If provided this data will be included in the audit log.
            </summary>
        </member>
        <member name="P:IDS.Security.ChangePasswordParameters.PasswordValidityPeriod">
            <summary>
            Gets or sets the length of time that the new password is valid before it expires.
            </summary>
            <value>
            A <see cref="T:System.TimeSpan" /> that represents the length of time that the new password is valid,
            or <see cref="F:System.TimeSpan.Zero" /> if the new password never expires. The default is <see cref="F:System.TimeSpan.Zero" />.
            </value>
        </member>
        <member name="P:IDS.Security.ChangePasswordParameters.ChangeMadeByDifferentUser">
            <summary>
            Gets a value indicating whether [change made by different user].
            Requires AuthorizingUser to be set
            </summary>
            <value>
            	<c>true</c> if [change made by different user]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IDS.Security.CredentialPolicy">
            <summary>
            Defines length and format requirements for a credential (such as a login name or password).
            </summary>
        </member>
        <member name="P:IDS.Security.CredentialPolicy.MinLength">
            <summary>
            Gets or sets the minimum acceptable length of the credential.
            </summary>
        </member>
        <member name="P:IDS.Security.CredentialPolicy.MaxLength">
            <summary>
            Gets or sets the maximum acceptable length of the credential.
            </summary>
        </member>
        <member name="P:IDS.Security.CredentialPolicy.ValidChars">
            <summary>
            Gets or sets a regular expression to be used to validate each individual character in the credential.
            </summary>
            <value>
            A regular expression character group without enclosing square brackets.
            </value>
        </member>
        <member name="P:IDS.Security.CredentialPolicy.LoginDataValidationService">
            <summary>
            Gets the underlying <see cref="T:IDS.Security.ILoginDataValidationService" /> instance, if any.
            </summary>
        </member>
        <member name="P:IDS.Security.CredentialPolicy.Instructions">
            <summary>
            Gets a user-friendly message that describes the length and format requirements for the credential.
            </summary>
        </member>
        <member name="M:IDS.Security.CredentialPolicy.Validate(IDS.Security.IUser,System.String)">
            <summary>
            Determines whether a specified credential satisfies the policy.
            </summary>
            <param name="user">
            An <see cref="T:IDS.Security.IUser" /> that represents the user to which the credential belongs.
            </param>
            <param name="credential">
            The credential to validate.
            </param>
            <returns>
            A <see cref="T:IDS.Security.LoginDataValidationFailureReason" /> value that indicates the reason(s), if any,
            that the <paramref name="credential" /> does not satisfy the policy.
            </returns>
        </member>
        <member name="M:IDS.Security.CredentialPolicy.GetErrorMessage(IDS.Security.LoginDataValidationFailureReason)">
            <summary>
            Gets a user-friendly message for a specified <see cref="T:IDS.Security.LoginDataValidationFailureReason" />
            that was previously returned by <see cref="M:IDS.Security.CredentialPolicy.Validate(IDS.Security.IUser,System.String)" />.
            </summary>
            <returns>
            A user-friendly message for the <paramref name="failureReason" />,
            or <see langword="null" /> if no message is available.
            </returns>
        </member>
        <member name="T:IDS.Security.CredentialPolicyHelper">
            <summary>
            Provides helper methods for retrieving <see cref="T:IDS.Security.CredentialPolicy" /> instances.
            </summary>
        </member>
        <member name="M:IDS.Security.CredentialPolicyHelper.GetLoginNamePolicy(IDS.Security.IUser)">
            <summary>
            Gets the <see cref="T:IDS.Security.CredentialPolicy" /> for a specified user's login name using the configured
            <see cref="T:IDS.Security.CredentialPolicyProvider" /> or <see cref="T:IDS.Security.ILoginDataValidationService" />.
            </summary>
        </member>
        <member name="M:IDS.Security.CredentialPolicyHelper.GetPasswordPolicy(IDS.Security.IUser)">
            <summary>
            Gets the <see cref="T:IDS.Security.CredentialPolicy" /> for a specified user's password using the configured
            <see cref="T:IDS.Security.CredentialPolicyProvider" /> or <see cref="T:IDS.Security.ILoginDataValidationService" />.
            </summary>
        </member>
        <member name="M:IDS.Security.CredentialPolicyHelper.RemoveBrackets(System.String)">
            <summary>
            Removes the square brackets around a regular expression character group (such as "[0-9]").
            </summary>
        </member>
        <member name="T:IDS.Security.CredentialPolicyProvider">
            <summary>
            Provides credential policies for users' login names and passwords.
            </summary>
        </member>
        <member name="M:IDS.Security.CredentialPolicyProvider.GetLoginNamePolicy(IDS.Security.IUser)">
            <summary>
            Gets the credential policy for a specified user's login name.
            </summary>
        </member>
        <member name="M:IDS.Security.CredentialPolicyProvider.GetPasswordPolicy(IDS.Security.IUser)">
            <summary>
            Gets the credential policy for a specified user's password.
            </summary>
        </member>
        <member name="T:IDS.Security.Credentials">
            <summary>
            Default implementation of the <see cref="T:IDS.Security.ICredentials"/> interface.
            </summary>
        </member>
        <member name="M:IDS.Security.Credentials.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Credentials"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.Credentials.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Credentials"/> class.
            </summary>
            <param name="loginName">Name of the login.</param>
        </member>
        <member name="M:IDS.Security.Credentials.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Credentials"/> class.
            </summary>
            <param name="loginName">Name of the login.</param>
            <param name="credentialItems">The credential items to associate with this credential.</param>
        </member>
        <member name="M:IDS.Security.Credentials.#ctor(System.String,IDS.Security.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Credentials"/> class.
            </summary>
            <param name="loginName">Name of the login.</param>
            <param name="impersonatorCredentials">The impersonator credentials.</param>
        </member>
        <member name="M:IDS.Security.Credentials.#ctor(System.String,IDS.Security.ICredentials,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Credentials"/> class.
            </summary>
            <param name="loginName">Name of the login.</param>
            <param name="impersonatorCredentials">The impersonator credentials.</param>
            <param name="credentialItems">The credential items to associate with this credential.</param>
        </member>
        <member name="M:IDS.Security.Credentials.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Credentials"/> class.
            </summary>
            <param name="loginName">Name of the login.</param>
            <param name="isSingleSignOn">if set to <c>true</c> single sign on.</param>
        </member>
        <member name="M:IDS.Security.Credentials.#ctor(System.String,System.Boolean,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Credentials"/> class.
            </summary>
            <param name="loginName">Name of the login.</param>
            <param name="isSingleSignOn">if set to <c>true</c> single sign on.</param>
            <param name="credentialItems">The credential items to associate with this credential.</param>
        </member>
        <member name="M:IDS.Security.Credentials.#ctor(System.String,System.Boolean,IDS.Security.ICredentials,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Credentials"/> class.
            </summary>
            <param name="loginName">Name of the login.</param>
            <param name="isSingleSignOn">if set to <c>true</c> [is single sign on].</param>
            <param name="impersonatorCredentials">The impersonator credentials.</param>
            <param name="credentialItems">The credential items to associate with this credential.</param>
        </member>
        <member name="M:IDS.Security.Credentials.#ctor(IDS.Security.Credentials)">
            <summary>
            This is a copy constructor which creates a copy of the <see cref="T:IDS.Security.Credentials"/> instance.
            </summary>
            <param name="credentials">The credentials to copy.</param>
        </member>
        <member name="P:IDS.Security.Credentials.LoginName">
            <summary>
            Gets or sets the login name.
            </summary>
            <value>The login name.</value>
        </member>
        <member name="P:IDS.Security.Credentials.LastUpdateDate">
            <summary>
            Gets the last update date.
            </summary>
            <value>The last update date.</value>
        </member>
        <member name="P:IDS.Security.Credentials.CredentialItems">
            <summary>
            Gets the credential items collection associated with this credential.
            </summary>
            <value>The credential items collection associated with this credential.</value>
        </member>
        <member name="P:IDS.Security.Credentials.IsSingleSignOn">
            <summary>
            Gets whether single sign on was used.
            </summary>
            <value>Whether single sign on was used.</value>
        </member>
        <member name="P:IDS.Security.Credentials.IsImpersonated">
            <summary>
            Gets a value indicating whether this instance is impersonated.
            </summary>
            <value>
            	<c>true</c> if this instance is impersonated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.Credentials.ImpersonatorCredentials">
            <summary>
            Gets or sets the impersonator credentials.
            </summary>
            <value>The impersonator credentials.</value>
        </member>
        <member name="M:IDS.Security.Credentials.Matches(IDS.Security.ICredentials)">
            <summary>
            Determines if the given credentials match this credential.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>Returns true if the credentials match.</returns>
            <remarks>
            Credentials are considered a match if both the login name and password hash match
            the given credentials.
            </remarks>
        </member>
        <member name="M:IDS.Security.Credentials.ToString">
            <summary>
            Returns a <see cref="T:IDS.Security.Credentials"></see> that represents the current <see cref="T:IDS.Security.Credentials"></see>.
            </summary>
            <returns>
            A <see cref="T:IDS.Security.Credentials"></see> that represents the current <see cref="T:IDS.Security.Credentials"></see>.
            </returns>
            <remarks>
            The default implementation returns the LoginName property. Inherited classes should override
            this method to return credentials that are appropriate for that credentials class.
            </remarks>
        </member>
        <member name="M:IDS.Security.Credentials.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:IDS.Security.Credentials"></see> is equal to the current <see cref="T:IDS.Security.Credentials"></see>.
            </summary>
            <param name="obj">The <see cref="T:IDS.Security.Credentials"></see> to compare with the current <see cref="T:IDS.Security.Credentials"></see>.</param>
            <returns>
            true if the specified <see cref="T:IDS.Security.Credentials"></see> is equal to the current <see cref="T:IDS.Security.Credentials"></see>; otherwise, false.
            </returns>
            <remarks>
            Credentials are considered equal if both credentials have the same login name.
            </remarks>
        </member>
        <member name="M:IDS.Security.Credentials.GetHashCode">
            <summary>
            Serves as a hash function for the Credentials type. <see cref="M:System.Object.GetHashCode"></see> 
            is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:IDS.Security.Credentials.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:IDS.Security.CredentialsException">
            <summary>
            The CredentialException class is used to represent exceptions related to credentials.
            </summary>
        </member>
        <member name="M:IDS.Security.CredentialsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.CredentialsException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.CredentialsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.CredentialsException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:IDS.Security.CredentialsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.CredentialsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:IDS.Security.CredentialsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.CredentialsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:IDS.Security.CredentialsProvider">
            <summary>
            The CredentialsProvider is an abstract base class that can be used as a base for a Credentials provider.
            </summary>
            <seealso cref="T:IDS.Security.ICredentialsProvider"/>
        </member>
        <member name="F:IDS.Security.CredentialsProvider.PersistentCredentialsPropertyName">
            <summary>
            The PersistentCredentialsPropertyName constant defines the property name within the credentials items
            that represents a persisted credentials. This can be used to persist the credentials using the ToString()
            method and then convert that persisted credentials back into a credentials instance.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialsProvider.EncryptedPasswordPropertyName">
            <summary>
            The EncryptedPasswordPropertyName constant defines the property name within the credentials items
            that represents an encrypted password.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialsProvider.HashedPasswordPropertyName">
            <summary>
            The HashedPasswordPropertyName constant defines the property name within the credentials items
            that represents an Hashed password.
            </summary>
        </member>
        <member name="M:IDS.Security.CredentialsProvider.GetCredentials(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates the credentials based on the name/value items in the credentialItems collection.
            </summary>
            <param name="credentialItems">A collection containing the credential items. The contents of this
            collection are specific to a particular provider. It is possible a provider might allow null for
            this parameter.</param>
            <returns>
            Returns a <see cref="T:IDS.Security.ICredentials"/> based on the given credential items.
            </returns>
            <exception cref="T:IDS.Security.CredentialsException">A CredentialsException is thrown if a credential is
            not able to be created based on the given credential items.</exception>
        </member>
        <member name="M:IDS.Security.CredentialsProvider.GetCredentials(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Creates the credentials based on the name/value items in the credentialItems collection.
            </summary>
            <param name="credentialItems">A collection containing the credential items. The contents of this
            collection are specific to a particular provider. It is possible a provider might allow null for
            this parameter.</param>
            <param name="isSingleSignon">if set to <c>true</c> the request for credentials is a single signon request.</param>
            <returns>
            Returns a <see cref="T:IDS.Security.ICredentials"/> based on the given credential items.
            </returns>
            <exception cref="T:IDS.Security.CredentialsException">A CredentialsException is thrown if a credential is
            not able to be created based on the given credential items.</exception>
        </member>
        <member name="T:IDS.Security.CredentialValidationResult">
            <summary>
            The CredentialValidationResult enumeration is used to determine whether credentials validation was successful.
            If the validation wasn't successful, the value determines why it was not successful.
            </summary>
            <remarks>
            0 - 99      denotes the credentials were successfully validated although a non-Successful value determines 
            there is a possible issue with the credentials.
            100 - 199   denotes a user error.
            200 - 299   denotes a user provider system error.
            300 - 399   denotes a general error.
            </remarks>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.None">
            <summary>
            No result has been set.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.Successful">
            <summary>
            The credentials were successfully validated.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.AccountLocked">
            <summary>
            The credentials were successfully validated but the account is locked.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.AccountDisabled">
            <summary>
            The credentials were successfully validated but the account is disabled.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.PasswordExpired">
            <summary>
            The credentials were successfully validated but the password is expired.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.SuccessfulDueToSystemCredential">
            <summary>
            The credentials were successfully validated using the <see cref="T:IDS.Security.SystemCredentials"/>.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.SuccessfulDueToSystemCredentialAccountLocked">
            <summary>
            The credentials were successfully validated using the <see cref="T:IDS.Security.SystemCredentials"/> but the account is locked.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.SuccessfulDueToSystemCredentialAccountDisabled">
            <summary>
            The credentials were successfully validated using the <see cref="T:IDS.Security.SystemCredentials"/> but the account is disabled.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.SuccessfulDueToSystemCredentialPasswordExpired">
            <summary>
            The credentials were successfully validated using the <see cref="T:IDS.Security.SystemCredentials"/> but the password is expired.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.SuccessfulDueToImpersonation">
            <summary>
            The credentials were successfully validated using impersonation.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.SuccessfulDueToImpersonationAccountLocked">
            <summary>
            The credentials were successfully validated using impersonation but the account is locked.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.SuccessfulDueToImpersonationAccountDisabled">
            <summary>
            The credentials were successfully validated using impersonation but the account is disabled.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.SuccessfulDueToImpersonationPasswordExpired">
            <summary>
            The credentials were successfully validated using impersonation but the password is expired.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.SuccessfulDueToTrust">
            <summary>
            The credentials were successfully validated due to a trusted source through an single signon (SSO).
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.SuccessfulDueToTrustAccountLocked">
            <summary>
            The credentials were successfully validated due to a trusted source through an single signon (SSO) but the account is locked.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.SuccessfulDueToTrustAccountDisabled">
            <summary>
            The credentials were successfully validated due to a trusted source through an single signon (SSO) but the account is disabled.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.SuccessfulDueToTrustPasswordExpired">
            <summary>
            The credentials were successfully validated due to a trusted source through an single signon (SSO) but the password is expired.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.ValidationFailure">
            <summary>
            This is a marker value to denote the starting of failure reasons. All enumerations under this value are considered successful.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.UserError">
            <summary>
            This is a marker value to denote the starting of failure reasons due to user error.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.InvalidLoginName">
            <summary>
            The credentials were unable to be successfully validated because the login name was not found.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.InvalidPassword">
            <summary>
            The credentials were unable to be successfully validated because the password was invalid.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.UserProviderFailure">
            <summary>
            This is a marker value to denote the starting of failure reasons due to a user provider error.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.UnableToCommunicateWithDatastore">
            <summary>
            The credentials were unable to be successfully validated because the user provider was unable to communicate with the data store.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.UnknownUserProviderError">
            <summary>
            The credentials were unable to be successfully validated because of a general user provider failure.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.SystemFailure">
            <summary>
            This is a marker value to denote the starting of failure reasons due to a general system failure.
            </summary>
        </member>
        <member name="F:IDS.Security.CredentialValidationResult.AuthorizationRequired">
            <summary>
            The credentials were valid but the trusted client ID was not authorized.
            </summary>
        </member>
        <member name="T:IDS.Security.Cryptography.Encryption">
            <summary>
            the Encryption class is a helper class to assist with encrypting and decrypting values.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.Encryption.EncryptAndEncode(System.String,System.String)">
            <summary>
            Encrypts and encodes the value based on the given key container.
            </summary>
            <param name="value">The value.</param>
            <param name="keyContainerName">Name of the key container.</param>
            <returns>Returns the encrypted value as a Base64 encoded string.</returns>
        </member>
        <member name="M:IDS.Security.Cryptography.Encryption.DecodeAndDecrypt(System.String,System.String)">
            <summary>
            Decodes and decrypts the value based on the given key container.
            </summary>
            <param name="value">The encrypted value as a Base64 string.</param>
            <param name="keyContainerName">Name of the key container.</param>
            <returns>Returns the decrypted value.</returns>
        </member>
        <member name="M:IDS.Security.Cryptography.Encryption.ComputeMD5Hash(System.Byte[])">
            <summary>
            Computes the MD5 hash of a specified byte array.
            </summary>
            <param name="content">
            The byte array to compute the hash for.
            </param>
            <returns>
            The hex encoding of the MD5 hash.
            </returns>
        </member>
        <member name="T:IDS.Security.Cryptography.HMAC">
            <summary>
            Implements the HMAC keyed message authentication code algorithm.
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.HMAC.hashAlgorithm">
            <summary>
            Holds the internal hash algorithm
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.HMAC.keyBuffer">
            <summary>
            Holds the key buffer.
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.HMAC.isHashing">
            <summary>
            <b>true</b> if a hash operation is in prograss, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.HMAC.isDisposed">
            <summary>
            <b>true</b> if the object has been disposed, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.HMAC.#ctor(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Cryptography.HMAC"/> class. This class cannot be inherited.
            </summary>
            <param name="hash">The underlying hash algorithm to use.</param>
            <remarks>A random key will be generated and used by the HMAC.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:IDS.Security.Cryptography.HMAC.#ctor(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Cryptography.HMAC"/> class.
            </summary>
            <param name="hash">The underlying hash algorithm to use.</param>
            <param name="rgbKey">The key to use for the HMAC -or- a null reference (<b>Nothing</b> in Visual Basic).</param>
            <remarks>If <paramref name="rgbKey"/> is a null reference, the HMAC class will generate a random key.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:IDS.Security.Cryptography.HMAC.Finalize">
            <summary>
            Finalizes the HMAC.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.HMAC.Initialize">
            <summary>
            Initializes the HMAC.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The HMAC instance has been disposed.</exception>
        </member>
        <member name="M:IDS.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="rgb">The input for which to compute the hash code. </param>
            <param name="ib">The offset into the byte array from which to begin using data. </param>
            <param name="cb">The number of bytes in the byte array to use as data. </param>
            <exception cref="T:System.ObjectDisposedException">The HMAC instance has been disposed.</exception>
        </member>
        <member name="M:IDS.Security.Cryptography.HMAC.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ObjectDisposedException">The HMAC instance has been disposed.</exception>
        </member>
        <member name="P:IDS.Security.Cryptography.HMAC.HashSize">
            <summary>
            Gets the size of the computed hash code in bits.
            </summary>
            <value>The size of the computed hash code in bits.</value>
        </member>
        <member name="M:IDS.Security.Cryptography.HMAC.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the HMAC.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="T:IDS.Security.Cryptography.KeyedHashAlgorithmService">
            <summary>
            Provides a method for hashing data with a randomly generated key.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Security.Cryptography.KeyedHashAlgorithmService.#ctor(System.Security.Cryptography.KeyedHashAlgorithm)">
            <summary>
            
            </summary>
            <param name="algorithm"></param>
        </member>
        <member name="P:IDS.Security.Cryptography.KeyedHashAlgorithmService.KeyBase64">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.KeyedHashAlgorithmService.GetSessionInstance(System.Web.HttpSessionStateBase)">
            <summary>
            Gets an instance of the <see cref="T:IDS.Security.Cryptography.KeyedHashAlgorithmService" /> class
            with random keys that are valid only for a given session.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.KeyedHashAlgorithmService.ComputeHash(System.String)">
            <summary>
            Computes a hash for given input string and returns it in base64 encoding
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.Cryptography.RSAEncryption">
            <summary>
            The RSAEncryption class implements the RSA algoritm for encrypting and decrypting information.
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.RSAEncryption.encryptionBlockSize">
            <summary>
            RSA only allows a certain number of bytes to be encrypted at once.
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.RSAEncryption.encryptedBlockSize">
            <summary>
            this is the size of the rsa encrypted block
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.RSAEncryption.#ctor(System.String,System.String)">
            <summary>
            Initialized a new RSAEncryption object with given public and private keys
            </summary>
            <param name="publicKey">Public key to encrypt with, string.Empty if none</param>
            <param name="bothKeys">Both public and private keys to use in encryption and decryption, string.Empty if none</param>
        </member>
        <member name="M:IDS.Security.Cryptography.RSAEncryption.EncryptAndEncode(System.String)">
            <summary>
            Encrypts the given plainText using the publicKey specified in the constructor
            </summary>
            <param name="plainText">Text to be encrypted</param>
            <returns>Encrypted text</returns>
        </member>
        <member name="M:IDS.Security.Cryptography.RSAEncryption.Encrypt(System.String)">
            <summary>
            Encrypts the given text
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.Cryptography.RSAEncryption.Encrypt(System.Byte[])">
            <summary>
            Encrypts the given byte[] 
            </summary>
            <param name="plainBytes"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.Cryptography.RSAEncryption.Decrypt(System.Byte[])">
            <summary>
            Decrypts the given text using the private key specified in the constructor
            </summary>
            <param name="encryptedBytes">The array of bytes to decrypt.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.Cryptography.RSAEncryption.DecryptAndDecode(System.Byte[])">
            <summary>
            Decrypts the given byte[] and converts it to a UTF8 string
            </summary>
            <param name="encryptedBytes">bytes to decrypt</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.Cryptography.RSAEncryption.DecryptAndDecode(System.String)">
            <summary>
            Decrypts the given encrypted text and converts it to a UTF8 string
            </summary>
            <param name="encryptedText"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.Cryptography.StrongRandom">
            <summary>
            Generates cryptographically strong random numbers using an underlying
            <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="F:IDS.Security.Cryptography.StrongRandom.Instance">
            <summary>
            Gets a default instance of the <see cref="T:IDS.Security.Cryptography.StrongRandom" /> class.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.StrongRandom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Cryptography.StrongRandom" /> class.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.StrongRandom.GeneratePassword(System.Int32)">
            <summary>
            Generates a random password with a specified number of characters.
            The new password may contain uppercase letters, lowercase letters,
            digits, and symbols.
            </summary>
            <param name="length">
            The length of the password to generate.
            </param>
            <returns>
            The new password.
            </returns>
        </member>
        <member name="M:IDS.Security.Cryptography.StrongRandom.NextByte">
            <summary>
            Returns a random <see cref="T:System.Byte" />.
            </summary>
            <returns>
            A random <see cref="T:System.Byte" /> between 0 and 255, inclusive.
            </returns>
        </member>
        <member name="M:IDS.Security.Cryptography.StrongRandom.NextByte(System.Int32)">
            <summary>
            Returns a random <see cref="T:System.Byte" /> less than a specified maximum.
            </summary>
            <param name="maxValueExclusive">
            A positive integer between 1 and 255 that specifies the exclusive
            upper bound of the random number to be generated.
            </param>
            <returns>
            A random <see cref="T:System.Byte" /> greater than or equal to zero,
            and less than <paramref name="maxValueExclusive" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValueExclusive" /> equals zero or is greater
            than 255.
            </exception>
        </member>
        <member name="M:IDS.Security.Cryptography.StrongRandom.NextBytes(System.Byte[])">
            <summary>
            Fills a specified <see cref="T:System.Byte" /> array with random numbers.
            </summary>
            <param name="buffer">
            The <see cref="T:System.Byte" /> array to fill.
            </param>
        </member>
        <member name="M:IDS.Security.Cryptography.StrongRandom.NextInt32">
            <summary>
            Returns a nonnegative random <see cref="T:System.Int32" /> value.
            </summary>
            <returns>
            A random 32-bit integer between 0 and <see cref="F:System.Int32.MaxValue" />,
            inclusive.
            </returns>
        </member>
        <member name="M:IDS.Security.Cryptography.StrongRandom.NextInt32(System.Int32)">
            <summary>
            Returns a nonnegative random <see cref="T:System.Int32" /> value less than
            a specified maximum.
            </summary>
            <param name="maxValueExclusive">
            The exclusive upper bound of the random number to be generated.
            </param>
            <returns>
            A random 32-bit integer greater than or equal to zero,
            and less than <paramref name="maxValueExclusive" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValueExclusive" /> is less than or equal to zero.
            </exception>
            <remarks>
            If <paramref name="maxValueExclusive" /> is less than 256,
            then calling <see cref="M:IDS.Security.Cryptography.StrongRandom.NextByte(System.Int32)" /> is more efficient.
            </remarks>
        </member>
        <member name="M:IDS.Security.Cryptography.StrongRandom.NextInt32(System.Int32,System.Int32)">
            <summary>
            Returns a random <see cref="T:System.Int32" /> value within a specified
            range.
            </summary>
            <param name="minValueInclusive">
            The inclusive lower bound of the random number to be generated.
            </param>
            <param name="maxValueExclusive">
            The exclusive upper bound of the random number to be generated.
            </param>
            <returns>
            A random 32-bit integer greater than or equal to
            <paramref name="minValueInclusive" />,
            and less than <paramref name="maxValueExclusive" />.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="minValueInclusive" /> is not less than
            <paramref name="maxValueExclusive" />.
            </exception>
        </member>
        <member name="T:IDS.Security.Cryptography.SymmetricAlgorithmService">
            <summary>
            Stores encryption keys for a symmetric encryption algorithm
            and provides methods for encrypting and decrypting data.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Security.Cryptography.SymmetricAlgorithmService.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:IDS.Security.Cryptography.SymmetricAlgorithmService" /> class.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.SymmetricAlgorithmService.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:IDS.Security.Cryptography.SymmetricAlgorithmService" /> class.
            </summary>
            <param name="symmetricAlgorithmType">
            The <see cref="T:System.Type" /> of the <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" />
            subclass to use.
            </param>
            <param name="keyBase64">
            The base 64-encoded secret key
            for the symmetric algorithm.
            </param>
            <param name="ivBase64">
            The base 64-encoded initialization vector
            for the symmetric algorithm.
            </param>
        </member>
        <member name="P:IDS.Security.Cryptography.SymmetricAlgorithmService.SymmetricAlgorithmType">
            <summary>
            Gets or sets the <see cref="T:System.Type" />
            of the <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> subclass to use.
            </summary>
        </member>
        <member name="P:IDS.Security.Cryptography.SymmetricAlgorithmService.SymmetricAlgorithmTypeName">
            <summary>
            Gets or sets the <see cref="P:System.Type.AssemblyQualifiedName" />
            of the <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> subclass to use.
            </summary>
        </member>
        <member name="P:IDS.Security.Cryptography.SymmetricAlgorithmService.KeyBase64">
            <summary>
            Gets or sets the base 64-encoded secret key
            for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:IDS.Security.Cryptography.SymmetricAlgorithmService.KeyHexString">
            <summary>
            Gets or sets the hex-encoded secret key
            for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:IDS.Security.Cryptography.SymmetricAlgorithmService.IVBase64">
            <summary>
            Gets or sets the base 64-encoded initialization vector
            for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:IDS.Security.Cryptography.SymmetricAlgorithmService.IVHexString">
            <summary>
            Gets or sets the hex-encoded initialization vector
            for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:IDS.Security.Cryptography.SymmetricAlgorithmService.IncludeSalt">
            <summary>
            Gets or sets a Boolean value that specifies whether random bytes
            are prepended to plaintext data before the data is encrypted.
            </summary>
            <value>
            The default is <see langword="false" />.
            </value>
            <remarks>
            Set this property to <see langword="true" /> to prevent
            the <see cref="M:IDS.Security.Cryptography.SymmetricAlgorithmService.Encrypt(System.Byte[])" /> method from consistently
            returning the same ciphertext given the same plaintext.
            </remarks>
        </member>
        <member name="P:IDS.Security.Cryptography.SymmetricAlgorithmService.UrlSafe">
            <summary>
            Gets or sets a Boolean value that specifies whether to encode ciphertext using Base64URL
            (as opposed to Base64).
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.SymmetricAlgorithmService.CreateRiddle3DES">
            <summary>
            Creates an instance of the <see cref="T:IDS.Security.Cryptography.SymmetricAlgorithmService" />
            class with the encryption algorithm ("Riddle3DES"), default key, and
            default initialization vector used by the OrccConnector library.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.Cryptography.SymmetricAlgorithmService.Decrypt(System.Byte[])">
            <summary>
            Decrypts an array of bytes that was encrypted by
            the <see cref="M:IDS.Security.Cryptography.SymmetricAlgorithmService.Encrypt(System.Byte[])" /> method.
            </summary>
            <param name="ciphertext">
            The array of bytes to decrypt.
            </param>
            <returns>
            The decrypted array of bytes.
            </returns>
        </member>
        <member name="M:IDS.Security.Cryptography.SymmetricAlgorithmService.Decrypt(System.String)">
            <summary>
            Decrypts a string that was encrypted by
            the <see cref="M:IDS.Security.Cryptography.SymmetricAlgorithmService.Encrypt(System.String)" /> method.
            </summary>
            <param name="ciphertextBase64">
            The base 64-encoded string to decrypt.
            </param>
            <returns>
            The decrypted string.
            </returns>
        </member>
        <member name="M:IDS.Security.Cryptography.SymmetricAlgorithmService.Decrypt(System.String,System.Text.Encoding)">
            <summary>
            Decrypts a string that was encrypted by
            the <see cref="M:IDS.Security.Cryptography.SymmetricAlgorithmService.Encrypt(System.String,System.Text.Encoding)" /> method.
            </summary>
            <param name="ciphertextBase64">
            The base 64-encoded string to decrypt.
            </param>
            <param name="encoding">
            The <see cref="T:System.Text.Encoding" /> to use to convert
            the decrypted array of bytes to a string.
            </param>
            <returns>
            The decrypted string.
            </returns>
        </member>
        <member name="M:IDS.Security.Cryptography.SymmetricAlgorithmService.Encrypt(System.Byte[])">
            <summary>
            Encrypts an array of bytes.
            </summary>
            <param name="plaintext">
            The array of bytes to encrypt.
            </param>
            <returns>
            The encrypted array of bytes.
            </returns>
        </member>
        <member name="M:IDS.Security.Cryptography.SymmetricAlgorithmService.Encrypt(System.String)">
            <summary>
            Encrypts a string and encodes the resulting array of bytes
            using base 64 digits.
            </summary>
            <param name="plaintext">
            The string to encrypt.
            </param>
            <returns>
            The encrypted string.
            </returns>
        </member>
        <member name="M:IDS.Security.Cryptography.SymmetricAlgorithmService.Encrypt(System.String,System.Text.Encoding)">
            <summary>
            Encrypts a string and encodes the resulting array of bytes
            using base 64 digits.
            </summary>
            <param name="plaintext">
            The string to encrypt.
            </param>
            <param name="encoding">
            The <see cref="T:System.Text.Encoding" /> to use to convert
            the <paramref name="plaintext" /> to an array of bytes
            prior to encryption.
            </param>
            <returns>
            The encrypted string.
            </returns>
        </member>
        <member name="P:IDS.Security.Cryptography.SymmetricAlgorithmService.SessionInstance">
            <summary>
            Gets an instance of the <see cref="T:IDS.Security.Cryptography.SymmetricAlgorithmService" /> class
            with random keys that are valid only for the current ASP.NET session.
            </summary>
        </member>
        <member name="T:IDS.Security.Cryptography.X509Certificates.CertificateLocator">
            <summary>
            The CertificateLocator class is a helper class to locate a certificate based on the certificate name.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.CertificateLocator.GetCertificateByName(System.String)">
            <summary>
            Loads a certificate from the Personal Container in the local machine's certificate store.
            </summary>
            <param name="certificateFriendlyName">The friendly name for the certificate to be located.
            Unless the certificate has an explicitly set friendly name, this is the value of the <c>Issued To</c> field</param>
            <returns>The <see cref="T:IDS.Security.Cryptography.X509Certificates.X509Certificate"/> object representing the requested certificate.  If the certificate can't be found, returns null.</returns>
            <exception cref="T:IDS.Security.Cryptography.X509Certificates.CertificateStoreException">Occurs when the Local Machine Certificate Store cannot be opened.</exception>
            <remarks>The returned X509Certificate object implements the IDisposable interface.  It should be wrapped in a using(){} block.</remarks>
        </member>
        <member name="T:IDS.Security.Cryptography.X509Certificates.CertificateManager">
            <summary>
            Represents a centralized, configurable repository of X.509 certificates.
            </summary>
            <remarks>
            This class contains a collection of <see cref="T:IDS.Security.Cryptography.X509Certificates.CertificateProvider" /> instances
            which provide an abstraction over the actual storage location of the certificates.
            </remarks>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.CertificateManager.Providers">
            <summary>
            Gets the configured collection of <see cref="T:IDS.Security.Cryptography.X509Certificates.CertificateProvider" /> instances.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.CertificateManager.GetCertificate(System.String)">
            <summary>
            Retrieves the configured certificate from the provider(s) with a specified key.
            </summary>
            <param name="key">
            The <see cref="P:IDS.Security.Cryptography.X509Certificates.CertificateProvider.Key" /> of the provider(s) to query.
            </param>
            <exception cref="T:IDS.Security.Cryptography.X509Certificates.CertificateNotFoundException">
            The specified certificate cannot be found.
            </exception>
        </member>
        <member name="T:IDS.Security.Cryptography.X509Certificates.CertificateNotFoundException">
            <summary>
            The exception that is thrown when a <see cref="T:IDS.Security.Cryptography.X509Certificates.CertificateProvider" /> cannot find the configured certificate.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.CertificateNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Cryptography.X509Certificates.CertificateNotFoundException" /> class.
            </summary>
        </member>
        <member name="T:IDS.Security.Cryptography.X509Certificates.CertificateProvider">
            <summary>
            Serves as the base class of an X.509 certificate provider.
            </summary>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.CertificateProvider.Key">
            <summary>
            Gets or sets a string that identifies this instance of the provider.
            </summary>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.CertificateProvider.Order">
            <summary>
            Gets or sets the order of the provider in the <see cref="P:IDS.Security.Cryptography.X509Certificates.CertificateManager.Providers" /> collection.
            </summary>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.CertificateProvider.CanUpdateCertificate">
            <summary>
            Gets a Boolean value that indicates whether the <see cref="M:IDS.Security.Cryptography.X509Certificates.CertificateProvider.UpdateCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)" /> method is supported.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.CertificateProvider.Dispose">
            <summary>
            Releases all resources used by the object.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.CertificateProvider.GetCertificate">
            <summary>
            Retrieves the configured certificate.
            </summary>
            <returns>
            An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.
            </returns>
            <exception cref="T:IDS.Security.Cryptography.X509Certificates.CertificateNotFoundException">
            The configured certificate cannot be found.
            </exception>
            <remarks>
            The provider remains the owner of the certificate, so the caller should not dispose of it.
            </remarks>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.CertificateProvider.UpdateCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Replaces the configured certificate with a specified certificate.
            </summary>
            <param name="certificate">
            An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that represents the replacement certificate.
            </param>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.CertificateProvider.DoGetCertificate">
            <summary>
            Retrieves the configured certificate.
            </summary>
            <returns>
            An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.
            </returns>
            <exception cref="T:IDS.Security.Cryptography.X509Certificates.CertificateNotFoundException">
            The configured certificate cannot be found.
            </exception>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.CertificateProvider.DoUpdateCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Replaces the configured certificate with a specified certificate.
            </summary>
            <param name="certificate">
            An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that represents the replacement certificate.
            </param>
        </member>
        <member name="T:IDS.Security.Cryptography.X509Certificates.CertificateStoreException">
            <summary>
            The CertificateStoreException is use to denote exceptions when accessing the certificate store.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.CertificateStoreException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CertificateStoreException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.CertificateStoreException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CertificateStoreException class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.CertificateStoreException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CertificateStoreException class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:IDS.Security.Cryptography.X509Certificates.Pkcs12FileCertificateProvider">
            <summary>
            Retrieves an X.509 certificate from a PKCS #12 (.pfx) file.
            </summary>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.Pkcs12FileCertificateProvider.FileName">
            <summary>
            Gets or sets the full path of the file that contains the certificate to retrieve.
            </summary>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.Pkcs12FileCertificateProvider.Password">
            <summary>
            Get or sets the password required to access the file.
            </summary>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.Pkcs12FileCertificateProvider.CanUpdateCertificate">
            <inheritdoc />
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.Pkcs12FileCertificateProvider.DoGetCertificate">
            <inheritdoc />
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.Pkcs12FileCertificateProvider.DoUpdateCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Security.Cryptography.X509Certificates.SystemStoreCertificateProvider">
            <summary>
            Retrieves an X.509 certificate from the system certificate store.
            </summary>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.SystemStoreCertificateProvider.StoreLocation">
            <summary>
            Gets or sets the location of the certificate store to access.
            </summary>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.SystemStoreCertificateProvider.StoreName">
            <summary>
            Gets or sets the name of the certificate store to access.
            </summary>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.SystemStoreCertificateProvider.SubjectName">
            <summary>
            Gets or sets the subject name of the certificate to retrieve.
            </summary>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.SystemStoreCertificateProvider.ValidOnly">
            <summary>
            Gets or sets a Boolean value that specifies whether only a valid certificate should be retrieved.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.SystemStoreCertificateProvider.DoGetCertificate">
            <inheritdoc />
        </member>
        <member name="T:IDS.Security.Cryptography.X509Certificates.X509Certificate">
            <summary>
            The X509Certificate class represents an X509 certificate.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509Certificate.CreateCertificateFromFile(System.String)">
            <summary>
            Creates the certificate from file.
            </summary>
            <param name="fileName">Name of the file to create the certificate from.</param>
            <returns>Returns the X509 certificate.</returns>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509Certificate.CreateCertificateFromSignedFile(System.String)">
            <summary>
            Creates the certificate from signed file.
            </summary>
            <param name="fileName">Name of the signed file to create the certificate from.</param>
            <returns>Returns the X509 certificate.</returns>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509Certificate.CreateCertificateFromBase64String(System.String)">
            <summary>
            Creates the certificate from a base64 encoded string.
            </summary>
            <param name="rawString">The raw base64 encoded string.</param>
            <returns>Returns the X509 certificate.</returns>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the X509Certificate class.
            </summary>
            <param name="rawCertificate">The raw certificate.</param>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the X509Certificate class.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509Certificate.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:IDS.Security.Cryptography.X509Certificates.X509Certificate"/> is reclaimed by 
            garbage collection.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)">
            <summary>
            Disposes the specified disposing.
            </summary>
            <param name="disposing">if set to <c>true</c> if disposing.</param>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509Certificate.GetNameString(IDS.Win32.CertNameType)">
            <summary>
            Gets the name string.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.X509Certificate.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.X509Certificate.FriendlyDisplayName">
            <summary>
            Gets the friendly display name.
            </summary>
            <value>The friendly display name.</value>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.X509Certificate.IsCurrent">
            <summary>
            Gets a value indicating whether this instance is current.
            </summary>
            <value>
            	<c>true</c> if this instance is current; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.X509Certificate.PrincipalName">
            <summary>
            Gets the name of the principal.
            </summary>
            <value>The name of the principal.</value>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.X509Certificate.SimpleDisplayName">
            <summary>
            Gets the simple display name.
            </summary>
            <value>The simple display name.</value>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.X509Certificate.SubjectAlternativeName">
            <summary>
            Gets the name of the alternative subject.
            </summary>
            <value>The name of the alternative subject.</value>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode">
            <summary>
            Returns the hash code for the X.509v3 certificate as an integer.
            </summary>
            <returns>
            The hash code for the X.509 certificate as an integer.
            </returns>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509Certificate.GetKeyIdentifier(System.Boolean)">
            <summary>
            Gets the key identifier.
            </summary>
            <param name="useRFC3280">if set to <c>true</c> use RFC3280.</param>
            <returns>Returns a byte array representing the key identifier.</returns>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509Certificate.GetKeyIdentifierFromCAPI">
            <summary>
            Gets the key identifier from CAPI.
            </summary>
            <returns>Returns a byte array representing the key identifier.</returns>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509Certificate.GetKeyIdentifierFromExtension">
            <summary>
            Gets the key identifier from extension.
            </summary>
            <returns>Returns a byte array representing the key identifier.</returns>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509Certificate.GetKeyIdentifierFromPublicKey">
            <summary>
            Gets the key identifier from public key.
            </summary>
            <returns>Returns a byte array representing the key identifier.</returns>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509Certificate.ToBase64String">
            <summary>
            Converts the certificate to a Base64 encoded string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.Cryptography.X509Certificates.X509CertificateCollection">
            <summary>
            The X509CertificateCollection class contains a collection of X509Certificate instances.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Cryptography.X509Certificates.X509CertificateCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Security.Cryptography.X509Certificates.X509Certificate})">
            <summary>
            Initializes a new instance of the X509CertificateCollection class.
            </summary>
            <param name="collection">The collection of X509Certificates to initialize this collection with.</param>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the X509CertificateCollection class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="T:IDS.Security.Cryptography.X509Certificates.X509CertificateStore">
            <summary>
            The X509CertificateStore class is used to represent an X509 certificate.
            </summary>
        </member>
        <member name="T:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreLocation">
            <summary>
            An enumeration for the location of the certificate store.
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreLocation.CurrentService">
            <summary>
            The certificate store for the current service.
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreLocation.CurrentUser">
            <summary>
            The certificate store for the current user
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreLocation.CurrentUserGroupPolicy">
            <summary>
            The certificate store for the current user group policy
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreLocation.LocalMachine">
            <summary>
            The certificate store for the local machine
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreLocation.LocalMachineEnterprise">
            <summary>
            The certificate store for the local machine enterprise
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreLocation.LocalMachineGroupPolicy">
            <summary>
            The certificate store for the local machine group policy
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreLocation.Services">
            <summary>
            The certificate store for the services
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreLocation.Unknown">
            <summary>
            The certificate store for the unknown store
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreLocation.Users">
            <summary>
            The certificate store for the users store
            </summary>
        </member>
        <member name="T:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreOpenFlags">
            <summary>
            The StoreOpenFlags enumeration denotes how the certificate store should be opened.
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreOpenFlags.CreateNew">
            <summary>
            Create a new entry in the certificate store
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreOpenFlags.DeferClose">
            <summary>
            Defer closing the connection to the certificate store
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreOpenFlags.Delete">
            <summary>
            Delete the entry in the certificate store
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreOpenFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreOpenFlags.OpenExisting">
            <summary>
            Open existing certificate store
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreOpenFlags.ReadOnly">
            <summary>
            Open the connection to the certificate store as read only
            </summary>
        </member>
        <member name="T:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreProvider">
            <summary>
            The StoreProvider enumeration
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreProvider.Collection">
            <summary>
            Collection
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreProvider.File">
            <summary>
            File
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreProvider.Memory">
            <summary>
            Memory
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreProvider.System">
            <summary>
            System
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.CAStore">
            <summary>
            The certificate authority key.
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.MyStore">
            <summary>
            The key for the store name.
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.OtherPeople">
            <summary>
            The key for the address book.
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.RootStore">
            <summary>
            The key for the root store.
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.TrustStore">
            <summary>
            The key for the trust store.
            </summary>
        </member>
        <member name="F:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.UnTrustedStore">
            <summary>
            The key for the untrusted store.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.CurrentUserStore(System.String)">
            <summary>
            Get the certificate with the specified store name from the current user store.
            </summary>
            <param name="storeName">Name of the certificate to retrieve.</param>
            <returns>Returns the certificate for the specified store name.</returns>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.LocalMachineStore(System.String)">
            <summary>
            Get the certificate with the specified store name from the local machine store.
            </summary>
            <param name="storeName">Name of the certificate to retrieve.</param>
            <returns>Returns the certificate for the specified store name.</returns>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.CompareArray(System.Byte[],System.Byte[])">
            <summary>
            Compares the two byte arrays.
            </summary>
            <param name="a">The a array to compare.</param>
            <param name="b">The b array to compare.</param>
            <returns>Returns true if they are an exact match, otherwise false.</returns>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.#ctor(IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreProvider,IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreLocation,System.String)">
            <summary>
            Initializes a new instance of the X509CertificateStore class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="location">The location.</param>
            <param name="storeName">Name of the store.</param>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:IDS.Security.Cryptography.X509Certificates.X509CertificateStore"/> is reclaimed 
            by garbage collection.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.Dispose(System.Boolean)">
            <summary>
            Disposes the specified disposing.
            </summary>
            <param name="disposing">if set to <c>true</c> if disposing.</param>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.Certificates">
            <summary>
            Gets the certificates collection.
            </summary>
            <value>The certificates collection.</value>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.Handle">
            <summary>
            Gets the handle.
            </summary>
            <value>The handle.</value>
        </member>
        <member name="P:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.Location">
            <summary>
            Gets the certificate store location.
            </summary>
            <value>The location of the certificate store.</value>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.Close">
            <summary>
            Closes the associated certificate store.
            </summary>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.FindCertificateByHash(System.Byte[])">
            <summary>
            Finds the certificate by hash.
            </summary>
            <param name="certHash">The cert hash.</param>
            <returns>Returns the X509 certificate collection that match the hash.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException">Thrown if the certificate store is not open.</exception>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.FindCertificateByKeyIdentifier(System.Byte[])">
            <summary>
            Finds the certificate by key identifier.
            </summary>
            <param name="keyIdentifier">The key identifier.</param>
            <returns>Returns the X509 certificate collection that match the key identifier.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException">Thrown if the certificate store is not open.</exception>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.FindCertificateBySubjectName(System.String)">
            <summary>
            Finds the name of the certificate by subject name.
            </summary>
            <param name="subjectstring">The subjectstring.</param>
            <returns>Returns the X509 certificate collection that match the subject name.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException">Thrown if the certificate store is not open.</exception>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.FindCertificateBySubjectString(System.String)">
            <summary>
            Finds the name of the certificate by subject string.
            </summary>
            <param name="subjectsubstring">The subjectsubstring.</param>
            <returns>
            Returns the X509 certificate collection that match the subject string.
            </returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException">Thrown if the certificate store is not open.</exception>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.Open">
            <summary>
            Opens the existing certificate store.
            </summary>
            <returns>Return true if the open is successful, otherwise false.</returns>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.Open(IDS.Security.Cryptography.X509Certificates.X509CertificateStore.StoreOpenFlags)">
            <summary>
            Opens the certificate store using the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <returns>Return true if the open is successful, otherwise false.</returns>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.OpenRead">
            <summary>
            Opens the existing certificate store for reading.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.Cryptography.X509Certificates.X509CertificateStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:IDS.Security.DefaultCredentialsProvider">
            <summary>
            The DefaultCredentialsProvider is used by the signin module when no credentials provider has been configured.
            </summary>
        </member>
        <member name="P:IDS.Security.DefaultCredentialsProvider.LoginPropertyName">
            <summary>
            Gets or sets the name of the login property key.
            </summary>
            <value>The name of the login property key.</value>
        </member>
        <member name="P:IDS.Security.DefaultCredentialsProvider.PasswordPropertyName">
            <summary>
            Gets or sets the name of the password property key.
            </summary>
            <value>The name of the password property key.</value>
        </member>
        <member name="M:IDS.Security.DefaultCredentialsProvider.GetCredentials(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Creates the credentials based on the name/value items in the credentialItems collection.
            </summary>
            <param name="credentialItems">A collection containing the credential items. The DefaultCredentialsProvider
            supports only three items in the collection: "LoginName", "Password" and "PersistentCredentials". The first 
            two names are configurable. <see cref="P:IDS.Security.DefaultCredentialsProvider.LoginPropertyName"/> and <see cref="P:IDS.Security.DefaultCredentialsProvider.PasswordPropertyName"/>.
            </param>
            <param name="isSingleSignon">if set to <c>true</c> the request for credentials is a single signon request.</param>
            <returns>
            Returns a <see cref="T:IDS.Security.ICredentials"/> based on the given credential items.
            </returns>
            <exception cref="T:IDS.Security.CredentialsException">A CredentialsException is thrown if a credential is
            not able to be created based on the given credential items.</exception>
        </member>
        <member name="T:IDS.Security.DefaultRoleMaintenanceDataParser">
            <summary>
            Default implementation of <see cref="T:IDS.Security.IRoleMaintenanceDataParser"/>
            that reads a newline-delimited list of user IDs.
            </summary>
        </member>
        <member name="M:IDS.Security.DefaultRoleMaintenanceDataParser.GetUserIDsFromDataStream(System.IO.Stream,IDS.ComponentModel.Dataspace)">
            <summary>
            Gets the user IDs from the data stream.
            </summary>
            <param name="dataStream">The data stream.</param>
            <param name="dataspace">The dataspace.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.DefaultRoleMaintenanceDataParser.GetDataFromStream(System.IO.Stream)">
            <summary>Gets the user data from the data stream.</summary>
            <param name="dataStream">The data stream.</param>
        </member>
        <member name="M:IDS.Security.DefaultRoleMaintenanceDataParser.GetStreamFromData(System.Collections.Generic.List{System.String})">
            <summary>Serializes the user data to a open Stream and returns it<see cref="T:System.IO.Stream"/>.</summary>
            <param name="data">A list of user data</param>
        </member>
        <member name="T:IDS.Security.DefaultUserProvider">
            <summary>
            The DefaultUserProvider provides a very based access to the Portal. It provides no validation of 
            password and is only available from the loopback address
            </summary>
        </member>
        <member name="P:IDS.Security.DefaultUserProvider.LoginDataValidationService">
            <summary>
            Gets the login data validation service.
            </summary>
            <value>The login data validation service.</value>
        </member>
        <member name="P:IDS.Security.DefaultUserProvider.LoginPropertyName">
            <summary>
            Gets or sets the name of the login property key.
            </summary>
            <value>The name of the login property key.</value>
        </member>
        <member name="P:IDS.Security.DefaultUserProvider.PasswordPropertyName">
            <summary>
            Gets or sets the name of the password property key.
            </summary>
            <value>The name of the password property key.</value>
        </member>
        <member name="M:IDS.Security.DefaultUserProvider.ValidateCredentials(IDS.Security.ICredentials)">
            <summary>
            Validates the given credentials.
            </summary>
            <param name="credentials">The credentials to validate.</param>
            <returns>Returns a <see cref="T:IDS.Security.CredentialValidationResult"/> enumeration which denotes whether the validation was successful
            or why it wasn't successful.</returns>
        </member>
        <member name="M:IDS.Security.DefaultUserProvider.AuthenticateCredentials(IDS.Security.ICredentials)">
            <summary>
            Attempts to authenticate the given credentials.
            </summary>
            <param name="credentials">The credentials to authenticate.</param>
            <returns>
            A <see cref="T:IDS.Security.IUser"/> object that contains the authenticated user data for the given credentials.
            </returns>
            <exception cref="T:IDS.Security.AuthenticationException">The AuthenticationException is thrown if the credentials are unable
            to be authenticated.</exception>
        </member>
        <member name="M:IDS.Security.DefaultUserProvider.RequestUrlIsValid">
            <summary>
            Is the URL valid for this request?
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.DefaultUserProvider.GetUser(System.String)">
            <summary>
            Gets the user information for a particular user ID.
            </summary>
            <param name="userID">The user ID for the user to retrieve.</param>
            <returns>
            Returns an <see cref="T:IDS.Security.IUser"/> object for the user ID. If the user ID is not found, the return
            value would be null.
            </returns>
        </member>
        <member name="M:IDS.Security.DefaultUserProvider.GetUserByCredentials(IDS.Security.ICredentials)">
            <summary>
            Gets the user information for a particular credential.
            </summary>
            <param name="credentials">The credentials to authenticate.</param>
            <returns>
            A <see cref="T:IDS.Security.IUser"/> object that contains the authenticated user data for the given credentials or null if no user
            is associated with those credentials.
            </returns>
        </member>
        <member name="M:IDS.Security.DefaultUserProvider.GetUserStatus(System.String)">
            <summary>
            Gets the user status.
            </summary>
            <param name="userID">The user ID.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.DefaultUserProvider.SetUserStatus(IDS.Security.IUser,IDS.Security.ActiveStatus)">
            <summary>
            Sets the user status.
            </summary>
            <param name="user">The user.</param>
            <param name="status">The status.</param>
        </member>
        <member name="P:IDS.Security.DefaultUserProvider.MaxFailedLoginAttempts">
            <summary>
            Gets the maximum number failed login attempts at which a user's status should be changed to <see cref="F:IDS.Security.ActiveStatus.Locked"/>.
            </summary>
        </member>
        <member name="M:IDS.Security.DefaultUserProvider.GetCredentials(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates the credentials based on the name/value items in the credentialItems collection.
            </summary>
            <param name="credentialItems">A collection containing the credential items. The contents of this
            collection are specific to a particular provider. It is possible a provider might allow null for
            this parameter.</param>
            <returns>
            Returns a <see cref="T:IDS.Security.ICredentials"/> based on the given credential items.
            </returns>
            <exception cref="T:IDS.Security.CredentialsException">A CredentialsException is thrown if a credential is
            not able to be created based on the given credential items.</exception>
        </member>
        <member name="M:IDS.Security.DefaultUserProvider.GetCredentials(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Creates the credentials based on the name/value items in the credentialItems collection.
            </summary>
            <param name="credentialItems">A collection containing the credential items. The contents of this
            collection are specific to a particular provider. It is possible a provider might allow null for
            this parameter.</param>
            <param name="isSingleSignon">if set to <c>true</c> the request for credentials is a single signon request.</param>
            <returns>
            Returns a <see cref="T:IDS.Security.ICredentials"/> based on the given credential items.
            </returns>
            <exception cref="T:IDS.Security.CredentialsException">A CredentialsException is thrown if a credential is
            not able to be created based on the given credential items.</exception>
        </member>
        <member name="M:IDS.Security.DefaultUserProvider.OnInit">
            <summary>
            Called right after the service is initialized.
            </summary>
        </member>
        <member name="M:IDS.Security.DefaultUserProvider.OnInitAllServices">
            <summary>
            Called after all the services are initialized.
            </summary>
        </member>
        <member name="T:IDS.Security.DelegatedLoginDataValidationService">
            <summary>
            The DelegatedLoginDataValidationService class implements the <see cref="T:IDS.Security.ILoginDataValidationService"/> interface
            and delegates all methods to a contained ILoginDataValidationService instance except for the CheckIfLoginNameExists()
            method and the SupportsLoginNameExistsMethod property. These are called on the passed delegate. This class solves
            the problem of allowing a service to be configured and then attached to a user provider to provide the CheckIfLoginNameExists
            delegate.
            </summary>
        </member>
        <member name="T:IDS.Security.DelegatedLoginDataValidationService.CheckIfLoginNameExists">
            <summary>
            A delegate to check if the login name exists.
            </summary>
        </member>
        <member name="M:IDS.Security.DelegatedLoginDataValidationService.#ctor">
            <summary>
            DelegatedLoginDataValidationService
            </summary>
        </member>
        <member name="M:IDS.Security.DelegatedLoginDataValidationService.#ctor(IDS.Security.ILoginDataValidationService,IDS.Security.DelegatedLoginDataValidationService.CheckIfLoginNameExists)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.DelegatedLoginDataValidationService"/> class.
            </summary>
            <param name="loginDataValidationService">The login data validation service.</param>
            <param name="checkIfLoginNameExists">The check if login name exists method.</param>
        </member>
        <member name="P:IDS.Security.DelegatedLoginDataValidationService.BaseService">
            <summary>
            Gets the <see cref="T:IDS.Security.ILoginDataValidationService" /> that this service delegates to.
            </summary>
        </member>
        <member name="M:IDS.Security.DelegatedLoginDataValidationService.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests. </param>
        </member>
        <member name="P:IDS.Security.DelegatedLoginDataValidationService.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.
            </summary>
            <returns>
            true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.
            </returns>
        </member>
        <member name="P:IDS.Security.DelegatedLoginDataValidationService.LoginNameMinimumLength">
            <summary>
            Gets the minimum allowed length of the login name.
            </summary>
            <value>The minimum allowed length of the login name.</value>
        </member>
        <member name="P:IDS.Security.DelegatedLoginDataValidationService.LoginNameMaximumLength">
            <summary>
            Gets the maximum allowed length of the login name.
            </summary>
            <value>The maximum allowed length of the login name.</value>
        </member>
        <member name="P:IDS.Security.DelegatedLoginDataValidationService.PasswordMinimumLength">
            <summary>
            Gets the minimum allowed length of the password.
            </summary>
            <value>The minimum length of the password.</value>
        </member>
        <member name="P:IDS.Security.DelegatedLoginDataValidationService.PasswordMaximumLength">
            <summary>
            Gets the maximum allowed length of the password.
            </summary>
            <value>The maximum length of the password.</value>
        </member>
        <member name="M:IDS.Security.DelegatedLoginDataValidationService.ValidateLoginNameString(IDS.Security.IUser,System.String,IDS.Security.LoginDataValidationFailureReason@)">
            <summary>
            Validates the login name string to make sure it conforms to the site requirements.
            </summary>
            <param name="user">The user who this login name is being changed for.</param>
            <param name="loginName">The login name string to validate.</param>
            <param name="failureReason">The reason the validation failed. This is only valid if the method returns false.</param>
            <returns>
            Returns true if the login name conforms to the site requirements.
            </returns>
        </member>
        <member name="M:IDS.Security.DelegatedLoginDataValidationService.ValidatePasswordString(IDS.Security.IUser,System.String,IDS.Security.LoginDataValidationFailureReason@)">
            <summary>
            Validates the login name string to make sure it conforms to the site requirements.
            </summary>
            <param name="user">The user who this password is being changed for.</param>
            <param name="password">The password string to validate.</param>
            <param name="failureReason">The reason the validation failed. This is only valid if the method returns false.</param>
            <returns>
            Returns true if the login name conforms to the site requirements.
            </returns>
        </member>
        <member name="P:IDS.Security.DelegatedLoginDataValidationService.LoginNameClientRegularExpression">
            <summary>
            Gets the regular expression for validating the login name. This regular expression should be 
            useable in a browser and compatible with the Javascript regular expression engine.
            </summary>
            <value>The client side login name regular expression. This value can be null if a client side regular expression is not supported.</value>
        </member>
        <member name="P:IDS.Security.DelegatedLoginDataValidationService.PasswordClientRegularExpression">
            <summary>
            Gets the regular expression for validating the login name. This regular expression should be 
            useable in a browser and compatible with the Javascript regular expression engine.
            </summary>
            <value>The client side password regular expression. This value can be null if a client side regular expression is not supported.</value>
        </member>
        <member name="P:IDS.Security.DelegatedLoginDataValidationService.SupportsLoginNameExistsMethod">
            <summary>
            Returns true if the service supports the <see cref="M:IDS.Security.ILoginDataValidationService.LoginNameExists(System.String)"/> method. 
            </summary>
            <value>The supports login name exists method.</value>
        </member>
        <member name="M:IDS.Security.DelegatedLoginDataValidationService.LoginNameExists(System.String)">
            <summary>
            Determines if the name exists already exists.
            </summary>
            <param name="loginName">The login name string to check if it already exists.</param>
            <returns>Returns true if the login name already exists.</returns>
            <exception cref="T:System.InvalidOperationException">is thrown if the <see cref="T:IDS.Security.ILoginDataValidationService"/>
            doesn't support checking if a login name exists. The <see cref="P:IDS.Security.ILoginDataValidationService.SupportsLoginNameExistsMethod"/> method
            should be called before calling this method.</exception>
        </member>
        <member name="T:IDS.Security.DuplicateCredentialsException">
            <summary>
            The exception that is thrown when an attempt is made to add non-unique credentials to an <see cref="T:IDS.Security.IPersistentUserProvider"/>.
            </summary>
        </member>
        <member name="M:IDS.Security.DuplicateCredentialsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.DuplicateCredentialsException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.DuplicateCredentialsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.DuplicateCredentialsException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:IDS.Security.DuplicateCredentialsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.DuplicateCredentialsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:IDS.Security.DuplicateCredentialsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.DuplicateCredentialsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:IDS.Security.HashedPassword">
            <summary>
            The HashedPassword class is used to calculate a hashed password.
            </summary>
        </member>
        <member name="M:IDS.Security.HashedPassword.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.HashedPassword"/> class.
            </summary>
            <param name="password">The password to hash.</param>
        </member>
        <member name="M:IDS.Security.HashedPassword.#ctor(IDS.Security.HashedPasswordType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.HashedPassword"/> class.
            </summary>
            <param name="hashedPasswordType">The hash password algorithm to use to hash the password.</param>
            <param name="seed">The seed to use to calculate the hash. If this value is null, a random seed will be generated if the type is Enhanced.</param>
            <param name="password">The password to hash.</param>
        </member>
        <member name="M:IDS.Security.HashedPassword.#ctor(IDS.Security.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.HashedPassword"/> class.
            </summary>
            <param name="credentials">The credentials containing the password to hash.</param>
        </member>
        <member name="M:IDS.Security.HashedPassword.#ctor(System.String,System.String,IDS.Security.HashedPasswordType)">
            <summary>
            A private constructor that initializes a new instance of the <see cref="T:IDS.Security.HashedPassword"/> class.
            </summary>
            <param name="hash">The hashed password.</param>
            <param name="seed">The seed.</param>
            <param name="hashedPasswordType">Type of the hashed password.</param>
        </member>
        <member name="P:IDS.Security.HashedPassword.HashedPasswordType">
            <summary>
            Gets or sets the type of the hashed password.
            </summary>
            <value>The type of the hashed password.</value>
        </member>
        <member name="M:IDS.Security.HashedPassword.CredentialMatches(IDS.Security.ICredentials)">
            <summary>
            Determines if the password associated with the given credentials matches the hashed password.
            </summary>
            <param name="credentials">The credentials to determine if the credentials matches the hashed password.</param>
            <returns>Returns true if the password matches.</returns>
        </member>
        <member name="M:IDS.Security.HashedPassword.CredentialMatches(IDS.Security.ICredentials,System.String)">
            <summary>
            Determines if the given password matches the hashed password.
            </summary>
            <param name="credentials">The credentials associated with the given password.</param>
            <param name="password">The password to compare against the hashed password.</param>
            <returns>Returns true if the password matches.</returns>
        </member>
        <member name="M:IDS.Security.HashedPassword.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:IDS.Security.HashedPassword"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:IDS.Security.HashedPassword"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:IDS.Security.HashedPassword"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:IDS.Security.HashedPassword.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:IDS.Security.HashedPassword.Parse(System.String)">
            <summary>
            Parses the specified hashed password string to create an instance of the HashedPassword class.
            </summary>
            <param name="hashedPasswordString">The hashed password string to parse.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.HashedPassword.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that returns the hash associated with this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the hash associated with this instance.
            </returns>
        </member>
        <member name="M:IDS.Security.HashedPassword.CalculateHashedPassword(IDS.Security.HashedPasswordType,System.String,System.String)">
            <summary>
            Calculates the hash based on the credentials associated with this instance and the current hashed password type.
            </summary>
            <param name="hashedPasswordType">Type of hash to use to create the hashed password.</param>
            <param name="seed">The seed to add to the password hash.</param>
            <param name="password">The password to hash.</param>
            <returns>
            Returns a HashedPassword instance that represents the hashed password.
            </returns>
        </member>
        <member name="M:IDS.Security.HashedPassword.GenerateRandomSeed">
            <summary>
            Generates a random seed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.HashedPasswordType">
            <summary>
            The HashedPasswordType determines how the password hash should be calculated.
            </summary>
        </member>
        <member name="F:IDS.Security.HashedPasswordType.Legacy">
            <summary>
            The original method of hashing the password using the login name plus password. This method has since been deprecated.
            </summary>
        </member>
        <member name="F:IDS.Security.HashedPasswordType.EnhancedLegacy">
            <summary>
            An enhanced method that is easy to convert from the legacy format. This is an interim version to provide backwards 
            compatibility while still allowing the login name to be changed.
            </summary>
        </member>
        <member name="F:IDS.Security.HashedPasswordType.Enhanced">
            <summary>
            An enhanced hashed method where the seed is an encrypted randomly generated value that is stored as part of the hash.
            </summary>
        </member>
        <member name="F:IDS.Security.HashedPasswordType.EnhancedPbkdf2">
            <summary>
            An enhanced hashed method where the seed is an encrypted randomly generated value that is stored as part of the hash.
            Also uses the PBKDF2 encryption algorithm
            </summary>
        </member>
        <member name="F:IDS.Security.HashedPasswordType.EnhancedPbkdf2Sha256">
            <summary>
            Same as EnhancedPbkdf2 but uses SHA256 instead of SHA1
            </summary>
        </member>
        <member name="F:IDS.Security.HashedPasswordType.Default">
            <summary>
            The default method to use to calculate the hash.
            </summary>
        </member>
        <member name="T:IDS.Security.HiddenRole">
            <summary>
            Adds a "Hidden" flag to a <see cref="T:IDS.Security.Role" />.
            Used by the <see cref="T:IDS.Security.SqlRoleProvider" /> to allow certain roles to be viewed
            only by privileged users.
            </summary>
        </member>
        <member name="M:IDS.Security.HiddenRole.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.HiddenRole" /> class.
            </summary>
            <param name="name">
            The name of the role.
            </param>
        </member>
        <member name="P:IDS.Security.HiddenRole.Hidden">
            <summary>
            Gets or sets a Boolean value that indicates whether the role can only be
            viewed by privileged users.
            </summary>
            <value>
            <see langword="true" /> if the role can only be viewed by privileged users;
            <see langword="false" /> if the role can be viewed by everyone.
            The default is <see langword="false" />.
            </value>
        </member>
        <member name="M:IDS.Security.HiddenRole.IsHidden(IDS.Security.Role)">
            <summary>
            Determines whether a specified <see cref="T:IDS.Security.Role" /> is hidden.
            </summary>
            <param name="role">
            A <see cref="T:IDS.Security.Role" />.
            </param>
            <returns>
            <see langword="true" /> if the <paramref name="role" /> is hidden;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="T:IDS.Security.IAccessControlChecker">
            <summary>
            Access control checker contract
            </summary>
        </member>
        <member name="M:IDS.Security.IAccessControlChecker.HasAccess(System.String)">
            <summary>
            Method to check rights for accessToken token
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.IAccessControlChecker.OnEval``1(System.Func{``0,System.Boolean})">
            <summary>
            Method to check rights for accessToken token
            </summary>
            <param name="predicateExpression"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.IAccessControlInfoProvider">
            <summary>
            Access control information provider contract
            </summary>
        </member>
        <member name="M:IDS.Security.IAccessControlInfoProvider.GetGrantForAll">
            <summary>
            Load all access control information
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.IAccessControlInfoProvider.GetGrantForRole(System.String)">
            <summary>
            Get access grants for a specific role
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.IAccessControlInfoProvider.SaveAccessInfo(IDS.Security.AccessSpecification)">
            <summary>
            Save all access control info
            </summary>
            <param name="accessSpecification"></param>
        </member>
        <member name="M:IDS.Security.IAccessControlInfoProvider.GetAllAccessToken">
            <summary>
            Get all access definitions
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.IApplicationRole">
            <summary>
            Interface for implementing an object that represents an application role.
            </summary>
        </member>
        <member name="P:IDS.Security.IApplicationRole.Name">
            <summary>
            Gets or sets the name of the application role.
            </summary>
            <value>The name of the application role.</value>
        </member>
        <member name="T:IDS.Security.IAuthenticatedUser">
            <summary>
            Interface for implementing an object that represents a user who has been authenticated.
            </summary>
            <seealso cref="T:IDS.Security.IUser"/>
        </member>
        <member name="E:IDS.Security.IAuthenticatedUser.UserLoggedOut">
            <summary>
            Occurs when the user has logged out of the application.
            </summary>
        </member>
        <member name="M:IDS.Security.IAuthenticatedUser.Logout">
            <summary>
            Causes the user to log out of the application.
            </summary>
        </member>
        <member name="T:IDS.Security.IAuthenticationToken">
            <summary>
            Authentication token interface
            </summary>
        </member>
        <member name="M:IDS.Security.IAuthenticationToken.Destroy">
            <summary>
            Destroy the authentication token.
            </summary>
        </member>
        <member name="M:IDS.Security.IAuthenticationToken.Renew">
            <summary>
            Perform renew the authentication
            </summary>
        </member>
        <member name="T:IDS.Security.IChangeLoginNameProvider">
            <summary>
            The IChangeLoginNameProvider interface is used to add support to an <see cref="T:IDS.Security.IUserProvider"/> for changing
            a login name.
            </summary>
        </member>
        <member name="M:IDS.Security.IChangeLoginNameProvider.CanChangeLoginName(IDS.Security.IUser)">
            <summary>
            Determines whether the login name can be changed for the specified user.
            </summary>
            <param name="user">The user to query if the login name can be changed.</param>
            <returns>
            	<c>true</c> if the login name can be changed for the specified user; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.Security.IChangeLoginNameProvider.ChangeLoginName(IDS.Security.IUser,System.String)">
            <summary>
            Changes the login name of the specified user.
            </summary>
            <param name="user">The user to change the login name for.</param>
            <param name="newLoginName">New login name to assign to the specified user.</param>
        </member>
        <member name="T:IDS.Security.IChangePreferredCultureProvider">
            <summary>
            Adds support to an <see cref="T:IDS.Security.IUserProvider" /> for changing a user's preferred culture.
            </summary>
        </member>
        <member name="M:IDS.Security.IChangePreferredCultureProvider.ChangePreferredCulture(IDS.Security.IUser,System.Globalization.CultureInfo)">
            <summary>
            Changes the preferred culture of a specified user.
            </summary>
            <param name="user">The user to change the preferred culture for.</param>
            <param name="culture">The new preferred culture to assign to the specified user.</param>
        </member>
        <member name="T:IDS.Security.ICompositeRoleProvider">
            <summary>
            The ICompositeRoleProvider is a special implementation of a 
            <see cref="T:IDS.Security.IRoleProvider">role provider</see>. By implementing an ICompositeRoleProvider, 
            your provider will be asked for its roles after all of the other IRoleProvider instances 
            have been asked for their roles. This allows an ICompositeRoleProvider to use existing roles
            to determine whether a user belongs to a role exposed by the ICompositeRoleProvider.
            </summary>
        </member>
        <member name="M:IDS.Security.ICompositeRoleProvider.GetRoles(IDS.Security.IUser,IDS.Security.RoleCollection)">
            <summary>
            Returns a RoleCollection with all the roles associated with the user provided.
            </summary>		
        </member>
        <member name="T:IDS.Security.ICredentials">
            <summary>
            Interface for implementing an object that represents credentials consisting of a login name and password.
            </summary>
        </member>
        <member name="P:IDS.Security.ICredentials.LoginName">
            <summary>
            Gets or sets the login name.
            </summary>
            <value>The login name.</value>
        </member>
        <member name="P:IDS.Security.ICredentials.CredentialItems">
            <summary>
            Gets the credential items collection associated with this credential.
            </summary>
            <value>The credential items collection associated with this credential.</value>
        </member>
        <member name="P:IDS.Security.ICredentials.IsSingleSignOn">
            <summary>
            Gets whether single sign on was used.
            </summary>
            <value>Whether single sign on was used.</value>
        </member>
        <member name="M:IDS.Security.ICredentials.Matches(IDS.Security.ICredentials)">
            <summary>
            Determines if the given credentials match this credential.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.ICredentialsProvider">
            <summary>
            The ICredentialsProvider takes a name/value collection of credential items and uses those
            items to build a credentials instance. This instance can be used to authenticate a user.
            </summary>
        </member>
        <member name="M:IDS.Security.ICredentialsProvider.GetCredentials(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates the credentials based on the name/value items in the credentialItems collection.
            </summary>
            <param name="credentialItems">A collection containing the credential items. The contents of this
            collection are specific to a particular provider. It is possible a provider might allow null for
            this parameter.</param>
            <returns>
            Returns a <see cref="T:IDS.Security.ICredentials"/> based on the given credential items.
            </returns>
            <exception cref="T:IDS.Security.CredentialsException">A CredentialsException is thrown if a credential is
            not able to be created based on the given credential items.</exception>
        </member>
        <member name="M:IDS.Security.ICredentialsProvider.GetCredentials(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Creates the credentials based on the name/value items in the credentialItems collection.
            </summary>
            <param name="credentialItems">A collection containing the credential items. The contents of this
            collection are specific to a particular provider. It is possible a provider might allow null for
            this parameter.</param>
            <param name="isSingleSignon">if set to <c>true</c> the request for credentials is a single signon request.</param>
            <returns>
            Returns a <see cref="T:IDS.Security.ICredentials"/> based on the given credential items.
            </returns>
            <exception cref="T:IDS.Security.CredentialsException">A CredentialsException is thrown if a credential is
            not able to be created based on the given credential items.</exception>
        </member>
        <member name="T:IDS.Security.ICredentialValidationProvider">
            <summary>
            Interface for user providers which authenticate against a directory.
            </summary>
        </member>
        <member name="P:IDS.Security.ICredentialValidationProvider.CheckDataStorePassword">
            <summary>
            Checks the data store password first before authenticating against directory.
            </summary>        
        </member>
        <member name="M:IDS.Security.ICredentialValidationProvider.Validate(IDS.Security.ICredentials)">
            <summary>
            Performs a validation check against credentials
            </summary>
            <param name="credentials">Credentials to validate</param>
            <returns>true if validated</returns>
        </member>
        <member name="T:IDS.Security.IImpersonatedCredentials">
            <summary>
            The IImpersonatedCredentials interface is used to track the whether a credential has been impersonated
            and who impersonated it.
            </summary>
        </member>
        <member name="P:IDS.Security.IImpersonatedCredentials.ImpersonatorCredentials">
            <summary>
            Gets or sets the impersonator credentials.
            </summary>
            <value>The impersonator credentials.</value>
        </member>
        <member name="P:IDS.Security.IImpersonatedCredentials.IsImpersonated">
            <summary>
            Gets a value indicating whether this credentials is impersonated.
            </summary>
            <value>
            	<c>true</c> if this credentials is impersonated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IDS.Security.IImpersonationService">
            <summary>
            The IImpersonationService interface is used to create a service for impersonating a credential. The
            caller must be able to impersonate a credential.
            </summary>
        </member>
        <member name="M:IDS.Security.IImpersonationService.CanImpersonate(IDS.Security.IUser,IDS.Security.ICredentials)">
            <summary>
            Gets a value indicating whether the authenticated user can impersonate the specified credentials.
            </summary>
            <param name="user">The user wanting to do the impersonation.</param>
            <param name="credentialsToImpersonate">The credentials to impersonate. This can be null.</param>
            <returns>
            	<c>true</c> if this instance can impersonate the specified credentials to impersonate; otherwise, <c>false</c>.
            </returns>
            <value>
            	<c>true</c> if the authenticated user can impersonate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:IDS.Security.IImpersonationService.ImpersonateCredentials(IDS.Security.IUser,IDS.Security.ICredentials)">
            <summary>
            Impersonates the credentials.
            </summary>
            <param name="user">The user wanting to do the impersonation.</param>
            <param name="credentialsToImpersonate">The credentials to impersonate.</param>
            <returns>Returns the impersonated credentials.</returns>
            <exception cref="T:System.Security.SecurityException">This exception is thrown if the caller doesn't have the right to impersonate a user.</exception>
        </member>
        <member name="P:IDS.Security.IImpersonationService.Impersonator">
            <summary>
            Returns the impersonator or null if no impersonator is present
            </summary>
        </member>
        <member name="T:IDS.Security.ILightUserInfo">
            <summary>
            This interface will provides a light weight user object class.
            </summary>
        </member>
        <member name="P:IDS.Security.ILightUserInfo.UserId">
            <summary>
            Gets or sets the user id.
            </summary>
            <value>The user id.</value>
        </member>
        <member name="P:IDS.Security.ILightUserInfo.LoginName">
            <summary>
            Gets or sets the name of the login.
            </summary>
            <value>The name of the login.</value>
        </member>
        <member name="P:IDS.Security.ILightUserInfo.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:IDS.Security.ILightUserInfo.Name">
            <summary>
            Gets or sets the user's name object.
            </summary>
            <value>The user's name.</value>
        </member>
        <member name="P:IDS.Security.ILightUserInfo.FirstName">
            <summary>
            Gets the first name.
            </summary>
            <value>The first name.</value>
        </member>
        <member name="P:IDS.Security.ILightUserInfo.LastName">
            <summary>
            Gets the last name.
            </summary>
            <value>The last name.</value>
        </member>
        <member name="P:IDS.Security.ILightUserInfo.FirstLastName">
            <summary>
            Gets the first name and last name of the user.
            </summary>
            <value>The first name and last name of the user.</value>
        </member>
        <member name="P:IDS.Security.ILightUserInfo.FirstLastNameStatus">
            <summary>
            Gets the first and last name with the user's status.
            </summary>
            <value>The first and last name with the user's status.</value>
        </member>
        <member name="P:IDS.Security.ILightUserInfo.FullName">
            <summary>
            Gets the full name which includes the user's title, first name, middle name and last name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="T:IDS.Security.ILinkedRoleProvider">
            <summary>
            Interface that represents a linked role provider
            </summary>
        </member>
        <member name="M:IDS.Security.ILinkedRoleProvider.SetLinkedRoles(IDS.Security.LinkedRole)">
            <summary>
            Associates the linkedRoles to the role
            </summary>
            <param name="linkedRole">The linked role.</param>
        </member>
        <member name="M:IDS.Security.ILinkedRoleProvider.DeleteLinkedRoles(IDS.Security.LinkedRole)">
            <summary>
            Deletes the linked roles.
            </summary>
            <param name="linkedRole">The linked role.</param>
        </member>
        <member name="M:IDS.Security.ILinkedRoleProvider.GetLinkedRoles(IDS.Security.Role)">
            <summary>
            Gets all the linked roles
            </summary>
            <param name="role">The role.</param>
            <returns>The collection of linked roles</returns>
        </member>
        <member name="M:IDS.Security.ILinkedRoleProvider.GetAllLinkedRoles">
            <summary>
            Gets all the linked roles.
            </summary>
            <returns>A dictionary of roles and their linked roles</returns>
        </member>
        <member name="T:IDS.Security.ILoginDataValidationService">
            <summary>
            The ILoginDataValidationService is a service for validating that the login name and password entered
            conform to the sites requirements. The service implements the IHttpHandler interface to support validating
            the login name and password through an HTTP web service.
            </summary>
        </member>
        <member name="P:IDS.Security.ILoginDataValidationService.LoginNameMinimumLength">
            <summary>
            Gets the minimum allowed length of the login name.
            </summary>
            <value>The minimum allowed length of the login name.</value>
        </member>
        <member name="P:IDS.Security.ILoginDataValidationService.LoginNameMaximumLength">
            <summary>
            Gets the maximum allowed length of the login name.
            </summary>
            <value>The maximum allowed length of the login name.</value>
        </member>
        <member name="P:IDS.Security.ILoginDataValidationService.PasswordMinimumLength">
            <summary>
            Gets the minimum allowed length of the password.
            </summary>
            <value>The minimum length of the password.</value>
        </member>
        <member name="P:IDS.Security.ILoginDataValidationService.PasswordMaximumLength">
            <summary>
            Gets the maximum allowed length of the password.
            </summary>
            <value>The maximum length of the password.</value>
        </member>
        <member name="M:IDS.Security.ILoginDataValidationService.ValidateLoginNameString(IDS.Security.IUser,System.String,IDS.Security.LoginDataValidationFailureReason@)">
            <summary>
            Validates the login name string to make sure it conforms to the site requirements.
            </summary>
            <param name="user">The user who this login name is being changed for.</param>
            <param name="loginName">The login name string to validate.</param>
            <param name="failureReason">The reason the validation failed. This is only valid if the method returns false.</param>
            <returns>
            Returns true if the login name conforms to the site requirements.
            </returns>
        </member>
        <member name="M:IDS.Security.ILoginDataValidationService.ValidatePasswordString(IDS.Security.IUser,System.String,IDS.Security.LoginDataValidationFailureReason@)">
            <summary>
            Validates the password string to make sure it conforms to the site requirements.
            </summary>
            <param name="user">The user who this password is being changed for.</param>
            <param name="password">The password string to validate.</param>
            <param name="failureReason">The reason the validation failed. This is only valid if the method returns false.</param>
            <returns>
            Returns true if the password conforms to the site requirements.
            </returns>
        </member>
        <member name="P:IDS.Security.ILoginDataValidationService.LoginNameClientRegularExpression">
            <summary>
            Gets the regular expression for validating the login name. This regular expression should be 
            useable in a browser and compatible with the Javascript regular expression engine.
            </summary>
            <value>The client side login name regular expression. This value can be null if a client side regular expression is not supported.</value>
        </member>
        <member name="P:IDS.Security.ILoginDataValidationService.PasswordClientRegularExpression">
            <summary>
            Gets the regular expression for validating the login name. This regular expression should be 
            useable in a browser and compatible with the Javascript regular expression engine.
            </summary>
            <value>The client side password regular expression. This value can be null if a client side regular expression is not supported.</value>
        </member>
        <member name="P:IDS.Security.ILoginDataValidationService.SupportsLoginNameExistsMethod">
            <summary>
            Returns true if the service supports the <see cref="M:IDS.Security.ILoginDataValidationService.LoginNameExists(System.String)"/> method. 
            </summary>
            <value>The supports login name exists method.</value>
        </member>
        <member name="M:IDS.Security.ILoginDataValidationService.LoginNameExists(System.String)">
            <summary>
            Determines if the name exists already exists.
            </summary>
            <param name="loginName">The login name string to check if it already exists.</param>
            <returns>Returns true if the login name already exists.</returns>
            <exception cref="T:System.InvalidOperationException">is thrown if the <see cref="T:IDS.Security.ILoginDataValidationService"/>
            doesn't support checking if a login name exists. The <see cref="P:IDS.Security.ILoginDataValidationService.SupportsLoginNameExistsMethod"/> method
            should be called before calling this method.</exception>
        </member>
        <member name="T:IDS.Security.IMaintainableRoleProvider">
            <summary>
            Interface for implementing a Role Provider that allows an administrator to maintain the list
            of roles and users in those roles.
            </summary>
        </member>
        <member name="M:IDS.Security.IMaintainableRoleProvider.CreateRole(System.String,IDS.ComponentModel.Dataspace)">
            <summary>
            Creates the role.
            </summary>
            <param name="roleName">Name of the role.</param>
            <param name="dataspace">The dataspace.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.IMaintainableRoleProvider.DeleteRole(IDS.Security.Role,IDS.ComponentModel.Dataspace)">
            <summary>
            Deletes the role.
            </summary>
            <param name="roleToDelete">The role to delete.</param>
            <param name="dataspace">The dataspace.</param>
        </member>
        <member name="M:IDS.Security.IMaintainableRoleProvider.LoadUserList(System.IO.Stream,IDS.Security.Role,IDS.ComponentModel.Dataspace)">
            <summary>
            Loads the user list from a datastream and assigns those users to the specified role.
            </summary>
            <param name="userListData">The user list data.</param>
            <param name="role">The role to which users should be assigned.</param>
            <param name="dataspace">The dataspace.</param>
        </member>
        <member name="M:IDS.Security.IMaintainableRoleProvider.ClearRoleUsers(IDS.Security.Role,IDS.ComponentModel.Dataspace)">
            <summary>
            Clears the list of users assigned to the specified role.
            </summary>
            <param name="role">The role whose user list is to be cleared.</param>
            <param name="dataspace">The dataspace.</param>
        </member>
        <member name="M:IDS.Security.IMaintainableRoleProvider.GetRoleInfo(IDS.ComponentModel.Dataspace)">
            <summary>
            Gets a collection of MaintainableRoles that are provided by this <see cref="T:IDS.Security.IRoleProvider"/>.
            </summary>
            <param name="dataspace">The dataspace for which roles should be returned.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.ImpersonatedCredentialsProvider">
            <summary>
            The ImpersonatedCredentialsProvider supports creating an ImpersonatedCredentials.
            </summary>
        </member>
        <member name="P:IDS.Security.ImpersonatedCredentialsProvider.LoginPropertyName">
            <summary>
            Gets or sets the name of the login property key.
            </summary>
            <value>The name of the login property key.</value>
        </member>
        <member name="P:IDS.Security.ImpersonatedCredentialsProvider.PasswordPropertyName">
            <summary>
            Gets or sets the name of the password property key.
            </summary>
            <value>The name of the password property key.</value>
        </member>
        <member name="P:IDS.Security.ImpersonatedCredentialsProvider.ImpersonatedLoginName">
            <summary>
            Gets or sets the name of the impersonated login property key.
            </summary>
            <value>The name of the impersonated login property key.</value>
        </member>
        <member name="M:IDS.Security.ImpersonatedCredentialsProvider.GetCredentials(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates the credentials based on the name/value items in the credentialItems collection.
            </summary>
            <param name="credentialItems">A collection containing the credential items. The contents of this
            collection are specific to a particular provider. It is possible a provider might allow null for
            this parameter.</param>
            <returns>
            Returns a <see cref="T:IDS.Security.ICredentials"/> based on the given credential items.
            </returns>
            <exception cref="T:IDS.Security.CredentialsException">A CredentialsException is thrown if a credential is
            not able to be created based on the given credential items.</exception>
        </member>
        <member name="M:IDS.Security.ImpersonatedCredentialsProvider.GetCredentials(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Creates the credentials based on the name/value items in the credentialItems collection.
            </summary>
            <param name="credentialItems">A collection containing the credential items. The contents of this
            collection are specific to a particular provider. It is possible a provider might allow null for
            this parameter.</param>
            <param name="isSingleSignon">if set to <c>true</c> the request for credentials is a single signon request.</param>
            <returns>
            Returns a <see cref="T:IDS.Security.ICredentials"/> based on the given credential items.
            </returns>
            <exception cref="T:IDS.Security.CredentialsException">A CredentialsException is thrown if a credential is
            not able to be created based on the given credential items.</exception>
        </member>
        <member name="T:IDS.Security.IMultipleUserInfo">
            <summary>
            
            </summary>
            <seealso cref="T:IDS.Security.IUserInfo" />
        </member>
        <member name="P:IDS.Security.IMultipleUserInfo.Users">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Security.IPDomain">
            <summary>
            Associates roles with a list of IP addresses and/or subnets.
            </summary>
        </member>
        <member name="M:IDS.Security.IPDomain.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.IPDomain" /> class.
            </summary>
        </member>
        <member name="M:IDS.Security.IPDomain.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.IPDomain" /> class
            with a specified ID.
            </summary>
            <param name="id">
            A nonempty string that uniquely identifies the domain,
            or an empty string if the domain has not been saved.
            </param>
        </member>
        <member name="P:IDS.Security.IPDomain.Description">
            <summary>
            Gets or sets a user-friendly description of the domain.
            </summary>
        </member>
        <member name="P:IDS.Security.IPDomain.ExcludedIPAddresses">
            <summary>
            Gets or sets the set of IP addresses and/or subnets
            that are not part of the domain.
            </summary>
            <remarks>
            This property takes precedence over <see cref="P:IDS.Security.IPDomain.IncludedIPAddresses" />
            when an IP address belongs to both collections.
            </remarks>
        </member>
        <member name="P:IDS.Security.IPDomain.Id">
            <summary>
            Gets or sets a string that uniquely identifies the domain.
            </summary>
            <value>
            A nonempty string that uniquely identifies the domain,
            or an empty string if the domain has not been saved.
            </value>
        </member>
        <member name="P:IDS.Security.IPDomain.IncludedIPAddresses">
            <summary>
            Gets or sets the set of IP addresses and/or subnets
            that are part of the domain.
            </summary>
        </member>
        <member name="P:IDS.Security.IPDomain.Name">
            <summary>
            Gets or sets the user-friendly name of the domain.
            </summary>
        </member>
        <member name="P:IDS.Security.IPDomain.RolesToAssign">
            <summary>
            Gets or sets the set of roles that are to be assigned to
            users who belong to the domain.
            </summary>
        </member>
        <member name="P:IDS.Security.IPDomain.RolesToEnable">
            <summary>
            Gets or sets the set of roles that are permitted to be assigned to
            users who belong to the domain.
            </summary>
        </member>
        <member name="T:IDS.Security.IPDomainManager">
            <summary>
            Provides methods for retrieving and updating IP domains.
            </summary>
        </member>
        <member name="M:IDS.Security.IPDomainManager.AddIPDomain(IDS.Security.IPDomain)">
            <summary>
            Adds a specified IP domain.
            </summary>
            <param name="domain">
            The <see cref="T:IDS.Security.IPDomain" /> to add.
            </param>
        </member>
        <member name="M:IDS.Security.IPDomainManager.DeleteIPDomain(System.String)">
            <summary>
            Deletes a specified IP domain.
            </summary>
            <param name="id">
            The <see cref="P:IDS.Security.IPDomain.Id" /> of the <see cref="T:IDS.Security.IPDomain" />
            to delete.
            </param>
        </member>
        <member name="M:IDS.Security.IPDomainManager.GetAllIPDomains">
            <summary>
            Gets the name and description of every IP domain.
            </summary>
            <returns>
            An <see cref="T:IDS.Security.IPDomain" /> collection.
            </returns>
        </member>
        <member name="M:IDS.Security.IPDomainManager.GetAllIPDomains(System.Boolean)">
            <summary>
            Gets the name and description of every IP domain,
            and optionally retrieves their IP addresses and roles.
            </summary>
            <param name="includeDetails">
            <see langword="true" /> to retrieve the IP addresses and roles
            for each domain; <see langword="false" /> if this information is not needed.
            </param>
            <returns>
            An <see cref="T:IDS.Security.IPDomain" /> collection.
            </returns>
        </member>
        <member name="M:IDS.Security.IPDomainManager.GetAllRoles">
            <summary>
            Gets all roles that can be associated with IP domains.
            </summary>
            <returns>
            A <see cref="T:IDS.Security.RoleCollection" /> that contains all roles that can be
            associated with IP domains.
            </returns>
        </member>
        <member name="M:IDS.Security.IPDomainManager.GetIPDomain(System.String)">
            <summary>
            Gets the IP domain with a specified ID.
            </summary>
            <param name="id">
            The <see cref="P:IDS.Security.IPDomain.Id" /> of the <see cref="T:IDS.Security.IPDomain" />
            to retrieve.
            </param>
            <returns>
            The <see cref="T:IDS.Security.IPDomain" />
            with the specified <paramref name="id" />.
            </returns>
        </member>
        <member name="M:IDS.Security.IPDomainManager.UpdateIPDomain(IDS.Security.IPDomain)">
            <summary>
            Updates a specified IP domain.
            </summary>
            <param name="domain">
            The <see cref="T:IDS.Security.IPDomain" /> to update.
            </param>
        </member>
        <member name="T:IDS.Security.GetUserPermissionsDelegate">
            <summary>
            The GetUserPermissionsDelegate is used to provide a delegate for retrieving user permissions.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.IPermissionConsumer">
            <summary>
            The IPermissionConsumer is an interface for letting the <see cref="T:IDS.Security.UserManager"/>
            know that a <see cref="T:IDS.Security.IUser"/> instance is interested in consuming permissions.
            </summary>
        </member>
        <member name="P:IDS.Security.IPermissionConsumer.UserPermissionsDelegate">
            <summary>
            Gets or sets the user permissions delegate.
            </summary>
            <value>The user permissions delegate.</value>
        </member>
        <member name="T:IDS.Security.IPersistentRoleProvider">
            <summary>
            This interface is a complement to the <see cref="T:IDS.Security.IRoleProvider"/> interface. The IRoleProvider
            interface provides the basic interface for a roles provider. This interface adds the extra capability of
            being able to persist those roles to some persistent storage. The portal system only supports having
            one active persistent roles provider. If there is a persistent roles provider active, some users provider
            editor might utilite it to associate roles with a particular user.
            </summary>
        </member>
        <member name="M:IDS.Security.IPersistentRoleProvider.GetPersistentRolesForAllUsers">
            <summary>
            Gets the collection of persistent roles associated with all users.
            </summary>
            <returns>
            A dictionary that maps user IDs to role collections.
            </returns>
        </member>
        <member name="M:IDS.Security.IPersistentRoleProvider.GetPersistentRolesForUser(IDS.Security.IUser)">
            <summary>
            Gets the persistent roles for a particular user.
            </summary>
            <remarks>
            This only gets the persistent roles for this user, not any dynamic roles. Dynamic roles are
            determined dynamically based on the rules in the active roles providers.
            </remarks>
            <param name="user">The IPortalUser to get the persistent roles for.</param>
            <returns>Returns an ArrayList of strings containing the roles for the particular user. The
            array list could be empty but it will never return null. If the user is not found, an
            empty array list is returned.</returns>
        </member>
        <member name="M:IDS.Security.IPersistentRoleProvider.AddPersistentRole(IDS.Security.Role)">
            <summary>
            Adds a new persistent role to the persistent database of available roles that can be assigned
            to a particular user.
            </summary>
            <remarks>
            No exception is thrown if the role already exists.
            <seealso cref="M:IDS.Security.IPersistentRoleProvider.DeletePersistentRole(IDS.Security.Role)"/>
            </remarks>
            <param name="role">The role to add to the persistent database of available roles.</param>
        </member>
        <member name="M:IDS.Security.IPersistentRoleProvider.DeletePersistentRole(IDS.Security.Role)">
            <summary>
            Deletes a persistent role from the persistent database of available roles.
            </summary>
            <remarks>
            No exception is thrown if the role is not found.
            <seealso cref="M:IDS.Security.IPersistentRoleProvider.AddPersistentRole(IDS.Security.Role)"/>
            </remarks>
            <param name="role">The role to delete from the persistent database of available roles.</param>
        </member>
        <member name="M:IDS.Security.IPersistentRoleProvider.AddPersistentUserRole(IDS.Security.IUser,IDS.Security.Role)">
            <summary>
            Associates a persistent role to a particular user.
            </summary>
            <remarks>
            The role must exist in the database of available roles. If the role doesn't exist, an exception
            will be thrown. If the user already has the particular role associated with it, no exception is
            thrown.
            <seealso cref="M:IDS.Security.IPersistentRoleProvider.AddPersistentRole(IDS.Security.Role)"/>
            </remarks>
            <param name="user">The IPortalUser to add the persistent roles to.</param>
            <param name="role">The role to associate with the user.</param>
        </member>
        <member name="M:IDS.Security.IPersistentRoleProvider.DeletePersistentUserRole(IDS.Security.IUser,IDS.Security.Role)">
            <summary>
            Deletes a persistent role from a particular user.
            </summary>
            <remarks>
            No check is made to see that the role is a valid role. If the role is not found in the persistent
            database or not associated with the particular user, no exception is thrown.
            </remarks>
            <param name="user">The IPortalUser to delete the persistent role from.</param>
            <param name="role">The role to delete from the user.</param>
        </member>
        <member name="M:IDS.Security.IPersistentRoleProvider.IsPersistentUserRole(IDS.Security.IUser,IDS.Security.Role)">
            <summary>
            Determines whether a persistent role is associated with a particular user.
            </summary>
            <param name="user">
            An <see cref="T:IDS.Security.IUser" />.
            </param>
            <param name="role">
            A <see cref="T:IDS.Security.Role" />.
            </param>
            <returns>
            <see langword="true" /> if the <paramref name="role" /> is associated
            with the <paramref name="user" />.
            </returns>
        </member>
        <member name="M:IDS.Security.IPersistentRoleProvider.SetPersistentUserRoles(IDS.Security.IUser,IDS.Security.RoleCollection)">
            <summary>
            Associates a set of persistent roles to associate with a particular user.
            </summary>
            <remarks>
            This set of roles completely replaces all roles associated with this user with this new set
            of roles. All of the roles in this set must be a valid role in the persistent database of
            available roles or an exception will be thrown.
            </remarks>
            <param name="user">The IPortalUser to associate the set of roles with.</param>
            <param name="roles">An ArrayList of roles to associate with this user.</param>
        </member>
        <member name="M:IDS.Security.IPersistentRoleProvider.UpdatePersistentRole(IDS.Security.Role,IDS.Security.Role)">
            <summary>
            Updates the persistent role.
            </summary>
            <param name="oldRole">The old role.</param>
            <param name="newRole">The new role.</param>
        </member>
        <member name="M:IDS.Security.IPersistentRoleProvider.GetUsersByRole(IDS.Security.Role)">
            <summary>
            Gets the list of users who are associated with a specified role.
            </summary>
            <param name="role">
            A persistent role.
            </param>
            <returns>
            A list containing the <see cref="P:IDS.Security.IUser.UserID" /> of each user
            who is associated with the specified <paramref name="role" />.
            </returns>
        </member>
        <member name="M:IDS.Security.IPersistentRoleProvider.CanViewHiddenRoles(IDS.Security.IUser)">
            <summary>
            Determines whether a specified user can view hidden roles.
            </summary>
            <param name="user">A user.</param>
            <returns>true if the user can view hidden roles; otherwise, false.</returns>
        </member>
        <member name="T:IDS.Security.IPersistentUserProvider">
            <summary>
            The IPersistentUserProvider is an extension interface to the IUserProvider that
            manages the addition, deletion, editing of Portal Users for providers that support this capability.
            </summary>
        </member>
        <member name="M:IDS.Security.IPersistentUserProvider.NewUser(IDS.Security.IUser)">
            <summary>
            Creates a new typed IUser instance from a user that is appropriate for this users provider.
            </summary>
            <param name="user">The seed user.</param>
            <returns>
            Returns a new typed IUser with the user properties, that is appropriate for this users provider.
            </returns>
            <remarks>
            The value is not persisted to the database until the <see cref="M:AddUser"/> method
            is called.
            </remarks>
        </member>
        <member name="M:IDS.Security.IPersistentUserProvider.AddUser(IDS.Security.IUser)">
            <summary>
            Adds a new user to the database.
            </summary>
            <remarks>
            This method adds a user created with <see cref="M:IDS.Security.IPersistentUserProvider.NewUser(IDS.Security.IUser)"/> to the database.
            </remarks>
            <param name="user">The IUser object to add to the database.</param>
        </member>
        <member name="M:IDS.Security.IPersistentUserProvider.AddUser(IDS.Security.IUser,IDS.Security.ICredentials)">
            <summary>
            Adds a new user to the data store.
            </summary>
            <param name="user">The <see cref="T:IDS.Security.IUser"/> object to be added.</param>
            <param name="credentials">The credentials that are to be assigned to the added user.</param>
        </member>
        <member name="M:IDS.Security.IPersistentUserProvider.UpdateUser(IDS.Security.IUser)">
            <summary>
            Updates the information in the database associated with the IUser object.
            </summary>
            <param name="user">The IUser object to use to update the database.</param>
        </member>
        <member name="M:IDS.Security.IPersistentUserProvider.DeleteUser(IDS.Security.IUser)">
            <summary>
            Deletes the user associated with the IUser object from the database.
            </summary>
            <param name="user">The IUser object to delete from the database.</param>
        </member>
        <member name="M:IDS.Security.IPersistentUserProvider.GetAllCountries">
            <summary>
            returns a list of countries that can be used and persisted in a users address
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.IPRestriction">
            <summary>
            The IPRestriction class is an implementation of the <see cref="T:IDS.Security.IRestriction"/> interface 
            which limits access to a protected resource using an IP address.
            </summary>
        </member>
        <member name="M:IDS.Security.IPRestriction.#ctor">
            <summary>
            Creates an instance of the IPRestriction class using default values.
            </summary>
        </member>
        <member name="M:IDS.Security.IPRestriction.#ctor(System.String)">
            <summary>
            Creates an instance of the IPRestriction class using the IP addresses and masks
            in the permittedIPAddresses string.
            </summary>
            <param name="permittedIPAddressesMask">The permitted IP addresses mask.</param>
            <remarks>
            The value of the permittedIPAddress string should be in the format:
            IPAddress/Mask,IPAddress/Mask. For example: 10.0.0.0/255.0.0.0,127.0.0.1/255.255.255.255.
            </remarks>
        </member>
        <member name="M:IDS.Security.IPRestriction.Parse(System.String)">
            <summary>
            Parses the specified IP addresses mask string which should be in the format:
            IPAddress/Mask,IPAddress/Mask. For example: 10.0.0.0/255.0.0.0,127.0.0.1/255.255.255.255.
            </summary>
            <param name="ipAddressesMask">The IP addresses mask string. Separate multiple masks with a comma (,).</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.IPRestriction.#ctor(System.Xml.XmlNode)">
            <summary>
            Creates an instance of the IPRestriction class using the XML node for configuration.
            </summary>
            <param name="xmlNode">The XML node containing the configuration. The following is an example
            node:
            	&lt;restriction type=&quot;ip&quot; value=&quot;10.0.0.0/255.255.255.255&quot;/&gt;
            </param>
        </member>
        <member name="M:IDS.Security.IPRestriction.ToString">
            <summary>
            Returns a string representation of the IPRestriction class.
            </summary>
            <returns>Returns a string representation of the IPRestriction class.</returns>
        </member>
        <member name="M:IDS.Security.IPRestriction.Match">
            <summary>
            Returns true if the current request matches the restriction.
            </summary>
            <returns>
            Returns true if the current request matches the restriction otherwise
            it returns false.
            </returns>
            <remarks>
            Whether a restriction grants access to denies access depends on the setting
            of the RestrictionCollection.DefaultAccess value. If DefaultAccess = Denied,
            if a restriction matches, access is granted. If DefaultAccess = Granted,
            if a restriction matches, access is denied.
            This method depends on an valid HttpContext.
            </remarks>
        </member>
        <member name="T:IDS.Security.IProfileHolder">
            <summary>
            Defines a method that a class implementing <see cref="T:IDS.Security.IUser" /> can also implement
            to retrieve the profiles associated with the user.
            </summary>
        </member>
        <member name="M:IDS.Security.IProfileHolder.GetProfile(System.String)">
            <summary>
            Gets a specified profile that is associated with the current user.
            </summary>
            <param name="userID">
            The <see cref="P:IDS.Security.IUser.UserID" /> of the profile to retrieve.
            </param>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="userID" /> is not valid.
            </exception>
        </member>
        <member name="T:IDS.Security.IRestriction">
            <summary>
            The IRestriction interface is an abstract way to limit access to a protected resource.
            Currently, <see cref="T:IDS.Security.IPRestriction"/> is the only base implementation of this interface.
            </summary>
            <remarks>
            <see cref="T:IDS.Security.IPRestriction"/>
            </remarks>
        </member>
        <member name="M:IDS.Security.IRestriction.Match">
            <summary>
            Returns true if the current request matches the restriction.
            </summary>
            <remarks>
            Whether a restriction grants access to denies access depends on the setting
            of the RestrictionCollection.DefaultAccess value. If DefaultAccess = Denied,
            if a restriction matches, access is granted. If DefaultAccess = Granted,
            if a restriction matches, access is denied.
            </remarks>
            <returns>
            Returns true if the current request matches the restriction otherwise 
            it returns false.
            </returns>
        </member>
        <member name="T:IDS.Security.GetUserRolesDelegate">
            <summary>
            The GetUserRolesDelegate is used to provide a delegate for retrieving user roles.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.IRoleConsumer">
            <summary>
            The IRoleConsumer is an interface for letting the <see cref="T:IDS.Security.UserManager"/>
            know that a <see cref="T:IDS.Security.IUser"/> instance is interested in consuming roles.
            </summary>
        </member>
        <member name="P:IDS.Security.IRoleConsumer.UserRolesDelegate">
            <summary>
            Gets or sets the user roles delegate.
            </summary>
            <value>The user roles delegate.</value>
        </member>
        <member name="T:IDS.Security.IRoleMaintenanceDataParser">
            <summary>
            Interface for implementing an object that will parse data streams for an <see cref="T:IDS.Security.IMaintainableRoleProvider"/>
            </summary>
        </member>
        <member name="M:IDS.Security.IRoleMaintenanceDataParser.GetUserIDsFromDataStream(System.IO.Stream,IDS.ComponentModel.Dataspace)">
            <summary>
            Gets the user IDs from the data stream.
            </summary>
            <param name="dataStream">The data stream.</param>
            <param name="dataspace">The dataspace.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.IRoleMaintenanceDataSerializer">
            <summary>
            Interface for implementing an object that will serialize data streams for an <see cref="T:IDS.Security.IMaintainableRoleProvider"/>
            </summary>
        </member>
        <member name="M:IDS.Security.IRoleMaintenanceDataSerializer.GetDataFromStream(System.IO.Stream)">
            <summary>Deserializes the data elements from the stream.</summary>
            <param name="dataStream">The data stream.</param>
            <returns>A list of data</returns>
        </member>
        <member name="M:IDS.Security.IRoleMaintenanceDataSerializer.GetStreamFromData(System.Collections.Generic.List{System.String})">
            <summary>Serializes the data elements to a stream.</summary>
            <param name="data">The data.</param>
            <returns>A <see cref="T:System.IO.Stream"/> with data</returns>
        </member>
        <member name="T:IDS.Security.IRoleProvider">
            <summary>
            The IRoleCollectionProvider interface provides the capability to associate role collections
             with a particular user, or more correctly, the current session. 
            </summary>
        </member>
        <member name="M:IDS.Security.IRoleProvider.GetAllRoles">
            <summary>
            Gets a list of all the roles for this provider.
            </summary>
        </member>
        <member name="M:IDS.Security.IRoleProvider.GetRolesForUser(IDS.Security.IUser)">
            <summary>
            Returns a RoleCollection with all the roles associated with the user provided.
            </summary>		
        </member>
        <member name="T:IDS.Security.ISearchableUserProvider">
            <summary>
            The ISearchableUserProvider interface can be added to a user provider to add support
            for searching for users.
            </summary>
        </member>
        <member name="P:IDS.Security.ISearchableUserProvider.SearchTypesSupported">
            <summary>
            Gets an array of <see cref="T:IDS.Security.UserSearchType"/> enumerations that specifies which 
            types of searches this user provider supports.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.ISearchableUserProvider.SearchForUsers(IDS.Security.UserSearchType,System.String)">
            <summary>
            Searches for users based on the specified search type.
            </summary>
            <param name="searchType">Type of the search.</param>
            <param name="searchData">The search data.</param>
            <exception cref="T:System.InvalidOperationException">The InvalidOperationException is thrown if an unsupported search type is requested.</exception>
            <returns>Returns a collection of <see cref="T:IDS.Security.IUser"/> instances for the users found by the user provider.</returns>
        </member>
        <member name="M:IDS.Security.ISearchableUserProvider.SearchForUsers(IDS.Security.UserSearchType,System.String,System.Int32)">
            <summary>
            Searches for users based on the specified search type.
            </summary>
            <param name="searchType">Type of the search.</param>
            <param name="searchData">The search data.</param>
            <param name="maxResults">The max number of users to return in results</param>
            <exception cref="T:System.InvalidOperationException">The InvalidOperationException is thrown if an unsupported search type is requested.</exception>
            <returns>Returns a collection of <see cref="T:IDS.Security.IUser"/> instances for the users found by the user provider.</returns>
        </member>
        <member name="T:IDS.Security.ISearchableUserProviderEx">
            <summary>
            The ISearchableUserProviderEx interface is an improved replacement for <see cref="T:IDS.Security.ISearchableUserProvider"/>. It can be added to 
            a user provider to add support for searching for users.
            </summary>
        </member>
        <member name="P:IDS.Security.ISearchableUserProviderEx.SearchTypesSupported">
            <summary>
            Gets an array of <see cref="T:IDS.Security.UserSearchType"/> enumerations that specifies which 
            types of searches this user provider supports.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.ISearchableUserProviderEx.SearchForUsers(IDS.Security.UserSearchCriteria)">
            <summary>
            Searches for users based on the specified search criteria.
            </summary>
            <param name="searchCriteria">The search criteria.</param>
            <returns>
            Returns a collection of <see cref="T:IDS.Security.IUser"/> instances for the users found by the user provider that match the search criteria.
            </returns>
            <exception cref="T:System.InvalidOperationException">The InvalidOperationException is thrown if an unsupported search type is requested.</exception>
        </member>
        <member name="T:IDS.Security.ISupportsCredentialPolicyProvider">
            <summary>
            Indicates that a user provider has a <see cref="P:IDS.Security.ISupportsCredentialPolicyProvider.CredentialPolicyProvider" />.
            </summary>
        </member>
        <member name="P:IDS.Security.ISupportsCredentialPolicyProvider.CredentialPolicyProvider">
            <summary>
            Gets the configured <see cref="P:IDS.Security.ISupportsCredentialPolicyProvider.CredentialPolicyProvider" />.
            </summary>
        </member>
        <member name="T:IDS.Security.IUpdatableEmailProvider">
            <summary>
            The IUpdatableEmailProvider interface is used by a user provider to add support for changing the email address of the specified user.
            </summary>
        </member>
        <member name="M:IDS.Security.IUpdatableEmailProvider.ChangeEmailAddress(IDS.Security.IUser,System.String)">
            <summary>
            A method to change the email address of the specified user.
            </summary>
            <param name="user">The user.</param>
            <param name="newEmailAddress">The new email address.</param>
        </member>
        <member name="M:IDS.Security.IUpdatableEmailProvider.ChangeAlternateEmailAddresses(IDS.Security.IUser,IDS.EntityModel.EmailAddressCollection)">
            <summary>
            Changes the alternate email addresses of the specified user.
            </summary>
            <param name="user">The user.</param>
            <param name="newEmailAddresses">The new alternate email addresses.</param>
        </member>
        <member name="M:IDS.Security.IUpdatableEmailProvider.SetEmailChangeRequired(IDS.Security.IUser,System.Boolean)">
            <summary>
            Sets whether an email change is required for a given user.
            </summary>
            <param name="user">The user.</param>
            <param name="emailChangeRequired">if set to <see langword="true"/> the user's email requires changing.</param>
        </member>
        <member name="T:IDS.Security.IUpdatablePasswordProvider">
            <summary>
            The IUpdatablePasswordProvider interface is used by a user provider to add support for changing the password of the specified user.
            </summary>
        </member>
        <member name="M:IDS.Security.IUpdatablePasswordProvider.ChangePassword(IDS.Security.IUser,System.String,System.String)">
            <summary>
            A method to change the password of the specified user. The existing password is verified before changing the password.
            </summary>
            <param name="user">The user.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <exception cref="T:IDS.Security.AuthenticationException">is thrown if the old password doesn't match the existing password.</exception>
        </member>
        <member name="M:IDS.Security.IUpdatablePasswordProvider.ChangePassword(IDS.Security.IUser,System.String)">
            <summary>
            A method to change the password of the specified user without validating the current password. This will by default always check password history.
            </summary>
            <param name="user">The user.</param>
            <param name="newPassword">The new password.</param>
        </member>
        <member name="M:IDS.Security.IUpdatablePasswordProvider.ChangePassword(IDS.Security.IUser,System.String,System.Boolean)">
            <summary>
            A method to change the password of the specified user without validating the current password.
            The CheckPasswordHistory parameter can optionally specify whether the history should be checked
            when changing the password.
            </summary>
            <param name="user">The user.</param>
            <param name="newPassword">The new password.</param>
            <param name="checkPasswordHistory">if set to <c>true</c> the password history will be checked to
            see if the current password has been used before.</param>
        </member>
        <member name="M:IDS.Security.IUpdatablePasswordProvider.ResetPassword(IDS.Security.IUser)">
            <summary>
            Resets the password associated with the specified user to a random password. The random password is returned.
            </summary>
            <param name="user">The user.</param>
            <returns>Returns a string with the new password.</returns>
        </member>
        <member name="M:IDS.Security.IUpdatablePasswordProvider.GenerateRandomPassword">
            <summary>
            This method generates a random password that is suitable for resetting a users password.
            </summary>
            <returns>Returns the randomly generated password.</returns>
        </member>
        <member name="M:IDS.Security.IUpdatablePasswordProvider.SetPasswordChangeRequired(IDS.Security.IUser,System.Boolean)">
            <summary>
            Sets whether a password change is required for a given user.
            </summary>
            <param name="user">The user.</param>
            <param name="passwordChangeRequired">if set to <see langword="true"/> the user's password requires changing.</param>
        </member>
        <member name="T:IDS.Security.IUpdatablePasswordProvider2">
            <summary>
            The IUpdatablePasswordProvider2 interface is used by a user provider to add support for 
            changing the password of the specified user. 
            </summary>
        </member>
        <member name="M:IDS.Security.IUpdatablePasswordProvider2.ChangePassword(IDS.Security.ChangePasswordParameters)">
            <summary>
            Changes the password.
            </summary>
            <param name="changePasswordParameters">The password params.</param>
            <exception cref="T:IDS.Security.AuthenticationException">is thrown if the old password doesn't match the existing password.</exception>
        </member>
        <member name="T:IDS.Security.IUser">
            <summary>
            Interface for implementing an object that represents an application user.
            </summary>
        </member>
        <member name="P:IDS.Security.IUser.UserProvider">
            <summary>
            Gets the user provider that created this user instance.
            </summary>
        </member>
        <member name="P:IDS.Security.IUser.Credentials">
            <summary>
            Gets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="P:IDS.Security.IUser.AuthenticationToken">
            <summary>
            Gets the authentication token associated with this user. It can be null if the user provider doesn't support authentication tokens.
            </summary>
        </member>
        <member name="P:IDS.Security.IUser.UserID">
            <summary>
            Gets the user ID.
            </summary>
            <value>The user ID.</value>
        </member>
        <member name="P:IDS.Security.IUser.Roles">
            <summary>
            Gets the roles associated with this user.
            </summary>
            <value>The roles associated with this user.</value>
        </member>
        <member name="P:IDS.Security.IUser.Permissions">
            <summary>
            Gets the permissions associated with this user.
            </summary>
            <value>The permissions.</value>
        </member>
        <member name="P:IDS.Security.IUser.Features">
            <summary>
            Gets the features available for this user.
            </summary>
        </member>
        <member name="M:IDS.Security.IUser.RefreshFeatures">
            <summary>
            Refreshes the <see cref="P:IDS.Security.IUser.Features" /> set to reflect changes made after it was loaded.
            </summary>
        </member>
        <member name="P:IDS.Security.IUser.IsAnonymous">
            <summary>
            Gets a value indicating whether this instance is anonymous.
            </summary>
            <value>
            	<c>true</c> if this instance is anonymous; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.IUser.IsAuthenticated">
            <summary>
            Gets a value indicating whether this instance is authenticated.
            </summary>
            <value>
            	<c>true</c> if this instance is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.IUser.PasswordChangeIsRequired">
            <summary>
            Gets a value indicating whether a password change is required.
            </summary>
            <value>
            	<c>true</c> if this a password change is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.IUser.RequiredPasswordChangeReason">
            <summary>
            Gets the reason a password change is required.
            </summary>
            <value>The reason a password change is required.</value>
        </member>
        <member name="P:IDS.Security.IUser.EmailAddressUpdateIsRequired">
            <summary>
            Gets a value indicating whether an email address update is required.
            </summary>
            <value>
            	<c>true</c> if an email address update is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.IUser.AddressUpdateIsRequired">
            <summary>
            Gets a value indicating whether an address update is required.
            </summary>
            <value>
            	<c>true</c> if an address update is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.IUser.PreferredCulture">
            <summary>
            Gets or sets the preferred culture.
            </summary>
            <value>The preferred culture.</value>
        </member>
        <member name="P:IDS.Security.IUser.LastUnsuccessfulLogin">
            <summary>
            Gets or sets the last unsuccessful login date.
            </summary>
            <value>The last unsuccessful login date.</value>
        </member>
        <member name="P:IDS.Security.IUser.LastSuccessfulLogin">
            <summary>
            Gets or sets the last successful login date.
            </summary>
            <value>The last successful login date.</value>
        </member>
        <member name="P:IDS.Security.IUser.LastSuccessfulLoginIPAddress">
            <summary>
            Gets or sets the last successful login IP address.
            </summary>
            <value>The last successful login IP address for this user.</value>
        </member>
        <member name="P:IDS.Security.IUser.CurrentLoginDateTimeUtc">
            <summary>
            Gets or sets the current session login time.
            </summary>
            <value>The current session login time for this user.</value>
        </member>
        <member name="P:IDS.Security.IUser.LastPasswordChange">
            <summary>
            Gets or sets the last password change date.
            </summary>
            <value>The last password change date.</value>
        </member>
        <member name="P:IDS.Security.IUser.InsertDateTimeUtc">
            <summary>
            Gets or sets user creation date.
            </summary>
            <value>The user creation date.</value>
        </member>
        <member name="P:IDS.Security.IUser.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:IDS.Security.IUser.TimeZone">
            <summary>
            Gets or sets the user's time zone.
            </summary>
            <value>The user's time zone.</value>
        </member>
        <member name="M:IDS.Security.IUser.WaitUntilRefreshed">
            <summary>
            Waits until an asynchronous request for user information has completed
            and then updates this instance.
            </summary>
            <remarks>
            This method does nothing if the associated user provider does not support
            asynchronous refreshing of user information.
            </remarks>
        </member>
        <member name="T:IDS.Security.IUserInfo">
            <summary>
            IUserInfo
            </summary>
            <seealso cref="T:IDS.Security.IMultipleUserInfo" />
        </member>
        <member name="P:IDS.Security.IUserInfo.User">
            <summary>
            User 
            </summary>
        </member>
        <member name="P:IDS.Security.IUserInfo.UserID">
            <summary>
            UserID
            </summary>
        </member>
        <member name="T:IDS.Security.IUserListProvider">
            <summary>
            The IUserListProvider interface can be added to a user provider to add support 
            for retrieving all users.
            </summary>
        </member>
        <member name="M:IDS.Security.IUserListProvider.RetrieveAllUsers">
            <summary>
            Retrieves all users from the user list provider.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.IUserProvider">
            <summary>
            The IUserProvider interface facilitates development of providers that authenticate users.
            </summary>
            <remarks>
            The user provider is only called to authenticate a user. If the user provider needs to know when the user
            logs out, the <see cref="T:IDS.ComponentModel.EventDispatcher"/> should be used to listen for the 
            <see cref="T:IDS.ComponentModel.Events.LogoutEvent"/> event.
            </remarks>
        </member>
        <member name="P:IDS.Security.IUserProvider.LoginDataValidationService">
            <summary>
            Gets the login data validation service.
            </summary>
            <value>The login data validation service.</value>
        </member>
        <member name="M:IDS.Security.IUserProvider.ValidateCredentials(IDS.Security.ICredentials)">
            <summary>
            Validates the given credentials.
            </summary>
            <param name="credentials">The credentials to validate.</param>
            <returns>Returns a <see cref="T:IDS.Security.CredentialValidationResult"/> enumeration which denotes whether the validation was successful
            or why it wasn't successful.</returns>
        </member>
        <member name="M:IDS.Security.IUserProvider.AuthenticateCredentials(IDS.Security.ICredentials)">
            <summary>
            Attempts to authenticate the given credentials.
            </summary>
            <param name="credentials">The credentials to authenticate.</param>
            <returns>
            A <see cref="T:IDS.Security.IUser"/> object that contains the authenticated user data for the given credentials.
            </returns>
            <exception cref="T:IDS.Security.AuthenticationException">The AuthenticationException is thrown if the credentials are unable 
            to be authenticated.</exception>
        </member>
        <member name="M:IDS.Security.IUserProvider.GetUser(System.String)">
            <summary>
            Gets the user information for a particular user ID.
            </summary>
            <param name="userID">The user ID for the user to retrieve.</param>
            <returns>
            Returns an <see cref="T:IDS.Security.IUser"/> object for the user ID. If the user ID is not found, the return
            value would be null.
            </returns>
        </member>
        <member name="M:IDS.Security.IUserProvider.GetUserByCredentials(IDS.Security.ICredentials)">
            <summary>
            Gets the user information for a particular credential.
            </summary>
            <param name="credentials">The credentials to authenticate.</param>
            <returns>
            A <see cref="T:IDS.Security.IUser"/> object that contains the authenticated user data for the given credentials or null if no user
            is associated with those credentials.
            </returns>
        </member>
        <member name="M:IDS.Security.IUserProvider.GetUserStatus(System.String)">
            <summary>
            Gets the user status.
            </summary>
            <param name="userID">The user ID.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.IUserProvider.SetUserStatus(IDS.Security.IUser,IDS.Security.ActiveStatus)">
            <summary>
            Sets the user status.
            </summary>
            <param name="user">The user.</param>
            <param name="status">The status.</param>
        </member>
        <member name="P:IDS.Security.IUserProvider.MaxFailedLoginAttempts">
            <summary>
            Gets the maximum number failed login attempts at which a user's status should be changed to <see cref="F:IDS.Security.ActiveStatus.Locked"/>.
            </summary>
        </member>
        <member name="T:IDS.Security.IUserSettable">
            <summary>
            Interface for allowing certain properties on an IUser to be settable.
            </summary>
        </member>
        <member name="P:IDS.Security.IUserSettable.UserID">
            <summary>
            Sets the user ID.
            </summary>
            <value>The user ID.</value>
        </member>
        <member name="P:IDS.Security.IUserSettable.PasswordChangeIsRequired">
            <summary>
            Sets a value indicating whether a password change is required.
            </summary>
            <value>
            	<c>true</c> if this a password change is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.IUserSettable.RequiredPasswordChangeReason">
            <summary>
            Sets the reason a password change is required.
            </summary>
            <value>The reason a password change is required.</value>
        </member>
        <member name="P:IDS.Security.IUserSettable.EmailAddressUpdateIsRequired">
            <summary>
            Sets a value indicating whether an email address update is required.
            </summary>
            <value>
            	<c>true</c> if an email address update is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.IUserSettable.AddressUpdateIsRequired">
            <summary>
            Sets a value indicating whether an address update is required.
            </summary>
            <value>
            	<c>true</c> if an address update is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IDS.Security.IWebCredentials">
            <summary>
            Interface for implementing an object that represents credentials containing web request information such as 
            requesting IP address, browser user agent, referrer, etc.
            </summary>
        </member>
        <member name="P:IDS.Security.IWebCredentials.IPAddress">
            <summary>
            Gets or sets the IP address.
            </summary>
            <value>The IP address.</value>
        </member>
        <member name="P:IDS.Security.IWebCredentials.SessionID">
            <summary>
            Gets or sets the session ID.
            </summary>
            <value>The session ID.</value>
        </member>
        <member name="P:IDS.Security.IWebCredentials.UserAgent">
            <summary>
            Gets or sets the user agent.
            </summary>
            <value>The user agent.</value>
        </member>
        <member name="P:IDS.Security.IWebCredentials.Referrer">
            <summary>
            Gets or sets the referrer.
            </summary>
            <value>The referrer.</value>
        </member>
        <member name="P:IDS.Security.IWebCredentials.UserCookie">
            <summary>
            Gets or sets the user cookie.
            </summary>
            <value>The user cookie.</value>
        </member>
        <member name="T:IDS.Security.LightUserInfo">
            <summary>
            This provides a light weight user object class.
            </summary>
        </member>
        <member name="M:IDS.Security.LightUserInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.LightUserInfo"/> class.
            </summary>
        </member>
        <member name="P:IDS.Security.LightUserInfo.UserId">
            <summary>
            Gets or sets the user id.
            </summary>
            <value>The user id.</value>
        </member>
        <member name="P:IDS.Security.LightUserInfo.LoginName">
            <summary>
            Gets or sets the name of the login.
            </summary>
            <value>The name of the login.</value>
        </member>
        <member name="P:IDS.Security.LightUserInfo.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:IDS.Security.LightUserInfo.Name">
            <summary>
            Gets or sets the user's name object.
            </summary>
            <value>The user's name.</value>
        </member>
        <member name="P:IDS.Security.LightUserInfo.FirstName">
            <summary>
            Gets the first name.
            </summary>
            <value>The first name.</value>
        </member>
        <member name="P:IDS.Security.LightUserInfo.LastName">
            <summary>
            Gets the last name.
            </summary>
            <value>The last name.</value>
        </member>
        <member name="P:IDS.Security.LightUserInfo.FirstLastName">
            <summary>
            Gets the first name and last name of the user.
            </summary>
            <value>The first name and last name of the user.</value>
        </member>
        <member name="P:IDS.Security.LightUserInfo.FirstLastNameStatus">
            <summary>
            Gets the first and last name with the user's status.
            </summary>
            <value>The first and last name with the user's status.</value>
        </member>
        <member name="P:IDS.Security.LightUserInfo.FullName">
            <summary>
            Gets the full name which includes the user's title, first name, middle name and last name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="F:IDS.Security.LightUserInfo.ExtendedData">
            <summary>
            Gets and sets the extended data of user.
            </summary>
            <value>The extended data of user.</value>
        </member>
        <member name="T:IDS.Security.LinkedRole">
            <summary>
            This class encapsulates the concept of a Linked Role within Portal.
            </summary>	
        </member>
        <member name="M:IDS.Security.LinkedRole.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Role"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.LinkedRole.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Role"/> class.
            </summary>
            <param name="name">The name of the Role.</param>
        </member>
        <member name="M:IDS.Security.LinkedRole.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Role"/> class.
            </summary>
            <param name="name">The name of the Role.</param>
            <param name="category">The category associated with this Role.</param>
        </member>
        <member name="M:IDS.Security.LinkedRole.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.LinkedRole"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:IDS.Security.LinkedRole.#ctor(IDS.Security.Role,IDS.Security.RoleCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.LinkedRole"/> class.
            </summary>
            <param name="role">The role.</param>
            <param name="linkedRoles">The linked roles.</param>
        </member>
        <member name="P:IDS.Security.LinkedRole.LinkedRoles">
            <summary>
            Gets or sets the linked roles.
            </summary>
            <value>The linked roles.</value>
        </member>
        <member name="M:IDS.Security.LinkedRole.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.LinkedRole.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:IDS.Security.LinkedRole.Parse(System.String)">
            <summary>
            Parses a string into a LinkedRole
            </summary>
        </member>
        <member name="T:IDS.Security.LinkedRoleCollection">
            <summary>
            Collection of linked roles
            </summary>	
        </member>
        <member name="M:IDS.Security.LinkedRoleCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.LinkedRoleCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.LinkedRoleCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Security.LinkedRole})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.LinkedRoleCollection"/> class.
            </summary>
            <param name="roles">The roles to add to this collection.</param>
        </member>
        <member name="M:IDS.Security.LinkedRoleCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.LinkedRoleCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:IDS.Security.LinkedRoleCollection.GetLinkedRoleByName(System.String)">
            <summary>
            Gets the linked role by name if exists in the collection. Returns null if not.
            </summary>
            <param name="roleName">Name of the role.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.LoginDataValidationFailureReason">
            <summary>
            The LoginDataValidationFailureReason enumeration is a flags enumeration
            that lists the reasons why a login data validation failed.
            </summary>
        </member>
        <member name="F:IDS.Security.LoginDataValidationFailureReason.None">
            <summary>
            The validation was successful.
            </summary>
        </member>
        <member name="F:IDS.Security.LoginDataValidationFailureReason.DataIsBlank">
            <summary>
            The validation failed because the data was blank.
            </summary>
        </member>
        <member name="F:IDS.Security.LoginDataValidationFailureReason.TooShort">
            <summary>
            The validation failed because the data was too short.
            </summary>
        </member>
        <member name="F:IDS.Security.LoginDataValidationFailureReason.TooLong">
            <summary>
            The validation failed because the data was too long.
            </summary>
        </member>
        <member name="F:IDS.Security.LoginDataValidationFailureReason.TooWeak">
            <summary>
            The validation failed because the data was too weak.
            </summary>
        </member>
        <member name="F:IDS.Security.LoginDataValidationFailureReason.InvalidCharacter">
            <summary>
            The validation failed because the data contained an invalid character.
            </summary>
        </member>
        <member name="F:IDS.Security.LoginDataValidationFailureReason.RegularExpressionMismatch">
            <summary>
            The validation failed the regular expression match. This is only valid for services that use a regular expression.
            </summary>
        </member>
        <member name="F:IDS.Security.LoginDataValidationFailureReason.ConfirmationMismatch">
            <summary>
            The validation failed because the confirmation value didn't match.
            </summary>
        </member>
        <member name="F:IDS.Security.LoginDataValidationFailureReason.SameAsCurrent">
            <summary>
            The validation failed because the new value is same as the current value.
            </summary>
        </member>
        <member name="F:IDS.Security.LoginDataValidationFailureReason.NotUnique">
            <summary>
            The validation failed because the new value is not unique.
            </summary>
        </member>
        <member name="F:IDS.Security.LoginDataValidationFailureReason.PasswordSameAsLoginName">
            <summary>
            The validation failed because the new password is the same as the login name.
            </summary>
        </member>
        <member name="F:IDS.Security.LoginDataValidationFailureReason.Other">
            <summary>
            An validated failed for an unspecified reason.
            </summary>
        </member>
        <member name="F:IDS.Security.LoginDataValidationFailureReason.SameAsOtherCredential">
            <summary>
            The validation failed because the new value is the same as another credential.
            </summary>
        </member>
        <member name="F:IDS.Security.LoginDataValidationFailureReason.PasswordContainsLoginName">
            <summary>
            The validation failed because the new password contains the login name.
            </summary>
        </member>
        <member name="F:IDS.Security.LoginDataValidationFailureReason.ContainsSensitiveData">
            <summary>
            The validation failed because the new value contains sensitive data.
            </summary>
        </member>
        <member name="T:IDS.Security.LogInOutLogEntry">
            <summary>
            Represents a LogInOut audit log entry, loggable through a created logger or the logger.
            </summary>
        </member>
        <member name="T:IDS.Security.LogInOutLogEntry.Actions">
            <summary>
            The Actions enumeration specifies what type of action is being audited.
            </summary>
        </member>
        <member name="F:IDS.Security.LogInOutLogEntry.Actions.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:IDS.Security.LogInOutLogEntry.Actions.LogIn">
            <summary>
            The Login action is being audited.
            </summary>
        </member>
        <member name="F:IDS.Security.LogInOutLogEntry.Actions.LogOut">
            <summary>
            The logout action is being audited.
            </summary>
        </member>
        <member name="F:IDS.Security.LogInOutLogEntry.Actions.SessionTimeout">
            <summary>
            The session timeout action is being audited.
            </summary>
        </member>
        <member name="M:IDS.Security.LogInOutLogEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.LogInOutLogEntry"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.LogInOutLogEntry.#ctor(IDS.Security.IUser,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.LogInOutLogEntry"/> class.
            </summary>
            <param name="user">The user.</param>
            <param name="result">if set to <c>true</c> the login was successful.</param>
            <param name="actionTaken">The action taken.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:IDS.Security.LogInOutLogEntry.#ctor(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.LogInOutLogEntry"/> class.
            </summary>
            <param name="userID">The user ID.</param>
            <param name="result">if set to <c>true</c> the login was successful.</param>
            <param name="actionTaken">The action taken.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:IDS.Security.LogInOutLogEntry.#ctor(System.String,System.Boolean,System.String,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.LogInOutLogEntry"/> class.
            </summary>
            <param name="userID">The user ID.</param>
            <param name="result">if set to <c>true</c> the login was successful.</param>
            <param name="actionTaken">The action taken.</param>
            <param name="message">The message.</param>
            <param name="msBenchmark">The ms benchmark.</param>
        </member>
        <member name="M:IDS.Security.LogInOutLogEntry.#ctor(IDS.Security.ICredentials,System.String,System.Boolean,System.String,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.LogInOutLogEntry"/> class.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="userID">The user ID.</param>
            <param name="result">if set to <c>true</c> the login was successful.</param>
            <param name="actionTaken">The action taken.</param>
            <param name="message">The message.</param>
            <param name="msBenchmark">The ms benchmark.</param>
        </member>
        <member name="M:IDS.Security.LogInOutLogEntry.#ctor(IDS.Security.ICredentials,System.Boolean,System.String,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.LogInOutLogEntry"/> class.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="result">if set to <c>true</c> the login was successful.</param>
            <param name="actionTaken">The action taken.</param>
            <param name="message">The message.</param>
            <param name="msBenchmark">The ms benchmark.</param>
        </member>
        <member name="M:IDS.Security.LogInOutLogEntry.#ctor(IDS.Security.IUser,System.Boolean,System.String,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.LogInOutLogEntry"/> class.
            </summary>
            <param name="user">The user.</param>
            <param name="result">if set to <c>true</c> the login was successful.</param>
            <param name="actionTaken">The action taken.</param>
            <param name="message">The message.</param>
            <param name="msBenchmark">The ms benchmark.</param>
        </member>
        <member name="P:IDS.Security.LogInOutLogEntry.MSBenchmark">
            <summary>
            Gets or sets the TicksBenchmark
            </summary>
            <value>location.</value>
        </member>
        <member name="P:IDS.Security.LogInOutLogEntry.LoginOutID">
            <summary>
            Gets the login out ID.
            </summary>
            <value>The login out ID.</value>
        </member>
        <member name="M:IDS.Security.LogInOutLogEntry.PersistToSql(System.Data.SqlClient.SqlTransaction)">
            <summary>
            Persist the audit data to SQL Server database. The derived type must first call 
            the base type's implementation, which will create the necessary base entry.
            </summary>
            <param name="transaction">The SqlTransaction object used to wrap the transaction while updating the database.</param>
        </member>
        <member name="T:IDS.Security.MaintainableRole">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Security.MaintainableRole.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.MaintainableRole"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.MaintainableRole.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.MaintainableRole"/> class.
            </summary>
            <param name="name">The name of the Role.</param>
        </member>
        <member name="M:IDS.Security.MaintainableRole.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.MaintainableRole"/> class.
            </summary>
            <param name="name">The name of the Role.</param>
            <param name="category">The category associated with this Role.</param>
        </member>
        <member name="M:IDS.Security.MaintainableRole.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.MaintainableRole"/> class.
            </summary>
            <param name="name">The name of the Role.</param>
            <param name="category">The category associated with this Role.</param>
            <param name="description">The description associated with this Role.</param>
        </member>
        <member name="P:IDS.Security.MaintainableRole.UserCount">
            <summary>
            Gets or sets the user count.
            </summary>
            <value>The user count.</value>
        </member>
        <member name="T:IDS.Security.MaintainableRoleFileUploadedAuditEntry">
            <summary>
            Saves the contents of the file uploaded to the maintainable role provider
            </summary>
        </member>
        <member name="P:IDS.Security.MaintainableRoleFileUploadedAuditEntry.FileData">
            <summary>
            Gets or sets the file data.
            </summary>
            <value>The file data.</value>
        </member>
        <member name="P:IDS.Security.MaintainableRoleFileUploadedAuditEntry.RoleName">
            <summary>
            Gets or sets the name of the role.
            </summary>
            <value>The name of the role.</value>
        </member>
        <member name="P:IDS.Security.MaintainableRoleFileUploadedAuditEntry.MappedUserCount">
            <summary>
            Gets or sets the mapped user count.
            </summary>
            <value>The mapped user count.</value>
        </member>
        <member name="M:IDS.Security.MaintainableRoleFileUploadedAuditEntry.#ctor(IDS.Security.IUser,System.String,System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.MaintainableRoleFileUploadedAuditEntry"/> class.
            </summary>
            <param name="user">The user.</param>
            <param name="actionTaken">The action taken.</param>
            <param name="result">if set to <c>true</c> [result].</param>
            <param name="details">The details.</param>
            <param name="fileData">The file data.</param>
            <param name="roleName">Name of the role.</param>
            <param name="mappedUserCount">The mapped user count.</param>
        </member>
        <member name="M:IDS.Security.MaintainableRoleFileUploadedAuditEntry.PersistToSql(System.Data.SqlClient.SqlTransaction)">
            <summary>
            When overridden in a derived type, allows the derived type to persist its data
            to a SQL Server database. The derived type must first call the base type's
            implementation, which will create the necessary base entry.
            </summary>
            <param name="transaction">The SqlTransaction object used to wrap the transaction while updating the database.</param>
        </member>
        <member name="T:IDS.Security.MaintainableRoleIndex">
            <remarks/>
        </member>
        <member name="M:IDS.Security.MaintainableRoleIndex.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:IDS.Security.MaintainableRoleIndex.SerializeTo(System.IO.Stream)">
            <summary>
            Serializes this object to the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:IDS.Security.MaintainableRoleIndex.SerializeTo(System.Xml.XmlWriter)">
            <summary>
            Serializes this object to the specified <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:IDS.Security.MaintainableRoleIndex.Parse(System.String)">
            <summary>
            Parses the specified XML into a MaintainableRoleIndex object.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.MaintainableRoleIndex.Parse(System.Byte[])">
            <summary>
            Parses the specified XML into a MaintainableRoleIndex object.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.MaintainableRoleIndex.Parse(System.IO.Stream)">
            <summary>
            Parses the specified XML into a MaintainableRoleIndex object.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.MaintainableRoleIndex.FindRole(IDS.Security.Role)">
            <summary>
            Finds the role.
            </summary>
            <param name="role">The role.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.MaintainableRoleIndex.FindRole(System.String)">
            <summary>
            Finds the role.
            </summary>
            <param name="roleName">Name of the role.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.MaintainableRoleIndex.RemoveRole(IDS.Security.Role)">
            <summary>
            Removes the role.
            </summary>
            <param name="role">The role.</param>
        </member>
        <member name="M:IDS.Security.MaintainableRoleIndex.RemoveRole(System.String)">
            <summary>
            Removes the role.
            </summary>
            <param name="roleName">Name of the role.</param>
        </member>
        <member name="M:IDS.Security.MaintainableRoleIndex.RemoveRole(IDS.Security.MaintainableRoleIndexRole)">
            <summary>
            Removes the role.
            </summary>
            <param name="role">The role.</param>
        </member>
        <member name="P:IDS.Security.MaintainableRoleIndex.Items">
            <remarks/>
        </member>
        <member name="T:IDS.Security.MaintainableRoleIndexRole">
            <remarks/>
        </member>
        <member name="P:IDS.Security.MaintainableRoleIndexRole.Users">
            <remarks/>
        </member>
        <member name="P:IDS.Security.MaintainableRoleIndexRole.Name">
            <remarks/>
        </member>
        <member name="T:IDS.Security.MaintainableRoleIndexRoleUsers">
            <remarks/>
        </member>
        <member name="P:IDS.Security.MaintainableRoleIndexRoleUsers.User">
            <remarks/>
        </member>
        <member name="P:IDS.Security.MaintainableRoleIndexRoleUsers.Count">
            <remarks/>
        </member>
        <member name="T:IDS.Security.MaintainableRoleIndexRoleUsersUser">
            <remarks/>
        </member>
        <member name="P:IDS.Security.MaintainableRoleIndexRoleUsersUser.ID">
            <remarks/>
        </member>
        <member name="T:IDS.Security.MaintainableRoleProvider">
            <summary>
            Abstract base implementation of <see cref="T:IDS.Security.IMaintainableRoleProvider"/>
            </summary>
        </member>
        <member name="P:IDS.Security.MaintainableRoleProvider.RoleDataParser">
            <summary>
            Gets or sets the role data parser.
            </summary>
            <value>The role data parser.</value>
        </member>
        <member name="M:IDS.Security.MaintainableRoleProvider.DoCreateRole(System.String,IDS.ComponentModel.Dataspace)">
            <summary>
            Creates the role.
            </summary>
            <param name="roleName">Name of the role.</param>
            <param name="dataspace">The dataspace.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.MaintainableRoleProvider.DoDeleteRole(IDS.Security.Role,IDS.ComponentModel.Dataspace)">
            <summary>
            Deletes the role.
            </summary>
            <param name="roleToDelete">The role to delete.</param>
            <param name="dataspace">The dataspace.</param>
        </member>
        <member name="M:IDS.Security.MaintainableRoleProvider.DoLoadUserList(System.IO.Stream,IDS.ComponentModel.Dataspace)">
            <summary>
            Loads the user list from a datastream.
            </summary>
            <param name="userListData">The user list data.</param>
            <param name="dataspace">The dataspace.</param>
        </member>
        <member name="M:IDS.Security.MaintainableRoleProvider.DoClearRoleUsers(IDS.Security.Role,IDS.ComponentModel.Dataspace)">
            <summary>
            Clears the list of users assigned to the specified role.
            </summary>
            <param name="role">The role whose user list is to be cleared.</param>
            <param name="dataspace">The dataspace.</param>
        </member>
        <member name="M:IDS.Security.MaintainableRoleProvider.DoGetRoleInfo(IDS.ComponentModel.Dataspace)">
            <summary>
            Gets a collection of MaintainableRoles that are provided by this <see cref="T:IDS.Security.IRoleProvider"/>.
            </summary>
            <param name="dataspace">The dataspace for which roles should be returned.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.MaintainableRoleProvider.PersistRoleUsers(IDS.Security.Role,System.Collections.Generic.List{System.String},IDS.ComponentModel.Dataspace)">
            <summary>
            Persists the role users to the datastore.
            </summary>
            <param name="role">The role.</param>
            <param name="users">The users.</param>
            <param name="dataspace">The dataspace.</param>
        </member>
        <member name="M:IDS.Security.MaintainableRoleProvider.DoGetRolesForUser(IDS.Security.IUser)">
            <summary>
            Returns a RoleCollection with all the roles associated with the user provided.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.MaintainableRoleProvider.DoGetAllRoles">
            <summary>
            Gets a list of all the roles for this provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.MaintainableRoleProvider.CreateRole(System.String,IDS.ComponentModel.Dataspace)">
            <summary>
            Creates the role.
            </summary>
            <param name="roleName">Name of the role.</param>
            <param name="dataspace">The dataspace.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.MaintainableRoleProvider.DeleteRole(IDS.Security.Role,IDS.ComponentModel.Dataspace)">
            <summary>
            Deletes the role.
            </summary>
            <param name="roleToDelete">The role to delete.</param>
            <param name="dataspace">The dataspace.</param>
        </member>
        <member name="M:IDS.Security.MaintainableRoleProvider.LoadUserList(System.IO.Stream,IDS.Security.Role,IDS.ComponentModel.Dataspace)">
            <summary>
            Loads the user list from a datastream and assigns those users to the specified role.
            </summary>
            <param name="userListData">The user list data.</param>
            <param name="role">The role to which users should be assigned.</param>
            <param name="dataspace">The dataspace.</param>
        </member>
        <member name="M:IDS.Security.MaintainableRoleProvider.ReadWithoutClosing(System.IO.Stream)">
            <summary>Gets text from a stream. Leaves the stream open and sets to read from the beginning.</summary>
             <param name="stream">The stream.</param>
             <returns>the text</returns>
        </member>
        <member name="M:IDS.Security.MaintainableRoleProvider.ClearRoleUsers(IDS.Security.Role,IDS.ComponentModel.Dataspace)">
            <summary>
            Clears the list of users assigned to the specified role.
            </summary>
            <param name="role">The role whose user list is to be cleared.</param>
            <param name="dataspace">The dataspace.</param>
        </member>
        <member name="M:IDS.Security.MaintainableRoleProvider.GetRoleInfo(IDS.ComponentModel.Dataspace)">
            <summary>
            Gets a collection of MaintainableRoles that are provided by this <see cref="T:IDS.Security.IRoleProvider"/>.
            </summary>
            <param name="dataspace">The dataspace for which roles should be returned.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.MaintainableRoleProvider.GetAllRoles">
            <summary>
            Gets a list of all the roles for this provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.MaintainableRoleProvider.GetRolesForUser(IDS.Security.IUser)">
            <summary>
            Returns a RoleCollection with all the roles associated with the user provided.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.MaintainableUser">
            <remarks/>
        </member>
        <member name="M:IDS.Security.MaintainableUser.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:IDS.Security.MaintainableUser.SerializeTo(System.IO.Stream)">
            <summary>
            Serializes this object to the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:IDS.Security.MaintainableUser.SerializeTo(System.Xml.XmlWriter)">
            <summary>
            Serializes this object to the specified <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:IDS.Security.MaintainableUser.Parse(System.String)">
            <summary>
            Parses the specified XML into a MaintainableUser object.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.MaintainableUser.Parse(System.Byte[])">
            <summary>
            Parses the specified XML into a MaintainableUser object.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.MaintainableUser.Parse(System.IO.Stream)">
            <summary>
            Parses the specified XML into a MaintainableUser object.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.MaintainableUser.RemoveRole(IDS.Security.Role)">
            <summary>
            Removes the role.
            </summary>
            <param name="role">The role.</param>
        </member>
        <member name="M:IDS.Security.MaintainableUser.RemoveRole(System.String)">
            <summary>
            Removes the role.
            </summary>
            <param name="roleName">Name of the role.</param>
        </member>
        <member name="M:IDS.Security.MaintainableUser.RemoveRole(IDS.Security.UserRole)">
            <summary>
            Removes the role.
            </summary>
            <param name="role">The role.</param>
        </member>
        <member name="M:IDS.Security.MaintainableUser.FindRole(System.String)">
            <summary>
            Finds the role.
            </summary>
            <param name="roleName">Name of the role.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.MaintainableUser.FindRole(IDS.Security.Role)">
            <summary>
            Finds the role.
            </summary>
            <param name="role">The role.</param>
            <returns></returns>
        </member>
        <member name="P:IDS.Security.MaintainableUser.Roles">
            <remarks/>
        </member>
        <member name="P:IDS.Security.MaintainableUser.ID">
            <remarks/>
        </member>
        <member name="T:IDS.Security.UserRole">
            <remarks/>
        </member>
        <member name="P:IDS.Security.UserRole.Name">
            <remarks/>
        </member>
        <member name="T:IDS.Security.NamedState">
            <summary>
            Represents a named, abstract allowed/denied state, can be 
            used for example to represent roles states or permission states 
            
            </summary>
        </member>
        <member name="F:IDS.Security.NamedState.REQUIRED_PREFIX">
            <summary>
            A constant that defines the string that denotes a role state is required.
            </summary>
        </member>
        <member name="F:IDS.Security.NamedState.NEGATION_PREFIX">
            <summary>
            A constant that defines the string that denotes a role state is negated.
            </summary>
        </member>
        <member name="P:IDS.Security.NamedState.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:IDS.Security.NamedState.Allow">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:IDS.Security.RoleState"/> is allowed.
            </summary>
            <value><c>true</c> if allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.Security.NamedState.Deny">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:IDS.Security.RoleState"/> is denied.
            </summary>
            <value><c>true</c> if denied; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.Security.NamedState.Complement">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:IDS.Security.RoleState"/> is complemented.
            </summary>
            <value><see langword="true" /> if complemented; otherwise, <see langword="false" />.</value>
        </member>
        <member name="M:IDS.Security.NamedState.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RoleState"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:IDS.Security.NamedState.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RoleState"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="deny">if set to <c>true</c> [deny].</param>
            <param name="allow">if set to <c>true</c> [allow].</param>
        </member>
        <member name="M:IDS.Security.NamedState.#ctor(IDS.Security.NamedState)">
            <summary>
            Constructor to clone named state
            </summary>
            <param name="original"></param>
        </member>
        <member name="M:IDS.Security.NamedState.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Security.RoleState"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Security.RoleState"></see>.
            </returns>
        </member>
        <member name="M:IDS.Security.NamedState.Parse(System.String)">
            <summary>
            Parse single named state from a stringified single named state expression
            </summary>
            <param name="namedStateString"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.NamedState.Union(IDS.Security.NamedState)">
            <summary>
            method to union a named state, the union semantics might have to change,
            the union of allow and deny is deny, this returns a clone, and therefore 
            is threadsafe
            </summary>
            <param name="with"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.NamedState.Clone">
            <summary>
            Method to clone named state
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.NamedStateCollection">
            <summary>
            Named state collection
            </summary>
        </member>
        <member name="M:IDS.Security.NamedStateCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDS.Security.NamedStateCollection.#ctor(IDS.Security.NamedStateCollection)">
            <summary>
            Constructor used for cloning
            </summary>
            <param name="original"></param>
        </member>
        <member name="M:IDS.Security.NamedStateCollection.Parse(System.String)">
            <summary>
            parse list of named states from stringified named state expression
            </summary>
            <param name="namedStateExpression"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.NamedStateCollection.Union(IDS.Security.NamedStateCollection)">
            <summary>
            This implements set union with some intersection semantics, meaning it is 
            regular union except that union of allow and deny is deny - precedence based union
            </summary>
            <param name="with"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.NamedStateCollection.LookupByName(IDS.Security.NamedState)">
            <summary>
            Used to look by state by name
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.NamedStateCollection.Clone">
            <summary>
            Used to clone a state collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.PasswordHashHistory">
            <summary>
            The PasswordHashHistory class contains information on a particular password hash.
            </summary>
        </member>
        <member name="M:IDS.Security.PasswordHashHistory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.PasswordHashHistory"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.PasswordHashHistory.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.PasswordHashHistory"/> class.
            </summary>
            <param name="passwordHash">The password hash.</param>
            <param name="changeDateTime">The change date time.</param>
        </member>
        <member name="P:IDS.Security.PasswordHashHistory.PasswordHash">
            <summary>
            Gets or sets the password hash.
            </summary>
            <value>The password hash.</value>
        </member>
        <member name="P:IDS.Security.PasswordHashHistory.ChangeDateTime">
            <summary>
            Gets or sets the date/time this password hash was changed.
            </summary>
            <value>The change date/time this password hash was changed.</value>
        </member>
        <member name="T:IDS.Security.PasswordHashHistoryCollection">
            <summary>
            The PasswordHashHistoryCollection class is a collection class that contains a collection 
            of <see cref="T:IDS.Security.PasswordHashHistory"/> items.
            </summary>
        </member>
        <member name="M:IDS.Security.PasswordHashHistoryCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.PasswordHashHistoryCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.PasswordHashHistoryCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Security.PasswordHashHistory})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.PasswordHashHistoryCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Security.PasswordHashHistoryCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.PasswordHashHistoryCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="T:IDS.Security.PasswordHelper">
            <summary>
            The EncryptedPasswordHelper class is a helper class that takes a plain text password and encrypts it
            or takes an encrypted password and decrypts it. The main purpose of this class is to make sure passwords
            don't get saved as plain text in a memory dump not to prevent programatic access to the password.
            </summary>
        </member>
        <member name="M:IDS.Security.PasswordHelper.EncryptPassword(System.String)">
            <summary>
            Encrypts the plain text password into an encrypted password.
            </summary>
            <param name="plainTextPassword">The plain text password to encrypt.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.PasswordHelper.DecryptPassword(System.String)">
            <summary>
            Decrypts the encrypted password into a plain text password.
            </summary>
            <param name="encryptedPassword">The encrypted password to decrypt.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.PasswordHelper.CreatePasswordHash(System.String,System.String)">
            <summary>
            Creates the password hash.
            </summary>
            <param name="password">The password to be hashed.</param>
            <param name="seed">The seed to combine with the password to create a unique hash.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.PasswordHelper.CreatePasswordHashPbkdf2(System.String,System.String)">
            <summary>
            Creates the password hash.
            </summary>
            <param name="password">The password to be hashed.</param>
            <param name="salt">The salt to combine with the password to create a unique hash.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.PasswordHelper.CreatePasswordHashPbkdf2Sha256(System.String,System.String)">
            <summary>
            Creates the password hash.
            </summary>
            <param name="password">The password to be hashed.</param>
            <param name="salt">The salt to combine with the password to create a unique hash.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.PersistentUsersProvider">
            <summary>
            Base implementation for <see cref="T:IDS.Security.IPersistentUserProvider"/>.
            </summary>
        </member>
        <member name="F:IDS.Security.PersistentUsersProvider.RememberMeCredentialName">
            <summary>
            The name of the CredentialItem corresponding to the Remember Me flag (true or false)
            </summary>
        </member>
        <member name="F:IDS.Security.PersistentUsersProvider.RememberMeTokenCredentialName">
            <summary>
            The name of the CredentialItem corresponding to the Remember Me Login Name Token
            </summary>
        </member>
        <member name="F:IDS.Security.PersistentUsersProvider.RememberMeNicknameCredentialName">
            <summary>
            The name of the CredentialItem corresponding to the Remember Me device nickname
            </summary>
        </member>
        <member name="F:IDS.Security.PersistentUsersProvider.DeviceIdCredentialName">
            <summary>
            The name of the CredentialItem corresponding to the DeviceId
            </summary>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.DoUpdateUser(IDS.Security.IUser)">
            <summary>
            A method to update user
            </summary>
            <param name="user">user</param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.DoChangeEmailAddress(IDS.Security.IUser,System.String)">
            <summary>
            A method to change the email address of the specified user.
            </summary>
            <param name="user">The user.</param>
            <param name="newEmailAddress">The new email address.</param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.DoChangeAlternateEmailAddresses(IDS.Security.IUser,IDS.EntityModel.EmailAddressCollection)">
            <summary>
            Changes the alternate email addresses of the specified user.
            </summary>
            <param name="user">The user.</param>
            <param name="newEmailAddresses">The new alternate email addresses.</param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.DoSetEmailChangeRequired(IDS.Security.IUser,System.Boolean)">
            <summary>
            Sets whether an email change is required for a given user.
            </summary>
            <param name="user">The user.</param>
            <param name="emailChangeRequired">if set to <see langword="true"/> the user's email requires changing.</param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.DoChangePassword(IDS.Security.IUser,System.String,System.String)">
            <summary>
            A method to change the password of the specified user. The existing password is verified before changing the password.
            </summary>
            <param name="user">The user.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <exception cref="T:IDS.Security.AuthenticationException">is thrown if the old password doesn't match the existing password.</exception>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.DoChangePassword(IDS.Security.IUser,System.String,System.Boolean)">
            <summary>
            A method to change the password of the specified user without validating the current password.
            </summary>
            <param name="user">The user.</param>
            <param name="newPassword">The new password.</param>
            <param name="checkPasswordHistory">if set to <c>true</c> the password history will be checked to 
            see if the current password has been used before.</param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.DoChangePassword(IDS.Security.ChangePasswordParameters)">
            <summary>
            A method to change the password of the specified user.
            </summary>
            <param name="changePasswordParameters">The pass params.</param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.DoSetPasswordChangeRequired(IDS.Security.IUser,System.Boolean)">
            <summary>
            Sets whether a password change is required for a given user.
            </summary>
            <param name="user">The user.</param>
            <param name="passwordChangeRequired">if set to <see langword="true"/> the user's password requires changing.</param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.OnPasswordChanged(IDS.Security.IUser,System.Boolean,System.String)">
            <summary>
            Called when a user's password is changed.  Audits the change as well as
            dispatching the <see cref="T:IDS.ComponentModel.Events.ChangePasswordSuccessfulEvent"/> event or <see cref="T:IDS.ComponentModel.Events.ChangePasswordAttemptFailedEvent"/>
            event depending on the successful flag.
            </summary>
            <param name="user">The user whose password was changed.</param>
            <param name="successful">if set to <see langword="true"/> the password change attempt was successful.</param>
            <param name="failureReason">
            If <paramref name="successful"/> is <see langword="true" />,
            the reason the password change attempt failed, otherwise, <see langword="null"/>.
            </param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.OnPasswordChanged(IDS.Security.ChangePasswordParameters,System.Boolean,System.String)">
            <summary>
            Called when a user's password is changed.  Audits the change as well as
            dispatching the <see cref="T:IDS.ComponentModel.Events.ChangePasswordSuccessfulEvent"/> event or <see cref="T:IDS.ComponentModel.Events.ChangePasswordAttemptFailedEvent"/>
            event depending on the successful flag.
            </summary>
            <param name="changePasswordParameters">The pass params.</param>
            <param name="successful">if set to <see langword="true"/> the password change attempt was successful.</param>
            <param name="failureReason">If <paramref name="successful"/> is <see langword="true"/>,
            the reason the password change attempt failed, otherwise, <see langword="null"/>.</param>
        </member>
        <member name="P:IDS.Security.PersistentUsersProvider.CredentialPolicyProvider">
            <summary>
            Gets or sets the configured <see cref="P:IDS.Security.PersistentUsersProvider.CredentialPolicyProvider" />.
            </summary>
        </member>
        <member name="P:IDS.Security.PersistentUsersProvider.LoginDataValidationService">
            <summary>
            Gets or sets the configured login data validation service.
            </summary>
            <value>The login data validation service.</value>
        </member>
        <member name="P:IDS.Security.PersistentUsersProvider.AllowedCharacters">
            <summary>
            Gets or sets the characters that are allowed when the user provider is asked to reset 
            the password with a random autogenerated password.
            </summary>
            <value>The allowed characters.</value>
        </member>
        <member name="P:IDS.Security.PersistentUsersProvider.PasswordLength">
            <summary>
            Gets or sets the length of an autogenerated password when the user provider is asked to reset the password.
            </summary>
            <value>The length of the autogenerated password.</value>
        </member>
        <member name="P:IDS.Security.PersistentUsersProvider.LoginPropertyName">
            <summary>
            Gets or sets the name of the login property key.
            </summary>
            <value>The name of the login property key.</value>
        </member>
        <member name="P:IDS.Security.PersistentUsersProvider.PasswordPropertyName">
            <summary>
            Gets or sets the name of the password property key.
            </summary>
            <value>The name of the password property key.</value>
        </member>
        <member name="P:IDS.Security.PersistentUsersProvider.MaxFailedLoginAttempts">
            <summary>
            Gets the maximum number failed login attempts at which a user's status should be changed to <see cref="F:IDS.Security.ActiveStatus.Locked"/>.
            </summary>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.NewUser(IDS.Security.IUser)">
            <summary>
            Creates a new typed IUser instance from a user that is appropriate for this users provider.
            </summary>
            <param name="user">The seed user.</param>
            <returns>
            Returns a new typed IUser with the user properties, that is appropriate for this users provider.
            </returns>
            <remarks>
            The value is not persisted to the database until the <see cref="M:IDS.Security.PersistentUsersProvider.AddUser(IDS.Security.IUser)"/> method
            is called.
            </remarks>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.AddUser(IDS.Security.IUser)">
            <summary>
            Adds a new user to the database.
            </summary>
            <param name="user">The IUser object to add to the database.</param>
            <remarks>
            This method adds a user created with <see cref="M:IDS.Security.PersistentUsersProvider.NewUser(IDS.Security.IUser)"/> to the database.
            </remarks>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.AddUser(IDS.Security.IUser,IDS.Security.ICredentials)">
            <summary>
            Adds a new user to the data store.
            </summary>
            <param name="user">The <see cref="T:IDS.Security.IUser"/> object to be added.</param>
            <param name="credentials">The credentials that are to be assigned to the added user.</param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.DeleteUser(IDS.Security.IUser)">
            <summary>
            Deletes the user associated with the IUser object from the database.
            </summary>
            <param name="user">The IUser object to delete from the database.</param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.UpdateUser(IDS.Security.IUser)">
            <summary>
            Updates the information in the database associated with the IUser object.
            </summary>
            <param name="user">The IUser object to use to update the database.</param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.ValidateCredentials(IDS.Security.ICredentials)">
            <summary>
            Validates the given credentials.
            </summary>
            <param name="credentials">The credentials to validate.</param>
            <returns>Returns a <see cref="T:IDS.Security.CredentialValidationResult"/> enumeration which denotes whether the validation was successful
            or why it wasn't successful.</returns>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.AuthenticateCredentials(IDS.Security.ICredentials)">
            <summary>
            Attempts to authenticate the given credentials.
            </summary>
            <param name="credentials">The credentials to authenticate.</param>
            <returns>
            A <see cref="T:IDS.Security.IUser"/> object that contains the authenticated user data for the given credentials.
            </returns>
            <exception cref="T:IDS.Security.AuthenticationException">The AuthenticationException is thrown if the credentials are unable 
            to be authenticated.</exception>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.GetUser(System.String)">
            <summary>
            Gets the user information for a particular user ID.
            </summary>
            <param name="userID">The user ID for the user to retrieve.</param>
            <returns>
            Returns an <see cref="T:IDS.Security.IUser"/> object for the user ID. If the user ID is not found, the return
            value would be null.
            </returns>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.GetUserByCredentials(IDS.Security.ICredentials)">
            <summary>
            Gets the user information for a particular credential.
            </summary>
            <param name="credentials">The credentials to authenticate.</param>
            <returns>
            A <see cref="T:IDS.Security.IUser"/> object that contains the authenticated user data for the given credentials or null if no user
            is associated with those credentials.
            </returns>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.GetUserStatus(System.String)">
            <summary>
            Gets the user status.
            </summary>
            <param name="userID">The user ID.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.SetUserStatus(IDS.Security.IUser,IDS.Security.ActiveStatus)">
            <summary>
            Sets the user status.
            </summary>
            <param name="user">The user.</param>
            <param name="status">The status.</param>
        </member>
        <member name="P:IDS.Security.PersistentUsersProvider.SearchTypesSupported">
            <summary>
            Gets an array of <see cref="T:IDS.Security.UserSearchType"/> enumerations that specifies which 
            types of searches this user provider supports.
            </summary>
            <returns>Returns a list of search types supported. </returns>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.SearchForUsers(IDS.Security.UserSearchType,System.String)">
            <summary>
            Searches for users based on the specified search type.
            </summary>
            <param name="searchType">Type of the search.</param>
            <param name="searchData">The search data.</param>
            <exception cref="T:System.InvalidOperationException">The InvalidOperationException is thrown if an unsupported search type is requested.</exception>
            <returns>Returns a collection of <see cref="T:IDS.Security.IUser"/> instances for the users found by the user provider.</returns>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.SearchForUsers(IDS.Security.UserSearchType,System.String,System.Int32)">
            <summary>
            Searches for users based on the specified search type.
            </summary>
            <param name="searchType">Type of the search.</param>
            <param name="searchData">The search data.</param>
            <param name="maxResults">The max number of users to return in results</param>
            <exception cref="T:System.InvalidOperationException">The InvalidOperationException is thrown if an unsupported search type is requested.</exception>
            <returns>Returns a collection of <see cref="T:IDS.Security.IUser"/> instances for the users found by the user provider.</returns>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.ChangeEmailAddress(IDS.Security.IUser,System.String)">
            <summary>
            A method to change the email address of the specified user.
            </summary>
            <param name="user">The user.</param>
            <param name="newEmailAddress">The new email address.</param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.ChangeAlternateEmailAddresses(IDS.Security.IUser,IDS.EntityModel.EmailAddressCollection)">
            <summary>
            Changes the alternate email addresses of the specified user.
            </summary>
            <param name="user">The user.</param>
            <param name="newEmailAddresses">The new alternate email addresses.</param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.SetEmailChangeRequired(IDS.Security.IUser,System.Boolean)">
            <summary>
            Sets whether an email change is required for a given user.
            </summary>
            <param name="user">The user.</param>
            <param name="emailChangeRequired">if set to <see langword="true"/> the user's email requires changing.</param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.ChangePassword(IDS.Security.IUser,System.String,System.String)">
            <summary>
            A method to change the password of the specified user. The existing password is verified before changing the password.
            </summary>
            <param name="user">The user.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <exception cref="T:IDS.Security.AuthenticationException">is thrown if the old password doesn't match the existing password.</exception>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.ChangePassword(IDS.Security.IUser,System.String)">
            <summary>
            A method to change the password of the specified user without validating the current password.  This will by default always check password history.
            </summary>
            <param name="user">The user.</param>
            <param name="newPassword">The new password.</param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.ChangePassword(IDS.Security.IUser,System.String,System.Boolean)">
            <summary>
            A method to change the password of the specified user without validating the current password.
            </summary>
            <param name="user">The user.</param>
            <param name="newPassword">The new password.</param>
            <param name="checkPasswordHistory">if set to <c>true</c> the password history will be checked to
            see if the current password has been used before.</param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.ResetPassword(IDS.Security.IUser)">
            <summary>
            Resets the password associated with the specified user to a random password. The random password is returned.
            </summary>
            <param name="user">The user.</param>
            <returns>Returns a string with the new password.</returns>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.GenerateRandomPassword">
            <summary>
            This method generates a random password that is suitable for resetting a users password.
            </summary>
            <returns>Returns the randomly generated password.</returns>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.SetPasswordChangeRequired(IDS.Security.IUser,System.Boolean)">
            <summary>
            Sets whether a password change is required for a given user.
            </summary>
            <param name="user">The user.</param>
            <param name="passwordChangeRequired">if set to <see langword="true"/> the user's password requires changing.</param>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.ChangePassword(IDS.Security.ChangePasswordParameters)">
            <summary>
            Changes the password.
            </summary>
            <param name="changePasswordParameters">The password params.</param>
            <exception cref="T:IDS.Security.AuthenticationException">is thrown if the old password doesn't match the existing password.</exception>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.RetrieveAllUsers">
            <summary>
            Retrieves all users from the user list provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.GetAllCountries">
            <summary>
            default implementation just returns a list with US in it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.GetCredentials(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates the credentials based on the name/value items in the credentialItems collection.
            </summary>
            <param name="credentialItems">A collection containing the credential items. The contents of this
            collection are specific to a particular provider. It is possible a provider might allow null for
            this parameter.</param>
            <returns>
            Returns a <see cref="T:IDS.Security.ICredentials"/> based on the given credential items.
            </returns>
            <exception cref="T:IDS.Security.CredentialsException">A CredentialsException is thrown if a credential is
            not able to be created based on the given credential items.</exception>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.GetCredentials(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Creates the credentials based on the name/value items in the credentialItems collection.
            </summary>
            <param name="credentialItems">A collection containing the credential items. The contents of this
            collection are specific to a particular provider. It is possible a provider might allow null for
            this parameter.</param>
            <param name="isSingleSignon">if set to <c>true</c> the request for credentials is a single signon request.</param>
            <returns>
            Returns a <see cref="T:IDS.Security.ICredentials"/> based on the given credential items.
            </returns>
            <exception cref="T:IDS.Security.CredentialsException">A CredentialsException is thrown if a credential is
            not able to be created based on the given credential items.</exception>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.OnInit">
            <summary>
            Called right after the service is initialized.
            </summary>
        </member>
        <member name="M:IDS.Security.PersistentUsersProvider.OnInitAllServices">
            <summary>
            Called after all the services are initialized.
            </summary>
        </member>
        <member name="T:IDS.Security.ProviderManager">
            <summary>
            The ProviderManager class is an abstract base class that provides common methods for Provider manager classes
            such as <see cref="T:IDS.Security.RoleManager"/>.
            </summary>
        </member>
        <member name="M:IDS.Security.ProviderManager.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:IDS.Security.RoleManager"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:IDS.Security.ProviderManager.AcquireReaderLock">
            <summary>
            Acquires the reader lock.
            </summary>
        </member>
        <member name="M:IDS.Security.ProviderManager.ReleaseReaderLock">
            <summary>
            Releases the reader lock.
            </summary>
        </member>
        <member name="M:IDS.Security.ProviderManager.AcquireWriterLock">
            <summary>
            Acquires the writer lock.
            </summary>
        </member>
        <member name="M:IDS.Security.ProviderManager.ReleaseWriterLock">
            <summary>
            Releases the writer lock.
            </summary>
        </member>
        <member name="M:IDS.Security.ProviderManager.IsReaderLockHeld">
            <summary>
            Determines whether the reader lock is held.
            </summary>
            <returns>
            	<c>true</c> if the reader lock is held; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.Security.ProviderManager.IsWriterLockHeld">
            <summary>
            Determines whether the writer lock is held.
            </summary>
            <returns>
            	<c>true</c> if the writer lock is held; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.Security.ProviderManager.UpgradeToWriterLock">
            <summary>
            Upgrades the reader lock to a writer lock.
            </summary>
            <returns>Returns the LockCookie.</returns>
        </member>
        <member name="M:IDS.Security.ProviderManager.DowngradeFromWriterLock(System.Threading.LockCookie@)">
            <summary>
            Downgrades from a writer lock to a reader lock.
            </summary>
            <returns>Returns the LockCookie.</returns>
        </member>
        <member name="M:IDS.Security.ProviderManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method must be implemented in a sibling of this class. The sibling should use this method
            to free any resources.
            </remarks>
        </member>
        <member name="M:IDS.Security.ProviderManager.Dispose(System.Boolean)">
            <summary>
            Disposes the specified disposing.
            </summary>
            <param name="disposing">if set to <c>true</c> if disposing.</param>
        </member>
        <member name="M:IDS.Security.ProviderManager.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:IDS.Security.DeviceRegistration">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.DeviceRegistration.UserId">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.DeviceRegistration.Nickname">
            <summary>
            A nickname to use for the device (maximum length of 20 characters)
            </summary>
        </member>
        <member name="P:IDS.Security.DeviceRegistration.DeviceId">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.DeviceRegistration.RegistrationType">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.DeviceRegistration.RegistrationToken">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.DeviceRegistration.InsertDateTimeUtc">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.DeviceRegistration.LastLoginDateTimeUtc">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Security.RegisteredDeviceProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.RegisteredDeviceProvider.PortalEvents">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.RegisteredDeviceProvider.RandomTokenLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.RegisteredDeviceProvider.EventDispatcher">
            <inheritdoc />
        </member>
        <member name="M:IDS.Security.RegisteredDeviceProvider.GetDeviceRegistrationAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="deviceId"></param>
            <param name="registrationType"></param>
            <param name="registrationToken"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.RegisteredDeviceProvider.DoGetDeviceRegistrationAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="deviceId"></param>
            <param name="registrationType"></param>
            <param name="registrationToken"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.RegisteredDeviceProvider.TryRegisterDeviceAsync(IDS.Security.IUser,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Try to register the specified device for the specified registration type, and return the registration token
            If the device is already registered for that registration type, return the existing token
            </summary>
            <param name="user"></param>
            <param name="deviceId"></param>
            <param name="registrationType"></param>
            <param name="nickname"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.RegisteredDeviceProvider.DoTryRegisterDeviceAsync(IDS.Security.IUser,IDS.Security.DeviceRegistration,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="registration"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.RegisteredDeviceProvider.UpdateLastLoginDateAsync(IDS.Security.IUser,System.String,System.String,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="deviceId"></param>
            <param name="registrationType"></param>
            <param name="lastLoginDateUtc"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.RegisteredDeviceProvider.DoUpdateLastLoginDateAsync(IDS.Security.IUser,System.String,System.String,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="deviceId"></param>
            <param name="registrationType"></param>
            <param name="lastLoginDateUtc"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.RegisteredDeviceProvider.ClearDeviceRegistrationAsync(IDS.Security.IUser,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="deviceId"></param>
            <param name="registrationType"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.RegisteredDeviceProvider.ClearDeviceRegistrationAsync(System.String,System.String[],System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="registrationTypes"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.RegisteredDeviceProvider.DoClearDeviceRegistrationAsync(System.String,System.String,System.String[],System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="deviceId"></param>
            <param name="registrationTypes"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.RegisteredDeviceProvider.GetRegisteredEvents">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.RegisteredDeviceProvider.NotifyEvent(IDS.ComponentModel.Event)">
            <summary>
            
            </summary>
            <param name="eventToNotify"></param>
        </member>
        <member name="M:IDS.Security.RegisteredDeviceProvider.OnInit">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Security.RegisteredDeviceProvider.OnInitAllServices">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Security.RegisteredDeviceProvider.RegisteredDeviceEventConfig">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.RegisteredDeviceProvider.RegisteredDeviceEventConfig.EventTypeString">
            <summary>
            EventTypeString
            </summary>
        </member>
        <member name="P:IDS.Security.RegisteredDeviceProvider.RegisteredDeviceEventConfig.EventType">
            <summary>
            EventType
            </summary>
        </member>
        <member name="P:IDS.Security.RegisteredDeviceProvider.RegisteredDeviceEventConfig.ClearDeviceRegistrationTypes">
            <summary>
            A list of Device Registration Types that will be cleared if this event is handled.
            </summary>
        </member>
        <member name="M:IDS.Security.RegisteredDeviceProvider.RegisteredDeviceEventConfig.GetUserIdForEvent(IDS.ComponentModel.Event)">
            <summary>
            Infer the userID for a given event type.
            </summary>
            <param name="eventToNotify"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.RegisteredDeviceProvider.RegisteredDeviceEventConfig.DeviceRegistrationType">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.RegisteredDeviceProvider.RegisteredDeviceEventConfig.DeviceRegistrationType.Type">
            <summary>
            The device registration type
            </summary>
        </member>
        <member name="T:IDS.Security.SqlRegisteredDeviceProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.SqlRegisteredDeviceProvider.SqlConnectionService">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Security.SqlRegisteredDeviceProvider.DoGetDeviceRegistrationAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:IDS.Security.SqlRegisteredDeviceProvider.DoTryRegisterDeviceAsync(IDS.Security.IUser,IDS.Security.DeviceRegistration,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:IDS.Security.SqlRegisteredDeviceProvider.DoClearDeviceRegistrationAsync(System.String,System.String,System.String[],System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:IDS.Security.SqlRegisteredDeviceProvider.DoUpdateLastLoginDateAsync(IDS.Security.IUser,System.String,System.String,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:IDS.Security.RegularExpressionLoginDataValidationService">
            <summary>
            The RegularExpressionLoginDataValidationService implements the <see cref="T:IDS.Security.ILoginDataValidationService"/>
            using a regular expression. The default regular expression matches the legacy regular expression
            used in the initial Eureka release.
            </summary>
        </member>
        <member name="F:IDS.Security.RegularExpressionLoginDataValidationService.VALID_PASSWORD_SYMBOLS">
            <summary>
            A constant string that contains the default symbols that are allowed in a password.
            </summary>
        </member>
        <member name="F:IDS.Security.RegularExpressionLoginDataValidationService.LOGINNAME_DEFAULT_REGEX_CLIENTSIDE">
            <summary>
            A constant string that contains the default regular expression in Javascript syntax for characters allowed in a login name.
            </summary>
        </member>
        <member name="F:IDS.Security.RegularExpressionLoginDataValidationService.PASSWORD_DEFAULT_REGEX_CLIENTSIDE">
            <summary>
            A constant string that contains the default regular expression in Javascript syntax for characters allowed in a password.
            </summary>
        </member>
        <member name="F:IDS.Security.RegularExpressionLoginDataValidationService.LOGINNAME_DEFAULT_REGEX_SERVERSIDE">
            <summary>
            A constant string that contains the default regular expression in .NET server side syntax for characters allowed in a login name.
            </summary>
        </member>
        <member name="F:IDS.Security.RegularExpressionLoginDataValidationService.PASSWORD_DEFAULT_REGEX_SERVERSIDE">
            <summary>
            A constant string that contains the default regular expression in .NET server side syntax for characters allowed in a password.
            </summary>
        </member>
        <member name="M:IDS.Security.RegularExpressionLoginDataValidationService.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RegularExpressionLoginDataValidationService"/> class.
            </summary>
            <param name="loginNameServerRegularExpression">The login name regular expression to use on the server.</param>
            <param name="passwordServerRegularExpression">The password regular expression to use on the server.</param>
            <param name="loginNameClientRegularExpression">The login name regular expression to use on the client's browser. This value can be null.</param>
            <param name="passwordClientRegularExpression">The password regular expression to use on the client's browser. This value can be null.</param>
        </member>
        <member name="M:IDS.Security.RegularExpressionLoginDataValidationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RegularExpressionLoginDataValidationService"/> class.
            </summary>
        </member>
        <member name="P:IDS.Security.RegularExpressionLoginDataValidationService.LoginNameServerRegularExpression">
            <summary>
            Gets the regular expression for validating the login name. This regular expression should be
            useable in a browser and compatible with the Javascript regular expression engine.
            </summary>
            <value>
            The client side login name regular expression. This value can be null if a client side regular expression is not supported.
            </value>
        </member>
        <member name="P:IDS.Security.RegularExpressionLoginDataValidationService.PasswordServerRegularExpression">
            <summary>
            Gets the regular expression for validating the login name. This regular expression should be
            useable in a browser and compatible with the Javascript regular expression engine.
            </summary>
            <value>
            The client side password regular expression. This value can be null if a client side regular expression is not supported.
            </value>
        </member>
        <member name="M:IDS.Security.RegularExpressionLoginDataValidationService.ValidateLoginNameString(IDS.Security.IUser,System.String,IDS.Security.LoginDataValidationFailureReason@)">
            <summary>
            Validates the login name string to make sure it conforms to the site requirements.
            </summary>
            <param name="user">The user who this login name is being changed for.</param>
            <param name="loginName">The login name string to validate.</param>
            <param name="failureReason">The reason the validation failed. This is only valid if the method returns false.</param>
            <returns>
            Returns true if the login name conforms to the site login name requirements.
            </returns>
        </member>
        <member name="M:IDS.Security.RegularExpressionLoginDataValidationService.ValidatePasswordString(IDS.Security.IUser,System.String,IDS.Security.LoginDataValidationFailureReason@)">
            <summary>
            Validates the login name string to make sure it conforms to the site requirements.
            </summary>
            <param name="user">The user who this password is being changed for.</param>
            <param name="password">The password string to validate.</param>
            <param name="failureReason">The reason the validation failed. This is only valid if the method returns false.</param>
            <returns>
            Returns true if the login name conforms to the site login name requirements.
            </returns>
        </member>
        <member name="T:IDS.Security.RequiredPasswordChangeReason">
            <summary>
            The RequiredPasswordChangeReason is used to denote why the <see cref="P:IDS.Security.IUser.PasswordChangeIsRequired"/> property
            is true. The value of this field is undefined (although it should be <see cref="F:IDS.Security.RequiredPasswordChangeReason.None"/>) 
            if the <see cref="P:IDS.Security.IUser.PasswordChangeIsRequired"/> property is false.
            </summary>
        </member>
        <member name="F:IDS.Security.RequiredPasswordChangeReason.None">
            <summary>
            The value if no password change is required.
            </summary>
        </member>
        <member name="F:IDS.Security.RequiredPasswordChangeReason.ForcedChange">
            <summary>
            The password change was forced probably due to a password reset.
            </summary>
        </member>
        <member name="F:IDS.Security.RequiredPasswordChangeReason.AgePeriodExceededChange">
            <summary>
            The password change is needed because the age of the password has exceeded the allowed age.
            </summary>
        </member>
        <member name="F:IDS.Security.RequiredPasswordChangeReason.PasswordChangeOptional">
            <summary>
            The password change is optional. This flag is combined with the other values to denote the change
            and whether the change is optional.
            </summary>
        </member>
        <member name="T:IDS.Security.RestrictionAccessType">
            <summary>
            The RestrictionAccessType is an enumeration that defines whether the restriction grants or denies access.
            </summary>
        </member>
        <member name="F:IDS.Security.RestrictionAccessType.Denied">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDS.Security.RestrictionAccessType.Granted">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Security.RestrictionCollection">
            <summary>
            The RestrictionCollection class is a collection of IRestriction instances.
            </summary>
        </member>
        <member name="P:IDS.Security.RestrictionCollection.DefaultAccessType">
            <summary>
            Gets or sets the default access type. This value determines the behavior of the
            restrictions contained in this collection. If the DefaultAccessType = Granted,
            all requests will be granted unless one of the restrictions contained within this
            collection is match. If the DefaultAccessType = Denied, all requests will be denied
            unless one of the restrictions contained within this collection is a match. The default
            is Denied.
            </summary>
        </member>
        <member name="M:IDS.Security.RestrictionCollection.AccessIsValid">
            <summary>
            This method iterates through the restrictions associated with this collection
            and determines whether access is valid.
            </summary>
            <returns>Returns true is access is valid. Returns false if access is invalid.</returns>
        </member>
        <member name="T:IDS.Security.Role">
            <summary>
            This class encapsulates the concept of a Role within Portal.
            </summary>
            <remarks>
            The Name is the identifier for the Role. A role with the same name is considered the same role
            even if issues by a different provider or given a different category.
            </remarks>
        </member>
        <member name="T:IDS.Security.Role.Delimiter">
            <summary>
            The Delimiter class contains Delimters that are associated with Roles.
            </summary>
        </member>
        <member name="F:IDS.Security.Role.Delimiter.ROLE">
            <summary>
            The delimter between Roles.
            </summary>
        </member>
        <member name="F:IDS.Security.Role.Delimiter.ROLE_STATE">
            <summary>
            The delimited between Role States.
            </summary>
        </member>
        <member name="F:IDS.Security.Role.Delimiter.ROLE_CONDITION">
            <summary>
            The delimiter between Role Conditions.
            </summary>
        </member>
        <member name="F:IDS.Security.Role.Delimiter.ROLE_CATEGORY">
            <summary>
            The delimiter between Role categories.
            </summary>
        </member>
        <member name="F:IDS.Security.Role.Delimiter.ADVANCED_MODE_EXPRESSION">
            <summary>
            The delimiter for an advanced mode expression.
            </summary>
        </member>
        <member name="F:IDS.Security.Role.Delimiter.REQUIRE_ROLE_EXPRESSION">
            <summary>
            The delimiter for a required role.
            </summary>
        </member>
        <member name="F:IDS.Security.Role.Delimiter.DENY_ROLE_EXPRESSION">
            <summary>
            The delimiter for a deny role.
            </summary>
        </member>
        <member name="F:IDS.Security.Role.Delimiter.LINKED_ROLE_COLLECTION">
            <summary>
            The delimiter that is used to seperate a role and its linked roles
            </summary>
        </member>
        <member name="M:IDS.Security.Role.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Role"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.Role.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Role"/> class.
            </summary>
            <param name="name">The name of the Role.</param>
        </member>
        <member name="M:IDS.Security.Role.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Role"/> class.
            </summary>
            <param name="name">The name of the Role.</param>
            <param name="category">The category associated with this Role.</param>
        </member>
        <member name="M:IDS.Security.Role.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.Role"/> class.
            </summary>
            <param name="name">The name of the Role.</param>
            <param name="category">The category associated with this Role.</param>
            <param name="description">The description associated with this Role.</param>
        </member>
        <member name="P:IDS.Security.Role.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description associated with this Role.</value>
        </member>
        <member name="P:IDS.Security.Role.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category associated with this Role.</value>
        </member>
        <member name="P:IDS.Security.Role.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name associated with this Role.</value>
        </member>
        <member name="P:IDS.Security.Role.Deny">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:IDS.Security.Role"/> is denied.
            </summary>
            <value><c>true</c> if this role is denied; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.Security.Role.Complement">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:IDS.Security.Role"/> is complemented.
            </summary>
            <value><see langword="true" /> if this role is complemented; otherwise, <see langword="false" />.</value>
        </member>
        <member name="M:IDS.Security.Role.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:IDS.Security.Role.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms 
            and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:IDS.Security.Role.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.Role.Parse(System.String)">
            <summary>
            Parses the specified role.
            </summary>
            <param name="roleString">The role string.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.Role.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:IDS.Security.RoleCollection">
            <summary>
            Collection of roles
            </summary>
        </member>
        <member name="M:IDS.Security.RoleCollection.Parse(System.String)">
            <summary>
            Parses a string into a RoleCollection
            </summary>
            <param name="roleCategoryExpression">RoleCategoryCollection containing the name and roleprovider it belongs to
            eg: Role11_RoleCategory1,Role12_RoleCategory1,Role21_RoleCategory2,Role22_RoleCategory2
            Assuming ROLE_CATEGORY_DELIMITER = "_" and ROLE_DELIMITER = ","</param>		
        </member>
        <member name="M:IDS.Security.RoleCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RoleCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.RoleCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Security.Role})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RoleCollection"/> class.
            </summary>
            <param name="roles">The roles to add to this collection.</param>
        </member>
        <member name="M:IDS.Security.RoleCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RoleCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:IDS.Security.RoleCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Security.RoleCollection"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Security.RoleCollection"></see> object. The roles are returned delimited by a ";".
            </returns>
        </member>
        <member name="M:IDS.Security.RoleCollection.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Security.RoleCollection"></see>.
            </summary>
            <param name="delimiter">The delimiter to use to separate the roles.</param>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Security.RoleCollection"></see> object. The roles are returned delimited by a ";".
            </returns>
        </member>
        <member name="M:IDS.Security.RoleCollection.ToCategorizedString">
            <summary>
            Returns a delimited string containing the roles along with their categories
            eg: Role11_RoleCategory1,Role12_RoleCategory1,Role21_RoleCategory2,Role22_RoleCategory2
            Assuming Delimiter.ROLE_CATEGORY = "_" and Delimiter.ROLE = ","
            </summary>
        </member>
        <member name="M:IDS.Security.RoleCollection.GetRolesByCategory(System.String)">
            <summary>
            Gets the roles for a particular category.
            </summary>
            <param name="category">The category to get the roles for.</param>
            <returns>Returns a collection of Roles that match the particular category or an empty collection if none are found.</returns>
        </member>
        <member name="M:IDS.Security.RoleCollection.GetRolesWithNoCategory">
            <summary>
            Get all roles with no category set i.e category equals null
            </summary>
        </member>
        <member name="M:IDS.Security.RoleCollection.GetRoleCategories">
            <summary>
            Returns an array list containing all the role categories.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.RoleCollection.Distinct">
            <summary>
            Distincts this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.RoleCollection.Sort(IDS.Collections.SortOrder)">
            <summary>
            Sorts the specified sort order.
            </summary>
            <param name="sortOrder">The sort order.</param>
        </member>
        <member name="M:IDS.Security.RoleCollection.GetRoleByName(System.String)">
            <summary>
            Gets the role by name if exists in the collection. Returns null if not.
            </summary>
            <param name="roleName">Name of the role.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.RoleCollection.HasRole(IDS.Security.Role)">
            <summary>
            Determines whether the specified role is in the role collection.
            </summary>
            <param name="role">The role.</param>
            <returns>
            	<c>true</c> if the specified role has role; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.Security.RoleCollection.HasRole(System.String)">
            <summary>
            Determines whether the specified role is in the role collection.
            </summary>
            <param name="roleName">Name of the role.</param>
            <returns>
            	<c>true</c> if the specified role name has role; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.Security.RoleCollection.Merge(IDS.Security.RoleCollection)">
            <summary>
            Merges the specified role collection.
            </summary>
            <param name="roleCollection">The role collection.</param>
        </member>
        <member name="P:IDS.Security.RoleCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:IDS.Security.Role"/> at the specified index.
            </summary>
            <value>
            Returns the <see cref="T:IDS.Security.Role"/> at the specified index or null if not found.
            </value>
        </member>
        <member name="T:IDS.Security.RoleCollectionMapper">
            <summary>
            Class representing a base component collection which maps a key to a collection of roles 
            </summary>
        </member>
        <member name="P:IDS.Security.RoleCollectionMapper.List">
            <summary>
            Gets the list.
            </summary>
            <value>The list.</value>
        </member>
        <member name="P:IDS.Security.RoleCollectionMapper.Item(System.String)">
            <summary>
            Gets the first role collection mapping found based on a key. Returns null if none found.
            </summary>
            <value></value>
        </member>
        <member name="T:IDS.Security.RoleCollectionMapping">
            <summary>
            A class that represents a mapping between a key and a role collection
            </summary>
        </member>
        <member name="P:IDS.Security.RoleCollectionMapping.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:IDS.Security.RoleCollectionMapping.RoleString">
            <summary>
            Gets or sets the roles.
            </summary>
            <value>The roles.</value>
        </member>
        <member name="P:IDS.Security.RoleCollectionMapping.Roles">
            <summary>
            Gets or sets the roles.
            </summary>
            <value>The roles.</value>
        </member>
        <member name="T:IDS.Security.RoleCondition">
            <summary>
            RoleCondition is a collection of RoleStates; which when joined together form a condition.
            eg : (A, B, ~C).
            </summary>
        </member>
        <member name="M:IDS.Security.RoleCondition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RoleCondition"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.RoleCondition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RoleCondition"/> class.
            </summary>
            <param name="strCondition">The STR condition.</param>
        </member>
        <member name="M:IDS.Security.RoleCondition.Add(IDS.Security.RoleState)">
            <summary>
            Adds the specified role state.
            </summary>
            <param name="roleState">State of the role.</param>
        </member>
        <member name="M:IDS.Security.RoleCondition.Remove(IDS.Security.RoleState)">
            <summary>
            Removes the specified role state.
            </summary>
            <param name="roleState">State of the role.</param>
        </member>
        <member name="P:IDS.Security.RoleCondition.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:IDS.Security.RoleState"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:IDS.Security.RoleCondition.GetRoleStateIndexByName(System.String)">
            <summary>
            Gets the name of the role state index by.
            </summary>
            <param name="roleName">Name of the role.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.RoleCondition.HasRoleState(System.String)">
            <summary>
            Determines whether [has role state] [the specified role name].
            </summary>
            <param name="roleName">Name of the role.</param>
            <returns>
            	<c>true</c> if [has role state] [the specified role name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.Security.RoleCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Security.RoleCondition"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Security.RoleCondition"></see>.
            </returns>
        </member>
        <member name="M:IDS.Security.RoleCondition.Evaluate(IDS.Security.RoleCollection)">
            <summary>
            Evaluates the specified role collection.
            </summary>
            <param name="roleCollection">The role collection.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.RoleExpression">
            <summary>
            RoleExpression is a collection of RoleConditions; which when joined together form an expression.
            eg : (A, B, ~C) | (B, ~C, D)
            </summary>
        </member>
        <member name="M:IDS.Security.RoleExpression.Factory(System.String)">
            <summary>
            This is a factory method for creating the appropriate RoleExpression subclass based on the expression.
            </summary>
            <param name="roleExpressionString">The role expression string.</param>
            <returns>
            Returns the appropriate RoleExpression class based on the expression.
            </returns>
            <see cref="T:IDS.Security.AdvancedRoleExpression"/>
            <see cref="T:IDS.Security.SimpleRoleExpression"/>
        </member>
        <member name="M:IDS.Security.RoleExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RoleExpression"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.RoleExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RoleExpression"/> class.
            </summary>
            <param name="strExpression">The STR expression.</param>
        </member>
        <member name="M:IDS.Security.RoleExpression.Add(IDS.Security.RoleCondition)">
            <summary>
            Adds the specified role condition.
            </summary>
            <param name="roleCondition">The role condition.</param>
        </member>
        <member name="M:IDS.Security.RoleExpression.Remove(IDS.Security.RoleCondition)">
            <summary>
            Removes the specified role condition.
            </summary>
            <param name="roleCondition">The role condition.</param>
        </member>
        <member name="P:IDS.Security.RoleExpression.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:IDS.Security.RoleCondition"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:IDS.Security.RoleExpression.GetRoleConditionIndexByName(System.String)">
            <summary>
            Gets the name of the role condition index by.
            </summary>
            <param name="roleCondition">The role condition.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.RoleExpression.HasRoleCondition(System.String)">
            <summary>
            Determines whether [has role condition] [the specified role condition].
            </summary>
            <param name="roleCondition">The role condition.</param>
            <returns>
            	<c>true</c> if [has role condition] [the specified role condition]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.Security.RoleExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Security.RoleExpression"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Security.RoleExpression"></see>.
            </returns>
        </member>
        <member name="M:IDS.Security.RoleExpression.Evaluate(IDS.Security.RoleCollection)">
            <summary>
            Evaluates the specified role collection.
            </summary>
            <param name="roleCollection">The role collection.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.RoleManager">
            <summary>
            The RoleManager class is responsible for assigning roles to the current user.
            </summary>
            <remarks>
            This class is responsible for querying each of the role providers to return an aggregated list of roles. 
            This class also supports the concept of dynamic roles.
            </remarks>
        </member>
        <member name="M:IDS.Security.RoleManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RoleManager"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.RoleManager.#ctor(IDS.Security.RoleProviderCollection)">
            <summary>
            Creates an instance of the RoleManager class that is responsible for managing all of the role providers.
            </summary>
            <param name="providers">The collection of active role providers.</param>
        </member>
        <member name="P:IDS.Security.RoleManager.Providers">
            <summary>
            Gets a collection of the role providers.
            </summary>
            <value>The collection of role providers.</value>
        </member>
        <member name="P:IDS.Security.RoleManager.CompositeProviders">
            <summary>
            Gets a collection of the role providers.
            </summary>
            <value>The collection of role providers.</value>
        </member>
        <member name="M:IDS.Security.RoleManager.GetRolesForUser(IDS.Security.IUser)">
            <summary>
            The GetRoles method gets all of the active roles assigned to the specified IPortalUser.
            </summary>
            <param name="user">The user to get roles for.</param>
            <returns>
            Returns a RoleCollection containing roles for the specific user.
            </returns>
            <remarks>
            This method will return all of the roles assigned by the roles providers.
            </remarks>
        </member>
        <member name="M:IDS.Security.RoleManager.GetAllRoles">
            <summary>
            Returns a list of all of the possible roles in the system.
            </summary>
            <returns>Returns an array list of roles. It might return an empty array list but it will never
            return null.</returns>
        </member>
        <member name="M:IDS.Security.RoleManager.Dispose">
            <summary>
            Disposes the specified disposing.
            </summary>
        </member>
        <member name="T:IDS.Security.RoleProviderCollection">
            <summary>
            The RoleProviderCollection class contains a collection of IRoleProvider instances.
            </summary>
        </member>
        <member name="M:IDS.Security.RoleProviderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RoleProviderCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.RoleProviderCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Security.IRoleProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RoleProviderCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Security.RoleProviderCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RoleProviderCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="T:IDS.Security.RoleState">
            <summary>
            RoleState defines the state of a role allow or deny or none.
            eg : "A" - allow or "~A" - deny or "" - none.
            </summary>
        </member>
        <member name="M:IDS.Security.RoleState.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RoleState"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:IDS.Security.RoleState.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.RoleState"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="deny">if set to <c>true</c> [deny].</param>
            <param name="allow">if set to <c>true</c> [allow].</param>
        </member>
        <member name="M:IDS.Security.RoleState.Evaluate(IDS.Security.RoleCollection)">
            <summary>
            Evaluates the specified role collection.
            </summary>
            <param name="roleCollection">The role collection.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.SensitiveDataConfiguration">
            <summary>
            Defines a method that verifies whether a set of sensitive data in a data repository is currently protected
            using a specified protection format.
            </summary>
        </member>
        <member name="M:IDS.Security.SensitiveDataConfiguration.#ctor(IDS.Security.SensitiveDataFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.SensitiveDataConfiguration" /> class.
            </summary>
            <param name="format">
            A <see cref="T:IDS.Security.SensitiveDataFormat" /> that identifies the format of the data.
            </param>
        </member>
        <member name="P:IDS.Security.SensitiveDataConfiguration.SensitiveDataFormat">
            <summary>
            Gets a <see cref="T:IDS.Security.SensitiveDataFormat" /> that identifies the format of the data.
            </summary>
        </member>
        <member name="M:IDS.Security.SensitiveDataConfiguration.VerifyConfiguration(System.String)">
            <summary>
            Verifies that the data in the data repository is currently protected using a specified protection format.
            </summary>
            <param name="configuredProtectionFormatId">
            A provider-specific string that identifies the format in which the data is configured to be protected.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The data is not currently protected using the <paramref name="configuredProtectionFormatId" />.
            </exception>
        </member>
        <member name="T:IDS.Security.SensitiveDataFormat">
            <summary>
            Specifies the format of a sensitive data element.
            </summary>
        </member>
        <member name="F:IDS.Security.SensitiveDataFormat.Blob">
            <summary>
            A string containing semi-structured or unstructured data.
            </summary>
        </member>
        <member name="F:IDS.Security.SensitiveDataFormat.DriverLicense">
            <summary>
            A driver license number.
            </summary>
        </member>
        <member name="F:IDS.Security.SensitiveDataFormat.SocialSecurityNumber">
            <summary>
            A U.S. Social Security Number consisting of 9 digits.
            </summary>
        </member>
        <member name="F:IDS.Security.SensitiveDataFormat.TaxID">
            <summary>
            A U.S. federal tax identification number (such as an EIN or SSN) consisting of 9 digits.
            </summary>
        </member>
        <member name="M:IDS.Security.SensitiveDataFormat.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.SensitiveDataFormat" /> class.
            </summary>
        </member>
        <member name="M:IDS.Security.SensitiveDataFormat.ToString">
            <inheritdoc />
        </member>
        <member name="T:IDS.Security.SensitiveDataProtector">
            <summary>
            Serves as the base class for services that protect sensitive data (e.g., via encryption or tokenization).
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Security.SensitiveDataProtector.VerifyConfigurations(IDS.Security.SensitiveDataConfiguration[])">
            <summary>
            Verifies whether a set of sensitive data in a data repository is currently protected
            using the protection formats configured in the <see cref="T:IDS.Security.SensitiveDataProtector" />.
            </summary>
            <param name="configurations">
            An array of <see cref="T:IDS.Security.SensitiveDataConfiguration" /> objects.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The data is not currently protected using the configured protection formats.
            </exception>
        </member>
        <member name="M:IDS.Security.SensitiveDataProtector.IsProtectedFormat(IDS.Security.SensitiveDataFormat)">
            <summary>
            Gets a Boolean value that indicates whether the service protects a specified format
            of sensitive data element.
            </summary>
            <param name="format">
            A <see cref="T:IDS.Security.SensitiveDataFormat" />.
            </param>
            <returns>
            <see langword="true" /> if the service protects the specified <paramref name="format" />;
            <see langword="false" /> if the service does not protect the specified <paramref name="format" />
            (in which case the <see cref="M:IDS.Security.SensitiveDataProtector.Protect(System.String,IDS.Security.SensitiveDataFormat)" /> method returns the input value unchanged).
            </returns>
        </member>
        <member name="M:IDS.Security.SensitiveDataProtector.Protect(System.String,IDS.Security.SensitiveDataFormat)">
            <summary>
            Protects a specified plaintext string.
            </summary>
            <param name="value">
            The plaintext string to protect.
            </param>
            <param name="format">
            The format of the <paramref name="value" />.
            </param>
            <returns>
            A string that contains the protected data.
            </returns>
        </member>
        <member name="M:IDS.Security.SensitiveDataProtector.Unprotect(System.String,IDS.Security.SensitiveDataFormat)">
            <summary>
            Unprotects a specified string that contains protected data.
            </summary>
            <param name="value">
            The string that was returned by the <see cref="M:IDS.Security.SensitiveDataProtector.Protect(System.String,IDS.Security.SensitiveDataFormat)" /> method.
            </param>
            <param name="format">
            The format that was passed to the <see cref="M:IDS.Security.SensitiveDataProtector.Protect(System.String,IDS.Security.SensitiveDataFormat)" /> method.
            </param>
            <returns>
            The plaintext string that was passed to the <see cref="M:IDS.Security.SensitiveDataProtector.Protect(System.String,IDS.Security.SensitiveDataFormat)" /> method.
            </returns>
        </member>
        <member name="T:IDS.Security.NullSensitiveDataProtector">
            <summary>
            Implements a <see cref="T:IDS.Security.SensitiveDataProtector" /> that does not protect any data.
            </summary>
        </member>
        <member name="M:IDS.Security.NullSensitiveDataProtector.VerifyConfigurations(IDS.Security.SensitiveDataConfiguration[])">
            <inheritdoc />
        </member>
        <member name="M:IDS.Security.NullSensitiveDataProtector.IsProtectedFormat(IDS.Security.SensitiveDataFormat)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Security.NullSensitiveDataProtector.Protect(System.String,IDS.Security.SensitiveDataFormat)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Security.NullSensitiveDataProtector.Unprotect(System.String,IDS.Security.SensitiveDataFormat)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Security.ThrowingSensitiveDataProtector">
            <summary>
            Implements a <see cref="T:IDS.Security.SensitiveDataProtector" /> that blocks calls to <see cref="M:IDS.Security.ThrowingSensitiveDataProtector.Protect(System.String,IDS.Security.SensitiveDataFormat)" /> and
            <see cref="M:IDS.Security.ThrowingSensitiveDataProtector.Unprotect(System.String,IDS.Security.SensitiveDataFormat)" /> by throwing a specified exception instead.
            </summary>
        </member>
        <member name="M:IDS.Security.ThrowingSensitiveDataProtector.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.ThrowingSensitiveDataProtector" /> class.
            </summary>
            <param name="exception">
            The <see cref="T:System.Exception" /> to throw in <see cref="M:IDS.Security.ThrowingSensitiveDataProtector.Protect(System.String,IDS.Security.SensitiveDataFormat)" /> and <see cref="M:IDS.Security.ThrowingSensitiveDataProtector.Unprotect(System.String,IDS.Security.SensitiveDataFormat)" />.
            </param>
        </member>
        <member name="M:IDS.Security.ThrowingSensitiveDataProtector.VerifyConfigurations(IDS.Security.SensitiveDataConfiguration[])">
            <inheritdoc />
        </member>
        <member name="M:IDS.Security.ThrowingSensitiveDataProtector.IsProtectedFormat(IDS.Security.SensitiveDataFormat)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Security.ThrowingSensitiveDataProtector.Protect(System.String,IDS.Security.SensitiveDataFormat)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Security.ThrowingSensitiveDataProtector.Unprotect(System.String,IDS.Security.SensitiveDataFormat)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Security.SimpleRoleExpression">
            <summary>
            The SimpleRoleExpression represents a simple role expression that only allows include and exclude roles.
            </summary>
        </member>
        <member name="M:IDS.Security.SimpleRoleExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.SimpleRoleExpression"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.SimpleRoleExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.SimpleRoleExpression"/> class.
            </summary>
            <param name="strExpression">The STR expression.</param>
        </member>
        <member name="M:IDS.Security.SimpleRoleExpression.ToAdvancedExpression">
            <summary>
            Converts the simple role expression to an advanced expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SimpleRoleExpression.Evaluate(IDS.Security.RoleCollection)">
            <summary>
            Evaluates the specified role collection.
            </summary>
            <param name="roleCollection">The role collection.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.SqlIPDomainManager">
            <summary>
            Provides an implementation of the <see cref="T:IDS.Security.IPDomainManager" /> class
            for SQL Server.
            </summary>
        </member>
        <member name="P:IDS.Security.SqlIPDomainManager.RoleProvider">
            <summary>
            Gets or sets the configured <see cref="T:IDS.Security.SqlRoleProvider" />.
            </summary>
        </member>
        <member name="M:IDS.Security.SqlIPDomainManager.AddIPDomain(IDS.Security.IPDomain)">
            <summary>
            Adds a specified IP domain.
            </summary>
            <param name="domain">
            The <see cref="T:IDS.Security.IPDomain" /> to add.
            </param>
        </member>
        <member name="M:IDS.Security.SqlIPDomainManager.DeleteIPDomain(System.String)">
            <summary>
            Deletes a specified IP domain.
            </summary>
            <param name="id">
            The <see cref="P:IDS.Security.IPDomain.Id" /> of the <see cref="T:IDS.Security.IPDomain" />
            to delete.
            </param>
        </member>
        <member name="M:IDS.Security.SqlIPDomainManager.GetAllIPDomains(System.Boolean)">
            <summary>
            Gets the name and description of every IP domain,
            and optionally retrieves their IP addresses and roles.
            </summary>
            <param name="includeDetails">
            <see langword="true" /> to retrieve the IP addresses and roles
            for each domain; <see langword="false" /> if this information is not needed.
            </param>
            <returns>
            An <see cref="T:IDS.Security.IPDomain" /> collection.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlIPDomainManager.GetAllRoles">
            <summary>
            Gets all roles that can be associated with IP domains.
            </summary>
            <returns>
            A <see cref="T:IDS.Security.RoleCollection" /> that contains all roles that can be
            associated with IP domains.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlIPDomainManager.GetIPDomain(System.String)">
            <summary>
            Gets the IP domain with a specified ID.
            </summary>
            <param name="id">
            The <see cref="P:IDS.Security.IPDomain.Id" /> of the <see cref="T:IDS.Security.IPDomain" />
            to retrieve.
            </param>
            <returns>
            The <see cref="T:IDS.Security.IPDomain" />
            with the specified <paramref name="id" />.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlIPDomainManager.UpdateIPDomain(IDS.Security.IPDomain)">
            <summary>
            Updates a specified IP domain.
            </summary>
            <param name="domain">
            The <see cref="T:IDS.Security.IPDomain" /> to update.
            </param>
        </member>
        <member name="M:IDS.Security.SqlIPDomainManager.GetRoleProvider">
            <summary>
            Returns the <see cref="P:IDS.Security.SqlIPDomainManager.RoleProvider" /> after validating that
            it is not <see langword="null" />.
            </summary>
            <returns>
            The <see cref="P:IDS.Security.SqlIPDomainManager.RoleProvider" />.
            </returns>
        </member>
        <member name="T:IDS.Security.SqlMaintainableRoleProvider">
            <summary>
            An <see cref="T:IDS.Security.IMaintainableRoleProvider"/> implementation that uses SQL Server as the datastore.
            </summary>
        </member>
        <member name="P:IDS.Security.SqlMaintainableRoleProvider.ConnectionService">
            <summary>
            Gets or sets the configured <see cref="T:IDS.Data.SqlConnectionService" />.
            </summary>
        </member>
        <member name="P:IDS.Security.SqlMaintainableRoleProvider.ProviderKeyTokenString">
            <summary>
            Gets or sets a string that distinguished the roles managed by this provider
            from other providers.
            </summary>
        </member>
        <member name="P:IDS.Security.SqlMaintainableRoleProvider.RoleCategory">
            <summary>
            Gets or sets a string that distinguished the roles managed by this provider
            from other providers.
            </summary>
        </member>
        <member name="P:IDS.Security.SqlMaintainableRoleProvider.EnableDomains">
            <summary>
            Gets or sets a Boolean value that indicates whether roles are restricted by IP address.
            </summary>
            <remarks>
            <see langword="true" /> to assign roles to users based on domains;
            <see langword="false" /> to assign roles to users without regard to domains.
            The default is <see langword="false" />.
            </remarks>
        </member>
        <member name="P:IDS.Security.SqlMaintainableRoleProvider.RolesThatCanViewHiddenRoles">
            <summary>
            Gets or sets the roles that can view "hidden" roles.
            </summary>
        </member>
        <member name="M:IDS.Security.SqlMaintainableRoleProvider.DoCreateRole(System.String,IDS.ComponentModel.Dataspace)">
            <summary>
            Creates the role.
            </summary>
            <param name="roleName">Name of the role.</param>
            <param name="dataspace">The dataspace.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlMaintainableRoleProvider.DoDeleteRole(IDS.Security.Role,IDS.ComponentModel.Dataspace)">
            <summary>
            Deletes the role.
            </summary>
            <param name="roleToDelete">The role to delete.</param>
            <param name="dataspace">The dataspace.</param>
        </member>
        <member name="M:IDS.Security.SqlMaintainableRoleProvider.DoClearRoleUsers(IDS.Security.Role,IDS.ComponentModel.Dataspace)">
            <summary>
            Clears the list of users assigned to the specified role.
            </summary>
            <param name="role">The role whose user list is to be cleared.</param>
            <param name="dataspace">The dataspace.</param>
        </member>
        <member name="M:IDS.Security.SqlMaintainableRoleProvider.DoGetRoleInfo(IDS.ComponentModel.Dataspace)">
            <summary>
            Gets a collection of MaintainableRoles that are provided by this <see cref="T:IDS.Security.IRoleProvider"/>.
            </summary>
            <param name="dataspace">The dataspace for which roles should be returned.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlMaintainableRoleProvider.DoGetRolesForUser(IDS.Security.IUser)">
            <summary>
            Returns a RoleCollection with all the roles associated with the user provided.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlMaintainableRoleProvider.PersistRoleUsers(IDS.Security.Role,System.Collections.Generic.List{System.String},IDS.ComponentModel.Dataspace)">
            <summary>
            Persists the role users to the datastore.
            </summary>
            <param name="role">The role.</param>
            <param name="users">The users.</param>
            <param name="dataspace">The dataspace.</param>
        </member>
        <member name="T:IDS.Security.SqlRoleProvider">
            <summary>
            Provides an implementation of the <see cref="T:IDS.Security.IPersistentRoleProvider" />
            and <see cref="T:IDS.Security.ILinkedRoleProvider" /> interfaces for SQL Server.
            </summary>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.SqlRoleProvider" /> class.
            </summary>
        </member>
        <member name="P:IDS.Security.SqlRoleProvider.ConnectionService">
            <summary>
            Gets or sets the configured <see cref="T:IDS.Data.SqlConnectionService" />.
            </summary>
        </member>
        <member name="P:IDS.Security.SqlRoleProvider.ProviderKeyTokenString">
            <summary>
            Gets or sets a string that distinguished the roles managed by this provider
            from other providers.
            </summary>
        </member>
        <member name="P:IDS.Security.SqlRoleProvider.EnableDomains">
            <summary>
            Gets or sets a Boolean value that indicates whether roles are restricted by IP address.
            </summary>
            <remarks>
            <see langword="true" /> to assign roles to users based on domains;
            <see langword="false" /> to assign roles to users without regard to domains.
            The default is <see langword="false" />.
            </remarks>
        </member>
        <member name="P:IDS.Security.SqlRoleProvider.RolesThatCanViewHiddenRoles">
            <summary>
            Gets or sets the roles that can view "hidden" roles.
            </summary>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.Dispose">
            <summary>
            Releases all resources used by the service.
            </summary>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.GetAllRoles">
            <summary>
            Gets all roles defined by the provider.
            </summary>
            <returns>
            A <see cref="T:IDS.Security.RoleCollection" /> that contains all roles defined by
            the provider.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.GetRolesForUser(IDS.Security.IUser)">
            <summary>
            Gets all roles associated with a specified user.
            </summary>
            <param name="user">
            An <see cref="T:IDS.Security.IUser" />.
            </param>
            <returns>
            A <see cref="T:IDS.Security.RoleCollection" /> that contains the roles associated with
            the <paramref name="user" />.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.AddPersistentRole(IDS.Security.Role)">
            <summary>
            Adds a specified persistent role.
            </summary>
            <param name="role">
            The <see cref="T:IDS.Security.Role" /> to add.
            </param>
            <exception cref="T:System.ArgumentException">
            The name of the <paramref name="role" /> conflicts with an existing role.
            </exception>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.AddPersistentUserRole(IDS.Security.IUser,IDS.Security.Role)">
            <summary>
            Associates a specified persistent role with a specified user.
            </summary>
            <param name="user">
            An <see cref="T:IDS.Security.IUser" />.
            </param>
            <param name="role">
            The <see cref="T:IDS.Security.Role" /> to associate with the <paramref name="user" />.
            </param>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.AddPersistentUserRole(System.String,IDS.Security.Role)">
            <summary>
            adds a role by user Id
            </summary>
            <param name="userID"></param>
            <param name="role"></param>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.CanViewHiddenRoles(IDS.Security.IUser)">
            <summary>
            Determines whether a specified user can view hidden roles.
            </summary>
            <param name="user">
            An <see cref="T:IDS.Security.IUser" />.
            </param>
            <returns>
            <see langword="true" /> if the <paramref name="user" /> can view hidden roles;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.DeletePersistentRole(IDS.Security.Role)">
            <summary>
            Deletes a specified persistent role.
            </summary>
            <param name="role">
            The <see cref="T:IDS.Security.Role" /> to delete.
            </param>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.DeletePersistentUserRole(IDS.Security.IUser,IDS.Security.Role)">
            <summary>
            Disassociates a specified persistent role from a specified user.
            </summary>
            <param name="user">
            An <see cref="T:IDS.Security.IUser" />.
            </param>
            <param name="role">
            The <see cref="T:IDS.Security.Role" /> to disassociate from the <paramref name="user" />.
            </param>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.DeleteAllPersistentUserRoles(IDS.Security.Role)">
            <summary>
            Disassociates a specified persistent role for all users.
            </summary>
            <param name="role">
            </param>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.GetUserCountForRoles">
            <summary>
            Gets the count of users for each persistent role.
            </summary>
            <returns>
            A list of maintainable roles that have user counts.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.GetPersistentRolesForAllUsers">
            <summary>
            Gets the collection of persistent roles associated with all users.
            </summary>
            <returns>
            A dictionary that maps user IDs to role collections.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.GetPersistentRolesForUser(IDS.Security.IUser)">
            <summary>
            Gets the collection of persistent roles associated with a specified user.
            </summary>
            <param name="user">
            An <see cref="T:IDS.Security.IUser" />.
            </param>
            <returns>
            A <see cref="T:IDS.Security.RoleCollection" /> that contains the roles associated with
            the <paramref name="user" />,
            </returns>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.GetUsersByRole(IDS.Security.Role)">
            <summary>
            Gets the list of users who are associated with a specified role.
            </summary>
            <param name="role">
            A persistent role.
            </param>
            <returns>
            A list containing the <see cref="P:IDS.Security.IUser.UserID" /> of each user
            who is associated with the specified <paramref name="role" />.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.IsPersistentUserRole(IDS.Security.IUser,IDS.Security.Role)">
            <summary>
            Determines whether a persistent role is associated with a particular user.
            </summary>
            <param name="user">
            An <see cref="T:IDS.Security.IUser" />.
            </param>
            <param name="role">
            A <see cref="T:IDS.Security.Role" />.
            </param>
            <returns>
            <see langword="true" /> if the <paramref name="role" /> is associated
            with the <paramref name="user" />.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.SetPersistentUserRoles(IDS.Security.IUser,IDS.Security.RoleCollection)">
            <summary>
            Associates a specified set of persistent roles with a specified user,
            and disassociates all other existing roles.
            </summary>
            <param name="user">
            An <see cref="T:IDS.Security.IUser" />.
            </param>
            <param name="roles">
            A <see cref="T:IDS.Security.RoleCollection" /> that contains the roles to associate with
            the <paramref name="user" />.
            </param>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.UpdatePersistentRole(IDS.Security.Role,IDS.Security.Role)">
            <summary>
            Updates a specified persistent role.
            </summary>
            <param name="oldRole">
            The original <see cref="T:IDS.Security.Role" />.
            </param>
            <param name="newRole">
            The updated <see cref="T:IDS.Security.Role" />.
            </param>
            <exception cref="T:System.ArgumentException">
            The name of the <paramref name="newRole" /> conflicts with an existing role.
            </exception>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.GetAllLinkedRoles">
            <summary>
            Gets all linked roles defined by the provider.
            </summary>
            <returns>
            A <see cref="T:IDS.Security.LinkedRoleCollection" /> that contains all linked roles
            defined by the provider.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.GetLinkedRoles(IDS.Security.Role)">
            <summary>
            Gets the collection of roles that are linked to a specified role.
            </summary>
            <param name="role">
            A <see cref="T:IDS.Security.Role" />.
            </param>
            <returns>
            A <see cref="T:IDS.Security.RoleCollection" /> that contains the roles linked to
            the <paramref name="role" />.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.SetLinkedRoles(IDS.Security.LinkedRole)">
            <summary>
            Links a collection of roles to a specified role.
            </summary>
            <param name="linkedRole">
            A <see cref="T:IDS.Security.LinkedRole" />.
            </param>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.AddIPDomain(IDS.Security.IPDomain)">
            <summary>
            Adds a specified IP domain.
            </summary>
            <param name="domain">
            The <see cref="T:IDS.Security.IPDomain" /> to add.
            </param>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.DeleteIPDomain(System.String)">
            <summary>
            Deletes a specified IP domain.
            </summary>
            <param name="id">
            The <see cref="P:IDS.Security.IPDomain.Id" /> of the <see cref="T:IDS.Security.IPDomain" />
            to delete.
            </param>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.GetAllIPDomains(System.Boolean)">
            <summary>
            Gets the name and description of every IP domain,
            and optionally retrieves their IP addresses and roles.
            </summary>
            <param name="includeDetails">
            <see langword="true" /> to retrieve the IP addresses and roles
            for each domain; <see langword="false" /> if this information is not needed.
            </param>
            <returns>
            An <see cref="T:IDS.Security.IPDomain" /> collection.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.GetIPDomain(System.String)">
            <summary>
            Gets the IP domain with a specified ID.
            </summary>
            <param name="id">
            The <see cref="P:IDS.Security.IPDomain.Id" /> of the <see cref="T:IDS.Security.IPDomain" />
            to retrieve.
            </param>
            <returns>
            The <see cref="T:IDS.Security.IPDomain" />
            with the specified <paramref name="id" />.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.UpdateIPDomain(IDS.Security.IPDomain)">
            <summary>
            Updates a specified IP domain.
            </summary>
            <param name="domain">
            The <see cref="T:IDS.Security.IPDomain" /> to update.
            </param>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the service
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:IDS.Security.SqlRoleProvider.GetConnectionService">
            <summary>
            Returns the <see cref="P:IDS.Security.SqlRoleProvider.ConnectionService" /> after validating that
            it is not <see langword="null" />.
            </summary>
            <returns>
            The <see cref="P:IDS.Security.SqlRoleProvider.ConnectionService" />.
            </returns>
        </member>
        <member name="T:IDS.Security.SqlSensitiveDataConfiguration">
            <summary>
            Provides an implementation of the <see cref="T:IDS.Security.SensitiveDataConfiguration" /> class that verifies the protection format
            of the data stored in all or a subset of rows in a single column of a specified SQL Server table.
            </summary>
        </member>
        <member name="M:IDS.Security.SqlSensitiveDataConfiguration.#ctor(IDS.Data.SqlConnectionService,System.String,System.String,IDS.Security.SensitiveDataFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.SqlSensitiveDataConfiguration" /> class.
            </summary>
            <param name="connectionService">
            A <see cref="T:IDS.Data.SqlConnectionService" /> that references the SQL Server database containing the specified table.
            </param>
            <param name="tableName">
            The name of the SQL Server table that contains sensitive data.
            </param>
            <param name="columnName">
            The name of the column that contains sensitive data.
            </param>
            <param name="format">
            A <see cref="T:IDS.Security.SensitiveDataFormat" /> that identifies the format of the sensitive data.
            </param>
        </member>
        <member name="M:IDS.Security.SqlSensitiveDataConfiguration.#ctor(IDS.Data.SqlConnectionService,System.String,System.String,System.String,IDS.Security.SensitiveDataFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.SqlSensitiveDataConfiguration" /> class with a specified row filter.
            </summary>
            <param name="connectionService">
            A <see cref="T:IDS.Data.SqlConnectionService" /> that references the SQL Server database containing the specified table.
            </param>
            <param name="tableName">
            The name of the SQL Server table that contains sensitive data.
            </param>
            <param name="columnName">
            The name of the column that contains sensitive data.
            </param>
            <param name="rowFilter">
            A SQL expression that returns the subset of rows to verify, or an empty string to verify all rows.
            </param>
            <param name="format">
            A <see cref="T:IDS.Security.SensitiveDataFormat" /> that identifies the format of the sensitive data.
            </param>
        </member>
        <member name="M:IDS.Security.SqlSensitiveDataConfiguration.#ctor(IDS.Data.SqlConnectionService,System.String,System.String,System.String,System.String,IDS.Security.SensitiveDataFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.SqlSensitiveDataConfiguration" /> class with a specified row filter.
            </summary>
            <param name="connectionService">
            A <see cref="T:IDS.Data.SqlConnectionService" /> that references the SQL Server database containing the specified table.
            </param>
            <param name="tableName">
            The name of the SQL Server table that contains sensitive data.
            </param>
            <param name="columnName">
            The name of the column that contains sensitive data.
            </param>
            <param name="rowFilter">
            A SQL expression that returns the subset of rows to verify, or an empty string to verify all rows.
            </param>
            <param name="xPathExpression">
            An XPath expression that returns the subset of XML to verify, or an empty string if the column does not contain XML.
            </param>
            <param name="format">
            A <see cref="T:IDS.Security.SensitiveDataFormat" /> that identifies the format of the sensitive data.
            </param>
        </member>
        <member name="M:IDS.Security.SqlSensitiveDataConfiguration.VerifyConfiguration(System.String)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Security.SqlTrustedClientProvider">
            <summary>
            SQL implementation of Trusted Client Provider.
            </summary>
        </member>
        <member name="P:IDS.Security.SqlTrustedClientProvider.ConnectionService">
            <summary>
            SQL Access to validity of OFX client info and extract nickname
            </summary>
        </member>
        <member name="M:IDS.Security.SqlTrustedClientProvider.IsAuthorized(IDS.Security.TrustedClientAuthorizationInfo)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Security.SqlTrustedClientProvider.GetTrustedClients(System.String)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Security.SqlTrustedClientProvider.Authorize(System.String)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Security.SqlTrustedClientProvider.Delete(System.String)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Security.SqlUserProvider">
            <summary>
            Class representing a sql based users provider
            </summary>
        </member>
        <member name="P:IDS.Security.SqlUserProvider.TaxIDKey">
            <summary>
            Gets or sets the tax ID key.
            </summary>
            <value>The tax ID key.</value>
        </member>
        <member name="P:IDS.Security.SqlUserProvider.DLKey">
            <summary>
            Gets or sets the DL key.
            </summary>
            <value>The DL key.</value>
        </member>
        <member name="P:IDS.Security.SqlUserProvider.ConnectionService">
            <summary>
            Gets or sets the connection service.
            </summary>
            <value>The connection service.</value>
        </member>
        <member name="P:IDS.Security.SqlUserProvider.SensitiveDataProtector">
            <summary>
            Gets or sets the configured <see cref="T:IDS.Security.SensitiveDataProtector" />.
            </summary>
        </member>
        <member name="P:IDS.Security.SqlUserProvider.AppName">
            <summary>
            Gets or sets the name of the app.
            </summary>
            <value>The name of the app.</value>
        </member>
        <member name="P:IDS.Security.SqlUserProvider.ChangeLoginNameFrequency">
            <summary>
            Gets or sets how many times a user is allowed to change their login name. A value of zero 
            means the login name can be changed an unlimited number of times.
            </summary>
            <value>How many times a user id allowed to change their login name.</value>
        </member>
        <member name="P:IDS.Security.SqlUserProvider.ForcePasswordChangeInterval">
            <summary>
            Gets or sets the force password change interval. A value of zero means the password will never expire.
            </summary>
            <value>The force password change interval.</value>
        </member>
        <member name="P:IDS.Security.SqlUserProvider.EnforcePasswordHistoryCount">
            <summary>
            Gets or sets the enforce password history count.
            </summary>
            <value>The enforce password history count.</value>
        </member>
        <member name="P:IDS.Security.SqlUserProvider.SoftDeletes">
            <summary>
            Gets or sets whether soft deletes is enabled.
            </summary>
            <value>Soft deletes.</value>
        </member>
        <member name="P:IDS.Security.SqlUserProvider.CredentialValidation">
            <summary>
            Additional Credential validation. Implemented for Active Directory
            </summary>
            <value>Alternate Authentication Provider.</value>
        </member>
        <member name="P:IDS.Security.SqlUserProvider.CredentialValidation2">
            <summary>
            Optional Credentail Validation. Added for using Fingerprint sensor
            </summary>
            <value>Alternate Authentication Provider.</value>
        </member>
        <member name="P:IDS.Security.SqlUserProvider.UpdateToNewHashAlgorithm">
            <summary>
            If true, and the user has a password that is not hashed with the latest algorithm, the hash is rewritten using the new algorithm.
            </summary>
        </member>
        <member name="P:IDS.Security.SqlUserProvider.TrustedClientProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.SqlUserProvider.CheckDataStorePassword">
            <summary>
            Check Data Store Password
            </summary>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.ValidateCredentials(IDS.Security.ICredentials)">
            <summary>
            Validates the given credentials.
            </summary>
            <param name="credentials">The credentials to validate.</param>
            <returns>
            Returns a <see cref="T:IDS.Security.CredentialValidationResult"/> enumeration which denotes whether the validation was successful
            or why it wasn't successful.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.ValidateCredentials(IDS.Security.ICredentials,System.String@)">
            <summary>
            Validates the credentials and supplies the internal identifier
            for the user owning the supplied <paramref name="credentials"/>.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="userID">The user ID.</param>
            <returns><see langword="true" /> if the credentials are valid;otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.Validate(IDS.Security.ICredentials)">
            <summary>
            Checks if any ICredentialValidationProviders exist, and if so, validates credentials using them
            </summary>
            <param name="credentials"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.GetUser(System.String)">
            <summary>
            Gets the user information for a particular user ID.
            </summary>
            <param name="userID">The user ID to get the User for.</param>
            <returns>
            Returns an IUser object for the user ID. If the user ID is not found, the return
            value would be null.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.GetUserIDFromCredentials(IDS.Security.ICredentials)">
            <summary>
            Gets the internal identifier for the user owning the supplied <paramref name="credentials"/>.
            </summary>
            <param name="credentials">The credentials for the user whose identifier is to be retrieved.</param>
            <returns>The internal identifier for the user owning the supplied <paramref name="credentials"/>.</returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.GetUserIDFromLoginName(System.String)">
            <summary>
            Gets the user provider's identifier for the user with the supplied login name.
            </summary>
            <param name="loginName">The login name of the user who's user ID is being requested.</param>
            <returns>The user provider's identifier for the user with the supplied login name.</returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.OnSuccessfulAuthentication(IDS.Security.ICredentials,IDS.Security.IUser)">
            <summary>
            Called when credentials have been successfully authenticated.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="user">The <see cref="T:IDS.Security.IUser">user</see>/>.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.OnSuccessfulAuthentication(IDS.Security.ICredentials,System.String)">
            <summary>
            Called when credentials have been successfully authenticated.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="userID">The user ID.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.OnFailedAuthentication(IDS.Security.ICredentials,System.String)">
            <summary>
            Called when credentials could not be authenticated.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="userID">The user ID.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoGetUser(System.String,IDS.Security.ICredentials,System.Boolean)">
            <summary>
            Does the get user.
            </summary>
            <param name="userID">The user ID.</param>
            <param name="credentials">The credentials.</param>
            <param name="authenticated">if set to <c>true</c> the user is considered authenticated.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.CreateUsersFromDataReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Creates a collection of users from te data reader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.CreateUserFromDataReader(System.Data.SqlClient.SqlDataReader,IDS.Security.ICredentials,System.Boolean)">
            <summary>
            Creates the user from data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="credentials">The credentials.</param>
            <param name="authenticated">if set to <c>true</c> the user is considered authenticated.</param>
            <returns>Returns a <see cref="T:IDS.Security.IUser"/> instance created from the SqlDataReader.</returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.CreateNameFromDataReader(System.Data.SqlClient.SqlDataReader,IDS.Security.User)">
            <summary>
            Creates the name from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.CreateAddressFromDataReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Creates the address from data reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.CreatePhoneNumberFromDataReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Creates the phone number from data reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.CreateIdentificationFromDataReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Creates the identification from data reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.CreateEmailAddressFromDataReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Creates the email address from data reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.AddUser(IDS.Security.IUser,IDS.Security.ICredentials,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Adds the IDS_User record to the database.
            </summary>
            <param name="user">The user to add to the database.</param>
            <param name="credentials">The credentials for the user being added.</param>
            <param name="transaction">The transaction for this request.</param>
            <returns>Returns the user ID assigned to the new user.</returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.AddUserSecurity(System.String,IDS.Security.IUser,IDS.Security.ICredentials,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Adds the IDS_UserSecurity record to the database.
            </summary>
            <param name="userID">The user ID of the user to associate this user security record with.</param>
            <param name="user">The user to add to the database.</param>
            <param name="credentials">The credentials for the user being added.</param>
            <param name="transaction">The transaction for this request.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.AddUserEmailAddress(System.String,IDS.Security.IUser,IDS.EntityModel.EmailAddress,IDS.Security.ICredentials,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Adds the user email address.
            </summary>
            <param name="userID">The user ID of the user to associate this email address with.</param>
            <param name="user">The user to add to the database.</param>
            <param name="emailAddress">The email address.</param>
            <param name="credentials">The credentials for the user being added.</param>
            <param name="transaction">The transaction for this request.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.AddUserPhoneNumber(System.String,IDS.Security.IUser,IDS.EntityModel.PhoneNumber,IDS.Security.ICredentials,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Adds the user phone number.
            </summary>
            <param name="userID">The user ID of the user to associate this phone number with.</param>
            <param name="user">The user to add to the database.</param>
            <param name="phoneNumber">The phone number.</param>
            <param name="credentials">The credentials for the user being added.</param>
            <param name="transaction">The transaction for this request.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.AddUserPhoneNumber(System.String,System.String,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Adds the user phone number.
            </summary>
            <param name="userID">The user ID of the user to associate this phone number with.</param>
            <param name="phoneNumberDigits">The phone number digits.</param>
            <param name="phoneNumberType">Type of the phone number: Work, Home, Mobile.</param>
            <param name="transaction">The transaction for this request.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoAddUser(IDS.Security.IUser,IDS.Security.ICredentials,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Adds a new user to the database.
            </summary>
            <param name="user">The <see cref="T:IDS.Security.IUser"/> object to add to the database.</param>
            <param name="credentials">The credentials that are to be assigned to the added user.</param>
            <param name="transaction">The transaction in which database changes are to be made.</param>
            <returns>A <see cref="T:System.String"/> containing the [IDS_User].[UserID] value.</returns>
            <remarks>
            This method adds a user created with <see cref="M:IDS.Security.SqlUserProvider.NewUser(IDS.Security.IUser)"/> to the database.
            </remarks>
            <exception cref="T:IDS.Security.DuplicateCredentialsException"/>
            <exception cref="T:IDS.EntityModel.MissingParentObjectException"/>
            <exception cref="T:IDS.Data.StaleObjectException"/>
            <exception cref="T:System.Data.SqlClient.SqlException"/>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.AddUserAddress(System.Data.SqlClient.SqlTransaction,System.String,IDS.EntityModel.IAddress,System.Boolean)">
            <summary>
            Adds the user address.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="userID">The user ID.</param>
            <param name="address">The address.</param>
            <param name="isPrimary">if set to <see langword="true"/> [is primary].</param>
            <exception cref="T:IDS.EntityModel.MissingParentObjectException">Thrown when the IDS_User record identified by <paramref name="userID"/> does not exist.</exception>
            <exception cref="T:IDS.Data.StaleObjectException">Thrown when the IDS_User record is stale (it has been updated by another process).</exception>
            <exception cref="T:System.Data.SqlClient.SqlException" />
        </member>
        <member name="M:IDS.Security.SqlUserProvider.AddUserIdentification(System.Data.SqlClient.SqlTransaction,System.String,IDS.EntityModel.IIdentification)">
            <summary>
            Adds the user identification.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="userID">The user ID.</param>
            <param name="identification">The identification.</param>
            <exception cref="T:IDS.EntityModel.MissingParentObjectException">
            Thrown when the IDS_User record identified by <paramref name="userID"/> does not exist.  Also thrown when the <paramref name="identification"/>'s
            <see cref="P:IDS.EntityModel.IIdentification.IdentificationType">IdentificationType</see> property value does not have a matching record in the IDS_IdentificationType table.
            </exception>
            <exception cref="T:System.Data.SqlClient.SqlException" />
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoDeleteUser(IDS.Security.IUser,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Deletes the user associated with the IUser object from the database.
            </summary>
            <param name="user">The IUser object to delete from the database.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoSoftDelete(IDS.Security.IUser,System.Data.SqlClient.SqlTransaction)">
            <summary>Soft user delete. Changes UserStatus to Deleted</summary>
            <param name="user">The IUser object to delete from the database.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoHardDelete(IDS.Security.IUser,System.Data.SqlClient.SqlTransaction)">
            <summary>Hard user delete. Purges user data from DB</summary>
            <param name="user">The IUser object to delete from the database.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.AuthenticateCredentials(IDS.Security.ICredentials)">
            <summary>
            Attempts to authenticate the given credentials.
            </summary>
            <param name="credentials">The credentials to authenticate.</param>
            <returns>
            A <see cref="T:IDS.Security.IUser"/> object that contains the authenticated user data for the given credentials.
            </returns>
            <exception cref="T:IDS.Security.AuthenticationException">The AuthenticationException is thrown if the credentials are unable
            to be authenticated.</exception>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.GetUserByCredentials(IDS.Security.ICredentials)">
            <summary>
            Gets the user by credential.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.GetUserStatus(System.String)">
            <summary>
            Gets the user status.
            </summary>
            <param name="userID">The user ID.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.GetLatestLoginDateTimeUtc(IDS.Security.IUser)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.SetUserStatus(IDS.Security.IUser,IDS.Security.ActiveStatus)">
            <summary>
            Sets the user status.
            </summary>
            <param name="user">The user.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoSetUserStatus(IDS.Security.IUser,IDS.Security.ActiveStatus,System.Data.SqlClient.SqlTransaction)">
            <summary>Saves the status for the user</summary>
            <param name="user">User to modify</param>
            <param name="status">User status to set</param>
            <param name="transaction">can be null if no transaction</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.NewUser(IDS.Security.IUser)">
            <summary>
            Creates a new typed IUser instance from a user that is appropriate for this users provider.
            </summary>
            <param name="user">The seed user.</param>
            <returns>
            Returns a new typed IUser with the user properties, that is appropriate for this users provider.
            </returns>
            <remarks>
            The value is not persisted to the database until the <see cref="M:IDS.Security.SqlUserProvider.AddUser(IDS.Security.IUser,IDS.Security.ICredentials)"/> method
            is called.
            </remarks>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.GetAllCountries">
            <summary>
            Get's a list of countries from IDS_Country where Visible is true
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.AddUser(IDS.Security.IUser,IDS.Security.ICredentials)">
            <summary>
            Adds a new user to the database.
            </summary>
            <param name="user">The <see cref="T:IDS.Security.IUser"/> object to add to the database.</param>
            <param name="credentials">The credentials that are to be assigned to the added user.</param>
            <remarks>
            This method adds a user created with <see cref="M:IDS.Security.SqlUserProvider.NewUser(IDS.Security.IUser)"/> to the database.
            </remarks>
            <exception cref="T:IDS.Security.DuplicateCredentialsException" />
            <exception cref="T:IDS.EntityModel.MissingParentObjectException" />
            <exception cref="T:IDS.Data.StaleObjectException" />
            <exception cref="T:System.Data.SqlClient.SqlException" />
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoUpdateUser(IDS.Security.IUser)">
            <summary>
            Updates the information in the database associated with the IUser object.
            </summary>
            <param name="user">The IUser object to use to update the database.</param>
            <exception cref="T:IDS.Data.StaleObjectException">
            Thrown when the supplied <paramref name="user"/>'s record was updated by another process and is no longer current.
            </exception>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.ProtectIdentificationValue(IDS.EntityModel.IIdentification)">
            <summary>
            Creates an identification value based on the identification Type
            </summary>
            <param name="identification">Identification details</param>
            <returns>Identification Value</returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DeleteUser(IDS.Security.IUser)">
            <summary>
            Deletes the user associated with the IUser object from the database.
            </summary>
            <param name="user">The IUser object to delete from the database.</param>
        </member>
        <member name="P:IDS.Security.SqlUserProvider.SearchTypesSupported">
            <summary>
            Gets an array of <see cref="T:IDS.Security.UserSearchType"/> enumerations that specifies which 
            types of searches this user provider supports.
            </summary>
            <returns>Returns a list of search types supported. </returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.SearchForUsers(IDS.Security.UserSearchType,System.String,System.Int32)">
            <summary>
            Searches for users based on the specified search type.
            </summary>
            <param name="searchType">Type of the search.</param>
            <param name="searchData">The search data.</param>
            <param name="maxResults">The max number of users to return in results</param>
            <exception cref="T:System.InvalidOperationException">The InvalidOperationException is thrown if an unsupported search type is requested.</exception>
            <returns>Returns a collection of <see cref="T:IDS.Security.IUser"/> instances for the users found by the user provider.</returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.SearchForUsersInternal(IDS.Security.UserSearchType,System.String,System.Int32,System.String)">
            <summary>
            Searches for users based on the specified search type.
            </summary>
            <param name="searchType">Type of the search.</param>
            <param name="searchData">The search data.</param>
            <param name="maxResults">The max number of users to return in results</param>
            <exception cref="T:System.InvalidOperationException">The InvalidOperationException is thrown if an unsupported search type is requested.</exception>
            <param name="storedProcToCall">Appropriate stored proc to call to search the user</param>
            <returns>Returns a collection of <see cref="T:IDS.Security.IUser"/> instances for the users found by the user provider.</returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.SearchForUsers(IDS.Security.UserSearchType,System.String)">
            <summary>
            Searches for users based on the specified search type.
            </summary>
            <param name="searchType">Type of the search.</param>
            <param name="searchData">The search data.</param>
            <exception cref="T:System.InvalidOperationException">The InvalidOperationException is thrown if an unsupported search type is requested.</exception>
            <returns>Returns a collection of <see cref="T:IDS.Security.IUser"/> instances for the users found by the user provider.</returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.FormatDriversLicense(System.String)">
            <summary>
            Formats the drivers license into a standard format. 
            </summary>
            <param name="value">The drivers license value to format.</param>
            <returns>Returns the formatted drivers license value. The base implementation just returns the value without applying any formatting.</returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.FormatTaxID(System.String)">
            <summary>
            Formats a value into a standard Tax ID format.
            </summary>
            <param name="value">The Tax ID value to format.</param>
            <returns>Returns a formatted Tax ID.</returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoChangeEmailAddress(IDS.Security.IUser,System.String)">
            <summary>
            A method to change the email address of the specified user.
            </summary>
            <param name="user">The user.</param>
            <param name="newEmailAddress">The new email address.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoChangeAlternateEmailAddresses(IDS.Security.IUser,IDS.EntityModel.EmailAddressCollection)">
            <summary>
            Changes the alternate email addresses of the specified user.
            </summary>
            <param name="user">The user.</param>
            <param name="newEmailAddresses">The new alternate email addresses.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoSetEmailChangeRequired(IDS.Security.IUser,System.Boolean)">
            <summary>
            Sets whether an email change is required for a given user.
            </summary>
            <param name="user">The user.</param>
            <param name="emailChangeRequired"></param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoChangePassword(IDS.Security.IUser,System.String,System.String)">
            <summary>
            A method to change the password of the specified user. The existing password is verified before changing the password.
            </summary>
            <param name="user">The user.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <exception cref="T:IDS.Security.AuthenticationException">is thrown if the old password doesn't match the existing password.</exception>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.PasswordDuplicatedInHistory(IDS.Security.IUser,System.String)">
            <summary>
            Passwords the duplicated in history.
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoChangePassword(IDS.Security.IUser,System.String,System.Boolean)">
            <summary>
            A method to change the password of the specified user without validating the current password.
            </summary>
            <param name="user">The user.</param>
            <param name="newPassword">The new password.</param>
            <param name="checkPasswordHistory">if set to <c>true</c> the password history will be checked to
            see if the current password has been used before.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.UpdatePassword(IDS.Security.IUser,System.String)">
            <summary>
            Updates the password in sql and in memory. Called by DoChangePassword
            </summary>
            <param name="user">The user.</param>
            <param name="newPassword">The new password.</param>
            <exception cref="T:IDS.EntityModel.MissingParentObjectException">
            Thrown when the IDS_User record for the supplied <paramref name="user"/> could not be found.
            </exception>
            <exception cref="T:IDS.Data.StaleObjectException">
            Thrown when the supplied <paramref name="user"/>'s record was updated by another process and is no longer current.
            </exception>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.UpdatePassword(IDS.Security.IUser,System.String,System.Boolean)">
            <summary>
            Updates the password in sql and in memory. Called by DoChangePassword
            </summary>
            <param name="user">The user.</param>
            <param name="newPassword">The new password.</param>
            <param name="updateLastPasswordChangeDate">False to prevent the last password change date from being updated.</param>
            <exception cref="T:IDS.EntityModel.MissingParentObjectException">
            Thrown when the IDS_User record for the supplied <paramref name="user"/> could not be found.
            </exception>
            <exception cref="T:IDS.Data.StaleObjectException">
            Thrown when the supplied <paramref name="user"/>'s record was updated by another process and is no longer current.
            </exception>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoUpdateUserStatus(System.String,IDS.Security.ActiveStatus)">
            <summary>
            Updates the status of a user in the database.
            </summary>
            <param name="userID">The <see cref="P:IDS.Security.IUser.UserID" /> of the user to update.</param>
            <param name="status">The new status.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoSetPasswordChangeRequired(IDS.Security.IUser,System.Boolean)">
            <summary>
            Sets whether a password change is required for a given user.
            </summary>
            <param name="user">The user.</param>
            <param name="passwordChangeRequired">if set to <see langword="true"/> the user's password requires changing.</param>
            <exception cref="T:IDS.Data.StaleObjectException">
            Thrown when the supplied <paramref name="user"/>'s <see cref="P:IDS.Security.IUser.Credentials">Credentials</see> record was updated by another process and is no longer current.
            </exception>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoSetPasswordExpirationDate(IDS.Security.IUser,System.DateTime)">
            <summary>
            Sets the date and time that a user's password will expire.
            </summary>
            <param name="user">The User</param>
            <param name="passwordExpirationDateTimeUtc">Password expiration datetime</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.ResetPassword(IDS.Security.IUser)">
            <summary>
            Resets the password associated with the specified user to a random password. The random password is returned.
            </summary>
            <param name="user">The user.</param>
            <returns>Returns a string with the new password.</returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoChangePassword(IDS.Security.ChangePasswordParameters)">
            <summary>
            A method to change the password of the specified user.
            </summary>
            <param name="changePasswordParameters">The pass params.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.RetrieveAllUsers">
            <summary>
            Retrieves all users from the user list provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.CanChangeLoginName(IDS.Security.IUser)">
            <summary>
            Determines whether the login name can be changed for the specified user.
            </summary>
            <param name="user">The user to query if the login name can be changed.</param>
            <returns>
            	<c>true</c> if the login name can be changed for the specified user; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.DoChangeLoginName(IDS.Security.IUser,System.String)">
            <summary>
            Changes the login name of the specified user.
            </summary>
            <param name="user">The user to change the login name for.</param>
            <param name="newLoginName">New login name to assign to the specified user.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.ChangeLoginName(IDS.Security.IUser,System.String)">
            <summary>
            Changes the login name of the specified user.
            </summary>
            <param name="user">The user to change the login name for.</param>
            <param name="newLoginName">New login name to assign to the specified user.</param>
            <exception cref="T:IDS.Security.DuplicateCredentialsException">The DuplicateCredentialsException is thrown if the newLoginName already exists.</exception>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.RetrievePasswordHistory(IDS.Security.IUser)">
            <summary>
            Retrieves the password history which includes the current password.
            </summary>
            <param name="user">The user to retrieve the password history for.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.CheckIfLoginNameExists(System.String)">
            <summary>
            Checks if login name exists.
            </summary>
            <param name="loginName">Name of the login.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.ChangePreferredCulture(IDS.Security.IUser,System.Globalization.CultureInfo)">
            <summary>
            Changes the preferred culture of a specified user.
            </summary>
            <param name="user">The user to change the preferred culture for.</param>
            <param name="culture">The new preferred culture to assign to the specified user.</param>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.OnInitAllServices">
            <summary>
            Called after all the services are initialized.
            </summary>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.GetSensitiveDataConfigurations">
            <summary>
            Gets a list of <see cref="T:IDS.Security.SensitiveDataConfiguration" /> objects that identify the set of sensitive data managed by the provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.GetNormalizedPhoneTypeString(IDS.EntityModel.PhoneNumberType)">
            <summary>
            Normalize the Mobild/Cell to Cell. All phone types are cell for purposes of Command/NGPC
            </summary>
            <param name="phoneNumberType"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.SqlUserProvider.GetPhoneNumberTypeFromString(System.String)">
            <summary>
            string to enum
            </summary>
            <param name="phoneNumberTypeString"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.SystemCredentials">
            <summary>
            The SystemCredentials class represents credentials used by the system for authentication.
            </summary>
        </member>
        <member name="M:IDS.Security.SystemCredentials.Create">
            <summary>
            Creates an instance of the SystemCredentials.
            </summary>
            <returns>Returns an instance of the SystemCredentials.</returns>
        </member>
        <member name="M:IDS.Security.SystemCredentials.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.SystemCredentials"/> class.
            </summary>
        </member>
        <member name="T:IDS.Security.TokenProvider.AppUrl">
            <summary>
            The AppUrl class holds the settings for each configured application url.
            </summary>
            <remarks>
            The application url is used to redirect servers requesting tokens to the appropriate url.
            By using application url's configured on the token server, this prevents having to make
            any changes to the requesting application when minor changes are made to the location
            of the application.
            </remarks>
        </member>
        <member name="M:IDS.Security.TokenProvider.AppUrl.#ctor">
            <summary>
            Creates an instance of the AppUrl class.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.AppUrl.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the AppUrl class.
            </summary>
            <param name="key">The key to associate with the app that uniquely identifies this url.
            This is usually an abbreviation of the application such as "esmt", "sap" or "alerts".</param>
            <param name="url">The url to associate with the key and value. This is typically a complete
            url such as "https://www.creditunion.com/portal/default.aspx".</param>
        </member>
        <member name="P:IDS.Security.TokenProvider.AppUrl.Key">
            <summary>
            The key to associate with the value. This is usually "appid".
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.AppUrl.Url">
            <summary>
            The url to associate with the key and value. This is typically a complete
            url such as "https://www.creditunion.com/portal/default.aspx".
            </summary>
        </member>
        <member name="T:IDS.Security.TokenProvider.DataspaceProfile">
            <summary>
            The DataspaceProfile class contains a TokenProvider profile for particular dataspace.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.DataspaceProfile.#ctor(System.String)">
            <summary>
            Creates an instance of the Profile class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:IDS.Security.TokenProvider.DataspaceProfile.Name">
            <summary>
            Gets the name associated with this profile.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.DataspaceProfile.DefaultAppUrl">
            <summary>
            The default application URL to use if the application key and value is not found in the
            configured AppUrl's.
            </summary>
            <remarks>
            This value can be null. If it is null, then no default is configured and an error will be
            raised if the application key and value is not found in the configured AppUrl's.
            </remarks>
        </member>
        <member name="P:IDS.Security.TokenProvider.DataspaceProfile.AppUrls">
            <summary>
            Gets the list of configured applications.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.DataspaceProfile.Restrictions">
            <summary>
            Gets the collection of restrictions associated with this profile.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.DataspaceProfile.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="P:IDS.Security.TokenProvider.DataspaceProfile.IsValid">
            <summary>
            Returns true if the profile is valid for the request.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.DataspaceProfile.ToString">
            <summary>
            Returns a string representation of this instance of the Profile class.
            </summary>
            <returns>Returns a string for this instance.</returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.DataspaceProfile.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="T:IDS.Security.TokenProvider.DataspaceProfileCollection">
            <summary>
            The DataspaceProfileCollection contains a collection of <see cref="T:IDS.Security.TokenProvider.DataspaceProfile"/> instances.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.DataspaceProfileCollection.Item(System.String)">
            <overloads>
            Gets or sets a specific <see cref="N:IDS.Profile"/> element.
            </overloads>
            <summary>
            Gets the <see cref="N:IDS.Profile"/> element associated with the first
            occurrence of the specified <see cref="P:IDS.Security.TokenProvider.DataspaceProfile.Name"/> value.
            </summary>
            <param name="key">
            The <see cref="P:IDS.Security.TokenProvider.DataspaceProfile.Name"/> value whose element to get.</param>
            <value>The <see cref="N:IDS.Profile"/> element associated with the first
            occurrence of the specified <paramref name="key"/>, if found; otherwise,
            a null reference.
            </value>
            <remarks>
            This indexer has the same effect as the <see cref="M:IDS.Security.TokenProvider.DataspaceProfileCollection.GetByKey(System.String)"/> method.
            </remarks>
        </member>
        <member name="M:IDS.Security.TokenProvider.DataspaceProfileCollection.GetByKey(System.String)">
            <summary>
            Gets the <see cref="N:IDS.Profile"/> element associated with the first
            occurrence of the specified <see cref="P:IDS.Security.TokenProvider.DataspaceProfile.Name"/> value.
            </summary>
            <param name="key">The <see cref="P:IDS.Security.TokenProvider.DataspaceProfile.Name"/> value whose element to get.</param>
            <returns>
            The <see cref="N:IDS.Profile"/> element associated with the first
            occurrence of the specified <paramref name="key"/>, if found; otherwise,
            a null reference.
            </returns>
            <remarks>
            	<b>GetByKey</b> compares the specified <paramref name="key"/> to the value
            of the <see cref="P:IDS.Security.TokenProvider.DataspaceProfile.Name"/> property of each
            <see cref="N:IDS.Profile"/> element, and returns the first matching element.
            </remarks>
        </member>
        <member name="M:IDS.Security.TokenProvider.DataspaceProfileCollection.IndexOfKey(System.String)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="P:IDS.Security.TokenProvider.DataspaceProfile.Name"/> value in the 
            <see cref="T:IDS.Security.TokenProvider.DataspaceProfileCollection"/>.
            </summary>
            <param name="key">The <see cref="P:IDS.Security.TokenProvider.DataspaceProfile.Name"/>
            value to locate in the <see cref="T:IDS.Security.TokenProvider.DataspaceProfileCollection"/>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="key"/>
            in the <see cref="T:IDS.Security.TokenProvider.DataspaceProfileCollection"/>, if found; otherwise, -1.
            </returns>
            <remarks>
            <b>IndexOfKey</b> is similar to IndexOf but compares the specified
            <paramref name="key"/> to the value of the <see cref="P:IDS.Security.TokenProvider.DataspaceProfile.Name"/> 
            property of each <see cref="N:IDS.Profile"/> element, rather than to the element itself.
            </remarks>
        </member>
        <member name="T:IDS.Security.TokenProvider.DefaultTokenServerConfigurationProvider">
            <summary>
            The DefaultTokenServerConfigurationProvider is an implementation of the ITokenServerConfigurationProvider
            that gets its configuration information from the XML section from the web.config.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.DefaultTokenServerConfigurationProvider.GetConfiguration(System.Xml.XmlNode)">
            <summary>
            Gets the token server configuration from the section parameter which is the tokenServer node
            from the web.config.
            </summary>
            <param name="section">The XML section from the web.config file.</param>
            <returns>Returns the TokenServerConfiguration object with the populated configuration.</returns>
        </member>
        <member name="P:IDS.Security.TokenProvider.DefaultTokenServerConfigurationProvider.ConfigurationHasChanged">
            <summary>
            Gets a value indicating whether the configuration has been changed since the last call to GetConfiguration().
            </summary>
            <value>
            	<c>true</c> if the configuration has changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IDS.Security.TokenProvider.InProcSessionStateServer">
            <summary>
            The InProcSessionStateServer implements the ISessionStateServer for an In-Process session state server.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.InProcSessionStateServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.TokenProvider.InProcSessionStateServer"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.InProcSessionStateServer.SaveSession(IDS.Security.TokenProvider.Session)">
            <summary>
            The SaveSession method registers a session with the state server.
            </summary>
            <param name="session">The session to register with the state server.</param>
        </member>
        <member name="M:IDS.Security.TokenProvider.InProcSessionStateServer.GetSession(System.String)">
            <summary>
            The GetSession method retrieves a session from the state server based on given session ID.
            </summary>
            <param name="sessionId">The session ID of the session to retrieve.</param>
            <returns>
            If the session ID is found, it retrieves the Session object from the state server. If the
            session ID is not found, null is returned.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.InProcSessionStateServer.InvalidateSession(System.String)">
            <summary>
            Invalidates the session associated with the session ID.
            </summary>
            <param name="sessionId">The session ID of the session to invalidate.</param>
        </member>
        <member name="T:IDS.Security.TokenProvider.ISessionStateServer">
            <summary>
            The ISessionStateServer interface is used to implement session state servers.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.ISessionStateServer.SaveSession(IDS.Security.TokenProvider.Session)">
            <summary>
            The SaveSession method registers a session with the state server.
            </summary>
            <param name="session">The session to register with the state server.</param>
        </member>
        <member name="M:IDS.Security.TokenProvider.ISessionStateServer.GetSession(System.String)">
            <summary>
            The GetSession method retrieves a session from the state server based on given session ID.
            </summary>
            <param name="sessionId">The session ID of the session to retrieve.</param>
            <returns>
            If the session ID is found, it retrieves the Session object from the state server. If the
            session ID is not found, null is returned.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.ISessionStateServer.InvalidateSession(System.String)">
            <summary>
            Invalidates the session associated with the session ID.
            </summary>
            <param name="sessionId">The session ID of the session to invalidate.</param>
        </member>
        <member name="T:IDS.Security.TokenProvider.ITokenProvider">
            <summary>
            The ITokenProvider interface abstracts accessing a token provider service.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenProvider.CreateToken(System.String)">
            <summary>
            Creates a new session registered with the token provider and returns the associated token ID.
            </summary>
            <returns>Returns a token associated with the new session.</returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenProvider.CreateAppToken(System.String,System.String)">
            <summary>
            Creates a new session registered with the token provider and returns the associated URL that
            the calling application should redirect to.
            </summary>
            <param name="appKey">The application key to assign to the token. The appKey is used to 
            associate an application specific URL to the token.</param>
            <param name="cargo">A string of data to associate with this session. This typically is a
            string of name=value&amp;name=value querystring parameters.</param>
            <returns>
            Returns a url with the associated token for the new session. This is the URL
            the requester of the token should use to redirect to.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenProvider.CreateAppToken(System.String,System.String,System.String)">
            <summary>
            Creates a new session registered with the token provider and returns the associated URL that
            the calling application should redirect to.
            </summary>
            <param name="dataspace">The dataspace for the new session.</param>
            <param name="appKey">The application key to assign to the token. The appKey is used to 
            associate an application specific URL to the token.</param>
            <param name="cargo">A string of data to associate with this session. This typically is a
            string of name=value&amp;name=value querystring parameters.</param>
            <returns>
            Returns a url with the associated token for the new session. This is the URL
            the requester of the token should use to redirect to.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenProvider.ValidateToken(System.String)">
            <summary>
            Validates a token issued by this token provider.
            </summary>
            <param name="token">The token that was returned from a prior call to CreateToken().</param>
            <returns>
            If the token is valid, a Session object is returned. Otherwise, null is returned.
            </returns>
            <exception cref="T:IDS.Security.TokenProvider.TokenValidationException">This exception is thrown if the token is invalid.</exception>
        </member>
        <member name="T:IDS.Security.TokenProvider.ITokenServerConfigurationProvider">
            <summary>
            The ITokenServerConfigurationProvider is an interface for abstracting the configuration for token server.
            </summary>
            <see cref="T:IDS.Security.TokenProvider.DefaultTokenServerConfigurationProvider"/>
            <see cref="T:IDS.Security.TokenProvider.TokenServerSqlConfigurationProvider"/>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerConfigurationProvider.GetConfiguration(System.Xml.XmlNode)">
            <summary>
            Gets the token server configuration from the configuration provider.
            </summary>
            <param name="section">The XML section from the web.config file.</param>
            <returns></returns>
        </member>
        <member name="P:IDS.Security.TokenProvider.ITokenServerConfigurationProvider.ConfigurationHasChanged">
            <summary>
            Gets a value indicating whether the configuration has been changed since the last call to GetConfiguration().
            </summary>
            <value><c>true</c> if the configuration has changed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:IDS.Security.TokenProvider.ITokenServerManager">
            <summary>
            Interface to manage Token Server
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.GetAllDataspaceProfiles">
            <summary>
            Getting all dataspace profiles
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.GetAllProfiles">
            <summary>
            Gets all profiles.
            </summary>
            <returns>
            A <see cref="T:IDS.Security.TokenProvider.TokenServerProfile" /> collection that contains
            all profiles.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.GetProfile(System.Int32)">
            <summary>
            Gets the dataspace profile with a specified dataspace name.
            </summary>
            <returns>
            The <see cref="T:IDS.Security.TokenProvider.TokenServerProfile" /> with the specified <param name="id" />.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.AddProfile(IDS.Security.TokenProvider.TokenServerProfile)">
            <summary>
            Adds a specified profile.
            </summary>
            <param name="profile">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerProfile" /> to add.
            </param>
            <exception cref="T:System.ArgumentException">
            The ID of the <paramref name="profile" /> conflicts with an existing location.
            </exception>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.UpdateProfile(IDS.Security.TokenProvider.TokenServerProfile)">
            <summary>
            Updates a specified dataspace profile.
            </summary>
            <param name="profile">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerProfile" /> to update.
            </param>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.DeleteProfile(IDS.Security.TokenProvider.TokenServerProfile)">
            <summary>
            Deletes a specified dataspace profile.
            </summary>
            <param name="profile">
            The <see cref="T:IDS.Security.TokenProvider.DataspaceProfile" /> to delete.
            </param>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.GetProfileSetting(System.Int32)">
            <summary>
            Gets the profile setting with a specified Id.
            </summary>
            <returns>
            The <see cref="T:IDS.Security.TokenProvider.TokenServerProfileSetting" /> with the specified <paramref name="id" />.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.AddProfileSetting(IDS.Security.TokenProvider.TokenServerProfileSetting)">
            <summary>
            Adds a specified profile.
            </summary>
            <param name="setting" >
            The <see cref="T:IDS.Security.TokenProvider.TokenServerProfileSetting" /> to add.
            </param>
            <exception cref="T:System.ArgumentException">
            The Key of the <paramref name="setting" /> conflicts with an existing setting.
            </exception>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.UpdateProfileSetting(IDS.Security.TokenProvider.TokenServerProfileSetting)">
            <summary>
            Update a specified profile setting.
            </summary>
            <param name="setting">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerProfileSetting" /> to update.
            </param>
            <exception cref="T:System.ArgumentException">
            The Key of the <paramref name="setting" /> conflicts with an existing AppUrl.
            </exception>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.DeleteProfileSetting(IDS.Security.TokenProvider.TokenServerProfileSetting)">
            <summary>
            Delete a specified profile setting.
            </summary>
            <param name="setting">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerProfileSetting" /> to delete.
            </param>
            <exception cref="T:System.ArgumentException">
            The Key of the <paramref name="setting" /> conflicts with an existing setting.
            </exception>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.GetAllRestrictionGroups">
            <summary>
            Getting all restrictions groups
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.GetRestrictionGroup(System.Int32)">
            <summary>
            Gets the restriction group with a specified id.
            </summary>
            <returns>
            The <see cref="T:IDS.Security.TokenProvider.TokenServerRestrictionGroup" /> with the specified <param name="id" />.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.AddRestrictionGroup(IDS.Security.TokenProvider.TokenServerRestrictionGroup)">
            <summary>
            Adds a specified profile.
            </summary>
            <param name="group">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerRestrictionGroup" /> to add.
            </param>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.UpdateRestrictionGroup(IDS.Security.TokenProvider.TokenServerRestrictionGroup)">
            <summary>
            Update a specified restriction group.
            </summary>
            <param name="group">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerRestrictionGroup" /> to add.
            </param>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.DeleteRestrictionGroup(IDS.Security.TokenProvider.TokenServerRestrictionGroup)">
            <summary>
            Deletes a specified restriction group.
            </summary>
            <param name="group">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerRestrictionGroup" /> to delete.
            </param>
            <exception cref="T:System.InvalidOperationException">
            One or more profile are associated with the specified <paramref name="group"/>.
            </exception>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.GetRestriction(System.Int32)">
            <summary>
            Gets the restriction with a specified id.
            </summary>
            <returns>
            The <see cref="T:IDS.Security.TokenProvider.TokenServerRestrictionGroup" /> with the specified <param name="id" />.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.AddRestriction(IDS.Security.TokenProvider.TokenServerRestriction)">
            <summary>
            Adds a specified restriction.
            </summary>
            <param name="restriction">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerRestriction" /> to add.
            </param>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.UpdateRestriction(IDS.Security.TokenProvider.TokenServerRestriction)">
            <summary>
            Update a specified restriction.
            </summary>
            <param name="restriction">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerRestriction" /> to add.
            </param>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.DeleteRestriction(IDS.Security.TokenProvider.TokenServerRestriction)">
            <summary>
            Deletes a specified restriction.
            </summary>
            <param name="restriction">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerRestriction" /> to delete.
            </param>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenServerManager.GetProfileExpirationDateTime">
            <summary>
            Get Profile Expiration DateTime
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.TokenProvider.ITokenValidationService">
            <summary>
            The ITokenValidationService is an interface for validating tokens.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.ITokenValidationService.ValidateToken(System.String)">
            <summary>
            Validates the authentication token.
            </summary>
            <param name="token">The token to validate.</param>
            <returns>
            Returns a string with any cargo associated with the token.
            </returns>
            <exception cref="T:IDS.Security.TokenProvider.TokenValidationException">This exception is thrown if the token is invalid.</exception>
        </member>
        <member name="T:IDS.Security.TokenProvider.Logging.TokenServerCategory">
            <summary>
            The TokenServerCategory enumeration is used along with the IDS.Logging library to provide categories
            specific to Token Server.
            </summary>
        </member>
        <member name="F:IDS.Security.TokenProvider.Logging.TokenServerCategory.SessionCreated">
            <summary>
            Category for logging when a session has been successfully created.
            </summary>
        </member>
        <member name="F:IDS.Security.TokenProvider.Logging.TokenServerCategory.SessionExpired">
            <summary>
            Category for logging when a session was expired. This means the token was never validated.
            </summary>
        </member>
        <member name="F:IDS.Security.TokenProvider.Logging.TokenServerCategory.SessionValidated">
            <summary>
            Category for logging that a session was validated.
            </summary>
        </member>
        <member name="F:IDS.Security.TokenProvider.Logging.TokenServerCategory.SessionNotValid">
            <summary>
            Category for logging that a session was unable to be validated.
            </summary>
        </member>
        <member name="F:IDS.Security.TokenProvider.Logging.TokenServerCategory.InvalidRequest">
            <summary>
            Category for logging requests that were invalid.
            </summary>
        </member>
        <member name="F:IDS.Security.TokenProvider.Logging.TokenServerCategory.Configuration">
            <summary>
            Category for logging information related to token server configuration.
            </summary>
        </member>
        <member name="F:IDS.Security.TokenProvider.Logging.TokenServerCategory.ProfileNotValid">
            <summary>
            Category for logging that a profile was not valid for the request.
            </summary>
        </member>
        <member name="T:IDS.Security.TokenProvider.ParamHelper">
            <summary>
            The ParamHelper class is a helper class which takes a series of name=value pairs, combines
            them using only unique names and returns a new string of name=value pairs.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.ParamHelper.#ctor">
            <summary>
            Creates an instance of the ParamHelper class.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.ParamHelper.AddUniqueParams(System.String)">
            <summary>
            Adds the unique names within the paramString to the UniqueValues collection.
            </summary>
            <param name="paramString">The parameters to add. This can be a full URL with embedded
            querystring parameters or just a partial.</param>
        </member>
        <member name="P:IDS.Security.TokenProvider.ParamHelper.UniqueValues">
            <summary>
            Gets a collection of the unique name=value pairs that were added to this class.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.ParamHelper.ToString">
            <summary>
            Returns a string representation of the name/value pairs in querystring format. 
            i.e. name=value&amp;name=value
            </summary>
            <returns>Returns a string in name=value&amp;name=value format.</returns>
        </member>
        <member name="T:IDS.Security.TokenProvider.Session">
            <summary>
            The Session object stores tokens that have been issued and their associated cargo.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.Session.#ctor">
            <summary>
            Creates an instance of the Session object.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.Session.#ctor(System.Int32,IDS.Security.TokenProvider.DataspaceProfile,System.String)">
            <summary>
            Creates an instance of the Session object.
            </summary>
            <param name="ttlSeconds">The number of seconds before the session expires.</param>
            <param name="profile">The profile.</param>
            <param name="cargo">Any data associated with this session.</param>
        </member>
        <member name="P:IDS.Security.TokenProvider.Session.SessionId">
            <summary>
            Gets the session ID associated with this session.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.Session.CreatedDateTime">
            <summary>
            Gets the date and time this session was created.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.Session.Profile">
            <summary>
            Gets the profile associated with this session.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.Session.DataspaceName">
            <summary>
            Gets the dataspace name associated with this session. This value is used for serialization.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.Session.ExpirationDateTime">
            <summary>
            Gets the date and time this session expires.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.Session.Cargo">
            <summary>
            Gets the cargo associated with this session.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.Session.SessionIsValid">
            <summary>
            Returns true if the session is still valid.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.Session.IsValid">
            <summary>
            Returns true if the session is still valid.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.Session.ToLog">
            <summary>
            Converts the properties of this object into a string that is suitable for logging.
            </summary>
            <returns>Returns a string with the Session ID, Created, Expires and Cargo properties formatted
            properly for logging.</returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.Session.Dispose">
            <summary>
            Implementation of the IDisposable.Dispose method.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.Session.Dispose(System.Boolean)">
            <summary>
            Protected method to dispose of license associated with this instance.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:IDS.Security.TokenProvider.SessionManager">
            <summary>
            The session manager manages creating and validating sessions issued through the token server.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.SessionManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.TokenProvider.SessionManager"/> class.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.SessionManager.Default">
            <summary>
            Gets the default instance of the SessionManager.
            </summary>
            <value>The default instance of the SessionManager.</value>
        </member>
        <member name="M:IDS.Security.TokenProvider.SessionManager.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"></see> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"></see> property.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/></PermissionSet>
        </member>
        <member name="P:IDS.Security.TokenProvider.SessionManager.Configuration">
            <summary>
            Gets the dynamic configuration settings for the token server session manager.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.SessionManager.ResetConfiguration">
            <summary>
            Reseting Configuraion
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.SessionManager.StateServer">
            <summary>
            Gets the active state server
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.SessionManager.GetAppUrl(IDS.Security.TokenProvider.DataspaceProfile,System.String)">
            <summary>
            This method gets an application URL based on a given app key and value.
            </summary>
            <param name="profile">The profile to get the App URL from.</param>
            <param name="key">The application key to lookup the application specific URL. This is typically a product
            abbreviation such as "esmt" or "MA".</param>
            <returns>Returns the application specific URL for the given key.</returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.SessionManager.CreateSession(IDS.Security.TokenProvider.DataspaceProfile,System.String)">
            <summary>
            Creates a new session registered with the Session Manager.
            </summary>
            <param name="profile">The profile to associate the new session with.</param>
            <param name="cargo">Any data to associate with this session.</param>
            <returns>
            Returns the Session object associated with the new session/
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.SessionManager.ValidateSession(IDS.Security.TokenProvider.DataspaceProfile,System.String)">
            <summary>
            Validates a session ID against the active sessions registered with the Session Manager.
            </summary>
            <param name="profile">The profile to validate the session against.</param>
            <param name="sessionId">The session id.</param>
            <returns>
            If the session is valid, that session is returned. Otherwise, null is returned.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.SessionManager.Renewal(System.Runtime.Remoting.Lifetime.ILease)">
            <summary>
            Requests a sponsoring client to renew the lease for the specified object.
            </summary>
            <param name="lease">The lifetime lease of the object that requires lease renewal.</param>
            <returns>
            The additional lease time for the specified object.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure"/></PermissionSet>
        </member>
        <member name="M:IDS.Security.TokenProvider.SessionManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:IDS.Security.TokenProvider.SessionStateServer">
            <summary>
            The SessionStateServer implements the ISessionStateServer for an Out-of-Process session state server.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.SessionStateServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.TokenProvider.SessionStateServer"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.SessionStateServer.CreateRemoteObject(System.Xml.XmlNode)">
            <summary>
            This is a factory method that creates a reference to remote object of this class at the URL
            specified in the connection string.
            </summary>
            <exception cref="T:System.Exception">
            If a connection to the remote server can't be made, an exception will be raised.
            </exception>
            <param name="section">The XML configuration section which contains the URL to the remote object. 
            This is in the format of tcp://localhost:5556/IDS.TokenServer.soap</param>
            <returns>Returns a reference to the remote SessionStateServer object.</returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.SessionStateServer.SaveSession(IDS.Security.TokenProvider.Session)">
            <summary>
            The SaveSession method registers a session with the state server.
            </summary>
            <param name="session">The session to register with the state server.</param>
        </member>
        <member name="M:IDS.Security.TokenProvider.SessionStateServer.GetSession(System.String)">
            <summary>
            The GetSession method retrieves a session from the state server based on given session ID.
            </summary>
            <param name="sessionId">The session ID of the session to retrieve.</param>
            <returns>
            If the session ID is found, it retrieves the Session object from the state server. If the
            session ID is not found, null is returned.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.SessionStateServer.InvalidateSession(System.String)">
            <summary>
            Invalidates the session associated with the session ID.
            </summary>
            <param name="sessionId">The session ID of the session to invalidate.</param>
        </member>
        <member name="T:IDS.Security.TokenProvider.SessionStateServerFactory">
            <summary>
            The SessionStateServerFactory is a static factory class for creating the configured Session State server.
            </summary>
            <see cref="T:IDS.Security.TokenProvider.ISessionStateServer"/>
            <see cref="T:IDS.Security.TokenProvider.InProcSessionStateServer"/>
            <see cref="T:IDS.Security.TokenProvider.SQLServerSessionStateServer"/>
        </member>
        <member name="M:IDS.Security.TokenProvider.SessionStateServerFactory.Create(System.Xml.XmlNode)">
            <summary>
            This is a static factory method for creating the configured Session State server based on the
            XML configuration.
            </summary>
            <param name="section">The XML section from the web.config.</param>
            <returns>Returns the configured <see cref="T:IDS.Security.TokenProvider.ISessionStateServer"/></returns>
        </member>
        <member name="T:IDS.Security.TokenProvider.SQLServerSessionStateServer">
            <summary>
            The SQLServerSessionStateServer implements the ISessionStateServer for a session state server that persists
            session state data to SQL Server.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.SQLServerSessionStateServer.#ctor(System.Xml.XmlNode)">
            <summary>
            Creates an instance of the SQLServerSessionStateServer class.
            </summary>
            <param name="section">The XML configuration section.</param>
        </member>
        <member name="P:IDS.Security.TokenProvider.SQLServerSessionStateServer.ConnectionService">
            <summary>
            Gets or sets the connection service.
            </summary>
            <value>The connection service.</value>
        </member>
        <member name="M:IDS.Security.TokenProvider.SQLServerSessionStateServer.SaveSession(IDS.Security.TokenProvider.Session)">
            <summary>
            The SaveSession method registers a session with the state server.
            </summary>
            <param name="session">The session to register with the state server.</param>
        </member>
        <member name="M:IDS.Security.TokenProvider.SQLServerSessionStateServer.GetSession(System.String)">
            <summary>
            The GetSession method retrieves a session from the state server based on given session ID.
            </summary>
            <param name="sessionId">The session ID of the session to retrieve.</param>
            <returns>
            If the session ID is found, it retrieves the Session object from the state server. If the
            session ID is not found, null is returned.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.SQLServerSessionStateServer.InvalidateSession(System.String)">
            <summary>
            Invalidates the session associated with the session ID.
            </summary>
            <param name="sessionId">The session ID of the session to invalidate.</param>
        </member>
        <member name="T:IDS.Security.TokenProvider.SqlTokenServerManager">
            <summary>
            SQL Token Server
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.SqlTokenServerManager.ConnectionService">
            <summary>
            Gets or sets the configured <see cref="T:IDS.Data.SqlConnectionService" />.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.SqlTokenServerManager.TokenProviderService">
            <summary>
            Gets or sets the configures <see cref="T:IDS.Security.TokenProvider.ITokenProvider" />.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.GetConnectionService">
            <summary>
            Returns the <see cref="P:IDS.Security.TokenProvider.SqlTokenServerManager.ConnectionService" /> after validating that
            it is not <see langword="null" />.
            </summary>
            <returns>
            The <see cref="P:IDS.Security.TokenProvider.SqlTokenServerManager.ConnectionService" />.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.GetAllDataspaceProfiles">
            <summary>
            Getting all dataspace profiles
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.GetProfileExpirationDateTime">
            <summary>
            GetProfileExpirationDateTime
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.ProfileResetExpiration(System.String)">
            <summary>
            Reseting Profile Expiration to Not Expired
            </summary>
            <param name="dataspace"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.GetAllProfiles">
            <summary>
            Gets all profiles.
            </summary>
            <returns>
            A <see cref="T:IDS.Security.TokenProvider.TokenServerProfile" /> collection that contains
            all profiles.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.GetProfile(System.Int32)">
            <summary>
            Gets the dataspace profile with a specified dataspace name.
            </summary>
            <returns>
            The <see cref="T:IDS.Security.TokenProvider.TokenServerProfile" /> with the specified <param name="id" />.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.AddProfile(IDS.Security.TokenProvider.TokenServerProfile)">
            <summary>
            Adds a specified profile.
            </summary>
            <param name="profile">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerProfile" /> to add.
            </param>
            <exception cref="T:System.ArgumentException">
            The ID of the <paramref name="profile" /> conflicts with an existing location.
            </exception>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.UpdateProfile(IDS.Security.TokenProvider.TokenServerProfile)">
            <summary>
            Updates a specified dataspace profile.
            </summary>
            <param name="profile">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerProfile" /> to update.
            </param>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.DeleteProfile(IDS.Security.TokenProvider.TokenServerProfile)">
            <summary>
            Deletes a specified dataspace profile.
            </summary>
            <param name="profile">
            The <see cref="T:IDS.Security.TokenProvider.DataspaceProfile" /> to delete.
            </param>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.GetProfileSetting(System.Int32)">
            <summary>
            Gets the profile setting with a specified Id.
            </summary>
            <returns>
            The <see cref="T:IDS.Security.TokenProvider.TokenServerProfileSetting" /> with the specified <paramref name="id" />.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.AddProfileSetting(IDS.Security.TokenProvider.TokenServerProfileSetting)">
            <summary>
            Adds a specified profile.
            </summary>
            <param name="setting" >
            The <see cref="T:IDS.Security.TokenProvider.TokenServerProfileSetting" /> to add.
            </param>
            <exception cref="T:System.ArgumentException">
            The Key of the <paramref name="setting" /> conflicts with an existing setting.
            </exception>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.UpdateProfileSetting(IDS.Security.TokenProvider.TokenServerProfileSetting)">
            <summary>
            Update a specified profile setting.
            </summary>
            <param name="setting">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerProfileSetting" /> to update.
            </param>
            <exception cref="T:System.ArgumentException">
            The Key of the <paramref name="setting" /> conflicts with an existing AppUrl.
            </exception>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.DeleteProfileSetting(IDS.Security.TokenProvider.TokenServerProfileSetting)">
            <summary>
            Delete a specified profile setting.
            </summary>
            <param name="setting">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerProfileSetting" /> to delete.
            </param>
            <exception cref="T:System.ArgumentException">
            The Key of the <paramref name="setting" /> conflicts with an existing setting.
            </exception>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.GetAllRestrictionGroups">
            <summary>
            Getting all restrictions groups
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.GetRestrictionGroup(System.Int32)">
            <summary>
            Gets the restriction group with a specified id.
            </summary>
            <returns>
            The <see cref="T:IDS.Security.TokenProvider.TokenServerRestrictionGroup" /> with the specified <param name="id" />.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.AddRestrictionGroup(IDS.Security.TokenProvider.TokenServerRestrictionGroup)">
            <summary>
            Adds a specified profile.
            </summary>
            <param name="group">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerRestrictionGroup" /> to add.
            </param>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.UpdateRestrictionGroup(IDS.Security.TokenProvider.TokenServerRestrictionGroup)">
            <summary>
            Update a specified restriction group.
            </summary>
            <param name="group">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerRestrictionGroup" /> to add.
            </param>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.DeleteRestrictionGroup(IDS.Security.TokenProvider.TokenServerRestrictionGroup)">
            <summary>
            Deletes a specified restriction group.
            </summary>
            <param name="group">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerRestrictionGroup" /> to delete.
            </param>
            <exception cref="T:System.InvalidOperationException">
            One or more profile are associated with the specified <paramref name="group"/>.
            </exception>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.GetRestriction(System.Int32)">
            <summary>
            Gets the restriction with a specified id.
            </summary>
            <returns>
            The <see cref="T:IDS.Security.TokenProvider.TokenServerRestrictionGroup" /> with the specified <param name="id" />.
            </returns>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.AddRestriction(IDS.Security.TokenProvider.TokenServerRestriction)">
            <summary>
            Adds a specified restriction.
            </summary>
            <param name="restriction">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerRestriction" /> to add.
            </param>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.UpdateRestriction(IDS.Security.TokenProvider.TokenServerRestriction)">
            <summary>
            Update a specified restriction.
            </summary>
            <param name="restriction">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerRestriction" /> to add.
            </param>
        </member>
        <member name="M:IDS.Security.TokenProvider.SqlTokenServerManager.DeleteRestriction(IDS.Security.TokenProvider.TokenServerRestriction)">
            <summary>
            Deletes a specified restriction.
            </summary>
            <param name="restriction">
            The <see cref="T:IDS.Security.TokenProvider.TokenServerRestriction" /> to delete.
            </param>
        </member>
        <member name="T:IDS.Security.TokenProvider.TokenServerProfile">
            <summary>
            Token Server Profile
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerProfile.ProfileId">
            <summary>
            Profile Id
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerProfile.RestrictionGroupId">
            <summary>
            Restriction Group Id
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerProfile.RestrictionGroupName">
            <summary>
            Restriction Group Name
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerProfile.Dataspace">
            <summary>
            Dataspace
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerProfile.Url">
            <summary>
            DefaultUrl
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerProfile.Settings">
            <summary>
            Settings
            </summary>
        </member>
        <member name="T:IDS.Security.TokenProvider.TokenServerProfileSetting">
            <summary>
            Token Server Profile Setting
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerProfileSetting.ProfileSettingId">
            <summary>
            Profile Setting Id
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerProfileSetting.ProfileId">
            <summary>
            Profile Id
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerProfileSetting.AppKey">
            <summary>
            AppKey
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerProfileSetting.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="T:IDS.Security.TokenProvider.TokenServerRestrictionGroup">
            <summary>
            Token Server Restriction Group
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerRestrictionGroup.RestrictionGroupId">
            <summary>
            Restriction Group Id
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerRestrictionGroup.IsDefaultAccessGranted">
            <summary>
            Is Default Access Granted
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerRestrictionGroup.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerRestrictionGroup.Restrictions">
            <summary>
            Restrictions
            </summary>
        </member>
        <member name="T:IDS.Security.TokenProvider.TokenServerRestriction">
            <summary>
            Token Server Restriction
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerRestriction.RestrictionId">
            <summary>
            Restriction Id
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerRestriction.RestrictionGroupId">
            <summary>
            Restriction Group Id
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerRestriction.TypeName">
            <summary>
            Type Name
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerRestriction.TypeValue">
            <summary>
            Type Value
            </summary>
        </member>
        <member name="T:IDS.Security.TokenProvider.TokenServerConfiguration">
            <summary>
            The TokenServerConfiguration class holds the configuration settings for the token server.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.TokenServerConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.TokenProvider.TokenServerConfiguration"/> class.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerConfiguration.TokenServerManager">
            <summary>
            Token Server Manager
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.TokenServerConfiguration.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.TokenProvider.TokenServerConfiguration"/> class.
            </summary>
            <param name="section">The XML section from the web.config.</param>
        </member>
        <member name="M:IDS.Security.TokenProvider.TokenServerConfiguration.LoadStandardConfiguration(System.Xml.XmlNode)">
            <summary>
            Loads the standard configuration from the XML section from the web.config.
            </summary>
            <param name="section">The XML section from the web.config.</param>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerConfiguration.TokenParameterName">
            <summary>
            The name of the parameter that contains the token ID (session ID).
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerConfiguration.SessionTtlSeconds">
            <summary>
            The number of seconds until the session is considered expired.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerConfiguration.DefaultAppUrl">
            <summary>
            The default application URL to use if the application key and value is not found in the
            configured AppUrl's.
            </summary>
            <remarks>
            This value can be null. If it is null, then no default is configured and an error will be
            raised if the application key and value is not found in the configured AppUrl's.
            </remarks>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerConfiguration.RemoveSessionWhenValidated">
            <summary>
            This setting determines whether to remove the session from the list of active sessions
            once it has been validated. This is normally true.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerConfiguration.AppUrls">
            <summary>
            Gets the list of configured applications.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerConfiguration.SessionStateServer">
            <summary>
            Gets the configured session state server.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerConfiguration.DataspaceParameterName">
            <summary>
            The name of the parameter that contains the dataspace name (dataspace).
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerConfiguration.DefaultProfile">
            <summary>
            Gets or sets the default profile.
            </summary>
            <value>The default profile.</value>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerConfiguration.Profiles">
            <summary>
            Gets the profiles associated with this token server instance.
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerConfiguration.ConnectionString">
            <summary>
            Gets or sets the Connection String. 
            </summary>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerConfiguration.ExpirationDateTime">
            <summary>
            Gets or sets the Expiration.
            </summary>
        </member>
        <member name="T:IDS.Security.TokenProvider.TokenServerSectionHandler">
             <summary>
             This class implements the IConfigurationSectionHandler and is used to initialize
             the token server based on the values in the app.config file.
             </summary>
             <example>
             app.config example
             <code>
             <![CDATA[
             <configuration>
               <configSections>
                 <sectionGroup name="ids.config">
                   <section name="tokenServer" type="IDS.TokenServer.TokenServerSectionHandler, IDS.TokenServer" />
                 </sectionGroup>
               </configSections>
               <ids.config>
            		<!-- 
            			- The tokenParamName is optional. It defaults to "token". This attribute sets the name
            		      of the querystring/form parameter to use to identify the session ID (token).
            			- The sessionTtlSeconds is optional. It defaults to 10. This attribute sets the number
            			  of seconds the session is valid.
            			- The removeSessionWhenValidated defaults to true. If this is set to false, the session 
            			  will be considered valid until its time to live (TTL) has expired. If the value is true,
            			  the session is invalidated as soon as the token has been validated once.
            			- The defaultAppUrl is optional. Remove it if you want to require a valid app to be found.
            
            			<sessionState mode="InProc|StateServer|SQLServer"
            				connectionString="tcp://localhost:5556/IDS.TokenServer.soap|sql connection string"/>
            			- mode: InProc		= In Process session state. No connection string for InProc.
            					StateServer	= Out-of-process session state. Can be on this computer or another computer. The 
            									connectionString configures the address to the remote object.
            					SQLServer	= SQL Server session state. The connectionString configures the connection to SQL Server.
            			Samples:
            			<sessionState mode="InProc"/>
            			<sessionState mode="SQLServer" 
            				connectionString="Application Name=IDS Token Session State Server;
            				data source=localhost;
            				Initial Catalog=IDS_TokenServer;
            				Trusted_Connection=yes" 
            			/>
            			<sessionState mode="StateServer" 
            				connectionString="tcp://localhost:5556/IDS.TokenServer.soap" 
            			/>
            						
            			- The app keys and values are case sensitive.
            			App Placeholders key:
            			{0} - Token
            			{1} - Cargo
            		-->
                 <tokenServer tokenParamName="token" sessionTtlSeconds="5" removeSessionWhenValidated="true" 
                  defaultAppUrl="http://localhost/portal/ssoentry.aspx?appid=portal&amp;token={0}{1}">
                   <sessionState mode="InProc|StateServer|SQLServer" connectionString="tcpip=server:port|sql connection string"/>
                   <app key="appid" value="esmt" url="http://localhost/portal/ssoentry.aspx?appid=esmt&amp;token={0}" />
                   <app key="appid" value="ma" url="http://localhost/portal/ssoentry.aspx?appid=ma&amp;token={0}" />
                   <app key="appid" value="als" url="http://localhost/portal/ssoentry.aspx?appid=als&amp;token={0}" />
                 </tokenServer>
               </ids.config>
             </configuration>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:IDS.Security.TokenProvider.TokenServerSectionHandler.#ctor">
            <summary>
            Creates an instance of the TokenServerSectionHandler class.
            </summary>
        </member>
        <member name="T:IDS.Security.TokenProvider.TokenServerSqlConfigurationProvider">
            <summary>
            The TokenServerSqlConfigurationProvider is an implementation of the ITokenServerConfigurationProvider
            that gets its configuration information from a SQL database.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.TokenServerSqlConfigurationProvider.GetConfiguration(System.Xml.XmlNode)">
            <summary>
            Gets the token server configuration from the SQL Server database.
            </summary>
            <param name="section">The XML section from the web.config file.</param>
            <returns></returns>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerSqlConfigurationProvider.ConfigurationHasChanged">
            <summary>
            Gets a value indicating whether the configuration has been changed since the last call to GetConfiguration().
            </summary>
            <value>
            	<c>true</c> if the configuration has changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.TokenProvider.TokenServerSqlConfigurationProvider.ConnectionService">
            <summary>
            Connection Service
            </summary>
        </member>
        <member name="T:IDS.Security.TokenProvider.TokenValidationException">
            <summary>
            The TokenValidationException is raised when an exception occurs within an <see cref="T:IDS.Security.TokenProvider.ITokenValidationService"/>.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.TokenValidationException.#ctor">
            <summary>
            Initializes a new instance of the SingleSignonException class.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.TokenValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SingleSignonException class.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.TokenValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SingleSignonException class.
            </summary>
        </member>
        <member name="M:IDS.Security.TokenProvider.TokenValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SingleSignonException class.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:IDS.Security.TrustedClient">
            <summary>
            Encompasses applicable database fields for TrustedClient
            </summary>
            <remarks>
            Excludes InsertDateTime, DeletedDateTime fields - no Use Case for User interaction
            </remarks>
        </member>
        <member name="P:IDS.Security.TrustedClient.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.TrustedClient.UserID">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.TrustedClient.ExternalID">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.TrustedClient.Nickname">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.TrustedClient.LastAccessDateTimeUtc">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.TrustedClient.AuthorizationDateTimeUtc">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Security.TrustedClientProvider">
            <summary>
             Implements interface for handling TrustedClient operations.
            </summary>
        </member>
        <member name="P:IDS.Security.TrustedClientProvider.MaxDaysSinceLastAccess">
            <summary>
            Maximum number of days since last access app status should change to unauthorized
            </summary>
        </member>
        <member name="M:IDS.Security.TrustedClientProvider.IsAuthorized(IDS.Security.TrustedClientAuthorizationInfo)">
            <summary>
            
            </summary>
            <param name="trustedClient"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.TrustedClientProvider.GetTrustedClients(System.String)">
            <summary>
            Return list of TrustedClient entries that are Authorized or need to be Authorized
            </summary>
            <param name="userID"></param>
            <remarks>
            Excludes entries that have DeletedDateTime field set
            </remarks>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.TrustedClientProvider.Authorize(System.String)">
            <summary>
            Sets AuthorizationDateTimeUtc on TrustedClient record
            </summary>
            <param name="id">The internal TrustedClient identifier.</param>
            <returns>Returns an instance of <see cref="T:IDS.Security.TrustedClient"/> with updated authorization state.</returns>
        </member>
        <member name="M:IDS.Security.TrustedClientProvider.Delete(System.String)">
            <summary>
            Sets DeletedFlagDateTime on TrustedClient record
            </summary>
            <param name="id"></param>
            <remarks>
            User will have to reauthorize to use TrustedClientID again
            </remarks>
            <returns>Returns the deleted instance of <see cref="T:IDS.Security.TrustedClient"/>.</returns>
        </member>
        <member name="T:IDS.Security.TrustedClientAuthorizationInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.TrustedClientAuthorizationInfo.UserID">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.TrustedClientAuthorizationInfo.ExternalID">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Security.TrustedClientAuthorizationInfo.Nickname">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Security.User">
            <summary>
            Default implementation of the <see cref="T:IDS.Security.IUser"/> interface.
            </summary>
            <remarks>
            A User is an authenticted person. The authentication is done against a set of credentials by a user provider.
            </remarks>
        </member>
        <member name="M:IDS.Security.User.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.User.#ctor(IDS.Security.IUserProvider,IDS.Security.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
            <param name="userProvider">The user provider that created this user instance.</param>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="M:IDS.Security.User.#ctor(IDS.Security.IUserProvider,IDS.Security.ICredentials,IDS.EntityModel.IPerson)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
            <param name="userProvider">The user provider.</param>
            <param name="credentials">The credentials.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:IDS.Security.User.#ctor(IDS.Security.IUserProvider,IDS.Security.ICredentials,IDS.EntityModel.IName)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
            <param name="userProvider">The user provider that created this user instance.</param>
            <param name="credentials">The credentials.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:IDS.Security.User.#ctor(IDS.Security.IUserProvider,IDS.Security.ICredentials,IDS.EntityModel.IName,IDS.EntityModel.IdentificationCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
            <param name="userProvider">The user provider that created this user instance.</param>
            <param name="credentials">The credentials.</param>
            <param name="name">The name.</param>
            <param name="identifications">The identifications.</param>
        </member>
        <member name="M:IDS.Security.User.#ctor(IDS.Security.IUserProvider,IDS.Security.ICredentials,IDS.EntityModel.IName,IDS.EntityModel.IAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
            <param name="userProvider">The user provider that created this user instance.</param>
            <param name="credentials">The credentials.</param>
            <param name="name">The name.</param>
            <param name="currentAddress">The current address.</param>
        </member>
        <member name="M:IDS.Security.User.#ctor(IDS.Security.IUserProvider,IDS.Security.ICredentials,IDS.EntityModel.IName,IDS.EntityModel.IAddress,IDS.EntityModel.AddressCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
            <param name="userProvider">The user provider that created this user instance.</param>
            <param name="credentials">The credentials.</param>
            <param name="name">The name.</param>
            <param name="currentAddress">The current address.</param>
            <param name="previousAddresses">The previous addresses.</param>
        </member>
        <member name="M:IDS.Security.User.#ctor(IDS.Security.IUserProvider,IDS.Security.ICredentials,IDS.EntityModel.IName,IDS.EntityModel.IAddress,IDS.EntityModel.AddressCollection,IDS.EntityModel.IdentificationCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
            <param name="userProvider">The user provider that created this user instance.</param>
            <param name="credentials">The credentials.</param>
            <param name="name">The name.</param>
            <param name="currentAddress">The current address.</param>
            <param name="previousAddresses">The previous addresses.</param>
            <param name="identifications">The identifications.</param>
        </member>
        <member name="M:IDS.Security.User.#ctor(IDS.Security.IUserProvider,IDS.Security.ICredentials,IDS.EntityModel.IName,IDS.EntityModel.IAddress,IDS.EntityModel.AddressCollection,IDS.EntityModel.IdentificationCollection,IDS.EntityModel.PhoneNumberCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
            <param name="userProvider">The user provider that created this user instance.</param>
            <param name="credentials">The credentials.</param>
            <param name="name">The name.</param>
            <param name="currentAddress">The current address.</param>
            <param name="previousAddresses">The previous addresses.</param>
            <param name="identifications">The identifications.</param>
            <param name="phoneNumbers">The phone numbers.</param>
        </member>
        <member name="M:IDS.Security.User.#ctor(IDS.Security.IUser)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.User"/> class.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="P:IDS.Security.User.UserProvider">
            <summary>
            Gets the user provider that created this user instance.
            </summary>
            <value></value>
        </member>
        <member name="P:IDS.Security.User.Credentials">
            <summary>
            Gets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="P:IDS.Security.User.AuthenticationToken">
            <summary>
            Gets the authentication token associated with this user. It can be null if the user provider doesn't support authentication tokens.
            </summary>
            <value></value>
        </member>
        <member name="P:IDS.Security.User.UserID">
            <summary>
            Gets or sets the user ID which uniquely identifies a user within a user provider.
            </summary>
            <value>The user ID.</value>
        </member>
        <member name="P:IDS.Security.User.Permissions">
            <summary>
            Gets the permissions associated with this user.
            </summary>
            <value>The permissions associated with this user.</value>
        </member>
        <member name="P:IDS.Security.User.Features">
            <summary>
            Gets the features available for this user.
            </summary>
        </member>
        <member name="M:IDS.Security.User.RefreshFeatures">
            <summary>
            Refreshes the <see cref="P:IDS.Security.User.Features" /> set to reflect changes made after it was loaded.
            </summary>
        </member>
        <member name="P:IDS.Security.User.Roles">
            <summary>
            Gets the roles associated with this user.
            </summary>
            <value>The roles associated with this user.</value>
        </member>
        <member name="P:IDS.Security.User.IsAnonymous">
            <summary>
            Gets a value indicating whether this instance is anonymous.
            </summary>
            <value>
            	<c>true</c> if this instance is anonymous; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.User.IsAuthenticated">
            <summary>
            Gets a value indicating whether this instance is authenticated.
            </summary>
            <value>
            	<c>true</c> if this instance is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.User.PasswordChangeIsRequired">
            <summary>
            Gets a value indicating whether a password change is required.
            </summary>
            <value>
            	<c>true</c> if this a password change is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.User.RequiredPasswordChangeReason">
            <summary>
            Gets the reason a password change is required.
            </summary>
            <value>The reason a password change is required.</value>
        </member>
        <member name="P:IDS.Security.User.EmailAddressUpdateIsRequired">
            <summary>
            Gets a value indicating whether an email address update is required.
            </summary>
            <value>
            	<c>true</c> if an email address update is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.User.AddressUpdateIsRequired">
            <summary>
            Gets a value indicating whether an address update is required.
            </summary>
            <value>
            	<c>true</c> if an address update is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.User.PreferredCulture">
            <summary>
            Gets or sets the preferred culture.
            </summary>
            <value>The preferred culture.</value>
        </member>
        <member name="P:IDS.Security.User.LastUnsuccessfulLogin">
            <summary>
            Gets or sets the last unsuccessful login date.
            </summary>
            <value>The last unsuccessful login date.</value>
        </member>
        <member name="P:IDS.Security.User.LastSuccessfulLogin">
            <summary>
            Gets or sets the last successful login date.
            </summary>
            <value>The last successful login date.</value>
        </member>
        <member name="P:IDS.Security.User.LastSuccessfulLoginIPAddress">
            <inheritdoc />
        </member>
        <member name="P:IDS.Security.User.CurrentLoginDateTimeUtc">
            <inheritdoc />
        </member>
        <member name="P:IDS.Security.User.LastPasswordChange">
            <summary>
            Gets or sets the last password change date.
            </summary>
            <value>The last password change date.</value>
        </member>
        <member name="P:IDS.Security.User.InsertDateTimeUtc">
            <summary>
            Gets or sets user creation date.
            </summary>
            <value>The user creation date.</value>
        </member>
        <member name="P:IDS.Security.User.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:IDS.Security.User.TimeZone">
            <summary>
            Gets or sets the user's time zone.
            </summary>
            <value>The user's time zone.</value>
        </member>
        <member name="M:IDS.Security.User.ToString">
            <summary>
            Returns a <see cref="T:IDS.Security.User"></see> that represents the current <see cref="T:IDS.Security.User"></see>. In the default
            implementation of User, the User ID is returned.
            </summary>
            <returns>
            A <see cref="T:IDS.Security.User"></see> that represents the current <see cref="T:IDS.Security.User"></see>.
            </returns>
        </member>
        <member name="M:IDS.Security.User.Clone">
            <summary>
            Creates a new User object that is a copy of the current instance.
            </summary>
            <returns>
            A new User object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:IDS.Security.User.IDS#Security#IRoleConsumer#UserRolesDelegate">
            <summary>
            Gets or sets the user roles delegate.
            </summary>
            <value>The user roles delegate.</value>
        </member>
        <member name="P:IDS.Security.User.IDS#Security#IPermissionConsumer#UserPermissionsDelegate">
            <summary>
            Gets or sets the user permissions delegate.
            </summary>
            <value>The user permissions delegate.</value>
        </member>
        <member name="T:IDS.Security.UserCache">
            <summary>
            Represents a cache of users.
            </summary>
        </member>
        <member name="P:IDS.Security.UserCache.Item(System.String)">
            <summary>
            Gets the user with a specified user ID.
            </summary>
            <param name="userId">
            The <see cref="P:IDS.Security.IUser.UserID" /> of the <see cref="T:IDS.Security.IUser" /> to retrieve.
            </param>
            <returns>
            The <see cref="T:IDS.Security.IUser" /> with the specified <paramref name="userId" />,
            or <see langword="null" /> if the <paramref name="userId" /> was not found.
            </returns>
        </member>
        <member name="M:IDS.Security.UserCache.Add(IDS.Security.IUser)">
            <summary>
            Adds a specified user to the cache.
            </summary>
            <param name="user">
            The <see cref="T:IDS.Security.IUser" /> to add to the cache.
            </param>
        </member>
        <member name="M:IDS.Security.UserCache.FillCache(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves a specified collection of users and adds them to the cache.
            </summary>
            <param name="userIds">
            The IDs of the users to add to the cache.
            </param>
        </member>
        <member name="M:IDS.Security.UserCache.DoGetUser(System.String)">
            <summary>
            Retrieves the user with a specified user ID.
            </summary>
            <param name="userId">
            The <see cref="P:IDS.Security.IUser.UserID" /> of the <see cref="T:IDS.Security.IUser" /> to retrieve.
            </param>
            <returns>
            The <see cref="T:IDS.Security.IUser" /> with the specified <paramref name="userId" />,
            or <see langword="null" /> if the <paramref name="userId" /> was not found.
            </returns>
        </member>
        <member name="T:IDS.Security.UserCacheManager">
            <summary>
            The UserCacheManager is responsible for caching objects associated with user authentication. This is an abstract class. 
            Implementations of this class might cache in an ASP.NET Session, a SQL database or file.
            </summary>
        </member>
        <member name="M:IDS.Security.UserCacheManager.GetCurrentUser">
            <summary>
            Gets the current user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.UserCacheManager.SetCurrentUser(IDS.Security.IUser)">
            <summary>
            Sets the current user.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:IDS.Security.UserCacheManager.GetCachedRoles(IDS.Security.IUser)">
            <summary>
            Gets the cached roles for the particular user.
            </summary>
            <param name="user">The user.</param>
            <returns>Returns a collection of roles associated with the user or null if nothing is cached.</returns>
        </member>
        <member name="M:IDS.Security.UserCacheManager.SetCachedRoles(IDS.Security.IUser,IDS.Security.RoleCollection)">
            <summary>
            Adds the roles for the particular user to the cache.
            </summary>
            <param name="user">The user.</param>
            <param name="roles">The roles to cache.</param>
        </member>
        <member name="M:IDS.Security.UserCacheManager.GetCachedPermissions(IDS.Security.IUser)">
            <summary>
            Gets the cached permissions for the particular user.
            </summary>
            <param name="user">The user.</param>
            <returns>Returns a collection of permissions associated with the user or null if nothing is cached.</returns>
        </member>
        <member name="M:IDS.Security.UserCacheManager.SetCachedPermissions(IDS.Security.IUser,IDS.Permissions.PermissionSet)">
            <summary>
            Adds the permissions for the particular user to the cache.
            </summary>
            <param name="user">The user.</param>
            <param name="permissions">The permissions to cache.</param>
        </member>
        <member name="M:IDS.Security.UserCacheManager.ClearCachedRoles(IDS.Security.IUser)">
            <summary>
            Clears the cached roles for the specified user.
            </summary>
            <param name="user">The user to clear the cached roles for.</param>
        </member>
        <member name="M:IDS.Security.UserCacheManager.ClearCachedPermissions(IDS.Security.IUser)">
            <summary>
            Clears the cached permissions for the specified user.
            </summary>
            <param name="user">The user to clear the cached permissions for.</param>
        </member>
        <member name="M:IDS.Security.UserCacheManager.ClearCache(IDS.Security.IUser)">
            <summary>
            Clears the cached items for the specified user.
            </summary>
            <param name="user">The user to clear the cached items for.</param>
        </member>
        <member name="T:IDS.Security.UserCollection`1">
            <summary>
            A collection of <see cref="T:IDS.Security.IUser"/>-derived objects.
            </summary>
            <typeparam name="T">The type of user contained in the collection</typeparam>
        </member>
        <member name="M:IDS.Security.UserCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserCollection`1"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.UserCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserCollection`1"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:IDS.Security.UserCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserCollection`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:IDS.Security.UserCollection`1.GetUserByLoginName(System.String)">
            <summary>
            Gets a user from the collection based on the login name passed, null if not found
            </summary>
            <param name="loginName">Name of the login.</param>
            <returns>An <see cref="T:IDS.Security.IUser"/> (or derived) object representing the user with the specified login name, or null if not found.</returns>
        </member>
        <member name="M:IDS.Security.UserCollection`1.GetUserByID(System.String)">
            <summary>
            Gets the user by ID.
            </summary>
            <param name="userID">The user ID.</param>
        </member>
        <member name="M:IDS.Security.UserCollection`1.UsersInRole(IDS.Security.Role)">
            <summary>
            Filters this UserCollection to only users who have the specified role.
            </summary>
            <param name="role">The role.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Security.UserManager">
            <summary>
            The UserManager class manages a User including authentication, roles and permissions.
            </summary>
        </member>
        <member name="P:IDS.Security.UserManager.Default">
            <summary>
            Gets or sets the default UserManager instance.
            </summary>
            <value>The default UserManager instance.</value>
        </member>
        <member name="P:IDS.Security.UserManager.DefaultCurrentUser">
            <summary>
            Gets the current user for the default <see cref="T:IDS.Security.UserManager" />.
            </summary>
        </member>
        <member name="M:IDS.Security.UserManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserManager"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.UserManager.#ctor(IDS.Security.IUserProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserManager"/> class.
            </summary>
            <param name="userProvider">The user provider that is responsible for authentication of users.</param>
        </member>
        <member name="M:IDS.Security.UserManager.#ctor(IDS.Security.IUserProvider,IDS.Security.RoleManager)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserManager"/> class.
            </summary>
            <param name="userProvider">The user provider that is responsible for authentication of users.</param>
            <param name="roleManager">The role manager that is responsible for providing roles associated with a user.</param>
        </member>
        <member name="M:IDS.Security.UserManager.#ctor(IDS.Security.IUserProvider,IDS.Security.RoleManager,IDS.Permissions.PermissionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserManager"/> class.
            </summary>
            <param name="userProvider">The user provider that is responsible for authentication of users.</param>
            <param name="roleManager">The role manager that is responsible for providing roles associated with a user.</param>
            <param name="permissionManager">The permission manager that is responsible for providing permissions associate with a user.</param>
        </member>
        <member name="M:IDS.Security.UserManager.#ctor(IDS.Security.IUserProvider,System.Collections.IDictionary,IDS.Security.RoleManager,IDS.Permissions.PermissionManager,IDS.Security.UserCacheManager)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserManager"/> class.
            </summary>
            <param name="invariantUserProvider">The invariant user provider that is responsible for authentication of users. This user
            provider is used if a user provider for the current UI culture can not be found.</param>
            <param name="culturedUserProviders">A collection of user providers for different cultures. This can be null. In that case, 
            the invariant user provider is used.</param>
            <param name="roleManager">The role manager that is responsible for providing roles associated with a user. This can be null 
            to disable roles.</param>
            <param name="permissionManager">The permission manager that is responsible for providing permissions associate with a user. 
            This can be null to disable permissions.</param>
            <param name="cacheManager">The cache manager that is responsible for caching data. This can be null to disable caching.</param>
        </member>
        <member name="M:IDS.Security.UserManager.#ctor(IDS.Security.IUserProvider,System.Collections.IDictionary,IDS.Security.RoleManager,IDS.Permissions.PermissionManager,IDS.Security.UserCacheManager,IDS.Features.FeatureManager)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserManager"/> class.
            </summary>
            <param name="invariantUserProvider">The invariant user provider that is responsible for authentication of users. This user
            provider is used if a user provider for the current UI culture can not be found.</param>
            <param name="culturedUserProviders">A collection of user providers for different cultures. This can be null. In that case, 
            the invariant user provider is used.</param>
            <param name="roleManager">The role manager that is responsible for providing roles associated with a user. This can be null 
            to disable roles.</param>
            <param name="permissionManager">The permission manager that is responsible for providing permissions associate with a user. 
            This can be null to disable permissions.</param>
            <param name="cacheManager">The cache manager that is responsible for caching data. This can be null to disable caching.</param>
            <param name="featureManager"> </param>
        </member>
        <member name="P:IDS.Security.UserManager.UserProvider">
            <summary>
            Gets the user provider that is responsible for authentication of users.
            </summary>
            <value>The user provider that is responsible for authentication of users.</value>
        </member>
        <member name="P:IDS.Security.UserManager.CurrentUser">
            <summary>
            Gets or sets the current user for this thread.
            </summary>
            <value>The current user.</value>
            <remarks>
            The persistence of this value depends on the behavior of the CacheManager.
            </remarks>
        </member>
        <member name="P:IDS.Security.UserManager.AnonymousUser">
            <summary>
            Gets the anonymous user.
            </summary>
            <value>The anonymous user.</value>
        </member>
        <member name="P:IDS.Security.UserManager.InvariantUserProvider">
            <summary>
            Gets the user provider the invariant user provider.
            </summary>
            <value>The user provider that is responsible for authentication of users.</value>
        </member>
        <member name="P:IDS.Security.UserManager.CulturedUserProviders">
            <summary>
            Gets or sets the cultured user providers collection.
            </summary>
            <value>The user provider that is responsible for authentication of users.</value>
        </member>
        <member name="P:IDS.Security.UserManager.RoleManager">
            <summary>
            Gets the role manager that is responsible for providing roles associated with a user.
            </summary>
            <value>The role manager that is responsible for providing roles associated with a user.</value>
        </member>
        <member name="P:IDS.Security.UserManager.FeatureManager">
            <summary>
            Gets the feature provider that is responsible for providing features associated with a user.
            </summary>
        </member>
        <member name="P:IDS.Security.UserManager.PermissionManager">
            <summary>
            Gets the permission manager that is responsible for providing permissions associated with a user.
            </summary>
            <value>The permission manager that is responsible for providing permissions associated with a user.</value>
        </member>
        <member name="P:IDS.Security.UserManager.CacheManager">
            <summary>
            Gets the cache manager that is responsible for caching information associated with a user.
            </summary>
            <value>The permission manager that is responsible for caching information associated with a user.</value>
        </member>
        <member name="M:IDS.Security.UserManager.AuthenticateRequest">
            <summary>
            The method is called to preauthenticate the request. If the user provider is also an <see cref="T:IDS.Security.ICredentialsProvider"/>,
            and it can authenticate the request, the appropriate credentials for the user are returned. Those credentials can be 
            used to authenticate the user.
            </summary>
            <returns>Returns an <see cref="T:IDS.Security.ICredentials"/> object or null if not able to authenticate.</returns>
        </member>
        <member name="M:IDS.Security.UserManager.PrerequestProcessing(IDS.Security.IUser)">
            <summary>
            Called by the framework upon every request. This allows the user manager to preprocess
            the request.
            </summary>
        </member>
        <member name="M:IDS.Security.UserManager.AuthenticateCredentials(IDS.Security.ICredentials)">
            <summary>
            Attempts to authenticate the given credentials.
            </summary>
            <param name="credentials">The credentials to authenticate.</param>
            <returns>
            A <see cref="T:IDS.Security.IUser"/> object that contains the authenticated user data for the given credentials.
            </returns>
            <exception cref="T:IDS.Security.AuthenticationException">The AuthenticationException is thrown if the credentials are unable 
            to be authenticated.</exception>
        </member>
        <member name="M:IDS.Security.UserManager.AuthenticateCredentials(IDS.Security.IUserProvider,IDS.Security.ICredentials)">
            <summary>
            Attempts to authenticate the given credentials.
            </summary>
            <param name="userProvider">The user provider to use to authenticate credentials.</param>
            <param name="credentials">The credentials to authenticate.</param>
            <returns>
            A <see cref="T:IDS.Security.IUser"/> object that contains the authenticated user data for the given credentials.
            </returns>
            <exception cref="T:IDS.Security.AuthenticationException">The AuthenticationException is thrown if the credentials are unable
            to be authenticated.</exception>
        </member>
        <member name="M:IDS.Security.UserManager.GetRolesForUser(IDS.Security.IUser)">
            <summary>
            A method that is called by the UserRolesDelegate to get the roles for user.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.UserManager.GetPermissionsForUser(IDS.Security.IUser)">
            <summary>
            A method that is called by the UserPermissionsDelegate to get the roles for user.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Security.UserManager.InitializeUser(IDS.Security.IUser)">
            <summary>
            Initializes the user with the appropriate delegates for the user manager.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:IDS.Security.UserManager.GetUser(System.String)">
            <summary>
            Gets the user information for a particular user ID.
            </summary>
            <param name="userID">The user ID for the user to retrieve.</param>
            <returns>
            Returns an <see cref="T:IDS.Security.IUser"/> object for the user ID. If the user ID is not found, the return
            value would be null.
            </returns>
        </member>
        <member name="M:IDS.Security.UserManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:IDS.Security.UserManager.NullUserCacheManager">
            <summary>
            The NullUserCacheManager is an implementation of the UserCacheManager that never caches anything and always
            returns null. This is useful for a default cache manager if one was not assigned.
            </summary>
        </member>
        <member name="M:IDS.Security.UserManager.NullUserCacheManager.GetCachedRoles(IDS.Security.IUser)">
            <summary>
            Gets the cached roles for the particular user.
            </summary>
            <param name="user">The user.</param>
            <returns>
            Returns a collection of roles associated with the user or null if nothing is cached.
            </returns>
        </member>
        <member name="M:IDS.Security.UserManager.NullUserCacheManager.SetCachedRoles(IDS.Security.IUser,IDS.Security.RoleCollection)">
            <summary>
            Adds the roles for the particular user to the cache.
            </summary>
            <param name="user">The user.</param>
            <param name="roles">The roles to cache.</param>
        </member>
        <member name="M:IDS.Security.UserManager.NullUserCacheManager.GetCachedPermissions(IDS.Security.IUser)">
            <summary>
            Gets the cached permissions for the particular user.
            </summary>
            <param name="user">The user.</param>
            <returns>
            Returns a collection of permissions associated with the user or null if nothing is cached.
            </returns>
        </member>
        <member name="M:IDS.Security.UserManager.NullUserCacheManager.SetCachedPermissions(IDS.Security.IUser,IDS.Permissions.PermissionSet)">
            <summary>
            Adds the permissions for the particular user to the cache.
            </summary>
            <param name="user">The user.</param>
            <param name="permissions"></param>
        </member>
        <member name="M:IDS.Security.UserManager.NullUserCacheManager.ClearCachedRoles(IDS.Security.IUser)">
            <summary>
            Clears the cached roles for the specified user.
            </summary>
            <param name="user">The user to clear the cached roles for.</param>
        </member>
        <member name="M:IDS.Security.UserManager.NullUserCacheManager.ClearCachedPermissions(IDS.Security.IUser)">
            <summary>
            Clears the cached permissions for the specified user.
            </summary>
            <param name="user">The user to clear the cached permissions for.</param>
        </member>
        <member name="T:IDS.Security.UserProviderCollection">
            <summary>
            The UserProviderCollection contains a collection of IUserProvider instances.
            </summary>
        </member>
        <member name="M:IDS.Security.UserProviderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserProviderCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.UserProviderCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Security.IUserProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserProviderCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Security.UserProviderCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserProviderCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="T:IDS.Security.UserSearchCriteria">
            <summary>
            The UserSearchCriteria class encapsulates the information for searching for a user.
            </summary>
        </member>
        <member name="F:IDS.Security.UserSearchCriteria.UnlimitedResults">
            <summary>
            A constant that is used with the MaxResults parameter to denote to return an unlimited number of users.
            </summary>
        </member>
        <member name="M:IDS.Security.UserSearchCriteria.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserSearchCriteria"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.UserSearchCriteria.#ctor(IDS.Security.UserSearchType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserSearchCriteria"/> class.
            </summary>
            <param name="searchType">Type of the search.</param>
            <param name="searchData">The search data.</param>
        </member>
        <member name="M:IDS.Security.UserSearchCriteria.#ctor(IDS.Security.UserSearchType,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserSearchCriteria"/> class.
            </summary>
            <param name="searchType">Type of the search.</param>
            <param name="searchData">The search data.</param>
            <param name="maxResults">The maximum number of users to return in the results.</param>
        </member>
        <member name="M:IDS.Security.UserSearchCriteria.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserSearchCriteria"/> class.
            </summary>
            <param name="customSearchType">If this is a custom search, the type of the custom search.</param>
            <param name="searchData">The search data.</param>
        </member>
        <member name="M:IDS.Security.UserSearchCriteria.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserSearchCriteria"/> class.
            </summary>
            <param name="customSearchType">If this is a custom search, the type of the custom search.</param>
            <param name="searchData">The search data.</param>
            <param name="maxResults">The maximum number of users to return in the results.</param>
        </member>
        <member name="M:IDS.Security.UserSearchCriteria.#ctor(IDS.Security.UserSearchType,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserSearchCriteria"/> class.
            </summary>
            <param name="searchType">Type of the search.</param>
            <param name="searchData">The search data.</param>
            <param name="customSearchType">If this is a custom search, the type of the custom search.</param>
            <param name="maxResults">The maximum number of users to return in the results.</param>
        </member>
        <member name="P:IDS.Security.UserSearchCriteria.SearchType">
            <summary>
            Gets or sets the type of the search. If the value is <see cref="F:IDS.Security.UserSearchType.CustomSearch"/>, the CustomSearchType
            property contains the custom search type.
            </summary>
            <value>The type of the search.</value>
        </member>
        <member name="P:IDS.Security.UserSearchCriteria.CustomSearchType">
            <summary>
            Gets or sets the type of the custom search. This value is only relevant if <see cref="P:IDS.Security.UserSearchCriteria.SearchType"/> 
            is <see cref="F:IDS.Security.UserSearchType.CustomSearch"/>.
            </summary>
            <value>The type of the custom search.</value>
        </member>
        <member name="P:IDS.Security.UserSearchCriteria.SearchData">
            <summary>
            Gets or sets the search data that is used to search for the specific users.
            </summary>
            <value>The search data that is used to search for specific users.</value>
        </member>
        <member name="P:IDS.Security.UserSearchCriteria.MaxResults">
            <summary>
            Gets or sets the maximum number of users to return from the search.
            </summary>
            <value>The maximum number of users to return from the search.</value>
        </member>
        <member name="T:IDS.Security.UserSearchType">
            <summary>
            The UserProviderSearchType enumeration determines the types of searches that can be supported by a user provider.
            </summary>
        </member>
        <member name="F:IDS.Security.UserSearchType.SearchByFirstName">
            <summary>
            Search by first name.
            </summary>
        </member>
        <member name="F:IDS.Security.UserSearchType.SearchByLastName">
            <summary>
            Search by last name.
            </summary>
        </member>
        <member name="F:IDS.Security.UserSearchType.SearchByName">
            <summary>
            Search by name (first, last or full name i.e ("firstname{space}lastname")).
            </summary>
        </member>
        <member name="F:IDS.Security.UserSearchType.SearchByTID">
            <summary>
            Search by tax ID (SSN).
            </summary>
        </member>
        <member name="F:IDS.Security.UserSearchType.SearchByDL">
            <summary>
            Search by drivers license number.
            </summary>
        </member>
        <member name="F:IDS.Security.UserSearchType.SearchByLastRefreshed">
            <summary>
            Search by Last Login
            </summary>
        </member>
        <member name="F:IDS.Security.UserSearchType.SearchByLoginName">
            <summary>
            Search by Last Login
            </summary>
        </member>
        <member name="F:IDS.Security.UserSearchType.SearchByUserID">
            <summary>
            Search by internal User ID
            </summary>
        </member>
        <member name="F:IDS.Security.UserSearchType.CustomSearch">
            <summary>
            A custom search type supported by a user provider
            </summary>
        </member>
        <member name="F:IDS.Security.UserSearchType.SearchByNameOrLoginName">
            <summary>
            Search by name (first, last, full name, or login name i.e ("firstname{space}lastname")).
            </summary>
        </member>
        <member name="T:IDS.Security.UserSearchTypeCollection">
            <summary>
            The UserSearchTypeCollection class contain a collection of <see cref="T:IDS.Security.UserSearchType"/> enumerations. This 
            collection is used by the <see cref="T:IDS.Security.ISearchableUserProvider"/> interface to specify what types of searching
            the interface supports.
            </summary>
        </member>
        <member name="M:IDS.Security.UserSearchTypeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserSearchTypeCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Security.UserSearchTypeCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Security.UserSearchType})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserSearchTypeCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Security.UserSearchTypeCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Security.UserSearchTypeCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="P:IDS.Security.UserSearchTypeCollection.SupportsSearchingByName">
            <summary>
            Gets a value indicating whether searching by name is supported.
            </summary>
            <value>
            	<c>true</c> if searching by name is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.UserSearchTypeCollection.SupportsSearchingByLastName">
            <summary>
            Gets a value indicating whether searching by last name is supported.
            </summary>
            <value>
            	<c>true</c> if searching by last name is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.UserSearchTypeCollection.SupportsSearchingByFirstName">
            <summary>
            Gets a value indicating whether searching by first name is supported.
            </summary>
            <value>
            	<c>true</c> if searching by first name is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.UserSearchTypeCollection.SupportsSearchingByTaxID">
            <summary>
            Gets a value indicating whether searching by tax ID (SSN) is supported.
            </summary>
            <value>
            	<c>true</c> if searching by name is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.UserSearchTypeCollection.SupportsSearchingByDriversLicense">
            <summary>
            Gets a value indicating whether searching by drivers license is supported.
            </summary>
            <value>
            	<c>true</c> if searching by drivers license is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.UserSearchTypeCollection.SupportsCustomSearch">
            <summary>
            Gets a value indicating whether custom searches are supported. If this property is true,
            the <see cref="P:IDS.Security.UserSearchTypeCollection.SupportedCustomSearches"/> property contains a collection of custom
            searches supported.
            </summary>
            <value>
            	<c>true</c> if custom searches are supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Security.UserSearchTypeCollection.SupportedCustomSearches">
            <summary>
            Gets a collection of supported custom searches.
            </summary>
            <value>The collection of supported custom searches.</value>
        </member>
        <member name="T:IDS.EnumHelper">
            <summary>
            The EnumHelper class contains static methods for common functions involving enums.
            </summary>
        </member>
        <member name="M:IDS.EnumHelper.GetEnumValueDescription``1(``0)">
            <summary>
            Gets the description for the specified enum value
            </summary>
            <typeparam name="T">Must be an enum type.</typeparam>
            <param name="enumValue">The enum value.</param>
            <returns>The value of the <see cref="T:System.ComponentModel.DescriptionAttribute"/> if defined for the enum value, otherwise <see langword="null" />.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <typeparamref name="T"/> is not an enum type.</exception>
        </member>
        <member name="M:IDS.EnumHelper.HasMultipleFlags(System.Enum)">
            <summary>
            Used to determine if an enum decorated with Flags attribute contains more than one value
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Features.Feature">
            <summary>
            Stores the settings for a feature.
            </summary>
        </member>
        <member name="M:IDS.Features.Feature.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Features.Feature" /> class.
            </summary>
            <param name="definitionId">
            The <see cref="P:IDS.Features.FeatureDefinition.Id" /> of the <see cref="T:IDS.Features.FeatureDefinition" /> that defines the feature.
            </param>
        </member>
        <member name="M:IDS.Features.Feature.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Features.Feature" /> class.
            </summary>
            <param name="definitionId">
            The <see cref="P:IDS.Features.FeatureDefinition.Id" /> of the <see cref="T:IDS.Features.FeatureDefinition" /> that defines the feature.
            </param>
            <param name="key">
            A string that uniquely identifies the <see cref="T:IDS.Features.Feature" /> instance among those
            with the same <see cref="P:IDS.Features.Feature.DefinitionId" />.
            </param>
        </member>
        <member name="P:IDS.Features.Feature.DefinitionId">
            <summary>
            Gets the ID of the <see cref="T:IDS.Features.FeatureDefinition" /> that defines the feature.
            </summary>
            <value>
            The <see cref="P:IDS.Features.FeatureDefinition.Id" /> of the <see cref="T:IDS.Features.FeatureDefinition" /> that defines the feature.
            </value>
        </member>
        <member name="P:IDS.Features.Feature.Key">
            <summary>
            Gets a string that uniquely identifies the <see cref="T:IDS.Features.Feature" /> instance among those
            with the same <see cref="P:IDS.Features.Feature.DefinitionId" />.
            </summary>
            <value>
            A string that uniquely identifies the <see cref="T:IDS.Features.Feature" /> instance among those
            with the same <see cref="P:IDS.Features.Feature.DefinitionId" />.
            </value>
        </member>
        <member name="P:IDS.Features.Feature.Enabled">
            <summary>
            Gets or sets a value that indicates whether the feature is enabled or disabled.
            </summary>
        </member>
        <member name="T:IDS.Features.FeatureAuditLogEntry">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Features.FeatureAuditLogEntry.#ctor(IDS.Security.IUser,System.Boolean,System.Xml.Linq.XElement)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="result"></param>
            <param name="featureSets"></param>
        </member>
        <member name="M:IDS.Features.FeatureAuditLogEntry.PersistToSql(System.Data.SqlClient.SqlTransaction)">
            <summary>
            
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="T:IDS.Features.FeatureContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureContext.User">
            <summary>
            Gets or sets the user whose features are being worked on.
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureContext.CurrentUser">
            <summary>
            Gets or sets the current user.
            </summary>
        </member>
        <member name="T:IDS.Features.FeatureDataService">
            <summary>
            
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Features.FeatureDataService.VerifyConfigurations(IDS.Features.FeatureKeyProviderMappingCollection)">
            <summary>
            
            </summary>
            <param name="featureKeyProviderMappings">
            The collection of key provider mappings configured in <see cref="T:IDS.Features.FeatureManager" />.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureDataService.DeleteFeatureSet(System.String)">
            <summary>
            Deletes a specified feature set.
            </summary>
            <param name="featureSetName">
            The name of the feature set to delete.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureDataService.LoadFeatureValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the value of each feature setting in a specified collection of feature sets.
            </summary>
            <param name="featureSetNames">
            The names of the feature sets to load.
            </param>
            <returns>
            A <see cref="T:IDS.Features.FeatureValueCollection" />.
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureDataService.LoadFeatureValues(System.Collections.Generic.IEnumerable{System.String},IDS.Features.FeatureKeyProviderMappingCollection)">
            <summary>
            Loads the value of each feature setting in a specified collection of feature sets.
            </summary>
            <param name="featureSetNames">
            The names of the feature sets to load.
            </param>
            <param name="featureKeyProviderMappings">
            The collection of key provider mappings configured in <see cref="T:IDS.Features.FeatureManager" />.
            </param>
            <returns>
            A <see cref="T:IDS.Features.FeatureValueCollection" />.
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureDataService.LoadFeatureValues(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Loads the value of each of a specified subset of feature settings in a specified collection of feature sets.
            </summary>
            <param name="featureSetNames">
            The names of the feature sets to load.
            </param>
            <param name="includeDefinitionIds">
            The IDs of the feature definitions to load.
            </param>
            <returns>
            A <see cref="T:IDS.Features.FeatureValueCollection" />.
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureDataService.LoadFeatureValues(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Guid},IDS.Features.FeatureKeyProviderMappingCollection)">
            <summary>
            Loads the value of each of a specified subset of feature settings in a specified collection of feature sets.
            </summary>
            <param name="featureSetNames">
            The names of the feature sets to load.
            </param>
            <param name="includeDefinitionIds">
            The IDs of the feature definitions to load.
            </param>
            <param name="featureKeyProviderMappings">
            The collection of key provider mappings configured in <see cref="T:IDS.Features.FeatureManager" />.
            </param>
            <returns>
            A <see cref="T:IDS.Features.FeatureValueCollection" />.
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureDataService.SaveFeatureValues(System.Collections.Generic.IEnumerable{System.String},IDS.Features.FeatureValueCollection)">
            <summary>
            Saves the value of each feature setting in a specified collection of feature sets.
            </summary>
            <param name="featureSetNames">
            The names of the feature sets to save.
            </param>
            <param name="values">
            A <see cref="T:IDS.Features.FeatureValueCollection" />.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureDataService.SaveFeatureValues(System.Collections.Generic.IEnumerable{System.String},IDS.Features.FeatureValueCollection,IDS.Features.FeatureKeyProviderMappingCollection)">
            <summary>
            Saves the value of each feature setting in a specified collection of feature sets.
            </summary>
            <param name="featureSetNames">
            The names of the feature sets to save.
            </param>
            <param name="values">
            A <see cref="T:IDS.Features.FeatureValueCollection" />.
            </param>
            <param name="featureKeyProviderMappings">
            The collection of key provider mappings configured in <see cref="T:IDS.Features.FeatureManager" />.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureDataService.SaveChangedFeatureValues(System.Collections.Generic.IEnumerable{System.String},IDS.Features.FeatureValueCollection)">
            <summary>
            Saves the value of each changed feature setting in a specified collection of feature sets.
            </summary>
            <param name="featureSetNames">
            The names of the feature sets to save.
            </param>
            <param name="values">
            A <see cref="T:IDS.Features.FeatureValueCollection" />.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureDataService.SaveChangedFeatureValues(System.Collections.Generic.IEnumerable{System.String},IDS.Features.FeatureValueCollection,IDS.Features.FeatureKeyProviderMappingCollection)">
            <summary>
            Saves the value of each changed feature setting in a specified collection of feature sets.
            </summary>
            <param name="featureSetNames">
            The names of the feature sets to save.
            </param>
            <param name="values">
            A <see cref="T:IDS.Features.FeatureValueCollection" />.
            </param>
            <param name="featureKeyProviderMappings">
            The collection of key provider mappings configured in <see cref="T:IDS.Features.FeatureManager" />.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureDataService.ProtectFeatureSettingKeys(System.Xml.Linq.XElement,IDS.Features.FeatureKeyProviderMappingCollection)">
            <summary>
            Protects all sensitive keys in a specified XML representation of a <see cref="T:IDS.Features.FeatureValueCollection" />.
            </summary>
            <param name="featureSetsElement">
            An <see cref="T:System.Xml.Linq.XElement" /> that represents a <see cref="T:IDS.Features.FeatureValueCollection" />.
            </param>
            <param name="featureKeyProviderMappings">
            The collection of key provider mappings configured in <see cref="T:IDS.Features.FeatureManager" />.
            </param>
        </member>
        <member name="T:IDS.Features.FeatureDefinition">
            <summary>
            Defines a feature in the feature system.
            A feature can be enabled or disabled, can have additional settings such as limits, and can have child features.
            </summary>
        </member>
        <member name="M:IDS.Features.FeatureDefinition.#ctor(IDS.Features.FeatureDefinition,System.Guid,IDS.Globalization.UILocalized{System.String},IDS.Globalization.UILocalized{System.String},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Features.FeatureDefinition" /> class,
            defining a feature whose settings are stored in a single <see cref="T:IDS.Features.Feature" /> instance per user.
            </summary>
            <param name="parent">
            The <see cref="T:IDS.Features.FeatureDefinition" /> that defines the parent feature,
            or <see langword="null" /> if there is no parent feature.
            </param>
            <param name="id">
            A <see cref="T:System.Guid" /> that uniquely identifies the feature.
            </param>
            <param name="name">
            The localized, user-friendly name of the feature.
            </param>
            <param name="description">
            A localized, user-friendly description of the feature.
            </param>
            <param name="featureType">
            The <see cref="T:System.Type" /> of the <see cref="T:IDS.Features.Feature" /> subclass that stores settings for the feature.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureDefinition.#ctor(IDS.Features.FeatureDefinition,System.Guid,IDS.Globalization.UILocalized{System.String},IDS.Globalization.UILocalized{System.String},System.Type,IDS.Features.FeatureOverride)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Features.FeatureDefinition" /> class,
            defining a feature whose settings are stored in a single <see cref="T:IDS.Features.Feature" /> instance per user.
            </summary>
            <param name="parent">
            The <see cref="T:IDS.Features.FeatureDefinition" /> that defines the parent feature,
            or <see langword="null" /> if there is no parent feature.
            </param>
            <param name="id">
            A <see cref="T:System.Guid" /> that uniquely identifies the feature.
            </param>
            <param name="name">
            The localized, user-friendly name of the feature.
            </param>
            <param name="description">
            A localized, user-friendly description of the feature.
            </param>
            <param name="featureType">
            The <see cref="T:System.Type" /> of the <see cref="T:IDS.Features.Feature" /> subclass that stores settings for the feature.
            </param>
            <param name="featureOverride">
            An optional <see cref="T:IDS.Features.FeatureOverride" /> instance that contains override information.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureDefinition.#ctor(IDS.Features.FeatureDefinition,System.Guid,IDS.Globalization.UILocalized{System.String},IDS.Globalization.UILocalized{System.String},System.Type,IDS.Features.IFeatureKeyProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Features.FeatureDefinition" /> class,
            defining a feature whose settings are stored in multiple <see cref="T:IDS.Features.Feature" /> instances per user.
            </summary>
            <param name="parent">
            The <see cref="T:IDS.Features.FeatureDefinition" /> that defines the parent feature,
            or <see langword="null" /> if there is no parent feature.
            </param>
            <param name="id">
            A <see cref="T:System.Guid" /> that uniquely identifies the feature.
            </param>
            <param name="name">
            The localized, user-friendly name of the feature.
            </param>
            <param name="description">
            A localized, user-friendly description of the feature.
            </param>
            <param name="featureType">
            The <see cref="T:System.Type" /> of the <see cref="T:IDS.Features.Feature" /> subclass that stores settings for the feature.
            </param>
            <param name="keyProvider"> 
            The <see cref="T:IDS.Features.IFeatureKeyProvider" /> to use to generate <see cref="P:IDS.Features.Feature.Key" /> values
            for <see cref="T:IDS.Features.Feature" /> instances.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureDefinition.#ctor(IDS.Features.FeatureDefinition,System.Guid,IDS.Globalization.UILocalized{System.String},IDS.Globalization.UILocalized{System.String},System.Type,IDS.Features.FeatureOverride,IDS.Features.IFeatureKeyProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Features.FeatureDefinition" /> class,
            defining a feature whose settings are stored in multiple <see cref="T:IDS.Features.Feature" /> instances per user.
            </summary>
            <param name="parent">
            The <see cref="T:IDS.Features.FeatureDefinition" /> that defines the parent feature,
            or <see langword="null" /> if there is no parent feature.
            </param>
            <param name="id">
            A <see cref="T:System.Guid" /> that uniquely identifies the feature.
            </param>
            <param name="name">
            The localized, user-friendly name of the feature.
            </param>
            <param name="description">
            A localized, user-friendly description of the feature.
            </param>
            <param name="featureType">
            The <see cref="T:System.Type" /> of the <see cref="T:IDS.Features.Feature" /> subclass that stores settings for the feature.
            </param>
            <param name="featureOverride">
            An optional <see cref="T:IDS.Features.FeatureOverride" /> instance that contains override information.
            </param>
            <param name="keyProvider"> 
            The <see cref="T:IDS.Features.IFeatureKeyProvider" /> to use to generate <see cref="P:IDS.Features.Feature.Key" /> values
            for <see cref="T:IDS.Features.Feature" /> instances.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureDefinition.#ctor(IDS.Features.FeatureDefinition,System.Guid,IDS.Globalization.UILocalized{System.String},IDS.Globalization.UILocalized{System.String},IDS.Features.FeatureOverride,IDS.Features.FeatureDefinition.FeatureFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Features.FeatureDefinition" /> class.
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureDefinition.Parent">
            <summary>
            Gets the definition of the parent feature.
            </summary>
            <value>
            The <see cref="T:IDS.Features.FeatureDefinition" /> that defines the parent feature,
            or <see langword="null" /> if there is no parent feature.
            </value>
        </member>
        <member name="P:IDS.Features.FeatureDefinition.Id">
            <summary>
            Gets the ID of the feature.
            </summary>
            <value>
            A <see cref="T:System.Guid" /> that uniquely identifies the feature.
            </value>
        </member>
        <member name="P:IDS.Features.FeatureDefinition.Name">
            <summary>
            Gets the localized, user-friendly name of the feature.
            </summary>
            <value>
            The localized, user-friendly name of the feature.
            </value>
        </member>
        <member name="P:IDS.Features.FeatureDefinition.Description">
            <summary>
            Gets a localized, user-friendly description of the feature.
            </summary>
            <value>
            A localized, user-friendly description of the feature.
            </value>
        </member>
        <member name="P:IDS.Features.FeatureDefinition.EnabledSetting">
            <summary>
            Gets a <see cref="T:IDS.Features.FeatureSetting" /> that defines the <see cref="P:IDS.Features.Feature.Enabled" /> setting.
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureDefinition.KeyProvider">
            <summary>
            Gets the <see cref="T:IDS.Features.IFeatureKeyProvider" /> to use to generate <see cref="P:IDS.Features.Feature.Key" /> values
            for <see cref="T:IDS.Features.Feature" /> instances.
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureDefinition.Settings">
            <summary>
            Gets the collection of available settings for the feature (excluding <see cref="P:IDS.Features.FeatureDefinition.EnabledSetting" />).
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureDefinition.ChildFeatureDefinitions">
            <summary>
            Gets the definitions of the child features.
            </summary>
        </member>
        <member name="M:IDS.Features.FeatureDefinition.AddSetting(System.String,IDS.Globalization.UILocalized{System.String},IDS.Globalization.UILocalized{System.String})">
            <summary>
            Adds a feature setting.
            </summary>
            <param name="propertyName">
            The name of the property on a <see cref="T:IDS.Features.Feature" /> instance
            that stores the value of the setting.
            </param>
            <param name="name">
            The localized, user-friendly name of the setting.
            </param>
            <param name="description">
            A localized, user-friendly description of the setting.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureDefinition.AddSetting(System.String,IDS.Globalization.UILocalized{System.String},IDS.Globalization.UILocalized{System.String},IDS.Features.FeatureSettingOverride)">
            <summary>
            Adds a feature setting.
            </summary>
            <param name="propertyName">
            The name of the property on a <see cref="T:IDS.Features.Feature" /> instance
            that stores the value of the setting.
            </param>
            <param name="name">
            The localized, user-friendly name of the setting.
            </param>
            <param name="description">
            A localized, user-friendly description of the setting.
            </param>
            <param name="settingOverride">
            An optional <see cref="T:IDS.Features.FeatureSettingOverride" /> instance that contains override information.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureDefinition.PopulateFeatureSet(IDS.Features.FeatureSet,IDS.Features.FeatureContext,System.Collections.Generic.ICollection{IDS.Features.FeatureTier},IDS.Features.FeatureValueCollection)">
            <summary>
            Recursively populates a specified <see cref="T:IDS.Features.FeatureSet" /> with <see cref="T:IDS.Features.Feature" /> instances
            for the current feature and its child features.
            </summary>
            <param name="featureSet">
            The <see cref="T:IDS.Features.FeatureSet" /> to populate with <see cref="T:IDS.Features.Feature" /> instances.
            </param>
            <param name="context">
            A <see cref="T:IDS.Features.FeatureContext" />.
            </param>
            <param name="tiers">
            A <see cref="T:IDS.Features.FeatureTier" /> collection.
            </param>
            <param name="values">
            A <see cref="T:IDS.Features.FeatureValueCollection" /> that contains the values of configured feature settings.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureDefinition.PopulateFeatureSet(IDS.Features.FeatureSet,IDS.Features.FeatureContext,System.Collections.Generic.ICollection{IDS.Features.FeatureTier},IDS.Features.FeatureValueCollection,System.Func{IDS.Features.FeatureDefinition,System.Collections.Generic.IEnumerable{IDS.Features.FeatureDefinition}})">
            <summary>
            Recursively populates a specified <see cref="T:IDS.Features.FeatureSet" /> with <see cref="T:IDS.Features.Feature" /> instances
            for the current feature and a specified subset of its descendant features.
            </summary>
            <param name="featureSet">
            The <see cref="T:IDS.Features.FeatureSet" /> to populate with <see cref="T:IDS.Features.Feature" /> instances.
            </param>
            <param name="context">
            A <see cref="T:IDS.Features.FeatureContext" />.
            </param>
            <param name="tiers">
            A <see cref="T:IDS.Features.FeatureTier" /> collection.
            </param>
            <param name="values">
            A <see cref="T:IDS.Features.FeatureValueCollection" /> that contains the values of configured feature settings.
            </param>
            <param name="getChildFeatureDefinitions">
            A function that accepts a <see cref="T:IDS.Features.FeatureDefinition" /> and returns the subset of its child features
            with which the <paramref name="featureSet" /> should be populated.
            </param>
        </member>
        <member name="T:IDS.Features.FeatureDefinition.SingleInstanceFeatureFactory">
            <summary>
            Implements a <see cref="T:IDS.Features.FeatureDefinition.FeatureFactory" /> that creates a single instance
            of a custom <see cref="T:IDS.Features.Feature" /> subclass per feature.
            </summary>
        </member>
        <member name="T:IDS.Features.FeatureDefinition.MultipleInstanceFeatureFactory">
            <summary>
            Implements a <see cref="T:IDS.Features.FeatureDefinition.FeatureFactory" /> that creates multiple instances
            of a custom <see cref="T:IDS.Features.Feature" /> subclass per feature.
            </summary>
        </member>
        <member name="T:IDS.Features.FeatureDefinitionProvider">
            <summary>
            
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Features.FeatureDefinitionProvider.GetRootFeatureDefinitions">
            <summary>
            
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureDefinitionProvider.GetFeatureDefinition(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Features.FeatureExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Features.FeatureExpression.Evaluate(IDS.Features.FeatureSet)">
            <summary>
            
            </summary>
            <param name="featureSet"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureExpression.GetDefinitionIds">
            <summary>
            Gets the feature definition IDs that constitute the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureExpression.IsUnrestricted(System.String)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureExpression.Parse(System.String)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureExpression.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Features.FeatureKeyProviderMappingCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Features.FeatureKeyProviderMappingCollection.GetKeyProvider(System.Guid)">
            <summary>
            
            </summary>
            <param name="definitionId"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureKeyProviderMappingCollection.NullFeatureKeyProvider.GetDataItems(IDS.Features.FeatureContext)">
            <summary>
            Gets the collection of data items for which instances of the feature will be created.
            </summary>
            <param name="context">
            A <see cref="T:IDS.Features.FeatureContext" />.
            </param>
            <returns>
            A collection of data items and their keys.
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureKeyProviderMappingCollection.NullFeatureKeyProvider.GetDescription(System.Object)">
            <summary>
            Gets a user-friendly description of a specified data item.
            </summary>
            <param name="dataItem">
            A data item returned by <see cref="M:IDS.Features.FeatureKeyProviderMappingCollection.NullFeatureKeyProvider.GetDataItems(IDS.Features.FeatureContext)" />.
            </param>
            <returns>
            A user-friendly description of the specified <paramref name="dataItem" />.
            </returns>
        </member>
        <member name="T:IDS.Features.FeatureKeyProviderMapping">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureKeyProviderMapping.DefinitionId">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureKeyProviderMapping.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureKeyProviderMapping.KeyProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureKeyProviderMapping.ShortFeatureName">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Features.FeatureManager">
            <summary>
            
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="P:IDS.Features.FeatureManager.TierProvider">
            <summary>
            Gets or sets the feature tier provider.
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureManager.DataService">
            <summary>
            Gets or sets the feature data service.
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureManager.KeyProviderMappings">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureManager.FeatureFilters">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureManager.KeyProviderTypeGroupings">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureManager.FeatureOverrides">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Features.FeatureManager.OnInit">
            <inheritdoc />
        </member>
        <member name="M:IDS.Features.FeatureManager.OnInitAllServices">
            <inheritdoc />
        </member>
        <member name="M:IDS.Features.FeatureManager.AddDefinitionProvider(IDS.Features.FeatureDefinitionProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:IDS.Features.FeatureManager.DeleteFeatureSet(System.String)">
            <summary>
            Deletes a specified feature set.
            </summary>
            <param name="featureSetName">
            The name of the feature set to delete.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureManager.GetEffectiveFeatureSet(IDS.Features.FeatureContext)">
            <summary>
            Gets the effective feature set for a specified context by combining the values from
            configured default and overridden feature settings across all applicable tiers.
            </summary>
            <param name="context">
            A <see cref="T:IDS.Features.FeatureContext" />.
            </param>
            <returns>
            The effective feature set for the <paramref name="context" />.
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureManager.GetEffectiveFeatureSet(IDS.Security.IUser,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets the effective feature set for a specified user by combining the values from
            configured default and overridden feature settings across all applicable tiers.
            The effective feature set will only include features specified in <paramref name="definitionIds" />
            and other necessary for computation features.
            </summary>
            <param name="user"></param>
            <param name="definitionIds"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureManager.GetEffectiveFeatureSets(System.Collections.Generic.IEnumerable{IDS.Security.IUser},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets the effective feature sets for all requested users by combining the values from
            configured default and overridden feature settings across all applicable tiers.
            The effective feature sets will only include features specified in <paramref name="definitionIds" />
            and other necessary for computation features.
            </summary>
            <param name="users"></param>
            <param name="definitionIds"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureManager.GetFeatureDefinition(System.Guid)">
            <summary>
            
            </summary>
            <param name="definitionId"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureManager.SaveEffectiveFeatureValues(System.Collections.Generic.List{IDS.Features.FeatureSettingValue})">
            <summary>
            
            </summary>
            <param name="featureSettingValues"></param>
        </member>
        <member name="M:IDS.Features.FeatureManager.GetRootFeatureDefinitions">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureManager.GetUnrestrictedFeatureSet(IDS.Features.FeatureContext)">
            <summary>
            Gets a <see cref="T:IDS.Features.FeatureSet" /> with all features enabled and all limits set to the maximum.
            </summary>
            <param name="context">
            A <see cref="T:IDS.Features.FeatureContext" />.
            </param>
            <returns>
            An unrestricted <see cref="T:IDS.Features.FeatureSet" />.
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureManager.LoadFeatureValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="featureSetNames"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureManager.LoadFeatureValues(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            
            </summary>
            <param name="featureSetNames"></param>
            <param name="includeDefinitionIds"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureManager.SaveFeatureValues(System.Collections.Generic.ICollection{System.String},IDS.Features.FeatureValueCollection)">
            <summary>
            
            </summary>
            <param name="featureSetNames">
            </param>
            <param name="values"></param>
        </member>
        <member name="T:IDS.Features.FeatureOverride">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureOverride.DefinitionId">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureOverride.FeatureName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureOverride.SettingOverrides">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureOverride.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureOverride.LocalizedName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureOverride.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureOverride.LocalizedDescription">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Features.FeatureSettingOverride">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureSettingOverride.PropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureSettingOverride.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureSettingOverride.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureSettingOverride.LocalizedName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureSettingOverride.LocalizedDescription">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Features.Int32FeatureSettingOverride">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.Int32FeatureSettingOverride.MostRestrictiveValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.Int32FeatureSettingOverride.LeastRestrictiveValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Features.FeatureFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureFilter.DefinitionId">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureFilter.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureFilter.PropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureFilter.Roles">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Features.KeyProviderTypeGrouping">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.KeyProviderTypeGrouping.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.KeyProviderTypeGrouping.KeyProviderType">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Features.FeatureSet">
            <summary>
            Represents a collection of feature settings.
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureSet.Item(System.Guid,System.String)">
            <summary>
            Gets the <see cref="T:IDS.Features.Feature" /> in the collection with a specified definition ID and key.
            </summary>
            <param name="definitionId">
            The <see cref="P:IDS.Features.FeatureDefinition.Id" /> of the <see cref="T:IDS.Features.FeatureDefinition" /> that defines the feature.
            </param>
            <param name="key">
            A string that uniquely identifies the <see cref="T:IDS.Features.Feature" /> instance among those
            with the same <see cref="P:IDS.Features.Feature.DefinitionId" />.
            </param>
            <remarks>For empty Guid the set will always return an enabled feature.</remarks>
        </member>
        <member name="M:IDS.Features.FeatureSet.TryGet(System.Guid,System.String,IDS.Features.Feature@)">
            <summary>
            Tries to get the <see cref="T:IDS.Features.Feature" /> in the collection with a specified definition ID and key.
            </summary>
            <param name="definitionId"></param>
            <param name="key"></param>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureSet.Add(IDS.Features.Feature)">
            <summary>
            Adds a specified <see cref="T:IDS.Features.Feature" /> to the collection.
            </summary>
            <param name="feature">
            The <see cref="T:IDS.Features.Feature" /> to add to the collection.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureSet.Contains(System.Guid,System.String)">
            <summary>
            Determines whether the collection contains a <see cref="T:IDS.Features.Feature" /> with a specified definiition ID.
            </summary>
            <param name="definitionId">
            The <see cref="P:IDS.Features.FeatureDefinition.Id" /> of the <see cref="T:IDS.Features.FeatureDefinition" /> that defines the feature.
            </param>
            <param name="key">
            A string that uniquely identifies the <see cref="T:IDS.Features.Feature" /> instance among those
            with the same <see cref="P:IDS.Features.Feature.DefinitionId" />.
            </param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureSet.Get``1(System.Guid,System.String)">
            <summary>
            Gets a feature by type.
            </summary>
            <param name="definitionId">
            The <see cref="P:IDS.Features.FeatureDefinition.Id" /> of the <see cref="T:IDS.Features.FeatureDefinition" /> that defines the feature.
            </param>
            <param name="key">
            A string that uniquely identifies the <see cref="T:IDS.Features.Feature" /> instance among those
            with the same <see cref="P:IDS.Features.Feature.DefinitionId" />.
            </param>
            <returns>
            </returns>
            <remarks>For empty Guid the set will always return an enabled feature.</remarks>
        </member>
        <member name="M:IDS.Features.FeatureSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:IDS.Features.FeatureSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:IDS.Features.FeatureSetting">
            <summary>
            Defines a setting for a feature.
            </summary>
        </member>
        <member name="M:IDS.Features.FeatureSetting.Create(System.Reflection.PropertyInfo,IDS.Globalization.UILocalized{System.String},IDS.Globalization.UILocalized{System.String},IDS.Features.FeatureSettingOverride)">
            <summary>
            Creates a new instance of the <see cref="T:IDS.Features.FeatureSetting" /> class.
            </summary>
            <param name="propertyInfo">
            A <see cref="T:System.Reflection.PropertyInfo" /> that represents the property on a <see cref="T:IDS.Features.Feature" /> instance
            that stores the value of the setting.
            </param>
            <param name="name">
            The localized, user-friendly name of the setting.
            </param>
            <param name="description">
            A localized, user-friendly description of the setting.
            </param>
            <param name="settingOverride"></param>
            <returns>
            The new <see cref="T:IDS.Features.FeatureSetting" /> instance.
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureSetting.#ctor(System.Reflection.PropertyInfo,IDS.Globalization.UILocalized{System.String},IDS.Globalization.UILocalized{System.String},IDS.Features.FeatureSettingOverride)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Features.FeatureSetting" /> class.
            </summary>
            <param name="propertyInfo">
            A <see cref="T:System.Reflection.PropertyInfo" /> that represents the property on a <see cref="T:IDS.Features.Feature" /> instance
            that stores the value of the setting.
            </param>
            <param name="name">
            The localized, user-friendly name of the setting.
            </param>
            <param name="description">
            A localized, user-friendly description of the setting.
            </param>
            <param name="settingOverride"></param>
        </member>
        <member name="P:IDS.Features.FeatureSetting.Description">
            <summary>
            Gets a localized, user-friendly description of the setting.
            </summary>
            <value>
            A localized, user-friendly description of the setting.
            </value>
        </member>
        <member name="P:IDS.Features.FeatureSetting.Name">
            <summary>
            Gets the localized, user-friendly name of the setting.
            </summary>
            <value>
            The localized, user-friendly name of the setting.
            </value>
        </member>
        <member name="P:IDS.Features.FeatureSetting.PropertyName">
            <summary>
            Gets the name of the property on a <see cref="T:IDS.Features.Feature" /> instance
            that stores the value of the setting.
            </summary>
            <value>
            The name of the property on a <see cref="T:IDS.Features.Feature" /> instance
            that stores the value of the setting.
            </value>
        </member>
        <member name="P:IDS.Features.FeatureSetting.PropertyType">
            <summary>
            Gets the data type of the setting.
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureSetting.LeastRestrictiveValue">
            <summary>
            Gets the least restrictive possible value of the setting.
            </summary>
            <value>
            The least restrictive possible value of the setting
            (typically <see langword="true" /> for a Boolean property, <see langword="null" /> for a numeric property).
             </value>
        </member>
        <member name="P:IDS.Features.FeatureSetting.MostRestrictiveValue">
            <summary>
            Gets the most restrictive possible value of the setting.
            </summary>
            <value>
            The most restrictive possible value of the setting
            (typically <see langword="false" /> for a Boolean property, 0 for a numeric property).
             </value>
        </member>
        <member name="M:IDS.Features.FeatureSetting.ConvertFromInvariantString(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureSetting.ConvertFromLocalizedString(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureSetting.ConvertToInvariantString(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureSetting.ConvertToLocalizedString(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureSetting.GetLeastRestrictiveOf(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Gets the least restrictive value among a specified collection of values for the setting.
            </summary>
            <param name="values">
            A collection of zero or more values for the setting.
            Each value must be of the type specified by <see cref="P:IDS.Features.FeatureSetting.PropertyType" />.
            </param>
            <returns>
            The least restrictive value among the collection of <paramref name="values" />,
            or if <paramref name="values" /> is an empty collection, the most restrictive possible value
            (typically <see langword="false" /> for a Boolean property, 0 for a numeric property).
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureSetting.GetLeastRestrictiveOf(System.Object[])">
            <summary>
            Gets the least restrictive value among a specified collection of values for the setting.
            </summary>
            <param name="values">
            A collection of zero or more values for the setting.
            Each value must be of the type specified by <see cref="P:IDS.Features.FeatureSetting.PropertyType" />.
            </param>
            <returns>
            The least restrictive value among the collection of <paramref name="values" />,
            or if <paramref name="values" /> is an empty collection, the most restrictive possible value
            (typically <see langword="false" /> for a Boolean property, 0 for a numeric property).
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureSetting.GetMostRestrictiveOf(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Gets the most restrictive value among a specified collection of values for the setting.
            </summary>
            <param name="values">
            A collection of zero or more values for the setting.
            Each value must be of the type specified by <see cref="P:IDS.Features.FeatureSetting.PropertyType" />.
            </param>
            <returns>
            The most restrictive value among the collection of <paramref name="values" />,
            or if <paramref name="values" /> is an empty collection, the least restrictive possible value
            (typically <see langword="true" /> for a Boolean property, <see langword="null" /> for a numeric property).
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureSetting.GetMostRestrictiveOf(System.Object[])">
            <summary>
            Gets the most restrictive value among a specified collection of values for the setting.
            </summary>
            <param name="values">
            A collection of zero or more values for the setting.
            Each value must be of the type specified by <see cref="P:IDS.Features.FeatureSetting.PropertyType" />.
            </param>
            <returns>
            The most restrictive value among the collection of <paramref name="values" />,
            or if <paramref name="values" /> is an empty collection, the least restrictive possible value
            (typically <see langword="true" /> for a Boolean property, <see langword="null" /> for a numeric property).
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureSetting.GetValueOn(IDS.Features.Feature)">
            <summary>
            Gets the value of the setting on a specified <see cref="T:IDS.Features.Feature" />.
            </summary>
            <param name="feature">
            The <see cref="T:IDS.Features.Feature" /> that has the setting to access.
            </param>
            <returns>
            The current value of the setting on the <paramref name="feature" />.
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureSetting.SetValueOn(IDS.Features.Feature,System.Object)">
            <summary>
            Sets the value of the setting on a specified <see cref="T:IDS.Features.Feature" />.
            </summary>
            <param name="feature">
            The <see cref="T:IDS.Features.Feature" /> that has the setting to modify.
            </param>
            <param name="value">
            The new value of the setting.
            </param>
        </member>
        <member name="T:IDS.Features.FeatureSettingValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Features.FeatureSettingValue.#ctor(IDS.Security.IUser,System.Guid,System.String,IDS.Features.FeatureSetting,System.Object)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="definitionId"></param>
            <param name="key"></param>
            <param name="setting"></param>
            <param name="value"></param>
        </member>
        <member name="P:IDS.Features.FeatureSettingValue.User">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureSettingValue.DefinitionId">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureSettingValue.Key">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureSettingValue.Setting">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureSettingValue.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Features.FeatureTier">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureTier.DefaultFeatureSetNames">
            <summary>
            Gets or sets the names of the default feature sets.
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureTier.OverrideFeatureSetNames">
            <summary>
            Gets or sets the names of the override feature sets.
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureTier.ImplicitFeatureSetNames">
            <summary>
            Gets or sets the names of the implicit feature sets.
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureTier.RestrictionFeatureSetNames">
            <summary>
            Gets or sets the names of the restriction feature sets.
            </summary>
        </member>
        <member name="M:IDS.Features.FeatureTier.GetAllFeatureSetNames">
            <summary>
            Gets the names of all feature sets for the tier.
            </summary>
            <returns>
            A collection that contains the <see cref="P:IDS.Features.FeatureTier.DefaultFeatureSetNames" />,
            <see cref="P:IDS.Features.FeatureTier.OverrideFeatureSetNames" />, <see cref="P:IDS.Features.FeatureTier.ImplicitFeatureSetNames" />, and <see cref="P:IDS.Features.FeatureTier.RestrictionFeatureSetNames" />.
            </returns>
        </member>
        <member name="T:IDS.Features.FeatureTierProvider">
            <summary>
            
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Features.FeatureTierProvider.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureTierProvider.RoleFeatureSetName">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Features.FeatureTierProvider.GetFeatureTier(System.String)">
            <summary>
            Gets the feature tier for a specified entity type, ignoring any parent tiers.
            </summary>
            <param name="entityType">
            The name of an entity type.
            </param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureTierProvider.GetFeatureTier(IDS.Features.FeatureContext)">
            <summary>
            Gets the feature tier for a specified context, ignoring any parent tiers.
            </summary>
            <param name="context">
            A <see cref="T:IDS.Features.FeatureContext" />.
            </param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureTierProvider.GetFeatureTiers(IDS.Features.FeatureContext)">
            <summary>
            Gets the feature tiers for a specified context.
            </summary>
            <param name="context">
            A <see cref="T:IDS.Features.FeatureContext" />.
            </param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureTierProvider.GetRoleFeatureSetName(IDS.Security.Role)">
            <summary>
            
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.Features.FeatureValueCollection">
            <summary>
            Contains the value of each configured feature setting in a collection of feature sets.
            </summary>
        </member>
        <member name="F:IDS.Features.FeatureValueCollection.UnrestrictedFeatureSetName">
            <summary>
            The name of the unrestricted feature set.
            </summary>
        </member>
        <member name="P:IDS.Features.FeatureValueCollection.HasChanges">
            <summary>
            Gets a Boolean value that indicates whether any changes were made to the collection
            after <see cref="M:IDS.Features.FeatureValueCollection.TrackChanges" /> was called.
            </summary>
        </member>
        <member name="M:IDS.Features.FeatureValueCollection.Add(System.String,IDS.Features.Feature,IDS.Features.FeatureSetting,System.Object)">
            <summary>
            Adds the value of a feature setting to the collection.
            </summary>
            <param name="featureSetName">
            The name of a feature set.
            </param>
            <param name="feature">
            A <see cref="T:IDS.Features.Feature" />.
            </param>
            <param name="setting">
            A <see cref="T:IDS.Features.FeatureSetting" />.
            </param>
            <param name="value">
            The value to add to the collection for the specified <paramref name="setting" />
            on the <paramref name="feature" />.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureValueCollection.Add(System.String,System.Guid,System.String,System.String,System.String)">
            <summary>
            Adds the value of a feature setting to the collection.
            </summary>
            <param name="featureSetName">
            The name of a feature set.
            </param>
            <param name="definitionId">
            The <see cref="P:IDS.Features.FeatureDefinition.Id" /> of the <see cref="T:IDS.Features.FeatureDefinition" /> that defines the feature.
            </param>
            <param name="featureKey">
            A string that uniquely identifies the <see cref="T:IDS.Features.Feature" /> instance among those
            with the same <see cref="P:IDS.Features.Feature.DefinitionId" />.
            </param>
            <param name="propertyName">
            The name of the <see cref="T:IDS.Features.Feature" /> instance property that stores the value of the setting.
            </param>
            <param name="value">
            The value of the feature setting, represented as a string.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureValueCollection.GetChangesXml(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="featureSetNames"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureValueCollection.GetDefaultValueForTier(System.Collections.Generic.IEnumerable{System.String},IDS.Features.Feature,IDS.Features.FeatureSetting)">
            <summary>
            
            </summary>
            <param name="defaultFeatureSetNames"></param>
            <param name="feature"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureValueCollection.GetEffectiveValue(System.Collections.Generic.IEnumerable{IDS.Features.FeatureTier},IDS.Features.Feature,IDS.Features.FeatureSetting)">
            <summary>
            
            </summary>
            <param name="tiers"></param>
            <param name="feature"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureValueCollection.GetEffectiveValueForTier(IDS.Features.FeatureTier,IDS.Features.Feature,IDS.Features.FeatureSetting)">
            <summary>
            
            </summary>
            <param name="tier"></param>
            <param name="feature"></param>
            <param name="setting"></param>
        </member>
        <member name="M:IDS.Features.FeatureValueCollection.GetOverrideValueForTier(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},IDS.Features.Feature,IDS.Features.FeatureSetting)">
            <summary>
            
            </summary>
            <param name="defaultFeatureSetNames"></param>
            <param name="overrideFeatureSetNames">
            The names of the override feature sets from lowest to highest priority.
            </param>
            <param name="feature"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureValueCollection.GetValue(System.String,IDS.Features.Feature,IDS.Features.FeatureSetting)">
            <summary>
            Gets the value of a specified feature setting in a specified feature set.
            </summary>
            <param name="featureSetName">
            The name of a feature set.
            </param>
            <param name="feature">
            A <see cref="T:IDS.Features.Feature" />.
            </param>
            <param name="setting">
            A <see cref="T:IDS.Features.FeatureSetting" />.
            </param>
            <returns>
            The value in the collection for the specified <paramref name="setting" />
            on the <paramref name="feature" />, or the most restrictive possible value of the setting
            if the collection does not contain a value for the specified feature setting.
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureValueCollection.Remove(System.String,IDS.Features.Feature,IDS.Features.FeatureSetting)">
            <summary>
            Removes the value of a feature setting from the collection.
            </summary>
            <param name="featureSetName">
            The name of a feature set.
            </param>
            <param name="feature">
            A <see cref="T:IDS.Features.Feature" />.
            </param>
            <param name="setting">
            A <see cref="T:IDS.Features.FeatureSetting" />.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureValueCollection.Remove(System.String,System.Guid,System.String,System.String)">
            <summary>
            Removes the value of a feature setting from the collection.
            </summary>
            <param name="featureSetName">
            The name of a feature set.
            </param>
            <param name="definitionId">
            The <see cref="P:IDS.Features.FeatureDefinition.Id" /> of the <see cref="T:IDS.Features.FeatureDefinition" /> that defines the feature.
            </param>
            <param name="featureKey">
            A string that uniquely identifies the <see cref="T:IDS.Features.Feature" /> instance among those
            with the same <see cref="P:IDS.Features.Feature.DefinitionId" />.
            </param>
            <param name="propertyName">
            The name of the <see cref="T:IDS.Features.Feature" /> instance property that stores the value of the setting.
            </param>
        </member>
        <member name="M:IDS.Features.FeatureValueCollection.ToXml(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets an XML representation of the collection.
            </summary>
            <param name="featureSetNames">
            The names of the feature sets to include in the XML.
            </param>
            <returns>
            An <see cref="T:System.Xml.Linq.XElement" /> that represents the collection.
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureValueCollection.ToXml(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            
            </summary>
            <param name="featureSetNames"></param>
            <param name="changesOnly"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Features.FeatureValueCollection.TrackChanges">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Features.FeatureValueCollection.TryGetValue(System.String,IDS.Features.Feature,IDS.Features.FeatureSetting,System.Object@)">
            <summary>
            Gets the value of a specified feature setting in a specified feature set.
            </summary>
            <param name="featureSetName">
            The name of a feature set.
            </param>
            <param name="feature">
            A <see cref="T:IDS.Features.Feature" />.
            </param>
            <param name="setting">
            A <see cref="T:IDS.Features.FeatureSetting" />.
            </param>
            <param name="value">
            Receives the value in the collection for the specified <paramref name="setting" />
            on the <paramref name="feature" />, or the most restrictive possible value of the setting
            if the collection does not contain a value for the specified feature setting.
            </param>
            <returns>
            <see langword="true" /> if the collection contains the specified feature setting;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:IDS.Features.FeatureValueCollection.GetKeysForDefinition(System.Collections.Generic.IEnumerable{IDS.Features.FeatureTier},System.Guid)">
            <summary>
            For a specified data-driven feature, gets the key of each data item that has at least one associated value
            in the collection.
            </summary>
            <param name="tiers">
            The tiers to include in the search.
            </param>
            <param name="definitionId">
            The <see cref="P:IDS.Features.FeatureDefinition.Id" /> of the <see cref="T:IDS.Features.FeatureDefinition" /> that defines the feature.
            </param>
        </member>
        <member name="T:IDS.Features.IFeatureKeyProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Features.IFeatureKeyProvider.GetDataItems(IDS.Features.FeatureContext)">
            <summary>
            Gets the collection of data items for which instances of the feature will be created.
            </summary>
            <param name="context">
            A <see cref="T:IDS.Features.FeatureContext" />.
            </param>
            <returns>
            A collection of data items and their keys.
            </returns>
        </member>
        <member name="M:IDS.Features.IFeatureKeyProvider.GetDescription(System.Object)">
            <summary>
            Gets a user-friendly description of a specified data item.
            </summary>
            <param name="dataItem">
            A data item returned by <see cref="M:IDS.Features.IFeatureKeyProvider.GetDataItems(IDS.Features.FeatureContext)" />.
            </param>
            <returns>
            A user-friendly description of the specified <paramref name="dataItem" />.
            </returns>
        </member>
        <member name="T:IDS.Features.Int32FeatureSettingAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Features.Int32FeatureSettingAttribute.#ctor(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="leastRestrictiveValue"></param>
            <param name="mostRestrictiveValue"></param>
        </member>
        <member name="P:IDS.Features.Int32FeatureSettingAttribute.LeastRestrictiveValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Features.Int32FeatureSettingAttribute.MostRestrictiveValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Features.ISensitiveFeatureKeyProvider">
            <summary>
            Indicates that the keys returned by a feature key provider are "sensitive" and require data protection.
            </summary>
        </member>
        <member name="P:IDS.Features.ISensitiveFeatureKeyProvider.SensitiveDataFormat">
            <summary>
            Gets a <see cref="P:IDS.Features.ISensitiveFeatureKeyProvider.SensitiveDataFormat" /> that specifies the format of the keys returned by the provider.
            </summary>
        </member>
        <member name="T:IDS.Features.SqlFeatureDataService">
            <summary>
            Provides an implementation of the <see cref="T:IDS.Features.FeatureDataService" /> class for SQL Server.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="P:IDS.Features.SqlFeatureDataService.ConnectionService">
            <summary>
            Gets or sets the configured <see cref="T:IDS.Data.SqlConnectionService" />.
            </summary>
        </member>
        <member name="P:IDS.Features.SqlFeatureDataService.AuditSqlConnectionService">
            <summary>
            Gets or sets the connection service for audit db.
            </summary>
        </member>
        <member name="P:IDS.Features.SqlFeatureDataService.SensitiveDataProtector">
            <summary>
            Gets or sets the configured <see cref="T:IDS.Security.SensitiveDataProtector" />.
            </summary>
        </member>
        <member name="M:IDS.Features.SqlFeatureDataService.VerifyConfigurations(IDS.Features.FeatureKeyProviderMappingCollection)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Features.SqlFeatureDataService.DeleteFeatureSet(System.String)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Features.SqlFeatureDataService.LoadFeatureValues(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Guid},IDS.Features.FeatureKeyProviderMappingCollection)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Features.SqlFeatureDataService.SaveFeatureValues(System.Collections.Generic.IEnumerable{System.String},IDS.Features.FeatureValueCollection,IDS.Features.FeatureKeyProviderMappingCollection)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Features.SqlFeatureDataService.SaveChangedFeatureValues(System.Collections.Generic.IEnumerable{System.String},IDS.Features.FeatureValueCollection,IDS.Features.FeatureKeyProviderMappingCollection)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Features.SqlFeatureDataService.ProtectFeatureSettingKeys(System.Xml.Linq.XElement,IDS.Features.FeatureKeyProviderMappingCollection)">
            <inheritdoc />
        </member>
        <member name="T:IDS.FederalHolidayCalculator">
            <summary>
            Holiday calculator that takes into account the exact day of the federal holiday and any date a federal holiday is observed on.
            </summary>
            <remarks>
            For example, 12/25/2005 is a Sunday, and this calculator will consider it a holiday.  12/26/2005 is a Monday and the day the Federal Government observes 
            the Christmas holiday, this calculator will also consider 12/26/2005 a holiday.  Use <see cref="T:IDS.StrictFederalHolidayCalculator">StrictFederalHolidayCalculator</see>
            to exclude 12/26/2005 from being considered a holiday.
            </remarks>
        </member>
        <member name="M:IDS.FederalHolidayCalculator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.FederalHolidayCalculator"/> class.
            </summary>
        </member>
        <member name="M:IDS.FederalHolidayCalculator.DateIsHoliday(System.DateTime)">
            <summary>
            Determines if a given date is a holiday.
            </summary>
            <param name="date">The date whose holiday status is to be determined.</param>
            <returns>
            True if date is a holiday, false otherwise.
            </returns>
        </member>
        <member name="M:IDS.FederalHolidayCalculator.DateIsStaticHoliday(System.DateTime)">
            <summary>
            Determines if the given date is a static federal holiday.
            </summary>
            <param name="date">The date to check against the list of static federal holidays</param>
            <returns>True if date matches 1/1, 7/4, 11/11, or 12/25 of any year.  Otherwise, false.</returns>
        </member>
        <member name="M:IDS.FederalHolidayCalculator.GetAllHolidays(System.Int32)">
            <summary>
            Returns a list of dates which contains all the <b>observed</b> holidays for the given year.
            </summary>
            <param name="year">Year for which the list of <b>observed</b> holidays are being retrieved.</param>
            <returns>Returns a list of dates for the years <b>observed</b> static and dynamic holidays which include static - New Year's Day, 
            Independence Day, Veteran's Day and Christmas Day, dynamic - Martin Luther King Day, President's Day, Memorial Day, 
            Labor Day, Columbus Day, and Thanksgiving Day.</returns>
        </member>
        <member name="M:IDS.FederalHolidayCalculator.GetStaticHolidays(System.Int32)">
            <summary>
            Returns a list of dates which contains all <b>observed</b> static holidays for the given year.
            </summary>
            <param name="year">Year for which the list of <b>observed</b> holidays are being retrieved.</param>
            <returns>Returns a list of dates for the years static holidays which include static - New Year's Day, 
            Independence Day, Veteran's Day and Christmas Day, dynamic - Martin Luther King Day, President's Day, Memorial Day, 
            Labor Day, Columbus Day, and Thanksgiving Day.</returns>
        </member>
        <member name="T:IDS.FederalReserveHolidayCalculator">
            <summary>
            Holiday Calculator for Federal Reserve Bank holidays.  These are the same as for the federal government,
            with the lone exception that holidays falling on a Saturday are <b>not</b> observed on the preceeding Friday.
            </summary>
        </member>
        <member name="M:IDS.FederalReserveHolidayCalculator.FindHolidayObservanceDate(System.DateTime)">
            <summary>
            Find the date the holiday is observed.
            </summary>
            <param name="strictHoliday">The date of the strict holiday.</param>
            <returns>Returns the date the strict holiday is observed.</returns>
        </member>
        <member name="T:IDS.Globalization.AssemblyConfigResourceManager">
            <summary>
            This type retrieves values from localized config files.
            </summary>
        </member>
        <member name="M:IDS.Globalization.AssemblyConfigResourceManager.#ctor(System.Type)">
            <summary>
            Creates an instance of this class using the type's assembly and setting the RootElementLocation property to the
            type's FullName property value.
            </summary>
            <param name="type">The type whose resource values will be retrieved.</param>
        </member>
        <member name="M:IDS.Globalization.AssemblyConfigResourceManager.#ctor(System.Type,System.Boolean)">
            <summary>
            Creates an instance of this class using the type's assembly to locate the config file and setting the 
            RootElementLocation property to the type's FullName property value.
            </summary>
            <param name="type">The type whose resource values will be retrieved.</param>
            <param name="throwExceptionIfBaseConfigFileNotFound">
            True if a System.IO.FileNotFoundException exception should be thrown if the base config file is not found.
            </param>
        </member>
        <member name="M:IDS.Globalization.AssemblyConfigResourceManager.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Creates an instance of this class using the specified assembly to locate the config file and the specified root
            element location.
            </summary>
            <param name="assembly">The assembly whose config file contains the resources.</param>
            <param name="rootElementLocation">
            The root element location in the XML document of the resources. This XPath expression is relative to the
            document element.
            </param>
        </member>
        <member name="M:IDS.Globalization.AssemblyConfigResourceManager.#ctor(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>
            Creates an instance of this class using the specified assembly to locate the config file and the specified root
            element location.
            </summary>
            <param name="assembly">The assembly whose config file contains the resources.</param>
            <param name="rootElementLocation">
            The root element location in the XML document of the resources. This XPath expression is relative to the
            document element.
            </param>
            <param name="throwExceptionIfBaseConfigFileNotFound">
            True if a System.IO.FileNotFoundException exception should be thrown if the base config file is not found.
            </param>
        </member>
        <member name="P:IDS.Globalization.AssemblyConfigResourceManager.Assembly">
            <summary>
            Gets the assembly whose resources will be retrieved.
            </summary>
        </member>
        <member name="P:IDS.Globalization.AssemblyConfigResourceManager.BaseConfigFile">
            <summary>
            Gets the base config file for the assembly that contains the assembly's default or language neutral resources.
            </summary>
        </member>
        <member name="P:IDS.Globalization.AssemblyConfigResourceManager.RootElementLocation">
            <summary>
            Gets the XPath expression that identifies the root location of the resources in the config file relative to the document
            element.
            </summary>
        </member>
        <member name="M:IDS.Globalization.AssemblyConfigResourceManager.GetValue(System.String)">
            <summary>
            Gets the value for the specified key. This value will either be a System.String object or a System.Xml.XmlElement object.
            The System.Threading.Thread.CurrentThread.CurrentUICulture will be used to locate the resource.
            </summary>
            <param name="key">The key whose value should be returned.</param>
            <returns>The value for the specified key.</returns>
        </member>
        <member name="M:IDS.Globalization.AssemblyConfigResourceManager.GetValue(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the value for the specified key. This value will either be a System.String object or a System.Xml.XmlElement object.
            If the culture parameter is null, the System.Threading.Thread.CurrentThread.CurrentUICulture will be used to locate the 
            resource.
            </summary>
            <param name="key">The key whose value should be returned.</param>
            <param name="culture">The culture of the resource to search for.</param>
            <returns>The value for the specified key.</returns>
        </member>
        <member name="M:IDS.Globalization.AssemblyConfigResourceManager.GetLocalizedBaseConfigFile(System.Globalization.CultureInfo)">
            <summary>
            Gets the path and file name of the base config file converted to the specified culture.
            </summary>
            <param name="localizedCulture">The culture to which to convert the base config file.</param>
            <returns>The path and file name of the base config file converted to the specified culture.</returns>
        </member>
        <member name="M:IDS.Globalization.AssemblyConfigResourceManager.GetValueInternal(System.Xml.XmlDocument,System.String)">
            <summary>
            Gets the value of the key in the specified System.Xml.XmlDocument object. The key is relative to the
            RootElementLocation property value.
            </summary>
            <param name="xmlDoc">The System.Xml.XmlDocument containing the config file.</param>
            <param name="key">The key of the value to return.</param>
            <returns>The value of the specified key.</returns>
        </member>
        <member name="T:IDS.Globalization.CurrentCulture">
            <summary>
            Provides helper methods for formatting values using the culture of the current thread.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="P:IDS.Globalization.CurrentCulture.CultureInfo">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo" /> instance
            that represents the culture used by the current thread.
            </summary>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.Format(System.String,System.Object[])">
            <summary>
            Formats a string using the culture of the current thread.
            </summary>
            <param name="format">A <see cref="T:System.String"/> that contains zero or more format items.</param>
            <param name="args">An <see cref="T:System.Object"/> array that contains zero or more objects
            to format.</param>
            <returns>
            The result of calling <see cref="M:System.String.Format(System.String,System.Object[])">String.Format</see>
            with the culture of the current thread and the specified
            formatting arguments.
            </returns>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ParseByte(System.String)">
            <summary>
            Converts the culture-specific string representation of a number
            to its equivalent <see cref="T:System.Byte" /> value, using the culture
            of the current thread.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the number to convert.
            </param>
            <returns>
            A <see cref="T:System.Byte" /> value equivalent to the number contained
            in <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Byte.Parse(System.String)">Byte.Parse</seealso>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ParseDateTime(System.String)">
            <summary>
            Converts the culture-specific string representation of a date
            and time to its equivalent <see cref="T:System.DateTime" /> value,
            using the culture of the current thread.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the date and time to convert.
            </param>
            <returns>
            A <see cref="T:System.DateTime" /> value equivalent to the date and time
            contained in <paramref name="value" />.
            </returns>
            <seealso cref="M:System.DateTime.Parse(System.String)">DateTime.Parse</seealso>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ParseDecimal(System.String)">
            <summary>
            Converts the culture-specific string representation of a number
            to its equivalent <see cref="T:System.Decimal" /> value, using the culture
            of the current thread.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the number to convert.
            </param>
            <returns>
            A <see cref="T:System.Decimal" /> value equivalent to the number contained
            in <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Decimal.Parse(System.String)">Decimal.Parse</seealso>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ParseDouble(System.String)">
            <summary>
            Converts the culture-specific string representation of a number
            to its equivalent <see cref="T:System.Double" /> value, using the culture
            of the current thread.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the number to convert.
            </param>
            <returns>
            A <see cref="T:System.Double" /> value equivalent to the number contained
            in <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Double.Parse(System.String)">Double.Parse</seealso>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ParseInt16(System.String)">
            <summary>
            Converts the culture-specific string representation of a number
            to its equivalent <see cref="T:System.Int16" /> value, using the culture
            of the current thread.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the number to convert.
            </param>
            <returns>
            An <see cref="T:System.Int16" /> value equivalent to the number contained
            in <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Int16.Parse(System.String)">Int16.Parse</seealso>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ParseInt32(System.String)">
            <summary>
            Converts the culture-specific string representation of a number
            to its equivalent <see cref="T:System.Int32" /> value, using the culture
            of the current thread.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the number to convert.
            </param>
            <returns>
            An <see cref="T:System.Int32" /> value equivalent to the number contained
            in <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Int32.Parse(System.String)">Int32.Parse</seealso>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ParseInt64(System.String)">
            <summary>
            Converts the culture-specific string representation of a number
            to its equivalent <see cref="T:System.Int64" /> value, using the culture
            of the current thread.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the number to convert.
            </param>
            <returns>
            An <see cref="T:System.Int64" /> value equivalent to the number contained
            in <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Int64.Parse(System.String)">Int64.Parse</seealso>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ParseSingle(System.String)">
            <summary>
            Converts the culture-specific string representation of a number
            to its equivalent <see cref="T:System.Single" /> value, using the culture
            of the current thread.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the number to convert.
            </param>
            <returns>
            A <see cref="T:System.Single" /> value equivalent to the number contained
            in <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Single.Parse(System.String)">Single.Parse</seealso>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ToString(System.Byte)">
            <summary>
            Gets the string representation of a <see cref="T:System.Byte" /> value
            for the culture of the current thread.
            </summary>
            <param name="value">
            The <see cref="T:System.Byte" /> value to convert.
            </param>
            <returns>
            The culture-specific string representation of
            <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Byte.ToString(System.String)">Byte.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ToString(System.DateTime,System.String)">
            <summary>
            Gets the string representation of a <see cref="T:System.DateTime" /> value
            for the culture of the current thread, using a specified format.
            </summary>
            <param name="value">
            The <see cref="T:System.DateTime" /> value to convert.
            </param>
            <param name="format">
            A format specification.
            </param>
            <returns>
            The culture-specific string representation of
            <paramref name="value" /> as specified by
            <paramref name="format" />.
            </returns>
            <seealso cref="M:System.DateTime.ToString(System.String)">DateTime.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ToString(System.Decimal,System.String)">
            <summary>
            Gets the string representation of a <see cref="T:System.Decimal" /> value
            for the culture of the current thread, using a specified format.
            </summary>
            <param name="value">
            The <see cref="T:System.Decimal" /> value to convert.
            </param>
            <param name="format">
            A format specification.
            </param>
            <returns>
            The culture-specific string representation of
            <paramref name="value" /> as specified by
            <paramref name="format" />.
            </returns>
            <seealso cref="M:System.Decimal.ToString(System.String)">Decimal.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ToString(System.Double,System.String)">
            <summary>
            Gets the string representation of a <see cref="T:System.Double" /> value
            for the culture of the current thread, using a specified format.
            </summary>
            <param name="value">
            The <see cref="T:System.Double" /> value to convert.
            </param>
            <param name="format">
            A format specification.
            </param>
            <returns>
            The culture-specific string representation of
            <paramref name="value" /> as specified by
            <paramref name="format" />.
            </returns>
            <seealso cref="M:System.Double.ToString(System.String)">Double.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ToString(System.Int16)">
            <summary>
            Gets the string representation of an <see cref="T:System.Int16" /> value
            for the culture of the current thread.
            </summary>
            <param name="value">
            The <see cref="T:System.Int16" /> value to convert.
            </param>
            <returns>
            The culture-specific string representation of
            <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Int16.ToString(System.String)">Int16.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ToString(System.Int32)">
            <summary>
            Gets the string representation of an <see cref="T:System.Int32" /> value
            for the culture of the current thread.
            </summary>
            <param name="value">
            The <see cref="T:System.Int32" /> value to convert.
            </param>
            <returns>
            The culture-specific string representation of
            <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Int32.ToString(System.String)">Int32.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ToString(System.Int32,System.String)">
            <summary>
            Gets the string representation of an <see cref="T:System.Int32" /> value
            for the culture of the current thread, using a specified format.
            </summary>
            <param name="value">
            The <see cref="T:System.Int32" /> value to convert.
            </param>
            <param name="format">
            A format specification.
            </param>
            <returns>
            The culture-specific string representation of
            <paramref name="value" /> as specified by
            <paramref name="format" />.
            </returns>
            <seealso cref="M:System.Int32.ToString(System.String)">Int32.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ToString(System.Int64)">
            <summary>
            Gets the string representation of an <see cref="T:System.Int64" /> value
            for the culture of the current thread.
            </summary>
            <param name="value">
            The <see cref="T:System.Int64" /> value to convert.
            </param>
            <returns>
            The culture-specific string representation of
            <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Int64.ToString(System.String)">Int64.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.CurrentCulture.ToString(System.Single,System.String)">
            <summary>
            Gets the string representation of a <see cref="T:System.Single" /> value
            for the culture of the current thread, using a specified format.
            </summary>
            <param name="value">
            The <see cref="T:System.Single" /> value to convert.
            </param>
            <param name="format">
            A format specification.
            </param>
            <returns>
            The culture-specific string representation of
            <paramref name="value" /> as specified by
            <paramref name="format" />.
            </returns>
            <seealso cref="M:System.Single.ToString(System.String)">Single.ToString</seealso>
        </member>
        <member name="T:IDS.Globalization.ILocalizedException">
            <summary>
            Allows an <see cref="T:System.Exception" /> object to specify a localized error message for display to the user.
            </summary>
        </member>
        <member name="P:IDS.Globalization.ILocalizedException.LocalizedMessage">
            <summary>
            Gets a localized error message, suitable for display to the user, that explains the reason for the exception.
            </summary>
        </member>
        <member name="T:IDS.Globalization.InvariantCulture">
            <summary>
            Provides helper methods for formatting values and parsing strings using the invariant culture.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="P:IDS.Globalization.InvariantCulture.CultureInfo">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo" /> instance
            that is culture independent.
            </summary>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.CompareIgnoringCase(System.String,System.String)">
            <summary>
            Performs a case-insensitive comparison of two strings
            using the invariant culture.
            </summary>
            <param name="value1">
            The first <see cref="T:System.String" />.
            </param>
            <param name="value2">
            The second <see cref="T:System.String" />.
            </param>
            <returns>
            An <see cref="T:System.Int32" /> value indicating the lexical relationship
            between the two comparisons (see
            <see cref="M:System.String.Compare(System.String,System.String)">String.Compare(string, string)</see>).
            </returns>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.Format(System.String,System.Object[])">
            <summary>
            Formats a string using the invariant culture.
            </summary>
            <param name="format">
            A <see cref="T:System.String" /> that contains zero or more format items.
            </param>
            <param name="args">
            An <see cref="T:System.Object" /> array that contains zero or more objects
            to format.
            </param>
            <returns>
            The result of calling <see cref="M:System.String.Format(System.String,System.Object)">String.Format</see>
            with the invariant culture and the specified formatting arguments.
            </returns>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ParseByte(System.String)">
            <summary>
            Converts the culture-independent string representation of a number
            to its equivalent <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the number to convert.
            </param>
            <returns>
            A <see cref="T:System.Byte" /> value equivalent to the number contained
            in <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Byte.Parse(System.String)">Byte.Parse</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ParseDateTime(System.String)">
            <summary>
            Converts the culture-independent string representation of a date
            and time to its equivalent <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the date and time to convert.
            </param>
            <returns>
            A <see cref="T:System.DateTime" /> value equivalent to the date and time
            contained in <paramref name="value" />.
            </returns>
            <seealso cref="M:System.DateTime.Parse(System.String)">DateTime.Parse</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ParseDateTime(System.String,System.String)">
            <summary>
            Converts the culture-independent string representation of a date
            and time to its equivalent <see cref="T:System.DateTime" /> value,
            using a specified format.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the date and time to convert.
            </param>
            <param name="format">
            A format specification.
            </param>
            <returns>
            A <see cref="T:System.DateTime" /> value equivalent to the date and time
            contained in <paramref name="value" /> as specified by
            <paramref name="format" />.
            </returns>
            <seealso cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">DateTime.ParseExact</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ParseDecimal(System.String)">
            <summary>
            Converts the culture-independent string representation of a number
            to its equivalent <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the number to convert.
            </param>
            <returns>
            A <see cref="T:System.Decimal" /> value equivalent to the number contained
            in <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Decimal.Parse(System.String)">Decimal.Parse</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ParseDouble(System.String)">
            <summary>
            Converts the culture-independent string representation of a number
            to its equivalent <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the number to convert.
            </param>
            <returns>
            A <see cref="T:System.Double" /> value equivalent to the number contained
            in <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Double.Parse(System.String)">Double.Parse</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ParseInt16(System.String)">
            <summary>
            Converts the culture-independent string representation of a number
            to its equivalent <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the number to convert.
            </param>
            <returns>
            An <see cref="T:System.Int16" /> value equivalent to the number contained
            in <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Int16.Parse(System.String)">Int16.Parse</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ParseInt32(System.String)">
            <summary>
            Converts the culture-independent string representation of a number
            to its equivalent <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the number to convert.
            </param>
            <returns>
            An <see cref="T:System.Int32" /> value equivalent to the number contained
            in <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Int32.Parse(System.String)">Int32.Parse</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ParseInt64(System.String)">
            <summary>
            Converts the culture-independent string representation of a number
            to its equivalent <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the number to convert.
            </param>
            <returns>
            An <see cref="T:System.Int64" /> value equivalent to the number contained
            in <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Int64.Parse(System.String)">Int64.Parse</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ParseSingle(System.String)">
            <summary>
            Converts the culture-independent string representation of a number
            to its equivalent <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /> that contains the number to convert.
            </param>
            <returns>
            A <see cref="T:System.Single" /> value equivalent to the number contained
            in <paramref name="value" />.
            </returns>
            <seealso cref="M:System.Single.Parse(System.String)">Single.Parse</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ToString(System.Byte)">
            <summary>
            Gets the culture-independent string representation of
            a <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">
            The <see cref="T:System.Byte" /> value to convert.
            </param>
            <returns>
            The culture-independent string representation of
            <paramref name="value" />, consisting of one or more digits with
            no leading zeroes.
            </returns>
            <seealso cref="M:System.Byte.ToString">Byte.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ToString(System.DateTime,System.String)">
            <summary>
            Gets the culture-independent string representation of
            a <see cref="T:System.DateTime" /> value, using a specified format.
            </summary>
            <param name="value">
            The <see cref="T:System.DateTime" /> value to convert.
            </param>
            <param name="format">
            A format specification.
            </param>
            <returns>
            The culture-independent string representation of
            <paramref name="value" /> as specified by
            <paramref name="format" />.
            </returns>
            <seealso cref="M:System.DateTime.ToString">DateTime.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ToString(System.Decimal,System.String)">
            <summary>
            Gets the culture-independent string representation of
            a <see cref="T:System.Decimal" /> value, using a specified format.
            </summary>
            <param name="value">
            The <see cref="T:System.Decimal" /> value to convert.
            </param>
            <param name="format">
            A format specification.
            </param>
            <returns>
            The culture-independent string representation of
            <paramref name="value" /> as specified by
            <paramref name="format" />.
            </returns>
            <seealso cref="M:System.Decimal.ToString">Decimal.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ToString(System.Double,System.String)">
            <summary>
            Gets the culture-independent string representation of
            a <see cref="T:System.Double" /> value, using a specified format.
            </summary>
            <param name="value">
            The <see cref="T:System.Double" /> value to convert.
            </param>
            <param name="format">
            A format specification.
            </param>
            <returns>
            The culture-independent string representation of
            <paramref name="value" /> as specified by
            <paramref name="format" />.
            </returns>
            <seealso cref="M:System.Double.ToString">Double.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ToString(System.Int16)">
            <summary>
            Gets the culture-independent string representation of
            an <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">
            The <see cref="T:System.Int16" /> value to convert.
            </param>
            <returns>
            The culture-independent string representation of
            <paramref name="value" />, consisting of a negative sign if
            the value is negative, followed by one or more digits with
            no leading zeroes.
            </returns>
            <seealso cref="M:System.Int16.ToString">Int16.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ToString(System.Int32)">
            <summary>
            Gets the culture-independent string representation of
            an <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">
            The <see cref="T:System.Int32" /> value to convert.
            </param>
            <returns>
            The culture-independent string representation of
            <paramref name="value" />, consisting of a negative sign if
            the value is negative, followed by one or more digits with
            no leading zeroes.
            </returns>
            <seealso cref="M:System.Int32.ToString">Int32.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ToString(System.Int32,System.String)">
            <summary>
            Gets the culture-independent string representation of
            an <see cref="T:System.Int32" /> value, using a specified format.
            </summary>
            <param name="value">
            The <see cref="T:System.Int32" /> value to convert.
            </param>
            <param name="format">
            A format specification.
            </param>
            <returns>
            The culture-independent string representation of
            <paramref name="value" /> as specified by
            <paramref name="format" />.
            </returns>
            <seealso cref="M:System.Int32.ToString">Int32.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ToString(System.Int64)">
            <summary>
            Gets the culture-independent string representation of
            an <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">
            The <see cref="T:System.Int64" /> value to convert.
            </param>
            <returns>
            The culture-independent string representation of
            <paramref name="value" />, consisting of a negative sign if
            the value is negative, followed by one or more digits with
            no leading zeroes.
            </returns>
            <seealso cref="M:System.Int64.ToString">Int64.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ToString(System.Single,System.String)">
            <summary>
            Gets the culture-independent string representation of
            a <see cref="T:System.Single" /> value, using a specified format.
            </summary>
            <param name="value">
            The <see cref="T:System.Single" /> value to convert.
            </param>
            <param name="format">
            A format specification.
            </param>
            <returns>
            The culture-independent string representation of
            <paramref name="value" /> as specified by
            <paramref name="format" />.
            </returns>
            <seealso cref="M:System.Single.ToString">Single.ToString</seealso>
        </member>
        <member name="M:IDS.Globalization.InvariantCulture.ToString(System.UInt32,System.String)">
            <summary>
            Gets the culture-independent string representation of
            a <see cref="T:System.UInt32" /> value, using a specified format.
            </summary>
            <param name="value">
            The <see cref="T:System.UInt32" /> value to convert.
            </param>
            <param name="format">
            A format specification.
            </param>
            <returns>
            The culture-independent string representation of
            <paramref name="value" /> as specified by
            <paramref name="format" />.
            </returns>
            <seealso cref="M:System.UInt32.ToString">UInt32.ToString</seealso>
        </member>
        <member name="T:IDS.Globalization.Localizer">
            <summary>
            Retrieves localized strings and other resources for localizable objects.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Globalization.Localizer.ApplyResources">
            <summary>
            Updates properties of the associated localizable object
            with the values of correspondingly named resources,
            using the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <remarks>
            Each property of the associated localizable object is assigned
            the value of the resource whose name is "this.<var>PropertyName</var>".
            </remarks>
        </member>
        <member name="M:IDS.Globalization.Localizer.ApplyResources(System.Globalization.CultureInfo)">
            <summary>
            Updates properties of the associated localizable object
            with the values of correspondingly named resources,
            using a specified <see cref="T:System.Globalization.CultureInfo" />.
            </summary>
            <param name="culture">
            The culture of the resources to apply.
            </param>
            <remarks>
            Each property of the associated localizable object is assigned
            the value of the resource whose name is "this.<var>PropertyName</var>".
            </remarks>
        </member>
        <member name="M:IDS.Globalization.Localizer.CreateFor``1(``0)">
            <summary>
            Creates a <see cref="T:IDS.Globalization.Localizer" /> for a specified localizable object.
            </summary>
            <typeparam name="T">
            The static type of the <paramref name="localizableObject" />,
            used to find the associated .resources file.
            </typeparam>
            <param name="localizableObject">
            The object that the localizer is associated with.
            </param>
            <returns>
            A <see cref="T:IDS.Globalization.Localizer" /> for the <paramref name="localizableObject" />.
            </returns>
        </member>
        <member name="M:IDS.Globalization.Localizer.CreateFor(System.Type,System.Object)">
            <summary>
            Creates a <see cref="T:IDS.Globalization.Localizer" /> for a specified localizable object.
            </summary>
            <param name="type">
            The type of the <paramref name="localizableObject" />,
            used to find the associated .resources file.
            </param>
            <param name="localizableObject">
            The object that the localizer is associated with.
            </param>
            <returns>
            A <see cref="T:IDS.Globalization.Localizer" /> for the <paramref name="localizableObject" />.
            </returns>
        </member>
        <member name="M:IDS.Globalization.Localizer.GetForwardedResourceValue(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Retrieves the value of a specified resource.
            </summary>
            <param name="value">
            A resource reference in the format "=Resource, Type, Assembly".
            </param>
            <param name="culture">
            The culture of the resource to retrieve.
            </param>
            <returns>
            The value of the resource referenced by <paramref name="value" />,
            or <paramref name="value" /> itself if <paramref name="value" />
            is not a resource reference.
            </returns>
        </member>
        <member name="M:IDS.Globalization.Localizer.GetResourceString(System.String)">
            <summary>
            Retrieves the value of a specified string resource.
            </summary>
            <param name="name">
            The name of the resource to retrieve.
            </param>
            <returns>
            The value of the resource localized for the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />,
            or <see langword="null" /> if no matching resource is found.
            </returns>
        </member>
        <member name="M:IDS.Globalization.Localizer.GetResourceString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Retrieves the value of a specified string resource.
            </summary>
            <param name="name">
            The name of the resource to retrieve.
            </param>
            <param name="culture">
            The culture of the resource to retrieve.
            </param>
            <returns>
            The value of the resource localized for the <paramref name="culture" />,
            or <see langword="null" /> if no matching resource is found.
            </returns>
        </member>
        <member name="T:IDS.Globalization.Localizer.ResourceManagerProvider">
            <threadsafety static="true" instance="true" />
        </member>
        <member name="T:IDS.Globalization.Localizer.CachingResourceManagerProvider">
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:IDS.Globalization.MissingResourceException">
            <summary>
            The exception that is thrown when the <see cref="T:IDS.Globalization.Localizer" /> class
            cannot find a resource.
            </summary>
        </member>
        <member name="M:IDS.Globalization.MissingResourceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Globalization.MissingResourceException" /> class.
            </summary>
        </member>
        <member name="M:IDS.Globalization.MissingResourceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Globalization.MissingResourceException" /> class
            with a specified error message.
            </summary>
            <param name="message">
            An error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:IDS.Globalization.MissingResourceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Globalization.MissingResourceException" /> class
            with a specified error message and a reference to the inner exception
            that is the cause of this exception.
            </summary>
            <param name="message">
            An error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception,
            or <see langword="null" /> if no inner exception is specified.
            </param>
        </member>
        <member name="M:IDS.Globalization.MissingResourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Globalization.MissingResourceException" /> class
            with serialized data.
            </summary>
            <param name="info">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized
            object data.
            </param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
            information about the source of the serialized stream.
            </param>
        </member>
        <member name="T:IDS.Globalization.ResourceManagerCache">
            <summary>
            Represents a thread-safe cache of <see cref="T:System.Resources.ResourceManager" /> objects,
            indexed by <see cref="T:System.Type" />.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Globalization.ResourceManagerCache.CreateResourceManager(System.Type)">
            <summary>
            Creates a <see cref="T:System.Resources.ResourceManager" /> for a specified <see cref="T:System.Type" />
            and caches it.
            </summary>
        </member>
        <member name="M:IDS.Globalization.ResourceManagerCache.GetExistingResourceManager(System.Type,System.Resources.ResourceManager@)">
            <summary>
            Retrieves the cached <see cref="T:System.Resources.ResourceManager" />, if any,
            for a specified <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="T:IDS.Globalization.UILocalized`1">
            <summary>
            Represents a single logical entity whose value varies based on
            the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            The <see cref="T:IDS.Globalization.UILocalized`1" /> structure maintains a mapping from
            <see cref="T:System.Globalization.CultureInfo" /> objects to localized values.
            </summary>
            <typeparam name="T">
            The type of each localized value.
            </typeparam>
        </member>
        <member name="M:IDS.Globalization.UILocalized`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Globalization.UILocalized`1" /> structure.
            </summary>
            <param name="invariantValue">
            The initial value for the invariant culture.
            </param>
        </member>
        <member name="P:IDS.Globalization.UILocalized`1.Value">
            <summary>
            Gets or sets the localized value for the
            <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
        </member>
        <member name="M:IDS.Globalization.UILocalized`1.GetValueForCulture(System.Globalization.CultureInfo)">
            <summary>
            Gets the localized value for a specified culture.
            </summary>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo" />.
            </param>
            <returns>
            The localized value for the specified culture.
            </returns>
        </member>
        <member name="M:IDS.Globalization.UILocalized`1.GetValueForCulture(System.String)">
            <summary>
            Gets the localized value for a specified culture.
            </summary>
            <param name="cultureName">
            The <see cref="P:System.Globalization.CultureInfo.Name" /> of a culture.
            </param>
            <returns>
            The localized value for the specified culture.
            </returns>
        </member>
        <member name="M:IDS.Globalization.UILocalized`1.SetValueForCulture(System.String,`0)">
            <summary>
            Sets the localized value for a specified culture.
            </summary>
            <param name="cultureName">
            The <see cref="P:System.Globalization.CultureInfo.Name" /> of a culture.
            </param>
            <param name="value">
            The localized value for the specified culture.
            </param>
        </member>
        <member name="M:IDS.Globalization.UILocalized`1.SetValue``1(System.Collections.Generic.IDictionary{``0,IDS.Globalization.UILocalized{`0}},``0,`0)">
            <summary>
            Sets the <see cref="P:IDS.Globalization.UILocalized`1.Value" /> property of a <see cref="T:IDS.Globalization.UILocalized`1" /> instance
            that belongs to a dictionary.
            </summary>
            <remarks>
            This method is conceptually equivalent to <c>dictionary[key].Value = value</c>.
            However, that code does not compile because <see cref="T:IDS.Globalization.UILocalized`1" /> is a <see langword="struct" />.
            </remarks>
        </member>
        <member name="T:IDS.HolidayCalculator">
            <summary>
            Abstract base class from which all Holiday Calculators can derive.
            </summary>
        </member>
        <member name="F:IDS.HolidayCalculator.staticHolidays">
            <summary>
            The holidays that are always on a specific date.  New Year's Day, Christmas, 4th of July, etc.
            </summary>
            <remarks>
            Does not include holidays that are on a specific day of the month like Memorial Day (Last Monday in May)
            </remarks>
        </member>
        <member name="M:IDS.HolidayCalculator.#ctor">
            <summary>
            Initializes the staticHolidays member to a new, empty, HolidayCollection
            </summary>
        </member>
        <member name="M:IDS.HolidayCalculator.#ctor(IDS.HolidayCollection)">
            <summary>
            Initializes the staticHolidays member to the holidays HolidayCollection
            </summary>
            <param name="holidays">An HolidayCollection of static holidays to use.</param>
        </member>
        <member name="M:IDS.HolidayCalculator.DateIsHoliday(System.DateTime)">
            <summary>
            Determines if a given date is a holiday.
            </summary>
            <param name="date">The date whose holiday status is to be determined.</param>
            <returns>True if date is a holiday, false otherwise.</returns>
            <remarks>
            	This method performs a logical 'OR' of the results from calls to DateIsStaticHoliday and DateIsDynamicHoliday.
            </remarks>
        </member>
        <member name="M:IDS.HolidayCalculator.DateIsStaticHoliday(System.DateTime)">
            <summary>
            Determines if the given date is a static holiday (A holiday that occurs on the same date every year, such as New Year's Day).
            </summary>
            <param name="date">The date whose holiday status is to be determined.</param>
            <returns>True if date is a holiday, false otherwise.</returns>
        </member>
        <member name="M:IDS.HolidayCalculator.DateIsDynamicHoliday(System.DateTime)">
            <summary>
            Determines if the given date is a dynamic holiday (A holiday that occurs on a specific day of a month, such as the last Monday in May, Memorial Day).
            </summary>
            <param name="date">The date whose holiday status is to be determined.</param>
            <returns>True if date is a holiday, false otherwise.</returns>
        </member>
        <member name="M:IDS.HolidayCalculator.GetAllHolidays(System.Int32)">
            <summary>
            Returns a list of dates which contains all the static holidays for the given year.
            </summary>
            <param name="year">Year for which the list of static holidays are being retrieved.</param>
            <returns>Returns a list of dates for the years static holidays which include New Year's Day, Independence Day, Veteran's Day and Christmas Day.</returns>
        </member>
        <member name="M:IDS.HolidayCalculator.GetStaticHolidays(System.Int32)">
            <summary>
            Returns a list of dates which contains all the holidays for the given year.
            </summary>
            <param name="year">Year for which the list of holidays are being retrieved.</param>
            <returns>Returns a list of dates for the years static and dynamic holidays which include static - New Year's Day, 
            Independence Day, Veteran's Day and Christmas Day, dynamic - Martin Luther King Day, President's Day, Memorial Day, 
            Labor Day, Columbus Day, and Thanksgiving Day.</returns>
        </member>
        <member name="M:IDS.HolidayCalculator.GetDynamicHolidays(System.Int32)">
            <summary>
            Returns a list of dates which contains all the dynamic holidays for the given year.
            </summary>
            <param name="year">Year for which the list of dynamic holidays are being retrieved.</param>
            <returns>Returns a list of dates for the years dynamic holidays which include Martin Luther King Day, President's Day, Memorial Day, Labor Day, Columbus Day, and Thanksgiving Day.</returns>
        </member>
        <member name="M:IDS.HolidayCalculator.FindDynamicHoliday(System.Int32,System.Int32,System.DayOfWeek,System.Int32)">
            <summary>
            Finds a dynamic holiday based on a given year, month, day of the week, and instance of the day of the week within the month.
            </summary>
            <param name="year">The year in which to determine the date of the holiday.</param>
            <param name="month">The month in which to determine the date of the holiday.</param>
            <param name="dayOfWeek">The day of the week the holiday is to occur on.</param>
            <param name="instance">The instance of the particular day of the week in the specified month the holiday is to occur on.</param>
            <returns>A <see cref="T:System.DateTime">DateTime</see> for the holiday in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	instance &lt; 1, year &lt; 1, or month not between 1 and 12 (inclusive).
            </exception>
            <example>
            	<code>
            	// Find Presidents Day, 2006 (3rd Monday in February)
            	DateTime presidentsDay2006 = holidayCalculator.FindDynamicHoliday(2006, 2, DayOfWeek.Monday, 3);
            	</code>
            </example>
            <remarks>For finding the last instance in the month, use <see cref="M:IDS.HolidayCalculator.FindLastInMonthDynamicHoliday(System.Int32,System.Int32,System.DayOfWeek)">FindLastInMonthDynamicHoliday(int, int, DayOfWeek)</see>.</remarks>
        </member>
        <member name="M:IDS.HolidayCalculator.FindLastInMonthDynamicHoliday(System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
            Finds the date of a holiday that occurs on the last instance of a given day of the week in a given month and year.  (i.e. Thanksgiving, last Thursday in November)
            </summary>
            <param name="year">The year in which to determine the date of the holiday.</param>
            <param name="month">The month in which to determine the date of the holiday.</param>
            <param name="dayOfWeek">The day of the week the holiday is to occur on.</param>
            <returns>A <see cref="T:System.DateTime">DateTime</see> for the holiday in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	year &lt; 1, or month not between 1 and 12 (inclusive).
            </exception>
            <example>
            	// Find Thanksgiving Day, 2006 (Last Thursday in November)
            	DateTime thanksgivingDay2006 = holidayCalculator.FindLastInMonthDynamicHoliday(2006, 11, DayOfWeek.Thursday);
            </example>
            <remarks>For finding a specific instance of a day of the week in a month and year, use <see cref="M:IDS.HolidayCalculator.FindDynamicHoliday(System.Int32,System.Int32,System.DayOfWeek,System.Int32)">FindDynamicHoliday(int, int, DayOfWeek, int)</see>.</remarks>
        </member>
        <member name="M:IDS.HolidayCalculator.FindHolidayObservanceDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.HolidayCalculator.FindHolidayObservanceDate(System.DateTime)">
            <summary>
            
            </summary>
            <param name="strictHoliday"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.HolidayCollection">
            <summary>
            The HolidayCollection class contains a collection of dates that represent holidays.
            </summary>
        </member>
        <member name="M:IDS.HolidayCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HolidayCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.HolidayCollection.#ctor(System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.HolidayCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.HolidayCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the HolidayCollection class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="T:IDS.ICloneable`1">
            <summary>
            Defines a method that allows an object to be copied.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
        </member>
        <member name="M:IDS.ICloneable`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:IDS.IDSActivator">
            <summary>
            The IDSActivator is a helper class for creating instances based on a type string.
            </summary>
        </member>
        <member name="M:IDS.IDSActivator.CreateInstance(System.String)">
            <summary>
            Creates a new instance of the specified type.
            </summary>
            <param name="typeString">The name of the requested type.</param>
            <returns>A new instance of the specified type.</returns>
            <remarks>
            The typeString parameter can be fully-qualified
            (Class1, IDS.Library, Version=1.0.0.0, Culture...) or not fully-qualified
            (Class1, IDS.Library).
            
            If a non-fully-qualified name is specified, the assembly
            containing the type must reside in the private cache (bin directory).
            
            If a fully-qualified name is specified, an attempt will be made first to locate the
            assembly in the GAC.  If it is not found, an attempt will be made to locate the assembly
            in the private cache (bin directory).  
            
            If the assembly can not be located, a TypeLoadException will be thrown.
            </remarks>
            <exception cref="T:System.TypeLoadException">A TypeLoadException is thrown if the type can't be loaded.</exception>
        </member>
        <member name="M:IDS.IDSActivator.CreateInstance``1(System.String)">
            <summary>
            Creates a new instance of the specified type.
            </summary>
            <param name="typeString">The name of the requested type.</param>
            <returns>A new instance of the specified type.</returns>
            <remarks>
            The typeString parameter can be fully-qualified
            (Class1, IDS.Library, Version=1.0.0.0, Culture...) or not fully-qualified
            (Class1, IDS.Library).
            
            If a non-fully-qualified name is specified, the assembly
            containing the type must reside in the private cache (bin directory).
            
            If a fully-qualified name is specified, an attempt will be made first to locate the
            assembly in the GAC.  If it is not found, an attempt will be made to locate the assembly
            in the private cache (bin directory).  
            
            If the assembly can not be located, a TypeLoadException will be thrown.
            </remarks>
            <exception cref="T:System.TypeLoadException">A TypeLoadException is thrown if the type can't be loaded.</exception>
        </member>
        <member name="T:IDS.IHolidayCalculator">
            <summary>
            The IHolidayCalculator is an interface for implementing a calculator that determines holidays.
            </summary>
        </member>
        <member name="M:IDS.IHolidayCalculator.DateIsHoliday(System.DateTime)">
            <summary>
            Determines if the given date is a holiday.
            </summary>
            <param name="date">The date to test for a holiday.</param>
            <returns>Returns true if the date is a holiday, otherwise false.</returns>
        </member>
        <member name="M:IDS.IHolidayCalculator.GetAllHolidays(System.Int32)">
            <summary>
            Gets all holidays for the given year.
            </summary>
            <param name="year">The year to retrieve holidays for.</param>
            <returns>Returns an array of holidays.</returns>
        </member>
        <member name="M:IDS.IHolidayCalculator.GetStaticHolidays(System.Int32)">
            <summary>
            Gets the static holidays for the given year.
            </summary>
            <param name="year">The year to retrieve static holidays for.</param>
            <returns>Returns an array of static holidays.</returns>
            <remarks>
            Static holidays are holidays that always fall on the same day each year. For example,
            New Years Day is a static holiday because it always falls on January 1st.
            </remarks>
        </member>
        <member name="M:IDS.IHolidayCalculator.GetDynamicHolidays(System.Int32)">
            <summary>
            Gets the dynamic holidays for the given year.
            </summary>
            <param name="year">The year to retrieve dynamic holidays for.</param>
            <returns>Returns an array of dynamic holidays.</returns>
            <remarks>
            Dynamic holidays are holidays that can fall on different days each year. For example,
            Thanksgiving is a dynamic holiday because it is the 4th Thursday of November and that
            particular date changes each year.
            </remarks>
        </member>
        <member name="T:IDS.IO.FileHelper">
            <summary>
            File class
            </summary>
        </member>
        <member name="M:IDS.IO.FileHelper.WriteAllText(System.String,System.String)">
            <summary>
            Write File
            </summary>
            <param name="path"></param>
            <param name="contents"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.IO.FileHelper.WriteAllText(System.String,System.String,System.String)">
            <summary>
            Write File
            </summary>
            <param name="path"></param>
            <param name="contents"></param>
            <param name="backupPath"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.IO.FileHelper.CleanFileName(System.String,System.String)">
            <summary>
            Remove invalid chars from file name
            </summary>
            <param name="filename"></param>
            <param name="replacementChar">Char to replace any chars that are removed</param>
            <returns></returns>
        </member>
        <member name="T:IDS.IO.FileSystemStorageProvider">
            <summary>
            Implements a <see cref="T:IDS.IO.StorageProvider" /> that accesses the local file system.
            </summary>
        </member>
        <member name="P:IDS.IO.FileSystemStorageProvider.DestinationFolder">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.IO.FileSystemStorageProvider.ReadBytes(System.String)">
            <inheritdoc />
        </member>
        <member name="M:IDS.IO.FileSystemStorageProvider.Write(System.String,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:IDS.IO.FileSystemStorageProvider.WriteBytes(System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:IDS.IO.IOProxy">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDS.IO.IOProxy.Default">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.IO.IOProxy.SendRequest(System.String,System.Func{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="sendRequestHandler"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.IO.IOProxy.SendRequest``2(System.Func{``0,``1},``0,System.Action{System.String},System.Action{System.String},``0@)">
            <summary>
            
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="sendRequestHandler"></param>
            <param name="request"></param>
            <param name="requestLogger"></param>
            <param name="responseLogger"></param>
            <param name="tweakedRequest"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.IO.IOProxy.SendRequest``2(System.Func{``0,``1},``0,System.Action{System.String},System.Action{System.String})">
            <summary>
            
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="sendRequestHandler"></param>
            <param name="request"></param>
            <param name="requestLogger"></param>
            <param name="responseLogger"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.IO.IOProxy.SendRequestAsync(System.String,System.Action{System.String})">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="sendRequestHandler"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.IO.IOProxy.SendRequestAsync(System.String,System.Func{System.String,System.Threading.Tasks.Task{System.String}})">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="sendRequestHandler"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.IO.IOProxy.SendRequestAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0,System.Action{System.String},System.Action{System.String})">
            <summary>
            
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="sendRequestAsyncHandler"></param>
            <param name="request"></param>
            <param name="requestLogger"></param>
            <param name="responseLogger"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.IO.IOProxy.ToXml(System.Object)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.IO.IOProxy.XmlToType``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.IO.NullStorageProvider">
            <summary>
            Implements a <see cref="T:IDS.IO.StorageProvider" /> that does nothing. 
            </summary>
        </member>
        <member name="M:IDS.IO.NullStorageProvider.ReadBytes(System.String)">
            <inheritdoc />
        </member>
        <member name="M:IDS.IO.NullStorageProvider.Write(System.String,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:IDS.IO.NullStorageProvider.WriteBytes(System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:IDS.IO.SFTPFileStorageProvider">
            <summary>
            Service Class implements logic to upload file to configured FTP server.
            </summary>
        </member>
        <member name="P:IDS.IO.SFTPFileStorageProvider.FtpUri">
            <summary>
            FTP server uri
            </summary>
        </member>
        <member name="P:IDS.IO.SFTPFileStorageProvider.UseSsl">
            <summary>
            Decide whether to SSL or not.
            </summary>
        </member>
        <member name="P:IDS.IO.SFTPFileStorageProvider.CertificateName">
            <summary>
            Certificate Name
            </summary>
        </member>
        <member name="P:IDS.IO.SFTPFileStorageProvider.FTPRequestTimeOut">
            <summary>
            FTP request time out
            </summary>
        </member>
        <member name="P:IDS.IO.SFTPFileStorageProvider.DomainName">
            <summary>
            Username to connect FTP server.
            </summary>
        </member>
        <member name="P:IDS.IO.SFTPFileStorageProvider.UserName">
            <summary>
            Username to connect FTP server.
            </summary>
        </member>
        <member name="P:IDS.IO.SFTPFileStorageProvider.Password">
            <summary>
            Password to connect FTP server.
            </summary>
        </member>
        <member name="M:IDS.IO.SFTPFileStorageProvider.Write(System.String,System.IO.Stream)">
            <summary>
            upload streams to the ftp server
            </summary>
            <param name="destinationFileName">file name</param>
            <param name="contentStream">stream content of the file</param>
        </member>
        <member name="M:IDS.IO.SFTPFileStorageProvider.ReadBytes(System.String)">
            <summary>
            Download streams from the ftp server.
            </summary>
            <param name="sourceFileName">File Name.</param>
        </member>
        <member name="T:IDS.IO.StorageProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.IO.StorageProvider.ReadBytes(System.String)">
            <summary>
            
            </summary>
            <param name="sourceFileName"></param>
        </member>
        <member name="M:IDS.IO.StorageProvider.Write(System.String,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="destinationFileName"></param>
            <param name="contentStream"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.IO.StorageProvider.WriteBytes(System.String,System.Byte[])">
            <summary>
            
            </summary>
            <param name="destinationFileName"></param>
            <param name="bytes"></param>
        </member>
        <member name="T:IDS.IO.TweakerIOProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.IO.TweakerIOProxy.TweakerDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.IO.TweakerIOProxy.SendRequest(System.String,System.Func{System.String,System.String})">
            <summary>
            Here is how "tweaking" works.
             Request-tweaking:
              If a OfxRequest.txt file exists, that means that the Tweaker app wants to
              capture the request, therefore the requestXml is written to the OfxRequest.xml.
              The code waits up to 2 minutes for the OfxRequest.xml file to be modified by
              the external app. If a modification is detected (or the 2 minutes expires),
              the contents of the OfxRequest.txt file are read and sent to the sendRequestHandler.
              
              If no OfxRequest.txt file exists, that means no external app wants to capture
              the request so the requestXml is sent directly to the sendRequestHandler.
            
             Response-tweaking:
              If a OfxResponse.txt file exists, that means that the Tweaker app wants to
              capture the response, therefore the response, returned from sendRequestHandler, is
              written to the OfxResponse.txt file. The code waits up to 2 minutes for the OfxResponse.txt
              file to be modified by Tweaker. If a modification is detected (or the 2 minutes expires),
              the contents of the OfxResponse.txt file are read and returned to the caller of
              the SendRequest function.
            
            Note:
             This function logs the original request if the request was "tweaked".
             This function logs the "tweaked" response if the response was "tweaked".
             The sendRequestHandler should log the tweaked request and the non-tweaked response.
            </summary>
            <param name="requestXml"></param>
            <param name="sendRequestHandler"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.IO.TweakerIOProxy.SendRequest``2(System.Func{``0,``1},``0,System.Action{System.String},System.Action{System.String},``0@)">
            <summary>
            
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="sendRequestHandler"></param>
            <param name="request"></param>
            <param name="requestLogger"></param>
            <param name="responseLogger"></param>
            <param name="tweakedRequest"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.IO.TweakerIOProxy.SendRequestAsync(System.String,System.Action{System.String})">
            <summary>
            Here is how "tweaking" works.
             Request-tweaking:
              If a OfxRequest.txt file exists, that means that the Tweaker app wants to
              capture the request, therefore the requestXml is written to the OfxRequest.xml.
              The code waits up to 2 minutes for the OfxRequest.xml file to be modified by
              the external app. If a modification is detected (or the 2 minutes expires),
              the contents of the OfxRequest.txt file are read and sent to the sendRequestHandler.
              
              If no OfxRequest.txt file exists, that means no external app wants to capture
              the request so the requestXml is sent directly to the sendRequestHandler.
            
            Note:
             This function logs the original request if the request was "tweaked".
             The sendRequestHandler should log the tweaked request.
            </summary>
            <param name="requestXml"></param>
            <param name="sendRequestHandler"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.IO.TweakerIOProxy.SendRequestAsync(System.String,System.Func{System.String,System.Threading.Tasks.Task{System.String}})">
            <summary>
            
            </summary>
            <param name="requestXml"></param>
            <param name="sendRequestHandler"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.IO.TweakerIOProxy.SendRequestAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0,System.Action{System.String},System.Action{System.String})">
            <summary>
            
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="sendRequestAsyncHandler"></param>
            <param name="request"></param>
            <param name="requestLogger"></param>
            <param name="responseLogger"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.IO.ZipHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.IO.ZipHelper.Zip``1(System.Collections.Generic.List{``0},System.Func{``0,IDS.IO.ZipItem})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="getZipItem"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.IO.ZipHelper.Zip(System.Collections.Generic.List{IDS.IO.ZipItem})">
            <summary>
            
            </summary>
            <param name="zipItems"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.IO.ZipHelper.UnZip(System.IO.Stream,System.Action{IDS.IO.ZipItem})">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="handleZipItem"></param>
        </member>
        <member name="T:IDS.IO.ZipItem">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDS.IO.ZipItem.FileName">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDS.IO.ZipItem.Bytes">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Scheduling.IScheduledService">
            <summary>
            The IScheduledService interface must be implemented inorder for the IDS.SchedulerService to call it 
            when the interval elapsed.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.IScheduledService.OnStart">
            <summary>
            Starting/Entry point of the scheduled Service.
            </summary>
        </member>
        <member name="T:IDS.Scheduling.IScheduledServiceSupportsSpecialSettings">
            <summary>
            A string of settings read from the config file by the scheduler
            </summary>
        </member>
        <member name="P:IDS.Scheduling.IScheduledServiceSupportsSpecialSettings.SpecialSettings">
            <summary>
            A string of settings read from the config file by the scheduler
            </summary>
        </member>
        <member name="T:IDS.Scheduling.IJobStoppable">
            <summary>
            A string of settings read from the config file by the scheduler
            </summary>
        </member>
        <member name="M:IDS.Scheduling.IJobStoppable.OnStop">
            <summary>
            Called when [stop].
            </summary>
        </member>
        <member name="T:IDS.Scheduling.BusinessDaysRecurrence">
            <summary>
            Represents the schedule for an event that recurs at a certain time
            every business day.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.BusinessDaysRecurrence.Equals(System.Object)">
            <summary>
            Overrides <see cref="M:System.Object.Equals(System.Object)">Object.Equals(System.Object)</see>.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.BusinessDaysRecurrence.GetHashCode">
            <summary>
            Overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode()</see>.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.BusinessDaysRecurrence.GetNextOccurrenceAfter(System.DateTime)">
            <summary>
            Gets the date and time of the next occurrence of the event.
            </summary>
            <param name="moment">
            A <see cref="T:System.DateTime" />.
            </param>
            <returns>
            The earliest <see cref="T:System.DateTime" /> later than the specified
            <paramref name="moment" /> at which the event occurs.
            </returns>
        </member>
        <member name="T:IDS.Scheduling.CutOff">
            <summary>
            Class that represents the cutoff time for a day of the week.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.CutOff.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Scheduling.CutOff"/> class.
            </summary>
        </member>
        <member name="P:IDS.Scheduling.CutOff.DayOfTheWeek">
            <summary>
            Gets or sets the day of the week.
            </summary>
            <value>The day of the week.</value>
        </member>
        <member name="P:IDS.Scheduling.CutOff.CutOffTimeUTC">
            <summary>
            Gets or sets the cut off time UTC.
            </summary>
            <value>The cut off time UTC.</value>
        </member>
        <member name="P:IDS.Scheduling.CutOff.CutOffTime">
            <summary>
            Gets or sets the cut off time.
            </summary>
            <value>The cut off time.</value>
        </member>
        <member name="T:IDS.Scheduling.CutOffCollection">
            <summary>
            Class that represents a collection of CutOff objects
            </summary>
        </member>
        <member name="M:IDS.Scheduling.CutOffCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Scheduling.CutOffCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.CutOffCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Scheduling.CutOff})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Scheduling.CutOffCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Scheduling.CutOffCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Scheduling.CutOffCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than 0.</exception>
        </member>
        <member name="M:IDS.Scheduling.CutOffCollection.DeleteCutOff(IDS.Scheduling.CutOff)">
            <summary>
            Deletes the cut off.
            </summary>
            <param name="cutOffToDelete">The cut off to delete.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Scheduling.CutOffCollection.FilterCutoffByDayOfWeek(System.DayOfWeek)">
            <summary>
            Filter cutoffs based on day of week.
            </summary>
            <param name="dayOfTheWeek">The day of week to filter cutoff on.</param>
            <returns>Collection of cutoffs for the dayOfTheWeek filter</returns>
        </member>
        <member name="M:IDS.Scheduling.CutOffCollection.ContainsCutOff(IDS.Scheduling.CutOff)">
            <summary>
            Determines whether the collection has the cuoff based on the Day Of The Week and the Time Of Day.
            </summary>
            <param name="cutOff">The cut off.</param>
        </member>
        <member name="T:IDS.Scheduling.CutOffWindow">
            <summary>
            Class that represents a cut off window
            </summary>
        </member>
        <member name="M:IDS.Scheduling.CutOffWindow.#ctor">
            <summary>
             
            </summary>
        </member>
        <member name="P:IDS.Scheduling.CutOffWindow.StartDateUTC">
            <summary>
            Gets or sets the start date.
            </summary>
            <value>The start date.</value>
        </member>
        <member name="P:IDS.Scheduling.CutOffWindow.EndDateUTC">
            <summary>
            Gets or sets the end date.
            </summary>
            <value>The end date.</value>
        </member>
        <member name="P:IDS.Scheduling.CutOffWindow.TypeString">
            <summary>
            Gets or sets the type object as a string.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.CutOffWindow.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
        </member>
        <member name="M:IDS.Scheduling.CutOffWindow.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized. </param>
        </member>
        <member name="M:IDS.Scheduling.CutOffWindow.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized. </param>
        </member>
        <member name="T:IDS.Scheduling.CutOffWindowCollection">
            <summary>
            Class that represents a collection of CutOffWindow objects
            </summary>
        </member>
        <member name="M:IDS.Scheduling.CutOffWindowCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Scheduling.CutOffWindowCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.CutOffWindowCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Scheduling.CutOffWindow})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Scheduling.CutOffWindowCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Scheduling.CutOffWindowCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Scheduling.CutOffWindowCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than 0.</exception>
        </member>
        <member name="T:IDS.Scheduling.DailyRecurrence">
            <summary>
            Represents the schedule for an event that recurs at a certain time
            every day.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.DailyRecurrence.Equals(System.Object)">
            <summary>
            Overrides <see cref="M:System.Object.Equals(System.Object)">Object.Equals(System.Object)</see>.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.DailyRecurrence.GetHashCode">
            <summary>
            Overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode()</see>.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.DailyRecurrence.GetNextOccurrenceAfter(System.DateTime)">
            <summary>
            Gets the date and time of the next occurrence of the event.
            </summary>
            <param name="moment">
            A <see cref="T:System.DateTime" />.
            </param>
            <returns>
            The earliest <see cref="T:System.DateTime" /> later than the specified
            <paramref name="moment" /> at which the event occurs.
            </returns>
        </member>
        <member name="T:IDS.Scheduling.DailySchedule">
            <summary>
            Represents the schedule for an event that occurs at specified times
            of day.
            </summary>
            <remarks>
            <see cref="T:IDS.Scheduling.DailySchedule" /> is an <see langword="abstract" /> base class.
            Derived classes determine the days on which the event occurs.
            </remarks>
        </member>
        <member name="P:IDS.Scheduling.DailySchedule.Time">
            <summary>
            Gets or sets the time of day at which the event occurs.
            </summary>
            <value>
            A <see cref="T:System.TimeSpan" /> that represents a time of day.
            </value>
            <remarks>
            This property is provided for backward compatibility only.
            </remarks>
        </member>
        <member name="P:IDS.Scheduling.DailySchedule.TimeAsString">
            <summary>
            Gets or sets the time of day at which the event occurs,
            as a formatted string.
            </summary>
            <value>
            A <see cref="T:System.String" /> that can be parsed by
            <see cref="M:System.TimeSpan.Parse(System.String)">TimeSpan.Parse</see>.
            </value>
            <remarks>
            This property is provided for backward compatibility only.
            </remarks>
        </member>
        <member name="P:IDS.Scheduling.DailySchedule.Times">
            <summary>
            Gets or sets the times of day at which the event occurs.
            </summary>
        </member>
        <member name="P:IDS.Scheduling.DailySchedule.TimesAsArray">
            <summary>
            Gets or sets the times of day at which the event occurs,
            as an array of <see cref="T:System.TimeSpan" /> values.
            </summary>
        </member>
        <member name="P:IDS.Scheduling.DailySchedule.TimesAsStrings">
            <summary>
            Gets or sets the times of day at which the event occurs,
            as an array of formatted strings.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.DailySchedule.BaseEquals(IDS.Scheduling.DailySchedule)">
            <summary>
            Determines whether this instance is equal to a specified
            <see cref="T:IDS.Scheduling.DailySchedule" />, comparing only properties
            declared by the <see cref="T:IDS.Scheduling.DailySchedule" /> class.
            </summary>
            <param name="schedule">
            The <see cref="T:IDS.Scheduling.DailySchedule" /> to compare with this instance.
            </param>
            <returns>
            <see langword="true" /> if the <paramref name="schedule" />
            has the same <see cref="P:IDS.Scheduling.DailySchedule.Times" /> as this instance;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:IDS.Scheduling.DailySchedule.BaseGetHashCode">
            <summary>
            Returns the hash code for this instance, using only properties
            declared by the <see cref="T:IDS.Scheduling.DailySchedule" /> class.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:IDS.Scheduling.DailySchedule.GetNextDailyOccurrenceAfter(System.DateTime)">
            <summary>
            Gets the earliest <see cref="T:System.DateTime" /> later than a specified
            moment and having a <see cref="P:System.DateTime.TimeOfDay" /> equal to
            one of the times of day in the <see cref="P:IDS.Scheduling.DailySchedule.Times" /> collection.
            </summary>
            <param name="moment">
            A <see cref="T:System.DateTime" />.
            </param>
            <returns>
            The earliest <see cref="T:System.DateTime" /> later than the specified
            <paramref name="moment" /> and having a
            <see cref="P:System.DateTime.TimeOfDay" /> equal to
            one of the times of day in the <see cref="P:IDS.Scheduling.DailySchedule.Times" /> collection.
            </returns>
        </member>
        <member name="M:IDS.Scheduling.DailySchedule.TryGetNextDailyOccurrenceAfter(System.DateTime@)">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Scheduling.DaysOfMonth">
            <summary>
            Specifies a combination of zero or more days of the month.
            </summary>
            <remarks>
            Bit 0 represents the 1st of the month, and bit 30 represents the 31st.
            Bit 31 is unused.
            </remarks>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day1">
            <summary>
            Specifies the 1st of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day2">
            <summary>
            Specifies the 2nd of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day3">
            <summary>
            Specifies the 3rd of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day4">
            <summary>
            Specifies the 4th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day5">
            <summary>
            Specifies the 5th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day6">
            <summary>
            Specifies the 6th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day7">
            <summary>
            Specifies the 7th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day8">
            <summary>
            Specifies the 8th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day9">
            <summary>
            Specifies the 9th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day10">
            <summary>
            Specifies the 10th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day11">
            <summary>
            Specifies the 11th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day12">
            <summary>
            Specifies the 12th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day13">
            <summary>
            Specifies the 13th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day14">
            <summary>
            Specifies the 14th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day15">
            <summary>
            Specifies the 15th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day16">
            <summary>
            Specifies the 16th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day17">
            <summary>
            Specifies the 17th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day18">
            <summary>
            Specifies the 18th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day19">
            <summary>
            Specifies the 19th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day20">
            <summary>
            Specifies the 20th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day21">
            <summary>
            Specifies the 21st of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day22">
            <summary>
            Specifies the 22nd of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day23">
            <summary>
            Specifies the 23rd of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day24">
            <summary>
            Specifies the 24th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day25">
            <summary>
            Specifies the 25th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day26">
            <summary>
            Specifies the 26th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day27">
            <summary>
            Specifies the 27th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day28">
            <summary>
            Specifies the 28th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day29">
            <summary>
            Specifies the 29th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day30">
            <summary>
            Specifies the 30th of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.Day31">
            <summary>
            Specifies the 31st of the month.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfMonth.All">
            <summary>
            Specifies every day of the month.
            </summary>
        </member>
        <member name="T:IDS.Scheduling.DaysOfWeek">
            <summary>
            Specifies a combination of zero or more days of the week.
            </summary>
            <remarks>
            Bit 0 represents Sunday, and bit 6 represents Saturday.
            Bits 7 through 31 are unused.
            </remarks>
        </member>
        <member name="F:IDS.Scheduling.DaysOfWeek.Sunday">
            <summary>
            Specifies Sunday.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfWeek.Monday">
            <summary>
            Specifies Monday.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfWeek.Tuesday">
            <summary>
            Specifies Tuesday.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfWeek.Wednesday">
            <summary>
            Specifies Wednesday.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfWeek.Thursday">
            <summary>
            Specifies Thursday.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfWeek.Friday">
            <summary>
            Specifies Friday.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfWeek.Saturday">
            <summary>
            Specifies Saturday.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfWeek.Weekdays">
            <summary>
            Specifies every weekday (Monday through Friday).
            </summary>
        </member>
        <member name="F:IDS.Scheduling.DaysOfWeek.All">
            <summary>
            Specifies every day of the week.
            </summary>
        </member>
        <member name="T:IDS.Scheduling.ISchedule">
            <summary>
            Represents the schedule for a one-time or recurring event.
            </summary>
            <remarks>
            <para>
            A schedule represents a list of distinct <see cref="T:System.DateTime" /> values,
            <var>D</var><sub>1</sub>, <var>D</var><sub>2</sub>, ...,
            <var>D</var><sub><var>N</var></sub>, in chronological order.
            The <see cref="T:IDS.Scheduling.ISchedule" /> interface exposes this list through the
            <see cref="M:IDS.Scheduling.ISchedule.GetNextOccurrenceAfter(System.DateTime)" /> method, which accepts a
            <see cref="T:System.DateTime" /> argument and returns the earliest
            <see cref="T:System.DateTime" /> value in the list that is later than the
            specified argument. If no such value exists, then the method returns
            <see cref="F:System.DateTime.MaxValue" />.
            </para>
            <para>
            Mathematically, if the argument <var>d</var> satisfies
            <var>D</var><sub><var>k</var>-1</sub> &lt;= <var>d</var> &lt;
            <var>D</var><sub><var>k</var></sub> for some index <var>k</var>
            between 1 and <var>N</var>, where <var>D</var><sub>0</sub> is defined
            to be <see cref="F:System.DateTime.MinValue" />,
            then GetNextOccurrenceAfter(<var>d</var>) returns
            <var>D</var><sub><var>k</var></sub>.
            If <var>d</var> &gt;= <var>D</var><sub><var>N</var></sub>,
            then GetNextOccurrenceAfter(<var>d</var>) returns
            <see cref="F:System.DateTime.MaxValue" />.
            </para>
            </remarks>
            <example>
            <para>
            The following code example demonstrates how to query a schedule for all
            of its <see cref="T:System.DateTime" /> values in a specified range:
            </para>
            <code>
            <![CDATA[void OutputSchedule(ISchedule schedule, DateTime start, DateTime end)
            {
                DateTime d = start.AddTicks(-1);
                while ((d = schedule.GetNextOccurrenceAfter(d)) <= end)
                {
                    Console.WriteLine(d);
                }
            }]]>
            </code>
            </example>
        </member>
        <member name="M:IDS.Scheduling.ISchedule.GetNextOccurrenceAfter(System.DateTime)">
            <summary>
            Gets the date and time of the next occurrence of the event.
            </summary>
            <param name="moment">
            A <see cref="T:System.DateTime" />.
            </param>
            <returns>
            The earliest <see cref="T:System.DateTime" /> later than the specified
            <paramref name="moment" /> at which the event occurs, or
            <see cref="F:System.DateTime.MaxValue" /> if the event never occurs again.
            </returns>
        </member>
        <member name="T:IDS.Scheduling.ITask">
            <summary>
            ITask must be implemented in order for a task to be run at specified interval.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.ITask.Start">
            <summary>
            Starts this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Scheduling.ITask.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="T:IDS.Scheduling.MonthlyRecurrence">
            <summary>
            Represents the schedule for an event that recurs at a certain time
            on specified days of the months.
            </summary>
        </member>
        <member name="P:IDS.Scheduling.MonthlyRecurrence.DaysOfMonth">
            <summary>
            Gets or sets the days of the month on which the event occurs.
            </summary>
            <value>
            A bitwise combination of one or more
            <see cref="T:IDS.Scheduling.DaysOfMonth" /> values.
            </value>
            <remarks>
            If the <see cref="P:IDS.Scheduling.MonthlyRecurrence.DaysOfMonth" /> property value includes
            <see cref="F:IDS.Scheduling.DaysOfMonth.Day29" />,
            <see cref="F:IDS.Scheduling.DaysOfMonth.Day30" />,
            or <see cref="F:IDS.Scheduling.DaysOfMonth.Day31" />, then in months
            without these days, the event occurs on the last day of the month.
            For example, if <see cref="P:IDS.Scheduling.MonthlyRecurrence.DaysOfMonth" /> is set to
            <see cref="F:IDS.Scheduling.DaysOfMonth.Day29" /> and
            <see cref="F:IDS.Scheduling.DaysOfMonth.Day31" />, then in February,
            the event occurs on day 28 (day 29 in leap years); in March,
            on days 29 and 31; and in April, on days 29 and 30.
            </remarks>
        </member>
        <member name="P:IDS.Scheduling.MonthlyRecurrence.DaysOfMonthAsArray">
            <summary>
            Gets or sets the days of the month on which the event occurs,
            as an array of integer values.
            </summary>
        </member>
        <member name="P:IDS.Scheduling.MonthlyRecurrence.MonthsOfYear">
            <summary>
            Gets or sets the months of the year during which the event occurs.
            </summary>
            <value>
            A bitwise combination of one or more <see cref="T:IDS.Scheduling.MonthsOfYear" /> values.
            </value>
        </member>
        <member name="P:IDS.Scheduling.MonthlyRecurrence.MonthsOfYearAsArray">
            <summary>
            Gets or sets the months of the year during which the event occurs,
            as an array of integer values.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.MonthlyRecurrence.Equals(System.Object)">
            <summary>
            Overrides <see cref="M:System.Object.Equals(System.Object)">Object.Equals(System.Object)</see>.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.MonthlyRecurrence.GetHashCode">
            <summary>
            Overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode()</see>.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.MonthlyRecurrence.GetNextOccurrenceAfter(System.DateTime)">
            <summary>
            Gets the date and time of the next occurrence of the event.
            </summary>
            <param name="moment">
            A <see cref="T:System.DateTime" />.
            </param>
            <returns>
            The earliest <see cref="T:System.DateTime" /> later than the specified
            <paramref name="moment" /> at which the event occurs.
            </returns>
        </member>
        <member name="T:IDS.Scheduling.MonthsOfYear">
            <summary>
            Specifies a combination of zero or more months of the year.
            </summary>
            <remarks>
            Bit 0 represents January, and bit 11 represents December.
            </remarks>
        </member>
        <member name="F:IDS.Scheduling.MonthsOfYear.January">
            <summary>
            January.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.MonthsOfYear.February">
            <summary>
            February.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.MonthsOfYear.March">
            <summary>
            March.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.MonthsOfYear.April">
            <summary>
            April.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.MonthsOfYear.May">
            <summary>
            May.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.MonthsOfYear.June">
            <summary>
            June.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.MonthsOfYear.July">
            <summary>
            July.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.MonthsOfYear.August">
            <summary>
            August.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.MonthsOfYear.September">
            <summary>
            September.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.MonthsOfYear.October">
            <summary>
            October.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.MonthsOfYear.November">
            <summary>
            November.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.MonthsOfYear.December">
            <summary>
            December.
            </summary>
        </member>
        <member name="F:IDS.Scheduling.MonthsOfYear.All">
            <summary>
            Specifies every month of the year.
            </summary>
        </member>
        <member name="T:IDS.Scheduling.OneTimeOccurrence">
            <summary>
            Represents the schedule for an event that occurs once
            at a specified date and time.
            </summary>
        </member>
        <member name="P:IDS.Scheduling.OneTimeOccurrence.DateTime">
            <summary>
            Gets or sets the date and time at which the event occurs.
            </summary>
            <value>
            A <see cref="T:System.DateTime" />.
            </value>
        </member>
        <member name="M:IDS.Scheduling.OneTimeOccurrence.Equals(System.Object)">
            <summary>
            Overrides <see cref="M:System.Object.Equals(System.Object)">Object.Equals(System.Object)</see>.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.OneTimeOccurrence.GetHashCode">
            <summary>
            Overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode()</see>.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.OneTimeOccurrence.GetNextOccurrenceAfter(System.DateTime)">
            <summary>
            Gets the date and time of the next occurrence of the event.
            </summary>
            <param name="moment">
            A <see cref="T:System.DateTime" />.
            </param>
            <returns>
            The value of the <see cref="P:IDS.Scheduling.OneTimeOccurrence.DateTime" /> property if it is later
            than <paramref name="moment" />; otherwise,
            <see cref="F:System.DateTime.MaxValue" />.
            </returns>
        </member>
        <member name="T:IDS.Scheduling.PeriodicRecurrence">
            <summary>
            Represents the schedule for an event that recurs at
            a specified interval of time.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.PeriodicRecurrence.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:IDS.Scheduling.PeriodicRecurrence" />
            class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Scheduling.PeriodicRecurrence" />
            class with an interval of 100 nanoseconds (1 tick).
            </summary>
        </member>
        <member name="M:IDS.Scheduling.PeriodicRecurrence.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Scheduling.PeriodicRecurrence" />
            class with a specified interval of time.
            </summary>
            <param name="interval">
            A <see cref="T:System.TimeSpan" /> that represents the interval of time
            at which the event occurs.
            </param>
        </member>
        <member name="P:IDS.Scheduling.PeriodicRecurrence.AnchorDateTime">
            <summary>
            Gets or sets the date and time of one occurrence of the event.
            </summary>
            <value>
            A <see cref="T:System.DateTime" />. The default is
            <see cref="F:System.DateTime.MinValue" />.
            </value>
        </member>
        <member name="P:IDS.Scheduling.PeriodicRecurrence.Interval">
            <summary>
            Gets or sets the interval of time at which the event occurs.
            </summary>
            <value>
            A <see cref="T:System.TimeSpan" /> that represents the interval of time
            at which the event occurs.
            </value>
        </member>
        <member name="P:IDS.Scheduling.PeriodicRecurrence.IntervalAsString">
            <summary>
            Gets or sets the interval of time at which the event occurs,
            as a formatted string.
            </summary>
            <value>
            A <see cref="T:System.String" /> that can be parsed by
            <see cref="M:System.TimeSpan.Parse(System.String)">TimeSpan.Parse</see>.
            </value>
            <remarks>
            This property is provided because <see cref="T:System.Xml.Serialization.XmlSerializer" />
            cannot serialize <see cref="T:System.TimeSpan" /> values.
            </remarks>
        </member>
        <member name="M:IDS.Scheduling.PeriodicRecurrence.Equals(System.Object)">
            <summary>
            Overrides <see cref="M:System.Object.Equals(System.Object)">Object.Equals(System.Object)</see>.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.PeriodicRecurrence.GetHashCode">
            <summary>
            Overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode()</see>.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.PeriodicRecurrence.GetNextOccurrenceAfter(System.DateTime)">
            <summary>
            Gets the date and time of the next occurrence of the event.
            </summary>
            <param name="moment">
            A <see cref="T:System.DateTime" />.
            </param>
            <returns>
            The earliest <see cref="T:System.DateTime" /> later than the specified
            <paramref name="moment" /> at which the event occurs.
            </returns>
        </member>
        <member name="T:IDS.Scheduling.Schedule">
            <summary>
            The Schedule class is a base abstract type for a schedule. It also has a factory method
            for creating an ISchedule instance from an XML node.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.Schedule.Deserialize(System.String)">
            <summary>
            Creates an <see cref="T:IDS.Scheduling.ISchedule" /> instance from its XML representation.
            </summary>
            <param name="xml">
            The schedule to deserialize.
            </param>
            <returns>
            The deserialized schedule.
            </returns>
        </member>
        <member name="M:IDS.Scheduling.Schedule.DeserializeSchedule(System.Xml.XmlNode)">
            <summary>
            Creates an ISchedule instance based on the XML node.
            </summary>
            <param name="xml">The XML node containing the serialized ISchedule object..</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Scheduling.Schedule.Serialize(IDS.Scheduling.ISchedule)">
            <summary>
            Gets the XML representation of a specified <see cref="T:IDS.Scheduling.ISchedule" /> instance.
            </summary>
            <param name="schedule">The schedule to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Scheduling.Schedule.SerializeSchedule(IDS.Scheduling.ISchedule)">
            <summary>
            Serializes the schedule.
            </summary>
            <param name="schedule">The schedule.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Scheduling.Schedule.GetNextOccurrenceAfter(System.DateTime)">
            <summary>
            Gets the date and time of the next occurrence of the event.
            </summary>
            <param name="moment">
            A <see cref="T:System.DateTime" />.
            </param>
            <returns>
            The earliest <see cref="T:System.DateTime" /> later than the specified
            <paramref name="moment" /> at which the event occurs, or
            <see cref="F:System.DateTime.MaxValue" /> if the event never occurs again.
            </returns>
        </member>
        <member name="T:IDS.Scheduling.ScheduleSerializationBinder">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Scheduling.ScheduleSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Scheduling.ScheduleSerializationBinder.BindToType(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Scheduling.TaskBase">
            <summary>
            Abstract base class which will need to be inherited in order for 
            a task to have some common functionality before it runs.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.TaskBase.Start">
            <summary>
            Starts this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Scheduling.TaskBase.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.TaskBase.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.TaskBase.BeforeStart">
            <summary>
            Runs before the task starts.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.TaskBase.AfterStart">
            <summary>
            Runs after the task starts.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.TaskBase.DoStop">
            <summary>
            Does the stop.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.TaskBase.DoRun">
            <summary>
            Does the run.
            </summary>
        </member>
        <member name="T:IDS.Scheduling.WeeklyRecurrence">
            <summary>
            Represents the schedule for an event that recurs at a certain time
            on specified days of the week.
            </summary>
        </member>
        <member name="P:IDS.Scheduling.WeeklyRecurrence.DaysOfWeek">
            <summary>
            Gets or sets the days of the week on which the event occurs.
            </summary>
            <value>
            A bitwise combination of one or more
            <see cref="T:IDS.Scheduling.DaysOfWeek" /> values.
            </value>
        </member>
        <member name="P:IDS.Scheduling.WeeklyRecurrence.DaysOfWeekAsArray">
            <summary>
            Gets or sets the days of the week on which the event occurs,
            as an array of <see cref="T:System.DayOfWeek" /> values.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.WeeklyRecurrence.Equals(System.Object)">
            <summary>
            Overrides <see cref="M:System.Object.Equals(System.Object)">Object.Equals(System.Object)</see>.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.WeeklyRecurrence.GetHashCode">
            <summary>
            Overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode()</see>.
            </summary>
        </member>
        <member name="M:IDS.Scheduling.WeeklyRecurrence.GetNextOccurrenceAfter(System.DateTime)">
            <summary>
            Gets the date and time of the next occurrence of the event.
            </summary>
            <param name="moment">
            A <see cref="T:System.DateTime" />.
            </param>
            <returns>
            The earliest <see cref="T:System.DateTime" /> later than the specified
            <paramref name="moment" /> at which the event occurs.
            </returns>
        </member>
        <member name="T:IDS.IXmlInitializable">
            <summary>
            IXmlInitializable is an interface for implementing object initialization based on an xml document
            </summary>
        </member>
        <member name="M:IDS.IXmlInitializable.SetConfig(System.Xml.XmlDocument)">
            <summary>
            Initializes the object based on the xml config passed.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:IDS.IXmlInitializable.GetConfig">
            <summary>
            Gets the xml config based on the object properties.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Locking.LockRecord">
            <summary>
            Records containing information about a record lock
            </summary>
        </member>
        <member name="M:IDS.Locking.LockRecord.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Locking.LockRecord"/> class.
            </summary>
            <param name="recordKey">The record key.</param>
            <param name="userId">The user id.</param>
            <param name="lockTime">The lock time.</param>
        </member>
        <member name="M:IDS.Locking.LockRecord.#ctor(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Locking.LockRecord"/> class.
            </summary>
            <param name="recordKey">The record key.</param>
            <param name="userId">The user id.</param>
            <param name="lockTime">The lock time.</param>
            <param name="lockInfo">The lock info.</param>
        </member>
        <member name="M:IDS.Locking.LockRecord.#ctor(System.Data.IDataReader)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Locking.LockRecord"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="P:IDS.Locking.LockRecord.UserId">
            <summary>
            User who placed the lock
            </summary>
        </member>
        <member name="P:IDS.Locking.LockRecord.RecordKey">
            <summary>
            Key used to identify locked record
            </summary>
        </member>
        <member name="P:IDS.Locking.LockRecord.LockTime">
            <summary>
            When the lock was created
            </summary>
        </member>
        <member name="P:IDS.Locking.LockRecord.LockTimeUtc">
            <summary>
            When the lock was created in UTC
            </summary>
        </member>
        <member name="P:IDS.Locking.LockRecord.LockInfo">
            <summary>
            Extra user defined data associated with the lock
            </summary>
        </member>
        <member name="T:IDS.Locking.LockRecordCollection">
            <summary>
            The LockRecordCollection class contains a collection of <see cref="T:IDS.Locking.LockRecord"/> objects.
            </summary>
        </member>
        <member name="M:IDS.Locking.LockRecordCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Locking.LockRecordCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Locking.LockRecordCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Locking.LockRecord})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Locking.LockRecordCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Locking.LockRecordCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Locking.LockRecordCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="T:IDS.Locking.RecordLock">
            <summary>
            Allows for Record Locking
            </summary>
        </member>
        <member name="M:IDS.Locking.RecordLock.Lock(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a Lock Record
            </summary>
            <param name="recordKey"></param>
            <param name="userId"></param>
            <param name="sessionId"></param>
            <param name="lockInfo"></param>
        </member>
        <member name="M:IDS.Locking.RecordLock.UnLock(System.String,System.String)">
            <summary>
            Removes all Lock Records for the given recordKey and userId
            </summary>
            <param name="recordKey"></param>
            <param name="userId"></param>
        </member>
        <member name="M:IDS.Locking.RecordLock.UnLockAll(System.String)">
            <summary>
            Removes all Lock Records for the given recordKey
            </summary>
            <param name="recordKey"></param>
        </member>
        <member name="M:IDS.Locking.RecordLock.Query(System.String,System.String,System.Int32)">
            <summary>
            Returns all lock records for the given recordKey that have not expired.
            Does not include records for the passed in userId
            </summary>
            <param name="recordKey">The record key.</param>
            <param name="userId">The user id.</param>
            <param name="expirationMinutes">The expiration minutes.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Locking.RecordLock.CleanUpOldLocks(System.Int32)">
            <summary>
            Removes all lock records that have expired
            </summary>
            <param name="expirationMinutes"></param>
        </member>
        <member name="M:IDS.Locking.RecordLock.RemoveLocksForSession(System.String)">
            <summary>
            Removes all lock records for a session id
            </summary>
            <param name="sessionId"></param>
        </member>
        <member name="M:IDS.Locking.RecordLock.MessageString(System.String,IDS.Locking.LockRecordCollection,System.String)">
            <summary>
            Message to display that shows users
            </summary>
            <param name="message"></param>
            <param name="lockRecords"></param>
            <param name="userRowTemplate">The template to use for each user that has an entry in the lockRecords
            collection. The place holders are {0} for the lockRecord.UserId and {1} for the lockRecord.LockTime.
            An example is "User:{0} (since {1:g})&lt;br&gt;"</param>
            <returns>Returns the formatted message string.</returns>
        </member>
        <member name="T:IDS.Locking.SqlRecordLock">
            <summary>
            RecordLock implementation that uses Sql Server to store record locks
            </summary>
        </member>
        <member name="M:IDS.Locking.SqlRecordLock.#ctor(System.String)">
            <summary>
            The connection string to the Sql database
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:IDS.Locking.SqlRecordLock.Lock(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a Lock Record
            </summary>
            <param name="recordKey"></param>
            <param name="userId"></param>
            <param name="sessionId"></param>
            <param name="lockInfo"></param>
        </member>
        <member name="M:IDS.Locking.SqlRecordLock.UnLock(System.String,System.String)">
            <summary>
            Removes all Lock Records for the given recordKey and userId
            </summary>
            <param name="recordKey"></param>
            <param name="userId"></param>
        </member>
        <member name="M:IDS.Locking.SqlRecordLock.UnLockAll(System.String)">
            <summary>
            Removes all Lock Records for the given recordKey
            </summary>
            <param name="recordKey"></param>
        </member>
        <member name="M:IDS.Locking.SqlRecordLock.CleanUpOldLocks(System.Int32)">
            <summary>
            Removes all lock records that have expired
            </summary>
            <param name="expirationMinutes"></param>
        </member>
        <member name="M:IDS.Locking.SqlRecordLock.RemoveLocksForSession(System.String)">
            <summary>
            Removes all lock records for a session id
            </summary>
            <param name="sessionId"></param>
        </member>
        <member name="M:IDS.Locking.SqlRecordLock.Query(System.String,System.String,System.Int32)">
            <summary>
            Returns all lock records for the given recordKey that have not expired.
            Does not include records for the passed in userId
            </summary>
            <param name="recordKey">The record key.</param>
            <param name="userId">The user id.</param>
            <param name="expirationMinutes">The expiration minutes.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Mail.EmailService">
            <summary>
            The base abstract EmailService is used to send emails.
            </summary>
        </member>
        <member name="P:IDS.Mail.EmailService.DefaultSendTimeout">
            <summary>
            Gets or sets the default send timeout.
            </summary>
            <value>The default send timeout.</value>
        </member>
        <member name="P:IDS.Mail.EmailService.DefaultFromAddress">
            <summary>
            Gets or sets the default from address.
            </summary>
            <value>The default from address.</value>
        </member>
        <member name="P:IDS.Mail.EmailService.DefaultFromName">
            <summary>
            Gets or sets the default from name.
            </summary>
            <value>The default from name.</value>
        </member>
        <member name="M:IDS.Mail.EmailService.SendMessage(System.Net.Mail.MailMessage)">
            <summary>
            Sends the email message.
            </summary>
            <param name="message">The email message.</param>
        </member>
        <member name="M:IDS.Mail.EmailService.SendMessage(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends the email message.
            </summary>
            <param name="fromAddress">From address.</param>
            <param name="toAddress">To address.</param>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="isHTML">if set to <c>true</c> [is HTML].</param>
        </member>
        <member name="M:IDS.Mail.EmailService.SendMessage(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends the email message.
            </summary>
            <param name="fromAddress">From address.</param>
            <param name="fromDisplayName">From display name.</param>
            <param name="toAddress">To address.</param>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="isHTML">if set to <c>true</c> [is HTML].</param>
        </member>
        <member name="M:IDS.Mail.EmailService.SendMessage(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends the email message.
            </summary>
            <param name="toAddress">To address.</param>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="isHTML">if set to <c>true</c> the body is HTML.</param>
        </member>
        <member name="M:IDS.Mail.EmailService.SendMessage(System.String,System.String,System.String,System.String,System.Boolean,System.Net.Mail.Attachment[])">
            <summary>
            Sends the email message.
            </summary>
            <param name="fromAddress">From address.</param>
            <param name="toAddress">To address.</param>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="isHTML">if set to <c>true</c> the body is HTML.</param>
            <param name="attachments">An array of attachments or null.</param>
        </member>
        <member name="M:IDS.Mail.EmailService.SendMessage(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Net.Mail.Attachment[])">
            <summary>
            Sends the email message.
            </summary>
            <param name="fromAddress">From address.</param>
            <param name="fromDisplayName">From display name.</param>
            <param name="toAddress">To address.</param>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="isHTML">if set to <c>true</c> the body is HTML.</param>
            <param name="attachments">An array of attachments or null.</param>
        </member>
        <member name="M:IDS.Mail.EmailService.SendMessage(System.String,System.String,System.String,System.Boolean,System.Net.Mail.Attachment[])">
            <summary>
            Sends the email message.
            </summary>
            <param name="toAddress">To address.</param>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="isHTML">if set to <c>true</c> the body is HTML.</param>
            <param name="attachments">An array of attachments or null.</param>
        </member>
        <member name="M:IDS.Mail.EmailService.SendMessage(System.String,System.String,System.String,System.String,System.Boolean,System.Net.Mail.Attachment[],System.Int32)">
            <summary>
            Sends the email message.
            </summary>
            <param name="fromAddress">From address.</param>
            <param name="toAddress">To address.</param>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="isHTML">if set to <c>true</c> the body is HTML.</param>
            <param name="attachments">An array of attachments or null.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:IDS.Mail.EmailService.SendMessage(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Net.Mail.Attachment[],System.Int32)">
            <summary>
            Sends the email message.
            </summary>
            <param name="fromAddress">From address.</param>
            <param name="fromDisplayName">From display name.</param>
            <param name="toAddress">To address.</param>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="isHTML">if set to <c>true</c> the body is HTML.</param>
            <param name="attachments">An array of attachments or null.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:IDS.Mail.EmailService.SendMessage(System.Net.Mail.MailMessage,System.Int32)">
            <summary>
            Sends the email message.
            </summary>
            <param name="message">The email message.</param>
            <param name="sendTimeout">The send timeout.</param>
        </member>
        <member name="T:IDS.Mail.SmtpEmailService">
            <summary>
            The EmailService is used to send emails to an SMTP server.
            </summary>
        </member>
        <member name="M:IDS.Mail.SmtpEmailService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Mail.EmailService"/> class.
            </summary>
        </member>
        <member name="P:IDS.Mail.SmtpEmailService.Host">
            <summary>
            Gets or sets the host IP address or DNS name of the SMTP mail server.
            </summary>
            <value>The host IP address or DNS name.</value>
        </member>
        <member name="P:IDS.Mail.SmtpEmailService.Port">
            <summary>
            Gets or sets the port of the SMTP server. This is typically 25.
            </summary>
            <value>The port of the SMTP server.</value>
        </member>
        <member name="P:IDS.Mail.SmtpEmailService.EnableSsl">
            <summary>
            Whether to use SSL when communicating with the SMTP server
            </summary>
        </member>
        <member name="P:IDS.Mail.SmtpEmailService.ClientUserName">
            <summary>
            User name used when sending credentials to the mail server
            </summary>
        </member>
        <member name="P:IDS.Mail.SmtpEmailService.ClientPassword">
            <summary>
            Password name used when sending credentials to the mail server
            </summary>
        </member>
        <member name="P:IDS.Mail.SmtpEmailService.ClientCertificateName">
            <summary>
            SSL Client Certificate used
            </summary>
        </member>
        <member name="M:IDS.Mail.SmtpEmailService.SendMessage(System.Net.Mail.MailMessage,System.Int32)">
            <summary>
            Sends the email message.
            </summary>
            <param name="message">The email message.</param>
            <param name="sendTimeout">The send timeout.</param>
        </member>
        <member name="T:IDS.Net.ByteCountProtocol">
            <summary>
            The ByteCountProtocol is a concrement implementation of a communication protocol that
            reads a stream of bytes that are preceeded with the byte count.
            </summary>
        </member>
        <member name="M:IDS.Net.ByteCountProtocol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Net.ByteCountProtocol"/> class.
            </summary>
        </member>
        <member name="M:IDS.Net.ByteCountProtocol.#ctor(IDS.Net.ByteCountProtocol)">
            <summary>
            A copy constructor that initializes a new instance of the <see cref="T:IDS.Net.ByteCountProtocol"/> class
            with the values of the protocol parameter.
            </summary>
            <param name="protocol">The protocol to copy.</param>
        </member>
        <member name="M:IDS.Net.ByteCountProtocol.Read">
            <summary>
            Reads the bytes from the associated communication stream.
            </summary>
            <returns>Returns an array of bytes.</returns>
        </member>
        <member name="M:IDS.Net.ByteCountProtocol.ReadFromStream(System.Int32)">
            <summary>
            Reads an array of bytes from the stream.
            </summary>
            <param name="totalBytesToRead">The total number of bytes to read.</param>
            <returns>Returns an array of bytes read from the stream.</returns>
        </member>
        <member name="M:IDS.Net.ByteCountProtocol.Write(System.Byte[])">
            <summary>
            Writes an array of bytes to the associated communication stream.
            </summary>
            <param name="data">An array of bytes to write to the stream.</param>
        </member>
        <member name="M:IDS.Net.ByteCountProtocol.SendKeepAlive">
            <summary>
            Sends the keep alive to the associated communication stream.
            </summary>
            <remarks>
            The SendKeepAlive method does nothing in the ByteCountProtocol.
            </remarks>
        </member>
        <member name="M:IDS.Net.ByteCountProtocol.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:IDS.Net.CommunicationProtocol">
            <summary>
            The CommunicationProtocol is an abstract base implementation of the <see cref="T:IDS.Net.ICommunicationProtocol"/>
            interface.
            </summary>
        </member>
        <member name="F:IDS.Net.CommunicationProtocol.stream">
            <summary>
            The stream associated with this communication protocol.
            </summary>
            <remarks>
            This member is protected so that derived classes can access it without incurring the method-call
            overhead from using the property accessor.
            </remarks>
        </member>
        <member name="M:IDS.Net.CommunicationProtocol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Net.CommunicationProtocol"/> class.
            </summary>
        </member>
        <member name="M:IDS.Net.CommunicationProtocol.#ctor(IDS.Net.CommunicationProtocol)">
            <summary>
            A copy constructor that initializes a new instance of the <see cref="T:IDS.Net.CommunicationProtocol"/> class
            with the values of the protocol parameter.
            </summary>
            <param name="protocol">The protocol to copy.</param>
        </member>
        <member name="M:IDS.Net.CommunicationProtocol.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the CommunicationProtocol class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:IDS.Net.CommunicationProtocol.ReadUntilByte(System.Byte)">
            <summary>
            Reads bytes until the eomByte is received.
            </summary>
            <param name="eomByte">The eom byte.</param>
            <returns>Returns an array of bytes that were received before the eomByte was received.</returns>
        </member>
        <member name="M:IDS.Net.CommunicationProtocol.WriteDataAndEomByte(System.Byte[],System.Byte)">
            <summary>
            Writes the data and eom byte to the communication stream.
            </summary>
            <param name="data">The data.</param>
            <param name="eomByte">The eom byte.</param>
        </member>
        <member name="M:IDS.Net.CommunicationProtocol.Read">
            <summary>
            Reads the bytes from the associated communication stream.
            </summary>
            <returns>Returns an array of bytes.</returns>
        </member>
        <member name="M:IDS.Net.CommunicationProtocol.Write(System.Byte[])">
            <summary>
            Writes an array of bytes to the associated communication stream.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:IDS.Net.CommunicationProtocol.SendKeepAlive">
            <summary>
            Sends the keep alive to the associated communication stream.
            </summary>
        </member>
        <member name="P:IDS.Net.CommunicationProtocol.CommunicationStream">
            <summary>
            Gets or sets the associayted communication stream.
            </summary>
            <value>The communication stream.</value>
        </member>
        <member name="M:IDS.Net.CommunicationProtocol.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:IDS.Net.CommunicationProtocol.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:IDS.Net.DefaultIPAddressRetriever">
            <summary>
            The DefaultIPAddressRetriever inherits from IPAddressRetriever and gets the IP address
            from the HTTP request REMOTE_ADDR header by default. The headers to use can be configured.
            </summary>
        </member>
        <member name="M:IDS.Net.DefaultIPAddressRetriever.#ctor">
            <summary>
            Create an instance of the DefaultIPAddressRetriever.
            </summary>
        </member>
        <member name="M:IDS.Net.DefaultIPAddressRetriever.#ctor(System.String)">
            <summary>
            Create an instance of the DefaultIPAddressRetriever using a custom HTTP header.
            </summary>
            <param name="httpHeaderName">The HTTP header to get the IP address from.</param>
        </member>
        <member name="M:IDS.Net.DefaultIPAddressRetriever.#ctor(System.Xml.XmlNode)">
            <summary>
            Create an instance of the DefaultIPAddressRetriever.
            </summary>
            <param name="node">The XML node to use to configure the instance.</param>
        </member>
        <member name="M:IDS.Net.DefaultIPAddressRetriever.GetUserIPAddress">
            <summary>
            A method for getting the users IP address.
            </summary>
            <returns>Returns a string or null if unable to determine the IP address.</returns>
        </member>
        <member name="P:IDS.Net.DefaultIPAddressRetriever.HttpHeaderName">
            <summary>
            Get or set a comma-delimited list of HTTP headers to use to retrieve the IP address from.
            </summary>
        </member>
        <member name="T:IDS.Net.ICommunicationProtocol">
            <summary>
            The ICommunicationProtocol interface is used to define the methods associated with a
            communication protocol.
            </summary>
        </member>
        <member name="M:IDS.Net.ICommunicationProtocol.Read">
            <summary>
            Reads the bytes from the associated communication stream.
            </summary>
            <returns>Returns an array of bytes.</returns>
        </member>
        <member name="M:IDS.Net.ICommunicationProtocol.Write(System.Byte[])">
            <summary>
            Writes an array of bytes to the associated communication stream.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:IDS.Net.ICommunicationProtocol.SendKeepAlive">
            <summary>
            Sends the keep alive to the associated communication stream.
            </summary>
        </member>
        <member name="P:IDS.Net.ICommunicationProtocol.CommunicationStream">
            <summary>
            Gets or sets the associayted communication stream.
            </summary>
            <value>The communication stream.</value>
        </member>
        <member name="T:IDS.Net.IPAddressRetriever">
            <summary>
            The IPAddressRetriever is an abstract class that standardizes how to get the IP address. The
            default implementation uses the DefaultIPAddressRetriever but this can be customized through
            entries in the app.config. See <see cref="T:IDS.Net.IPAddressRetrieverSectionHandler"/> for details on
            configuring a custom IPAddressRetriever.
            </summary>
            <remarks>
            If you want to create a custom IPAddressRetriever, create a new class that inherits from
            IPAddressRetriever. Override the GetUserIPAddress method. Add the correct configuration
            to the app.config to use that class. Add a constructor that accepts an XmlNode.
            </remarks>
        </member>
        <member name="M:IDS.Net.IPAddressRetriever.#cctor">
            <summary>
            A static constructor to create the IPAddressRetriever to use.
            </summary>
        </member>
        <member name="M:IDS.Net.IPAddressRetriever.#ctor">
            <summary>
            Create an instance of the IPAddressRetriever.
            </summary>
        </member>
        <member name="P:IDS.Net.IPAddressRetriever.UserIPAddress">
            <summary>
            A static method to get the users IP address using the configured IPAddressRetriever.
            </summary>
        </member>
        <member name="P:IDS.Net.IPAddressRetriever.IsLoopback">
            <summary>
            Gets a value indicating whether this current IP address is a loopback address.
            </summary>
            <value>
            	<c>true</c> if the current IP address is a loopback address; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:IDS.Net.IPAddressRetriever.GetUserIPAddress">
            <summary>
            An abstract method for getting the users IP address.
            </summary>
            <returns>Returns a string or null if unable to determine the IP address.</returns>
        </member>
        <member name="T:IDS.Net.CurrentContext">
            <summary>
            Returns the UrlRefererer based on the HttpRequest sent
            Note: returns null in case of System.UriFormatException
            </summary>
        </member>
        <member name="M:IDS.Net.CurrentContext.GetUrlReferrer(System.Web.HttpRequest)">
            <summary>
            Gets the URL referrer.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Net.IPAddressRetrieverSectionHandler">
            <summary>
            The IPAddressRetrieverSectionHandler implements an IConfigurationSectionHandler for
            configuring the IPAddressRetriever.
            </summary>
            <example>
            	<configuration>
            		<configSections>
            			<sectionGroup name="ids.config">
            				<section name="ipAddressRetriever" type="IDS.Net.IPAddressRetrieverSectionHandler, IDS.System" />
            			</sectionGroup>		
            		</configSections>
            		<ids.config>
            			<!-- Configure the HTTP Header for determining the IP Address using the DefaultIPAddressRetriever -->
            			<ipAddressRetriever header="REMOTE_ADDR"/>
            			<!-- OR -->
            			<!-- You can configure a custom IPAddressRetriever. It must inherit from IPAddressRetriever -->
            			<ipAddressRetriever type="IDS.Net.DefaultIPAddressRetriever, IDS.System" header="REMOTE_ADDR"/>
            		</ids.config>
            	</configuration>
            </example>
        </member>
        <member name="M:IDS.Net.IPAddressRetrieverSectionHandler.#ctor">
            <summary>
            Creates an instance of the IPAddressRetrieverSectionHandler class.
            </summary>
        </member>
        <member name="T:IDS.Net.IPSubnet">
            <summary>
            Represents the range of IP addresses in an IPv4 or IPv6 subnet.
            </summary>
            <remarks>
            Instances of the <see cref="T:IDS.Net.IPSubnet" /> class are immutable.
            </remarks>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Net.IPSubnet.#ctor(System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Net.IPSubnet" /> class
            from a specified <see cref="T:System.Net.IPAddress" />.
            </summary>
            <param name="address">
            The single <see cref="T:System.Net.IPAddress" /> that belongs to the subnet.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:IDS.Net.IPSubnet.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Net.IPSubnet" /> class
            from a specified <see cref="T:System.Net.IPAddress" /> and prefix length.
            </summary>
            <param name="address">
            An <see cref="T:System.Net.IPAddress" /> that belongs to the subnet.
            </param>
            <param name="prefixLength">
            The number of initial bits shared by all addresses in the subnet.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="prefixLength" /> is less than zero or greater than
            the number of bits in the specified <paramref name="address" />.
            </exception>
        </member>
        <member name="M:IDS.Net.IPSubnet.#ctor(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Net.IPSubnet" /> class
            from a specified <see cref="T:System.Net.IPAddress" /> and mask.
            </summary>
            <param name="address">
            An <see cref="T:System.Net.IPAddress" /> that belongs to the subnet.
            </param>
            <param name="mask">
            An <see cref="T:System.Net.IPAddress" /> that specifies the subnet mask.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mask" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="mask" /> is not a valid subnet mask.
            </exception>
        </member>
        <member name="P:IDS.Net.IPSubnet.Address">
            <summary>
            Gets an <see cref="T:System.Net.IPAddress" /> that belongs to the subnet.
            </summary>
            <value>
            An <see cref="T:System.Net.IPAddress" /> that belongs to the subnet.
            </value>
            <remarks>
            Each time the property is accessed, it returns a new
            <see cref="T:System.Net.IPAddress" /> instance equivalent to the instance
            that was passed to the <see cref="T:IDS.Net.IPSubnet" /> constructor.
            </remarks>
        </member>
        <member name="P:IDS.Net.IPSubnet.PrefixLength">
            <summary>
            Gets the prefix length of the subnet.
            </summary>
            <value>
            The number of initial bits shared by all addresses in the subnet.
            </value>
        </member>
        <member name="M:IDS.Net.IPSubnet.Contains(System.Net.IPAddress)">
            <summary>
            Determines whether a specified <see cref="T:System.Net.IPAddress" /> belongs to
            the subnet.
            </summary>
            <param name="address">
            An <see cref="T:System.Net.IPAddress" />.
            </param>
            <returns>
            <see langword="true" /> if the specified <paramref name="address" />
            belongs to the subnet.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:IDS.Net.IPSubnet.Equals(IDS.Net.IPSubnet)">
            <summary>
            Determines whether this instance is equal to a specified
            <see cref="T:IDS.Net.IPSubnet" />.
            </summary>
            <param name="subnet">
            The <see cref="T:IDS.Net.IPSubnet" /> to compare to this instance.
            </param>
            <returns>
            <see langword="true" /> if this instance and the specified
            <paramref name="subnet" /> are equal;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:IDS.Net.IPSubnet.GetHashCode">
            <summary>
            Gets the hash code for this instance.
            </summary>
            <returns>
            The hash code for this instance.
            </returns>
        </member>
        <member name="M:IDS.Net.IPSubnet.Parse(System.String)">
            <summary>
            Converts a subnet string to an <see cref="T:IDS.Net.IPSubnet" /> instance.
            </summary>
            <param name="value">
            A string that contains an IPv4 or IPv6 address optionally followed
            by a slash and a subnet mask or prefix length.
            The string cannot contain any whitespace.
            </param>
            <returns>
            An <see cref="T:IDS.Net.IPSubnet" /> that represents the subnet specified by
            <paramref name="value" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="value" /> does not specify a valid subnet.
            </exception>
        </member>
        <member name="M:IDS.Net.IPSubnet.ToString">
            <summary>
            Gets a string representation of the subnet.
            </summary>
            <returns>
            A string representation of the subnet in CIDR notation
            (Address/PrefixLength), or if the subnet contains a single address,
            a string representation of that address.
            </returns>
        </member>
        <member name="T:IDS.Net.NetMask">
            <summary>
            The NetMask class encapsulates an IP address mask.
            </summary>
        </member>
        <member name="M:IDS.Net.NetMask.Parse(System.String)">
            <summary>
            Parses the specified net mask string which should be in the format of ipaddress/mask (i.e. 192.168.0.0/255.255.0.0).
            </summary>
            <param name="netMaskString">The net mask string.</param>
            <returns>Returns a NetMask instance based on the netMaskString.</returns>
        </member>
        <member name="M:IDS.Net.NetMask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Net.NetMask"/> class.
            </summary>
        </member>
        <member name="M:IDS.Net.NetMask.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the NetMask class.
            </summary>
            <param name="networkAddress">The network IP address as a string. For example, 192.168.1.1.</param>
            <param name="networkMask">The network mask as a string. For example, 255.255.255.0.</param>
        </member>
        <member name="M:IDS.Net.NetMask.#ctor(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the NetMask class.
            </summary>
            <param name="networkAddress">The network address as an IPAddress instance.</param>
            <param name="networkMask">The network mask as an IPAddress instance.</param>
        </member>
        <member name="M:IDS.Net.NetMask.#ctor(IDS.Net.IPSubnet)">
            <summary>
            Initializes a new instance of the NetMask class.
            </summary>
            <param name="subnet">The subnet.</param>
        </member>
        <member name="P:IDS.Net.NetMask.NetworkAddressMask">
            <summary>
            Gets or sets the network address mask as a string.
            </summary>
            <value>The network address mask.</value>
        </member>
        <member name="P:IDS.Net.NetMask.Subnet">
            <summary>
            Gets or sets the subnet as an IPSubnet instance.
            </summary>
            <value>The subnet.</value>
        </member>
        <member name="M:IDS.Net.NetMask.Contains(System.Net.IPAddress)">
            <summary>
            Determines whether the hostAddress is contained within the IP address and mask 
            associated with this instance.
            </summary>
            <param name="hostAddress">The host address to test if it is contained within this mask.</param>
            <returns>
            	<c>true</c> if the host address is contained within this mask; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.Net.NetMask.Equals(IDS.Net.NetMask)">
            <summary>
            Determines whether this instance is equal to a specified
            <see cref="T:IDS.Net.NetMask" />.
            </summary>
            <param name="netMask">
            The <see cref="T:IDS.Net.NetMask" /> to compare to this instance.
            </param>
            <returns>
            <see langword="true" /> if this instance and the specified
            <paramref name="netMask" /> are equal;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:IDS.Net.NetMask.GetHashCode">
            <summary>
            Gets the hash code for this instance.
            </summary>
            <returns>
            The hash code for this instance.
            </returns>
        </member>
        <member name="M:IDS.Net.NetMask.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current NetMask instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current current NetMask instance.
            </returns>
        </member>
        <member name="T:IDS.Net.NetMaskCollection">
            <summary>
            The NetMastCollection contains a list of NetMask instances.
            </summary>
        </member>
        <member name="M:IDS.Net.NetMaskCollection.Parse(System.String)">
            <summary>
            Parses the specified net mask list string.
            </summary>
            <param name="netMaskListString">The net mask list string.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Net.NetMaskCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Net.NetMaskCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Net.NetMaskCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Net.NetMaskCollection"/> class.
            </summary>
            <param name="netMaskListString">The net mask list string.</param>
        </member>
        <member name="M:IDS.Net.NetMaskCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Net.NetMask})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Net.NetMaskCollection"/> class.
            </summary>
            <param name="netMasks">The net masks collection.</param>
        </member>
        <member name="M:IDS.Net.NetMaskCollection.MatchesIP(System.String)">
            <summary>
            Does the IP address match one of the masks in this collection?
            </summary>
            <param name="ipAddress">The IP address as a string.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Net.NetMaskCollection.MatchesIP(System.Net.IPAddress)">
            <summary>
            Does the IP address match one of the masks in this collection?
            </summary>
            <param name="address">The IP address.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Net.NetMaskCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Net.NetMaskCollection"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Net.NetMaskCollection"></see>.
            </returns>
        </member>
        <member name="T:IDS.Net.NewLineProtocol">
            <summary>
            The NewLineProtocol is a <see cref="T:IDS.Net.CommunicationProtocol"/> where each response is delimited by a new line (\n) character.
            </summary>
        </member>
        <member name="M:IDS.Net.NewLineProtocol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Net.NewLineProtocol"/> class.
            </summary>
        </member>
        <member name="M:IDS.Net.NewLineProtocol.#ctor(IDS.Net.NewLineProtocol)">
            <summary>
            A copy constructor that initializes a new instance of the <see cref="T:IDS.Net.NewLineProtocol"/> class
            with the values of the protocol parameter.
            </summary>
            <param name="protocol">The protocol to copy.</param>
        </member>
        <member name="M:IDS.Net.NewLineProtocol.Read">
            <summary>
            Reads the bytes from the associated communication stream.
            </summary>
            <returns>Returns an array of bytes.</returns>
        </member>
        <member name="M:IDS.Net.NewLineProtocol.Write(System.Byte[])">
            <summary>
            Writes an array of bytes to the associated communication stream.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:IDS.Net.NewLineProtocol.SendKeepAlive">
            <summary>
            Sends the keep alive to the associated communication stream.
            </summary>
        </member>
        <member name="M:IDS.Net.NewLineProtocol.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:IDS.Net.NullIPAddressRetriever">
            <summary>
            Implements an <see cref="T:IDS.Net.IPAddressRetriever" /> that always returns
            a <see langword="null" /> IP address.
            </summary>
            <example>
            <para>
            The following example demonstrates how to configure the
            <see cref="T:IDS.Net.NullIPAddressRetriever" />.
            </para>
            <code><![CDATA[
            <configuration>
              <configSections>
                <sectionGroup name="ids.config">
                  <section name="ipAddressRetriever" type="IDS.Net.IPAddressRetrieverSectionHandler, IDS.System" />
                </sectionGroup>
              </configSections>
              <ids.config>
                <ipAddressRetriever type="IDS.Net.NullIPAddressRetriever, IDS.System" />
              </ids.config>
            </configuration>
            ]]></code>
            </example>
        </member>
        <member name="M:IDS.Net.NullIPAddressRetriever.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Net.IPAddressRetriever" />
            class.
            </summary>
            <param name="configNode">
            The <see cref="T:System.Xml.XmlNode" /> to use to configure the instance.
            </param>
        </member>
        <member name="M:IDS.Net.NullIPAddressRetriever.GetUserIPAddress">
            <summary>
            Gets the user's IP address.
            </summary>
            <returns>
            A null reference, indicating that the user's IP address
            is not available.
            </returns>
        </member>
        <member name="T:IDS.Net.ProtocolException">
            <summary>
            The ProtocolException is thrown when an error occurs during a protocol operation.
            </summary>
        </member>
        <member name="M:IDS.Net.ProtocolException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Net.ProtocolException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Net.ProtocolException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Net.ProtocolException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:IDS.Net.ProtocolException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Net.ProtocolException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:IDS.Net.ProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Net.ProtocolException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:IDS.Net.TcpClientPool">
            <summary>
            A connection pool implementation using the <see cref="T:System.Net.Sockets.TcpClient"/> class.
            </summary>
            <remarks>
            The <see cref="T:System.Net.Sockets.TcpClient"/> object that is returned from 
            <see cref="M:IDS.Collections.Generic.ObjectPool`2.ObtainFromPool"/> will already be connected.
            Do not call <see cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)"/> on the returned object.  When finished with the object, 
            do not call its <see cref="M:System.IDisposable.Dispose"/> method or its <see cref="M:System.Net.Sockets.TcpClient.Close"/>
            method.  Instead, return it to the pool by calling 
            <see cref="M:IDS.Collections.Generic.ObjectPool`2.ReturnToPool(`0)"/>.
            </remarks>
        </member>
        <member name="M:IDS.Net.TcpClientPool.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new TcpClientPool object with a maximum of 100 pooled connections to the specified server address and port.  
            Connections are destroyed after being idle for 2 minutes (120 seconds).
            </summary>
        </member>
        <member name="M:IDS.Net.TcpClientPool.#ctor(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Create a new TcpClientPool object with the specified connection limit and timeout.  
            Also sets server address and port to which connections will be made.
            </summary>
            <param name="maximumConnections">The maximum number of connections to store in the pool.</param>
            <param name="serverAddress">The address (either hostname or IP address string) of the server to which connections will be made.</param>
            <param name="port">The port on which the server is listening for connections.</param>
            <param name="idleTimeout">The minimum amount of time, in seconds, that an idle connection should remain in the pool before being destroyed.</param>
        </member>
        <member name="M:IDS.Net.TcpClientPool.CreateClient(System.Object)">
            <summary>
            Creates a new TcpClient object that is connected to <see cref="P:IDS.Net.TcpClientPool.ServerIPAddress"/>.
            </summary>
            <param name="data">Not used.  Value will typically be null.</param>
            <returns>A new, connected, TcpClient object.</returns>
        </member>
        <member name="P:IDS.Net.TcpClientPool.ServerIPAddress">
            <summary>
            Gets a <see cref="T:System.Net.IPAddress"/> object containing the address of the server to which connections are pooled.
            </summary>
        </member>
        <member name="T:IDS.Net.TrustAllCertificatePolicy">
            <summary>
            The TrustAllCertificatePolicy class implements the ICertificatePolicy interface
            to allow untrusted certificates to be trusted.
            </summary>
            <example>
            The following example shows how to set this policy to be used. This setting is global to the
            app domain.
            <code>
            ServicePointManager.CertificatePolicy = new TrustAllCertificatePolicy();
            </code>
            </example>
        </member>
        <member name="M:IDS.Net.TrustAllCertificatePolicy.CheckValidationResult(System.Net.ServicePoint,System.Security.Cryptography.X509Certificates.X509Certificate,System.Net.WebRequest,System.Int32)">
            <summary>
            Validates a server certificate.
            </summary>
            <param name="srvPoint">The <see cref="T:System.Net.ServicePoint"></see> that will use the certificate.</param>
            <param name="certificate">The certificate to validate.</param>
            <param name="request">The request that received the certificate.</param>
            <param name="certificateProblem">The problem that was encountered when using the certificate.</param>
            <returns>
            true if the certificate should be honored; otherwise, false.
            </returns>
        </member>
        <member name="T:IDS.Net.XmlDocumentProtocol">
            The XmlDocumentProtocol defines a communication protocol for reading an XML document.
        </member>
        <member name="M:IDS.Net.XmlDocumentProtocol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Net.XmlDocumentProtocol"/> class.
            </summary>
        </member>
        <member name="M:IDS.Net.XmlDocumentProtocol.#ctor(IDS.Net.XmlDocumentProtocol)">
            <summary>
            A copy constructor that initializes a new instance of the <see cref="T:IDS.Net.XmlDocumentProtocol"/> class
            with the values of the protocol parameter.
            </summary>
            <param name="protocol">The protocol to copy.</param>
        </member>
        <member name="M:IDS.Net.XmlDocumentProtocol.Read">
            <summary>
            Reads the bytes from the associated communication stream.
            </summary>
            <returns>Returns an array of bytes.</returns>
        </member>
        <member name="M:IDS.Net.XmlDocumentProtocol.ReadDocument">
            <summary>
            Reads the document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Net.XmlDocumentProtocol.ReadDocumentString">
            <summary>
            Reads the document string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Net.XmlDocumentProtocol.Write(System.Byte[])">
            <summary>
            Writes an array of bytes to the associated communication stream.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:IDS.Net.XmlDocumentProtocol.Write(System.String)">
            <summary>
            Writes the specified XML.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="M:IDS.Net.XmlDocumentProtocol.Write(System.Xml.XmlDocument)">
            <summary>
            Writes the specified document.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:IDS.Net.XmlDocumentProtocol.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Net.XmlDocumentProtocol.SendKeepAlive">
            <summary>
            Sends the keep alive to the associated communication stream.
            </summary>
        </member>
        <member name="T:IDS.Permissions.ApplyPermissionsHelper">
            <summary>Helps to check if permissions pass or fail</summary>
        </member>
        <member name="M:IDS.Permissions.ApplyPermissionsHelper.DoesPass(IDS.ComponentModel.BaseComponentCollection,IDS.Permissions.PermissionSet)">
            <summary>
            Applies the specified PermissionSet to the entitlements.
            </summary>
            <param name="entitlements">A list of entitlements</param>
            <param name="set">The set.</param>
            <returns>If the permissions meet the configured entitlements returns passed, otherwise returns failed</returns>
        </member>
        <member name="M:IDS.Permissions.ApplyPermissionsHelper.DoesPass(IDS.ComponentModel.BaseComponentCollection,System.String)">
            <summary>Applies the session permissions to the entitlements. </summary>
            <param name="entitlements">A list of Entitlements</param>
            <param name="sessionString">The session string which points to a PermissionSet.</param>
            <returns>If the permissions meet the configured entitlements returns passed, otherwise returns failed</returns>
        </member>
        <member name="M:IDS.Permissions.ApplyPermissionsHelper.ApplyAndPermissions(IDS.ComponentModel.BaseComponentCollection,IDS.Permissions.PermissionSet)">
            <summary>
            Applies the and permissions.
            </summary>
            <param name="entitlements">A list of entitlements</param>
            <param name="set">The set.</param>
            <returns>true for pass, false for fail</returns>
        </member>
        <member name="M:IDS.Permissions.ApplyPermissionsHelper.ApplyOrPermissions(IDS.ComponentModel.BaseComponentCollection,IDS.Permissions.PermissionSet)">
            <summary>
            Applies the or permissions.
            </summary>
            <param name="entitlements">A list of entitlements</param>
            <param name="set">The set.</param>
            <returns>true for pass, false for fail</returns>
        </member>
        <member name="T:IDS.Permissions.ComplexListPermission`1">
            <summary>
            A Permission which contains a list of subPermissions. One way to visualize it is Parent and Child 
            permissions can expand the permission tree on the x an y axis. SubPermissions expand the tree on the z axis. 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:IDS.Permissions.ComplexListPermission`1.set">
            <summary>The data</summary>
        </member>
        <member name="F:IDS.Permissions.ComplexListPermission`1.propertyName">
            <summary>Optional field that can be saved to the db, generally not needed unless you want 
            to have multiple lists in the same permission. or lists combined with fields.</summary>
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ListPermission"/> class.
            </summary>
        </member>
        <member name="P:IDS.Permissions.ComplexListPermission`1.SubPermissionSet">
            <summary>
            Gets the sub permission set.
            </summary>
            <value>The sub permission set.</value>
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.UpdateSubPermissions(System.Collections.Generic.List{IDS.Permissions.SubPermissionField})">
            <summary>
            Updates the sub permissions. This method will be called after loading subpermissions
            </summary>
            <param name="subPermissionFields">The sub permission fields.</param>
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.GetSubPermissions">
            <summary>
            Gets the sub permissions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.ConstrainChildrenToParent(IDS.Permissions.ConstrainType,IDS.Permissions.IPermissionDataLayer)">
            <summary>This is for parents to force children to constrain to a parents new settings.</summary>		
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.ConstrainChildrenHelper(IDS.Permissions.ConstrainType,IDS.Permissions.IPermissionDataLayer)">
            <summary>
            Constrains the children so that the child can not constain any object in its list that the parent does not have in its list
            </summary>
            <param name="constrainType">determines how subpermissions are constrained if they violate the HierarchyEnforcement rule</param>
            <param name="dataLayer">The data layer.</param>
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.ConstrainToParents(IDS.Permissions.ConstrainType)">
            <summary>This method checks if this permission is better then any parents, if so it 
            locks it to the best of the parents, ensuring a child permission never items in the 
            list that the parent does not have.</summary>
            <returns>Returns true if the permission was constrained to its parent.</returns>
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.Merge(IDS.Permissions.IPermission)">
            <summary>
            For list permissions Merge does a union, if you want the intersection override this.
            </summary>
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="P:IDS.Permissions.ComplexListPermission`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:T"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="P:IDS.Permissions.ComplexListPermission`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:IDS.Permissions.ComplexListPermission`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:IDS.Permissions.ComplexListPermission`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:IDS.Permissions.ConstrainType">
            <summary>
            This setting is used in conjunction with the HierarchyEnforcement to determine how rights are constrained.
            This setting determines what is done when a property violates the HierarchyEnforcement rule.
            </summary>
        </member>
        <member name="F:IDS.Permissions.ConstrainType.Normal">
            <summary>
            This setting allows the permission to have the best rights possible without violating the the HierarchyEnforcement rule
            For instance if HierarchyEnforcement is on ChildRightsLessThanOrEqualToParent, and the child
            value is greater then the parent, it sets the child value to the parents value on constrain
            </summary>
        </member>
        <member name="F:IDS.Permissions.ConstrainType.LowestRights">
            <summary>
            This setting sets the property to the lowest possible value if the HierarchyEnforcement rule is 
            violated. For instance if a limit's HierarchyEnforcement is on ChildRightsLessThanOrEqualToParent, and the child
            value is greater then the parent, this would set the value to 0. 
            </summary>
        </member>
        <member name="T:IDS.Permissions.Entitlement">
            <summary>
            This is the implementation of a basic entitlement. A basic entitlement just checks if the user
            has a certain type of permission or if a boolean field in a permission is true. If you want to 
            check a limit use LimitEntitlement, or RegularExpressionEntitlement to check against a regular
            expression, or create a new Entitlement type by deriving from IEntitlement.
            </summary>
        </member>
        <member name="P:IDS.Permissions.Entitlement.IsAndEntitlement">
            <summary>
            If true property is ANDed, if false property is ORed. If there are ANDs and ORs combined they
            are ANDed together so AND properties are required, and if OR's are present one OR is required.
            </summary>
        </member>
        <member name="P:IDS.Permissions.Entitlement.PermissionType">
            <summary>
            Gets the type of the permission. 
            </summary>
            <value>The type of the permission.</value>
        </member>
        <member name="P:IDS.Permissions.Entitlement.AssemblyQualifiedName">
            <summary>
            Name of the Permission the User Needs
            </summary>
            <value>The type of the permission.</value>
        </member>
        <member name="P:IDS.Permissions.Entitlement.Property">
            <summary>
            "Name of the Property to Access. If none then there are no limits or boolean properties to check
            </summary>
            <value>The property.</value>
        </member>
        <member name="M:IDS.Permissions.Entitlement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Entitlement"/> class.
            </summary>
        </member>
        <member name="M:IDS.Permissions.Entitlement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Entitlement"/> class.
            </summary>
            <param name="permissionType">Type of the permission.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:IDS.Permissions.Entitlement.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Entitlement"/> class.
            </summary>
            <param name="permissionType">Type of the permission.</param>
            <param name="property">The property.</param>
            <param name="isAnd">if set to <c>true</c> permission is ANDed, otherwise it is ORed.</param>
        </member>
        <member name="M:IDS.Permissions.Entitlement.DoesPass(IDS.Permissions.PermissionSet)">
            <summary>
            This method checks to see if a set of permissions contains a specific permission type and (optionally) if it meets the requirements of a boolean property.
            </summary>
            <param name="set">The permissions to check against. Usually this will be the current users permissions</param>
            <returns>
            true if the user meets the requirements of the entitlement, false otherwise
            </returns>
        </member>
        <member name="F:IDS.Permissions.Entitlement.delimiter">
            <summary>The delimiter used to export this object to a string or parse it</summary>
        </member>
        <member name="T:IDS.Permissions.EntitlementAttribute">
            <summary>
            This Attribute should decorate the properties in your permission class that you want saved and loaded
            If you do not use this attribute in your custom permission class then you need to override GetFieldsList,
            UpdateFields, and FindBetterThan. 
            </summary>
        </member>
        <member name="P:IDS.Permissions.EntitlementAttribute.EnforcementType">
            <summary>
            Gets the type of the enforcement. If the enforcement type is ChildRightsLessThanOrEqualToParent and
            the child has a limit of 100 and the parent of 50, then when constrain to parents is called
            the child will be taken down to the parents rights.
            </summary>
            <value>The type of the enforcement.</value>
        </member>
        <member name="M:IDS.Permissions.EntitlementAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EntitlementAttribute"/> class
            with the enforcement type set so childrens 
            </summary>
        </member>
        <member name="M:IDS.Permissions.EntitlementAttribute.#ctor(IDS.Permissions.HierarchyEnforcement)">
            <summary>
            Initializes a new instance of the <see cref="T:EntitlementAttribute"/> class.
            </summary>
            <param name="enforcementType">Type of the enforcement.</param>
        </member>
        <member name="T:IDS.Permissions.EntitlementCollectionAttribute">
            <summary>
            This property should decorate the permission properties that are collections.
            This will probably just support generic collections of type IEnumerable, List, and Dictionary
            </summary>
        </member>
        <member name="T:IDS.Permissions.Field">
            <summary>
            The data in lower level DB form. Normally to deal with a single field of a Permission class
            you use the Entitlement classes. 
            </summary>
        </member>
        <member name="M:IDS.Permissions.Field.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Field"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:IDS.Permissions.Field.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:IDS.Permissions.Field.Value">
            <summary>
            Gets the value of the field as a string.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:IDS.Permissions.HierarchyEnforcement">
            <summary>
            This determines how the framework compares the entitlements in a custom permission. 
            If you need a different behavior you can override the FindBetterThan method in your permission,
            or you can override the CompareTo method within the permission property type. 
            </summary>
        </member>
        <member name="F:IDS.Permissions.HierarchyEnforcement.ChildRightsLessThanOrEqualToParent">
            <summary>
            When using this setting, if a permission is constrained the framework makes sure the childs
            rights are less then the parent. 
            </summary>
        </member>
        <member name="F:IDS.Permissions.HierarchyEnforcement.ParentRightsLessThanOrEqualToChild">
            <summary>
            This setting makes sure the parents rights are less then the child. For example say you have a 
            property for admin level, and level 1 is better then level 2. Then you use this so that children
            cannot reach a lower level then the parent.
            </summary>
        </member>
        <member name="F:IDS.Permissions.HierarchyEnforcement.ChildEqualToParent">
            <summary>
            This setting forces the child to be equal to the parent settings
            </summary>
        </member>
        <member name="F:IDS.Permissions.HierarchyEnforcement.NoEnforcement">
            <summary>
            This field(entitlement) is not affected when constraining 
            </summary>
        </member>
        <member name="T:IDS.Permissions.ICompositePermissionProvider">
            <summary>
            The ICompositePermissionProvider is a special implementation of a 
            <see cref="T:IDS.Permissions.IPermissionProvider">permission provider</see>. By implementing an ICompositePermissionProvider, 
            your provider will be asked for its permissions after all of the other IPermissionProvider instances 
            have been asked for their permissions. This allows an ICompositeRoleProvider to use existing permissions
            to determine the users final rights.
            </summary>
        </member>
        <member name="M:IDS.Permissions.ICompositePermissionProvider.GetPermissions(IDS.Security.IUser,IDS.Permissions.PermissionSet)">
            <summary>
            Returns a PermissionSet which may modify the current calculated permissions.
            </summary>		
        </member>
        <member name="T:IDS.Permissions.IDynamicPermissionMetaDataProvider">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.Permissions.IDynamicPermissionMetaDataProvider.GetAllPermissions">
            <summary>
            Gets all.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Permissions.IEntitlement">
            <summary>
            Permissions define what users can do, and Entitlements are a way to define what is needed for a user
            to do something (within a module dor instance. When a program runs the users permissions are checked 
            against the entitlements that are defined, and if the user passes these requirements then they can proceed. 
            Entitlements are checked against the users permissions using the ApplyPermissions Helper class. Configuring 
            entitlements are not necessary to use the permissions framework. The advantage to using entitlements instead 
            of just checking the permission properties or using attributes and the PermissionsModule, is that
            they can easily be configured so the same module can be configured to require different permissions
            depending on where it is installed. Another advantage is that the check is done through reflection,
            so the permission does not have to be referenceable by the module. 
            </summary>
        </member>
        <member name="P:IDS.Permissions.IEntitlement.AssemblyQualifiedName">
            <summary>
            Gets the type of the permission. This is the unique name defined by the permission. 
            </summary>
            <value>The type of the permission.</value>
        </member>
        <member name="P:IDS.Permissions.IEntitlement.Property">
            <summary>
            This is the property in the permission that we will be checking against. If the property is null
            or empty then it means we are only checking if the user has the permission defined by PermissionType
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:IDS.Permissions.IEntitlement.IsAndEntitlement">
            <summary>
            Gets a value indicating whether this instance is an AND entitlement.
            </summary>
            <value>
            	<c>true</c> if this instance is AND entitlement; otherwise, it's an OR entitlement.
            </value>
        </member>
        <member name="M:IDS.Permissions.IEntitlement.DoesPass(IDS.Permissions.PermissionSet)">
            <summary>
            This method checks to see if a set of permissions meets the requirements of this entitlement.
            </summary>
            <param name="set">The permissions to check against. Usually this will be the current users permissions</param>
            <returns>true if the user meets the requirements of the entitlement, false otherwise</returns>
        </member>
        <member name="T:IDS.Permissions.IListPermission`1">
            <summary>
            interface to define list permissions. the Permission class had a boolean to designate listpermissions, but this is better
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:IDS.Permissions.IPermission">
            <summary>
            The IPermission interface represents a permission.
            </summary>
        </member>
        <member name="P:IDS.Permissions.IPermission.PermissionID">
            <summary>
            Unique ID for each permission instance
            </summary>
            <value>The permission ID.</value>
        </member>
        <member name="P:IDS.Permissions.IPermission.PermissionType">
            <summary>
            The type of the permission class
            </summary>
            <value>The type of the permission.</value>
        </member>
        <member name="P:IDS.Permissions.IPermission.Description">
            <summary>
            Gets or sets the description of the permission.
            </summary>
            <value>The description of the permission.</value>
        </member>
        <member name="P:IDS.Permissions.IPermission.AllowMultiples">
            <summary>
            Gets a boolean that tells the PermissionSet whether to Merge permissions or 
            allow multiple permissions of the same type in the list.
            </summary>
            <value><c>true</c> if multiple permissions are allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:IDS.Permissions.IPermission.Merge(IDS.Permissions.IPermission)">
            <summary>
            Merges permission with the current permissions, copying down values if they are better
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:IDS.Permissions.IPermission.MergeLeast(IDS.Permissions.IPermission)">
            <summary>
            Merges the permissions giving the current permission the least best rights.
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:IDS.Permissions.IPermission.ConstrainToParents(IDS.Permissions.ConstrainType)">
            <summary>
            Makes sure the permission is not in violation of the HierarchyEnforcement rule for the parent with the best rights
            </summary>
            <returns>a list of properties that were constrained, if the list is 0 the permission was not constrained</returns>
        </member>
        <member name="M:IDS.Permissions.IPermission.ConstrainToWorstParentRights(IDS.Permissions.ConstrainType)">
            <summary>
            Makes sure the permission is not in violation of the HierarchyEnforcement rule for the parent with the worst rights
            </summary>
        </member>
        <member name="M:IDS.Permissions.IPermission.ConstrainChildrenToParent(IDS.Permissions.ConstrainType,IDS.Permissions.IPermissionDataLayer)">
            <summary>
            Makes sure the child permissions are not in violation of the HierarchyEnforcement rule
            </summary>
            <param name="constrainType">Indicates what is done when the heirarchy rule is violated</param>
            <param name="dataLayer">The data layer</param>
        </member>
        <member name="M:IDS.Permissions.IPermission.MaxOut">
            <summary>
            Gives the permission the best rights that it's parents have
            </summary>
        </member>
        <member name="M:IDS.Permissions.IPermission.DoMinMax">
            <summary>
            Gives the permission the best rights it can while making sure it never has better permisions then any of its parents
            </summary>
        </member>
        <member name="M:IDS.Permissions.IPermission.Save(IDS.Permissions.IPermissionDataLayer)">
            <summary>
            Saves the permissions to the specified data layer.
            </summary>
            <param name="dataLayer">The data layer.</param>
        </member>
        <member name="M:IDS.Permissions.IPermission.Delete(IDS.Permissions.IPermissionDataLayer)">
            <summary>
            Deletes the permissions from the specified data layer.
            </summary>
            <param name="dataLayer">The data layer.</param>
        </member>
        <member name="M:IDS.Permissions.IPermission.AddParent(IDS.Permissions.IPermission)">
            <summary>
            Creates a parent child hierachy.
            </summary>
            <param name="parent">The parent to associate with this permission.</param>
        </member>
        <member name="M:IDS.Permissions.IPermission.GrantPermissionsTo(IDS.Permissions.IPermission)">
            <summary>
            Creates a parent child heirachy and copies down parents permissions.
            </summary>
            <param name="q">The q.</param>
        </member>
        <member name="P:IDS.Permissions.IPermission.ParentPermissions">
            <summary>
            Gets the parent permissions.
            </summary>
            <value>The parent permissions.</value>
        </member>
        <member name="P:IDS.Permissions.IPermission.ChildPermissions">
            <summary>
            Gets or sets the child permissions.
            </summary>
            <value>The child permissions.</value>
        </member>
        <member name="M:IDS.Permissions.IPermission.UpdateEntitlements(System.Collections.Generic.List{IDS.Permissions.Field})">
            <summary>
            Updates the fields.
            </summary>
            <param name="extraFields">The extra fields.</param>
        </member>
        <member name="M:IDS.Permissions.IPermission.GetEntitlements">
            <summary>
            Gets the fields list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Permissions.IPermission.UpdateSubPermissions(System.Collections.Generic.List{IDS.Permissions.SubPermissionField})">
            <summary>
            Updates the fields.
            </summary>
            <param name="extraFields">The extra fields.</param>
        </member>
        <member name="M:IDS.Permissions.IPermission.GetSubPermissions">
            <summary>
            Gets the fields list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Permissions.IPermission.CreateDeepCopy(IDS.Permissions.IPermissionDataLayer,System.Boolean)">
            <summary>
            Creates a deep copy of the current permission.
            (Actually just loads it because I'm lazy)
            </summary>
            <param name="dataLayer">The data layer.</param>
            <param name="copyParentsAndChildren">if set to <c>true</c> [copy parents and children].</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Permissions.IPermission.IsFieldTrue(System.String)">
            <summary>Used by the PermissionsModuleControl and ApplyPermissions Helper to check a property based on a string</summary>
        </member>
        <member name="M:IDS.Permissions.IPermission.GetFieldValue(System.String)">
            <summary>Used by ApplyPermissions Helper to check a property based on a string</summary>
        </member>
        <member name="T:IDS.Permissions.IPermissionDataLayer">
            <summary>
            The IPermissionDataLayer is an interface for implementing the permission data layer that
            is responsible for persisting permissions to a data store.
            </summary>
        </member>
        <member name="M:IDS.Permissions.IPermissionDataLayer.SavePermission(IDS.Permissions.IPermission)">
            <summary>
            Saves the permission to the data store.
            </summary>
            <param name="permission">The permission to store.</param>
        </member>
        <member name="M:IDS.Permissions.IPermissionDataLayer.LoadPermission(System.String,System.Boolean)">
            <summary>
            Loads the permission from the data store.
            </summary>
            <param name="permissionID">The permission ID to retrieve from the data store.</param>
            <param name="loadParentTree">if set to <c>true</c> if the parent tree should be loaded.</param>
            <returns>Returns the loaded permission.</returns>
        </member>
        <member name="M:IDS.Permissions.IPermissionDataLayer.LoadChildTree(IDS.Permissions.IPermission)">
            <summary>
            Loads the child tree for the specified permission.
            </summary>
            <param name="permission">The permission to load the child tree for.</param>
        </member>
        <member name="M:IDS.Permissions.IPermissionDataLayer.RemovePermission(IDS.Permissions.IPermission)">
            <summary>
            Removes the permission from the data store.
            </summary>
            <param name="permission">The permission to remove.</param>
        </member>
        <member name="M:IDS.Permissions.IPermissionDataLayer.SavePermissionSet(IDS.Permissions.PermissionSet)">
            <summary>
            Saves the permission set to the data store.
            </summary>
            <param name="set">The permission set to store.</param>
        </member>
        <member name="M:IDS.Permissions.IPermissionDataLayer.LoadPermissionSet(System.Int64,System.Boolean)">
            <summary>
            Loads the permission set from the data store.
            </summary>
            <param name="setID">The permission set ID to load from the data store.</param>
            <param name="loadTree">if set to <c>true</c> the tree is loaded.</param>
            <returns>Returns a set of permissions for the specified set ID.</returns>
        </member>
        <member name="M:IDS.Permissions.IPermissionDataLayer.LoadParentTree(IDS.Permissions.PermissionSet)">
            <summary>
            Loads the parent tree.
            </summary>
            <param name="set">The permission set to load the parent tree for.</param>
        </member>
        <member name="M:IDS.Permissions.IPermissionDataLayer.LoadChildTree(IDS.Permissions.PermissionSet)">
            <summary>
            Loads the child tree.
            </summary>
            <param name="set">The permission set to load the child tree for.</param>
        </member>
        <member name="M:IDS.Permissions.IPermissionDataLayer.RemovePermissionFromSet(IDS.Permissions.IPermission,System.Int64)">
            <summary>
            Removes the permission from set in the data store.
            </summary>
            <param name="permission">The permission.</param>
            <param name="setID">The set ID.</param>
        </member>
        <member name="M:IDS.Permissions.IPermissionDataLayer.RemovePSetOnly(IDS.Permissions.PermissionSet)">
            <summary>
            Removes the permission set only from the data store.
            </summary>
            <param name="set">The permission set to remove.</param>
        </member>
        <member name="M:IDS.Permissions.IPermissionDataLayer.RemovePSetAndAllAssociatedPermissions(IDS.Permissions.PermissionSet)">
            <summary>
            Removes the permission set and all associated permissions from the data store.
            </summary>
            <param name="set">The permission set to remove.</param>
        </member>
        <member name="T:IDS.Permissions.IPermissionDataLayer2">
            <summary>
            This interface provides the ability to save and load a PermissionSet for a user
            </summary>
        </member>
        <member name="M:IDS.Permissions.IPermissionDataLayer2.LoadPermissionSet(IDS.Security.IUser,System.Boolean)">
            <summary>
            Loads the permission set. Returns null if no permission set has been saved for the user
            </summary>
            <param name="user">The user.</param>
            <param name="loadTree">if set to <c>true</c> [load tree].</param>
            <returns>returns null if no permission set has been saved for the user</returns>
        </member>
        <member name="M:IDS.Permissions.IPermissionDataLayer2.SavePermissionSet(IDS.Security.IUser,IDS.Permissions.PermissionSet)">
            <summary>
            Saves the permission set for a user.
            </summary>
            <param name="user">The user.</param>
            <param name="set">The set.</param>
        </member>
        <member name="T:IDS.Permissions.IPermissionProvider">
            <summary>
            The IPermissionProvider interface provides the capability to associate permissions
            with a particular user, or more correctly, the current session. 
            </summary>
        </member>
        <member name="M:IDS.Permissions.IPermissionProvider.GetAllPermissions">
            <summary>
            Gets a list of all the permisisons for this provider.
            </summary>
        </member>
        <member name="M:IDS.Permissions.IPermissionProvider.GetPermissionsForUser(IDS.Security.IUser)">
            <summary>
             Gets the permissions associated with a user.
            </summary>
            <param name="user">The user.</param>
            <returns>Returns a PermissionSet with all the permissions associated with the user</returns>
        </member>
        <member name="T:IDS.Permissions.IProperty">
            <summary>
            Represents a property in a class
            </summary>
        </member>
        <member name="P:IDS.Permissions.IProperty.PropertyName">
            <summary>
            The name of the property 
            </summary>
        </member>
        <member name="T:IDS.Permissions.LimitEntitlement">
            <summary>
            This class is for defining a limit to check against a numerical property in a permission in a permissionset.
            For example, you could create a LimitEntitlement with the amount that the user is trying to transfer
            and then check it against the users permissions. The advantage to doing this is you can allow the
            permission type and property to be configurable, so in one application it might check against one
            permissions and in another it would check against a different permission
            </summary>
        </member>
        <member name="P:IDS.Permissions.LimitEntitlement.Limit">
            <summary>
            If MustExceed is false then this is the limit the User needs to be under
            If MustExceed is true then this is the limit the User needs to exceed
            </summary>
            <value>The limit.</value>
        </member>
        <member name="P:IDS.Permissions.LimitEntitlement.MustExceed">
            <summary>
            Gets or sets a value indicating the value we need to exceed for the <see cref="T:PermissionProperty"/>
            If we are checking a value this tells if the user needs to exceed the limit(true) or be under the limit(false)
            </summary>
            <value><c>true</c> if exceed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:IDS.Permissions.LimitEntitlement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LimitEntitlement"/> class.
            </summary>
        </member>
        <member name="M:IDS.Permissions.LimitEntitlement.#ctor(System.String,System.String,System.Boolean,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Entitlement"/> class for a required limit.
            </summary>
            <param name="permissionType">Type of the permission.</param>
            <param name="property">The property.</param>
            <param name="isAnd">if set to <c>true</c> permission is ANDed, otherwise it is ORed.</param>
            <param name="limit">The limit.</param>
            <param name="mustExceed">if set to <c>true</c> user must exceed the limit, if false user must be under the limit.</param>
        </member>
        <member name="M:IDS.Permissions.LimitEntitlement.DoesPass(IDS.Permissions.PermissionSet)">
            <summary>
            This method checks to see if a set of permissions contains a specific permission type and if it 
            meets the requirements of a numerical limit. 
            </summary>
            <param name="set">The permissions to check against. Usually this will be the current users permissions</param>
            <returns>
            true if the user meets the requirements of the entitlement, false otherwise
            </returns>
        </member>
        <member name="M:IDS.Permissions.LimitEntitlement.ToString">
            <summary>
            Returns a delimited <see cref="T:System.String"></see> that represents the current Entitlement.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current Entitlement.
            </returns>
        </member>
        <member name="T:IDS.Permissions.ListPermission`1">
            <summary>
            Eventually I will support attributes on list and dictionary properties but for now extend this to do lists.
            </summary>
            <typeparam name="T">The type of data in the list. This can be any value type. It can be any object type but you need to implement ToString, a static Parse, equals, and IComparable</typeparam>
        </member>
        <member name="F:IDS.Permissions.ListPermission`1.list">
            <summary>The data</summary>
        </member>
        <member name="F:IDS.Permissions.ListPermission`1.allowDuplicates">
            <summary>
            Determines whether we allow duplicate values added to the list. ListPermissions that
            do not want duplicate values should set this field to false.
            </summary>
        </member>
        <member name="F:IDS.Permissions.ListPermission`1.propertyName">
            <summary>Optional field that can be saved to the db, generally not needed unless you want 
            to have multiple lists in the same permission. or lists combined with fields.</summary>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.Parse(System.String)">
            <summary>Parses the serialized data.</summary>
             <param name="item">The item.</param>
             <returns>the data in the type you want, T</returns>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ListPermission"/> class.
            </summary>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.GetEntitlements">
            <summary>
            The database calls this method before saving the permission
            </summary>
            <returns>the data stored in this permission</returns>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.UpdateEntitlements(System.Collections.Generic.List{IDS.Permissions.Field})">
            <summary>
            The database calls this method after saving the permission
            </summary>
            <param name="extraFields"></param>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.ConstrainChildrenToParent(IDS.Permissions.ConstrainType,IDS.Permissions.IPermissionDataLayer)">
            <summary>This is for parents to force children to constrain to a parents new settings.</summary>		
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.ConstrainChildrenHelper(IDS.Permissions.IPermissionDataLayer)">
            <summary>
            Constrains the children so that the child can not constain anything the parent does not have.
            NOTE: this is constraining to all parents individually, so the child can only have something if all of its parents do. 
            </summary>
            <param name="dataLayer">The data layer.</param>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.ConstrainToParents(IDS.Permissions.ConstrainType)">
            <summary>
            This method checks if this permission is better then any parents, if so it locks it to
            the best of the parents, ensuring a child permission never items in the list that the 
            parent does not have.
            </summary>
            <returns>
            Returns true if the permission was constrained to its parent.
            </returns>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.Merge(IDS.Permissions.IPermission)">
            <summary>
            For list permissions Merge does a union, if you want the intersection override this.
            </summary>
        </member>
        <member name="P:IDS.Permissions.ListPermission`1.EnumerateList">
            <summary>
            Gets the list.
            </summary>
            <value>The list.</value>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="P:IDS.Permissions.ListPermission`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:T"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="P:IDS.Permissions.ListPermission`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:IDS.Permissions.ListPermission`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:IDS.Permissions.ListPermission`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:IDS.Permissions.Permission">
            <summary>
            The Permission class is a base permission that implements the IPermission interface.
            </summary>
        </member>
        <member name="M:IDS.Permissions.Permission.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.Permission"/> class.
            </summary>
        </member>
        <member name="P:IDS.Permissions.Permission.PermissionID">
            <summary>
            Unique ID for each permission instance
            </summary>
            <value>The permission ID.</value>
        </member>
        <member name="P:IDS.Permissions.Permission.Description">
            <summary>
            The description for the permission, must be less then 4000 characters
            </summary>
            <value>The description of the permission.</value>
        </member>
        <member name="P:IDS.Permissions.Permission.PermissionType">
            <summary>
            The type of the permission class
            </summary>
            <value>The type of the permission.</value>
        </member>
        <member name="P:IDS.Permissions.Permission.ParentPermissions">
            <summary>
            A permissions parents (do not manually add to this list, use AddParent or GrantPermissionsTo for that
            </summary>
            <value>The parent permissions.</value>
        </member>
        <member name="P:IDS.Permissions.Permission.ChildPermissions">
            <summary>
            A permissions parents (do not manually add to this list, use AddParent or GrantPermissionsTo for that
            </summary>
            <value>The child permissions.</value>
        </member>
        <member name="P:IDS.Permissions.Permission.AllowMultiples">
            <summary>The PermissionSet uses this value to determine whether to merge 2 permissions
            of the same kind or whether to allow them to coexist seperately in the Set.</summary>
            <value><c>true</c> if multiple permissions are allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:IDS.Permissions.Permission.UpdateEntitlements(System.Collections.Generic.List{IDS.Permissions.Field})">
            <summary>
            The database calls this method after saving the permission, so this makes sure your fields variables are up to date
            </summary>
        </member>
        <member name="M:IDS.Permissions.Permission.GetEntitlements">
            <summary>
            The database calls this method before saving the permission, this method puts your properties
            into a list of strings. You can do this manually by overriding this method, or decorate your
            properties with an EntitlementAttribute, and let this method do it using reflection.
            </summary>
        </member>
        <member name="M:IDS.Permissions.Permission.UpdateSubPermissions(System.Collections.Generic.List{IDS.Permissions.SubPermissionField})">
            <summary>
            Updates the sub permissions. This method will be called after loading subpermissions
            </summary>
            <param name="subPermissionFields">The sub permission fields.</param>
        </member>
        <member name="M:IDS.Permissions.Permission.GetSubPermissions">
            <summary>Gets the sub permissions.</summary>
            <returns></returns>
        </member>
        <member name="P:IDS.Permissions.Permission.IterateProperties">
            <summary>iterates the properties. Order is guarenteed to be the same every time</summary>
            <value>The property info.</value>
        </member>
        <member name="P:IDS.Permissions.Permission.IterateEntitlements">
            <summary>Iterates the permissions properties with entitlement attributes in a guarenteed order</summary>
            <value>The iterate entitlements.</value>
            <returns>PropertyInfo for the property</returns>
        </member>
        <member name="P:IDS.Permissions.Permission.IterateSubPermissions">
            <summary>iterates the sub permissions (Permissions within Permissions with the subpermission attribute.</summary>
             <value>The iterate sub permissions.</value>
        </member>
        <member name="M:IDS.Permissions.Permission.Save(IDS.Permissions.IPermissionDataLayer)">
            <summary>Saves Permission to Database</summary>
            <param name="dataLayer">The data layer.</param>
        </member>
        <member name="M:IDS.Permissions.Permission.Delete(IDS.Permissions.IPermissionDataLayer)">
            <summary>Removes Permission from Database</summary>
            <param name="dataLayer">The data layer.</param>
        </member>
        <member name="M:IDS.Permissions.Permission.GrantPermissionsTo(IDS.Permissions.IPermission)">
            <summary>
             This is called by the PermissionSet under the hood when one role grants permissions to another
            </summary>
             <param name="q">The q.</param>
        </member>
        <member name="M:IDS.Permissions.Permission.AddParent(IDS.Permissions.IPermission)">
            <summary>Creates a parent child hierarchy.</summary>
            <param name="parent">The parent to associate with this permission.</param>
        </member>
        <member name="M:IDS.Permissions.Permission.Merge(IDS.Permissions.IPermission)">
            <summary>
            Merge takes 2 permissions and returns one permission of the same type.
            Merge returns the best permissions assigned, so for max transfer it would
            take the greater of those, for time period constraints it would take the lesser
            Merge does not put the new permission in the database for you
            To do this call p.Save() where p is the permission
            Or r.Save(), where r is a role, will also add r's permissions to the database
            </summary>
            <param name="q">inputs a Permission (if not of the same type, null is returned</param>
        </member>
        <member name="M:IDS.Permissions.Permission.MergeLeast(IDS.Permissions.IPermission)">
            <summary>
            Merges the permissions giving the current permission the least best rights.
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:IDS.Permissions.Permission.MaxOut">
            <summary>
            Sets this permissions values to the maximum of the best of it's parents
            </summary>
        </member>
        <member name="M:IDS.Permissions.Permission.DoMinMax">
            <summary>
            Gives the permission the best rights it can while making sure it never has better permisions then any of its parents
            </summary>
            <remarks>
            Sets this permissions values to the maximum of the worst of it's parents
            IE gets the max values this permission can have without violating the
            rule that a permission can never have better permisions then any parent
            </remarks>
        </member>
        <member name="M:IDS.Permissions.Permission.SetWorst">
            <summary>
            This method is used by MaxOutToMaxParent. It sets the worst rights for the permission.
            If you default the permission rights to the worst possible rights, then you don't need to override this method.
            </summary>
        </member>
        <member name="M:IDS.Permissions.Permission.ConstrainChildrenToParent(IDS.Permissions.IPermissionDataLayer)">
            <summary>
            Constrains a parents children using the normal constrain option when the HierarchyEnforcement rule is violated
            </summary>
            <param name="dataLayer">The data layer.</param>
        </member>
        <member name="M:IDS.Permissions.Permission.ConstrainChildrenToParent(IDS.Permissions.ConstrainType,IDS.Permissions.IPermissionDataLayer)">
            <summary>
            This is for parents to force children to constrain to a parents new settings.
            </summary>
            <param name="constrainType">Indicates what is done when the heirarchy rule is violated</param>
            <param name="dataLayer">The data layer.</param>
        </member>
        <member name="M:IDS.Permissions.Permission.FindBetterThen(IDS.Permissions.Permission)">
            <summary>
            Finds out what fields in this permission are better then what the parent has
            If your permission has a set number of fields, then you can implement this method
            and Merge, ConstrainToParent, ConstrainChildrenToParent, MaxOutToMaxParent,
            and MaxOutToWorstParent will all work. Or you can just add attributes to your 
            properties and let the default implementation do all the work.
            </summary>
            <param name="parent">The parent.</param>
            <returns>
            a list of integers, each interger corresponding to the field in the Permission
            where the child is better then the parent. An empty list means nothing is better.
            </returns>
        </member>
        <member name="M:IDS.Permissions.Permission.ConstrainToParents">
            <summary>
            Constrains to parents using the normal constrain option when the HierarchyEnforcement rule is violated
            </summary>
            <returns>Returns true if the permission was constrained to its parent.</returns>
        </member>
        <member name="M:IDS.Permissions.Permission.ConstrainToParents(IDS.Permissions.ConstrainType)">
            <summary>
            This method checks if this permission is better then any parents, if so it locks it to
            the best of the parents, ensuring a child permission never gets better permission then any parent
            </summary>
            <returns>Returns a list of properties that were constrained. If the lists's Count is 0 then nothing was constrained </returns>
        </member>
        <member name="M:IDS.Permissions.Permission.ConstrainToWorstParentRights(IDS.Permissions.ConstrainType)">
            <summary>
            This method checks if this permission is better then any parents, if so it locks it to
            the worst of the parents, ensuring a child permission never gets better permission then a parent
            </summary>
        </member>
        <member name="M:IDS.Permissions.Permission.IsFieldTrue(System.String)">
            <summary>
            Used by the PermissionsModuleControl to check a property based on a string
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Permissions.Permission.GetFieldValue(System.String)">
            <summary>
            Used by ApplyPermissions Helper to check a property based on a string
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Returns the field.</returns>
            <exception cref="T:IDS.Permissions.PropertyFieldNotFoundException">The PropertyFieldNotFoundException is thrown if the field is not found.</exception>
        </member>
        <member name="M:IDS.Permissions.Permission.CreateDeepCopy(IDS.Permissions.IPermissionDataLayer,System.Boolean)">
            <summary>Creates a deep copy. Warning does not save the new permission. </summary>
            <param name="dataLayer">The data layer.</param>
            <param name="copyParentsAndChildren">if set to <c>true</c> [parent and child permissions are copied].</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Permissions.PermissionCollection">
            <summary>
            The PermissionCollection contains a list of <see cref="T:IDS.Permissions.IPermission"/> objects.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PermissionCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Permissions.IPermission})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PermissionCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Permissions.PermissionCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PermissionCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="T:IDS.Permissions.PermissionFactory">
            <summary>
            Instantiates permissions based on their type, and loads Permission.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionFactory.CreatePermissionOfType(System.String)">
            <summary>
            Creates a permission of a specified type.
            </summary>
            <param name="fullyQualifiedName">Name of the fully qualified.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Permissions.PermissionFactory.Load(System.String,IDS.Permissions.IPermissionDataLayer,System.Boolean)">
            <summary>
            Loads the specified permission by the given ID.
            </summary>
            <param name="permissionID">The permission ID.</param>
            <param name="dataLayer">The data layer.</param>
            <param name="loadParentTree">if set to <c>true</c> the parents of this permission are loaded, as well as their parents(all the way up the tree). If false just this permission is loaded. in general the only time you need to load the parent tree is if you need to constrain to the parent</param>
            <returns>a permissions loaded from the datalayer (typically a sql database)</returns>
        </member>
        <member name="T:IDS.Permissions.PermissionManager">
            <summary>
            The PermissionManager is responsible for associating permissions with a user. This association can be through roles.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionManager.Finalize">
            <summary>
            This destructor will run only if the Dispose method does not get called.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionManager.AcquireReaderLock">
            <summary>
            Acquires the reader lock.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionManager.ReleaseReaderLock">
            <summary>
            Releases the reader lock.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionManager.AcquireWriterLock">
            <summary>
            Acquires the writer lock.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionManager.ReleaseWriterLock">
            <summary>
            Releases the writer lock.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionManager.IsReaderLockHeld">
            <summary>
            Determines whether the reader lock is held.
            </summary>
            <returns>
            	<c>true</c> if the reader lock is held; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.Permissions.PermissionManager.IsWriterLockHeld">
            <summary>
            Determines whether the writer lock is held.
            </summary>
            <returns>
            	<c>true</c> if the writer lock is held; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.Permissions.PermissionManager.UpgradeToWriterLock">
            <summary>
            Upgrades the reader lock to a writer lock.
            </summary>
            <returns>Returns the LockCookie.</returns>
        </member>
        <member name="M:IDS.Permissions.PermissionManager.DowngradeFromWriterLock(System.Threading.LockCookie@)">
            <summary>
            Downgrades from a writer lock to a reader lock.
            </summary>
            <returns>Returns the LockCookie.</returns>
        </member>
        <member name="M:IDS.Permissions.PermissionManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionManager.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.</param>
        </member>
        <member name="P:IDS.Permissions.PermissionManager.Providers">
            <summary>
            Gets a collection of the role providers.
            </summary>
            <value>The collection of role providers.</value>
        </member>
        <member name="P:IDS.Permissions.PermissionManager.CompositeProviders">
            <summary>
            Gets a collection of the role providers.
            </summary>
            <value>The collection of role providers.</value>
        </member>
        <member name="M:IDS.Permissions.PermissionManager.GetPermissionsForUser(IDS.Security.IUser)">
            <summary>
            The GetPermisisons method gets all of the active roles assigned to the specified IUser.
            </summary>
            <param name="user">The user to get roles for.</param>
            <returns>
            Returns a PermissionSet containing permissions for the specific user.
            </returns>
            <remarks>
            This method will return a merge of the permissions assigned by the permisisons providers.
            </remarks>
        </member>
        <member name="M:IDS.Permissions.PermissionManager.GetAllPermissions">
            <summary> Returns a list of all of the possible permissions in the system.</summary>
            <returns>Returns an array list of permissions. It might return an empty array list but it will never return null.</returns>
        </member>
        <member name="T:IDS.Permissions.PermissionProperty">
            <summary>
            The PermissionProperty represents a permission on a property.
            </summary>
        </member>
        <member name="P:IDS.Permissions.PermissionProperty.AndProperty">
            <summary>
            If true property is ANDed, if false property is ORed. If there are ANDs and ORs combined they
            are ANDed together so AND properties are required, and if OR's are present one OR is required.
            </summary>
        </member>
        <member name="P:IDS.Permissions.PermissionProperty.PermissionType">
            <summary>
            Name of the Permission the User Needs
            </summary>
            <value>The type of the permission.</value>
        </member>
        <member name="P:IDS.Permissions.PermissionProperty.Property">
            <summary>
            "Name of the Property to Access. If none then there are no limits or boolean properties to check
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:IDS.Permissions.PermissionProperty.IsBooleanProperty">
            <summary>
            If true checks for a boolean property value, if false checks for a numerical limit
            </summary>
            <value>
            	<c>true</c> if this instance is boolean property; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Permissions.PermissionProperty.Limit">
            <summary>
            If IsBooleanProperty is false then this is the limit the User needs to pass
            </summary>
            <value>The limit.</value>
        </member>
        <member name="P:IDS.Permissions.PermissionProperty.Exceed">
            <summary>
            Gets or sets a value indicating the value we need to exceed for the <see cref="T:IDS.Permissions.PermissionProperty"/>
            If we are checking a value this tells if the user needs to exceed the limit(true) or be under the limit(false)
            </summary>
            <value><c>true</c> if exceed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:IDS.Permissions.PermissionProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PermissionProperty"/> class.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionProperty.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PermissionProperty"/> class.
            </summary>
            <param name="permissionType">Type of the permission.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionProperty.#ctor(System.String,System.String,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PermissionProperty"/> class.
            </summary>
            <param name="permissionType">Type of the permission.</param>
            <param name="property">The property.</param>
            <param name="limit">The limit.</param>
            <param name="userMustExceed">if set to <c>true</c> [user must exceed].</param>
        </member>
        <member name="M:IDS.Permissions.PermissionProperty.Parse(System.String)">
            <summary>
            Parses the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Permissions.PermissionProperty.ToString">
            <summary>
            Returns a <see cref="T:IDS.Permissions.PermissionProperty"></see> that represents the current <see cref="T:IDS.Permissions.PermissionProperty"></see>.
            </summary>
            <returns>
            A <see cref="T:IDS.Permissions.PermissionProperty"></see> that represents the current <see cref="T:IDS.Permissions.PermissionProperty"></see>.
            </returns>
        </member>
        <member name="T:IDS.Permissions.PermissionProviderCollection">
            <summary>
            The PermissionProviderCollection class contains a collection of IRoleProvider instances.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionProviderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PermissionProviderCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionProviderCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Permissions.IPermissionProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PermissionProviderCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Permissions.PermissionProviderCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PermissionProviderCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="T:IDS.Permissions.PermissionSet">
            <summary>
            A PermissionSet describes a user or entity with a list of permission rights.
            A PermissionSet could be a role, a person, general admin rights, a bank, a business, etc.
            A PermissionSet has a Name, and a list of Permissions (which describe the permission rights)
            </summary>
        </member>
        <member name="P:IDS.Permissions.PermissionSet.PermissionSetID">
            <summary>The uniqueID for this set, used for saving and loading to the database</summary>
        </member>
        <member name="P:IDS.Permissions.PermissionSet.Name">
            <summary>The name of this PermissionSet</summary>
        </member>
        <member name="P:IDS.Permissions.PermissionSet.PermissionCount">
            <summary>Number of Permissions this Set currently has</summary>
        </member>
        <member name="P:IDS.Permissions.PermissionSet.ParentSet">
            <summary>List of roles(PermissionSets) who have granted permission to this role. Please don't modify this list, just read it. 
            To add a parent role use parentRole.GrantPermissionsTo(childRole) whereparentRole is the Role that you want to make the parent of childRole</summary>
        </member>
        <member name="P:IDS.Permissions.PermissionSet.ChildSet">
            <summary>List of roles who this role has granted permission to Please don't modify this list, just read it. 
            To add a patent role use parentRole.GrantPermissionsTo(childRole) whereparentRole is the Role that you want to make the parent of childRole</summary>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PermissionSet"/> class.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.#ctor(System.String)">
            <summary> Initialize a new role </summary>
            <param name="name">the name of the role</param>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.#ctor(IDS.Permissions.PermissionSet)">
            <summary>Copy constructor (not implemented)</summary>
            <param name="permissions">The permissions.</param>	
        </member>
        <member name="P:IDS.Permissions.PermissionSet.Item(System.Type)">
            <summary>
            Gets the <see cref="T:IDS.Permissions.IPermission"/> with the specified permission type.
            </summary>
            <value></value>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.GetPermission(System.Type)">
            <summary>This method gets the permission of the type passed in</summary>
            <param name="permissionType">a type of permission</param>
            <returns>Null if the role does not have this permission, a permission if the role has it</returns>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.Get``1">
            <summary>
            Gets a permission based on the type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.GetList``1">
            <summary>
            Gets a list (for permission types that allow multiple permissions of the same type in the set).
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.GetPermissions(System.Type)">
            <summary>This method is just for permissionTypes that allow multiple permissions of the same type in the set. In a roles list, it gets them all so they can be checked</summary>
            <returns>a list of permissions of the type passed in</returns>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.Add(IDS.Permissions.IPermission)">
            <summary>Adds a Permission to this Set and merges them if specified</summary>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.AddRange(IDS.Permissions.IPermission[])">
            <summary>Adds a number of permissions to this Set</summary>
            <param name="permissions">a variable number of permissions</param>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.AddRange(IDS.Permissions.PermissionCollection)">
            <summary>Adds a number of permissions to this Set</summary>
            <param name="permissions">a variable number of permissions</param>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.RemovePermission(System.Type,IDS.Permissions.IPermissionDataLayer)">
            <summary>
            Removes the permission from the Set. This does not delete the permission from the database
            since another role could be sharing it, if you want to delete the permission completly
            you must also call delete on the permission this method returns
            </summary>
            <param name="permissionType">Type of the permission.</param>
            <param name="dataLayer">The data layer(can be null)</param>
            <returns>
            Returns the permission deleted from the roles permissions list
            </returns>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.RemovePermission(IDS.Permissions.IPermission,IDS.Permissions.IPermissionDataLayer)">
            <summary>
            Removes the permission from the data store.
            </summary>
            <param name="permission">The permission.</param>
            <param name="dataLayer">The data layer.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.Merge(IDS.Permissions.IPermission)">
            <summary>
            Merges the specified permission taking the best rights in conflicts.
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.MergeLeast(IDS.Permissions.IPermission)">
            <summary>
            Merges the specified permission with the set taking the least best rights in conflicts
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.Merge(IDS.Permissions.PermissionSet)">
            <summary>
            Merges the permission set with the current set taking the best rights in conflicts
            </summary>
            <param name="permissions">The permissions.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.MergeLeast(IDS.Permissions.PermissionSet)">
            <summary>
            Merges the permission set with the current set taking the least best rights in conflicts
            </summary>
            <param name="permissions">The permissions.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.RestrictedMerge(IDS.Permissions.PermissionSet,IDS.Permissions.PermissionSet)">
            <summary>
            Merges one Sets permissions with another Sets permissions. Returns a Set with only
            those permissions that are in both parent roles. The permissions that the returned role
            has are children of both parent roles, so is constrained by the parents limits.
            </summary>
            <param name="role1">The role1.</param>
            <param name="role2">The role2.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.RestrictedMerge(IDS.Permissions.PermissionSet[])">
            <summary>
            Merges a number of parent Sets permissions and returns a child role with only
            those permissions that are in both parent Sets. The permissions that the returned set
            has are children of both parent Sets, so is constrained by the parents limits.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.Contains(IDS.Permissions.IPermission)">
            <summary>
            Checks if this specific permission (not the type, but this unique permission, 
            ie with the same PermissionID) is in the list. Note: if the permissions are not
            saved then the ID's are both -1 and this will not work correctly</summary>
            <param name="e">A Permission object thats not null</param>
            <returns>true if this permission is already in the roles list, false otherwise</returns>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.Contains(System.Type)">
            <summary>
            Checks if a Set contains this permission type. If a set s has the DeletePermission
            then saying s.Contains(PermissionType.DeletePermission) will return true.
            </summary>
            <param name="permissionType">Type of the permission.</param>
            <returns>
            true if the Permission Type is in the Roles permissions list, false otherwise
            </returns>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.IsParent(IDS.Permissions.PermissionSet)">
            <summary>checks if a set is the parent of this set(just a direct parent ie just looks one up the tree)</summary>
            <param name="r">the role to check</param>
            <returns>true if it's a parent, false if it is not</returns>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.IsChild(IDS.Permissions.PermissionSet)">
            <summary>
            checks if a set is the child of this set(just a direct child ie just looks one down the tree)
            </summary>
            <param name="r">the role to check</param>
            <returns>true if it's a child, false if it is not</returns>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.Save(IDS.Permissions.IPermissionDataLayer)">
            <summary>This saves a PermissionSet to the Database </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.Load(System.Int64,IDS.Permissions.IPermissionDataLayer,System.Boolean)">
            <summary>
            This loads a permission set from the Database, it also loads the parent roles up the tree
            </summary>
            <param name="permissionSetId">permissionSetId of the permission set id you want to load</param>
            <param name="dataLayer">The data layer.</param>
            <param name="loadTree">if set to <c>true</c> [load tree].</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.LoadChildTree(IDS.Permissions.IPermissionDataLayer)">
            <summary> This loads the child sets to see who this set has granted permissions to </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.LoadParentTree(IDS.Permissions.IPermissionDataLayer)">
            <summary> This loads the parent sets if you want to see who has granted permissions to this set </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.DeleteRoleOnly(IDS.Permissions.IPermissionDataLayer)">
            <summary>This deletes the PermissionSet from the Database, but leaves all the Permissions</summary>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.DeleteRoleAndAssociatedPermissions(IDS.Permissions.IPermissionDataLayer)">
            <summary>
            This deletes the PermissionSet from the Database, including all it's Permissions
            Right not I do not check if other Roles are using the permissions before deleting 
            them, so don't use this if you think that might be the case</summary>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.CopyDownParentPermission(IDS.Permissions.IPermission)">
            <summary>
            Helper method. When a set grants permissions to another set, under the hood all the permissions
            that the set granted are made children of the to the permissions of the parent set's permissions</summary>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.GrantPermissionsTo(IDS.Permissions.PermissionSet)">
            <summary>This grants all of this Sets permissions to the set passed in</summary>
            <param name="r">The role to pass permissions to</param>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.GrantPermissionsTo(IDS.Permissions.PermissionSet,System.Type[])">
            <summary>This method grants a subset of permissions to another set. </summary>
            <param name="r">the PermissionSet recieving the permissions</param>
            <param name="permissionsToGrant">the types of permissions to grant</param>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.AddChild(IDS.Permissions.PermissionSet)">
            <summary>
            makes a heirachy, to constrain the child, but does not pass all
            the permissions down to the child the way GrantPermissionsTo does.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.AddParentRole(IDS.Permissions.PermissionSet)">
            <summary>
            This is  for the DatabaseLayer to add a parent set.
            If you want to add a parent role say -&gt; parentRole.GrantPermissionsTo(childRole)
            Or parentRole.AddChild(childRole) where
            parentRole is the Role that you want to make the parent of childRole
            </summary>
            <param name="permissions">The permissions.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.GetInformationString(System.String)">
            <summary>
            Gets a description of the PermissionSets name and permissions - mainly for debug &amp; testing
            </summary>
            <param name="delimiter">The delimiter.</param>
            <returns>Returns a string representing the permissions.</returns>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Permissions.PermissionSet"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDS.Permissions.PermissionSet"></see>.
            </returns>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.ConstrainChildrenToParent(IDS.Permissions.ConstrainType,IDS.Permissions.IPermissionDataLayer)">
            <summary>
            Constrains the children to parent by looking at each properties HierarchyEnforcement rule
            </summary>
            <param name="constrainType">Indicates what is done when the heirarchy rule is violated</param>
            <param name="dataLayer">The data layer.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.ConstrainToParent">
            <summary>Constrains to parent.</summary>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.ConstrainToParent(IDS.Permissions.ConstrainType)">
            <summary>Constrains to parent.</summary>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.MaxOut">
            <summary>This method goes up the tree of permissinos who have granted permissions to this set and 
             sees if there are better permissions available. </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.PermissionsByType``1">
            <summary>
            Custom iterator to iterate over the collection and return only permissions of the specified type.
            </summary>
            <typeparam name="T">The type of permission that the iterator should return.  This type must implement <see cref="T:IDS.Permissions.IPermission"/>.</typeparam>
            <returns>A custom iterator that will iterate over the collection, stopping only on permissions whose type is (or derives from) <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:IDS.Permissions.PermissionSet.CreateDeepCopy(IDS.Permissions.IPermissionDataLayer,System.Boolean)">
            <summary>Creates a deep copy.</summary>
            <param name="dataLayer">The data layer.</param>
            <param name="copyParentsAndChildren">if set to <c>true</c> [copy parents and children].</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Permissions.PermissionSetCollection">
            <summary>
            The PermissionSetCollection contains a list of <see cref="T:IDS.Permissions.PermissionSet"/> objects.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionSetCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PermissionSetCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PermissionSetCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.Permissions.PermissionSet})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PermissionSetCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Permissions.PermissionSetCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PermissionSetCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="T:IDS.Permissions.PermissionsSQLDataLayer">
            <summary>
            This is an implementation of IPermissionDataLayer which uses a SQL Server database 
             as the data store.
            </summary>
        </member>
        <member name="P:IDS.Permissions.PermissionsSQLDataLayer.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.RemovePermission(IDS.Permissions.IPermission)">
            <summary>
            Removes the permission from the data store.
            </summary>
            <param name="permission">The permission to remove.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.LoadPermission(System.String,System.Boolean)">
            <summary>Loads the permission from the data store.</summary>
            <param name="permissionID">The permission ID to retrieve from the data store.</param>
            <param name="loadParentTree">if set to <c>true</c> if the parent tree should be loaded.</param>
            <returns>Returns the loaded permission.</returns>
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.SavePermission(IDS.Permissions.IPermission)">
            <summary>
            Saves the permission to the data store.
            </summary>
            <param name="permission">The permission to store.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.GetTypeNameWithAssemblyName(System.String)">
            <summary>
            returns the fully qualified name - 'namespace.class, assembly' from the types assembly
            qualified name (ie removes version, culture, publickey token)</summary>   
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.SaveExtraFields(IDS.Permissions.IPermission,System.Data.SqlClient.SqlConnection)">
            <summary>
            Saves the extra fields.
            </summary>
            <param name="permission">The permission.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.SaveSubPermissions(IDS.Permissions.IPermission,System.Data.SqlClient.SqlConnection)">
            <summary>
            Saves the sub permissions.
            </summary>
            <param name="permission">The permission.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.RemoveExtraFields(IDS.Permissions.IPermission,System.Data.SqlClient.SqlConnection)">
            <summary>
            Removes the extra fields.
            </summary>
            <param name="permission">The permission.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.LoadChildTree(IDS.Permissions.IPermission)">
            <summary>
            Loads the child tree for the specified permission.
            </summary>
            <param name="permission">The permission to load the child tree for.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.RemovePSetAndAllAssociatedPermissions(IDS.Permissions.PermissionSet)">
            <summary>
            This method removes the permission set and all of the permissions in the permission set
            </summary>
            <param name="set">The permission set to remove.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.RemovePSetOnly(IDS.Permissions.PermissionSet)">
            <summary>
            This method removes the Permission Set but leaves it's permissions in the database
            </summary>
            <param name="permissionSet">The permission set.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.RemovePermissionFromSet(IDS.Permissions.IPermission,System.Int64)">
            <summary>
            Removes the permission from set in the data store.
            </summary>
            <param name="permission">The permission.</param>
            <param name="setID">The set ID.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.LoadPermissionSet(System.Int64,System.Boolean)">
            <summary>
            This loads a PermissionSet out of the Database and all of the Permissions associated with it.
            </summary>
            <param name="setId">The permission set ID to load from the data store.</param>
            <param name="loadTree">if set to <c>true</c> the tree is loaded.</param>
            <returns>
            returns null if not found in the database, otherwise returns the PermissionSet
            </returns>
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.SavePermissionSet(IDS.Permissions.PermissionSet)">
            <summary>
            Saves the permission set to the data store.
            </summary>
            <param name="set">The permission set to store.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.LoadParentTree(IDS.Permissions.PermissionSet)">
            <summary>
            Loads all the parents (and their permissions), and is not necessary to do
            so is not done on role load, they have to do this after loading the role if 
            this information is needed for some reason.
            </summary>
            <param name="set">The permission set to load the parent tree for.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.LoadChildTree(IDS.Permissions.PermissionSet)">
            <summary>
            Loads all the parents (and their permissions), and is not necessary to do
            so is not done on role load, they have to do this after loading the role if
            this information is needed for some reason
            </summary>
            <param name="set">The permission set to load the child tree for.</param>
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.LoadPermissionSet(IDS.Security.IUser,System.Boolean)">
            <summary>
            Loads the permission set. Returns null if no permission set has been saved for the user
            </summary>
            <param name="user">The user.</param>
            <param name="loadTree">if set to <c>true</c> [load tree].</param>
            <returns>
            returns null if no permission set has been saved for the user
            </returns>
        </member>
        <member name="M:IDS.Permissions.PermissionsSQLDataLayer.SavePermissionSet(IDS.Security.IUser,IDS.Permissions.PermissionSet)">
            <summary>
            Saves the permission set for a user.
            </summary>
            <param name="user">The user.</param>
            <param name="set">The set.</param>
        </member>
        <member name="T:IDS.Permissions.PropertyCollection">
            <summary>A collection of PropertyInfo's</summary>
        </member>
        <member name="M:IDS.Permissions.PropertyCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.PropertyInfo"/> class.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PropertyCollection.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.PropertyInfo"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.Permissions.PropertyCollection.#ctor(System.Collections.IEnumerable)">
            <summary>Initializes a new instance of the <see cref="T:IDS.Permissions.PropertyCollection"/> class.</summary>
             <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="M:IDS.Permissions.PropertyCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.PropertyInfo"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="T:IDS.Permissions.PropertyFieldNotFoundException">
            <summary>
            The PropertyFieldNotFoundException is thrown when a particular field was not found.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PropertyFieldNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PropertyFieldNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Permissions.PropertyFieldNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PropertyFieldNotFoundException"/> class.
            </summary>
            <param name="field">The field name that wasn't found.</param>
        </member>
        <member name="M:IDS.Permissions.PropertyFieldNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PropertyFieldNotFoundException"/> class.
            </summary>
            <param name="field">The field name that wasn't found.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:IDS.Permissions.PropertyFieldNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Permissions.PropertyFieldNotFoundException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:IDS.Permissions.RegularExpressionEntitlement">
            <summary>
            This class is for checking if the field in a certain permission matches a defined pattern.
            </summary>
        </member>
        <member name="P:IDS.Permissions.RegularExpressionEntitlement.Pattern">
            <summary>
            Gets or sets the regular expression.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="M:IDS.Permissions.RegularExpressionEntitlement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RegularExpressionEntitlement"/> class.
            </summary>
        </member>
        <member name="M:IDS.Permissions.RegularExpressionEntitlement.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RegularExpressionEntitlement"/> class.
            </summary>
            <param name="permissionType">Type of the permission.</param>
            <param name="property">The property.</param>
            <param name="isAnd">if set to <c>true</c> [is and].</param>
            <param name="pattern">The regular expression.</param>
        </member>
        <member name="M:IDS.Permissions.RegularExpressionEntitlement.DoesPass(IDS.Permissions.PermissionSet)">
            <summary>
            This method checks to see if a set of permissions contains a specific permission type and if it matches a regular expression defined pattern.
            </summary>
            <param name="set">The permissions to check against. Usually this will be the current users permissions</param>
            <returns>
            true if the user meets the requirements of the entitlement, false otherwise
            </returns>
        </member>
        <member name="M:IDS.Permissions.RegularExpressionEntitlement.ToString">
            <summary>
            Returns a delimited <see cref="T:System.String"></see> that represents the current Entitlement.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current Entitlement.
            </returns>
        </member>
        <member name="T:IDS.Permissions.SubPermissionAttribute">
            <summary>
            This attribute should decorate custom permissions within permissions that you want the
            framework to load and save. See
            </summary>
        </member>
        <member name="T:IDS.Permissions.SubPermissionField">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Permissions.SubPermissionField.#ctor(System.String,IDS.Permissions.IPermission)">
            <summary>
            Initializes a new instance of the <see cref="T:Field"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="subPernission">The sub pernission.</param>
        </member>
        <member name="P:IDS.Permissions.SubPermissionField.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:IDS.Permissions.SubPermissionField.SubPermission">
            <summary>
            Gets the SubPernission
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:IDS.Permissions.SubPermissionField.Parse(System.String)">
            <summary>
            Parses the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Presentation.BasePresenter">
            <summary>
            </summary>
        </member>
        <member name="T:IDS.Presentation.EntitiesSelectedMessage`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:IDS.Presentation.EntitiesSelectedMessage`1.#ctor(System.Collections.Generic.List{`0},IDS.Presentation.IMessageQueue)">
            <summary>
            
            </summary>
            <param name="selections"></param>
            <param name="queue"></param>
        </member>
        <member name="P:IDS.Presentation.EntitiesSelectedMessage`1.Selections">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Presentation.EntitiesSelectedMessage`1.Action">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Presentation.EntitiesSelectedMessage`1.MessageQueue">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Presentation.EntityCancellingMessage`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:IDS.Presentation.EntityCancellingMessage`1.#ctor(`0,IDS.Presentation.IMessageQueue)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="queue"></param>
        </member>
        <member name="P:IDS.Presentation.EntityCancellingMessage`1.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Presentation.EntityCancellingMessage`1.Action">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Presentation.EntityCancellingMessage`1.MessageQueue">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Presentation.EntityCancellingMessage`1.Result">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Presentation.EntityDeletingMessage`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:IDS.Presentation.EntityDeletingMessage`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="entity"></param>
        </member>
        <member name="P:IDS.Presentation.EntityDeletingMessage`1.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Presentation.EntityDeletingMessage`1.Action">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Presentation.EntityLoadingMessage`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:IDS.Presentation.EntityLoadingMessage`1.#ctor(`0,System.Boolean)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="canBeEdited"> </param>
        </member>
        <member name="P:IDS.Presentation.EntityLoadingMessage`1.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Presentation.EntityLoadingMessage`1.CanBeEdited">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Presentation.EntitySavingMessage`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:IDS.Presentation.EntitySavingMessage`1.#ctor(`0,IDS.Presentation.IMessageQueue)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="queue"></param>
        </member>
        <member name="P:IDS.Presentation.EntitySavingMessage`1.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Presentation.EntitySavingMessage`1.Action">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Presentation.EntitySavingMessage`1.MessageQueue">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Presentation.EntitySavingMessage`1.Result">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Presentation.EntityValidationMessage">
            <summary>
            This is a message for validating entities.
            </summary>
        </member>
        <member name="P:IDS.Presentation.EntityValidationMessage.Entities">
            <summary>
            The business entities to be validated.
            </summary>
            <remarks>
            This property takes precedence over <see cref="P:IDS.Presentation.EntityValidationMessage.Entity" /> if both are set.
            </remarks>
        </member>
        <member name="P:IDS.Presentation.EntityValidationMessage.Entity">
            <summary>
            The business entity to be validated.
            </summary>
        </member>
        <member name="P:IDS.Presentation.EntityValidationMessage.User">
            <summary>
            The user to authenticate. If not set, the currently logged in user is authenticated.
            </summary>
        </member>
        <member name="P:IDS.Presentation.EntityValidationMessage.Action">
            <summary>
            The response action. The default is <see cref="F:IDS.Presentation.WorkflowAction.Continue"/>.
            </summary>
        </member>
        <member name="T:IDS.Presentation.ICompositeView">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Presentation.ICompositeView.GetChildViews">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Presentation.IMessageBus">
            <summary>
            Defines the basic methods of a cross-presenter messaging bus.
            </summary>
        </member>
        <member name="M:IDS.Presentation.IMessageBus.Publish``1(``0)">
            <summary>
            Publishes a message to the bus. Any existing subscriptions to this type,
            or an assignable type such as a base class or an interface, will be notified
            at this time.
            </summary>
            <typeparam name="TMessage">The type of the message to publish</typeparam>
            <param name="message">The message to publish</param>
        </member>
        <member name="M:IDS.Presentation.IMessageBus.Subscribe``1(System.Action{``0},System.Action)">
            <summary>
            Registers a subscription to messages of the specified type. Any previously
            published messages that are valid for this subscription will be raised
            at this time.
            </summary>
            <typeparam name="TMessage">The type of messages to subscribe to</typeparam>
            <param name="messageReceivedCallback">A callback that will be invoked for each message received. This callback will be invoked once per message.</param>
            <param name="neverReceivedCallback">A callback that will be invoked if no matching message is ever received. This callback will not be invoked more than once.</param>
        </member>
        <member name="T:IDS.Presentation.IMessageQueue">
            <summary>
            Represents a queue of messages to display to the user.
            </summary>
        </member>
        <member name="M:IDS.Presentation.IMessageQueue.EnqueueInformationMessage(System.String)">
            <summary>
            Enqueues an informational message.
            </summary>
            <param name="text">
            The text of the message to enqueue.
            </param>
        </member>
        <member name="M:IDS.Presentation.IMessageQueue.EnqueueErrorMessage(System.String)">
            <summary>
            Enqueues an error message.
            </summary>
            <param name="text">
            The text of the message to enqueue.
            </param>
        </member>
        <member name="M:IDS.Presentation.IMessageQueue.EnqueueWarningMessage(System.String)">
            <summary>
            Enqueues a warning message.
            </summary>
            <param name="text">
            The text of the message to enqueue.
            </param>
        </member>
        <member name="T:IDS.Presentation.IRequiresMessageBus">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.Presentation.IRequiresMessageBus.InitializeMessageBus(IDS.Presentation.IMessageBus)">
            <summary>
            </summary>
        </member>
        <member name="T:IDS.Presentation.IView`1">
            <summary>
            </summary>
            <typeparam name="TPresenter"></typeparam>
        </member>
        <member name="P:IDS.Presentation.IView`1.Presenter">
            <summary>
            </summary>
        </member>
        <member name="T:IDS.Presentation.MessageBus">
            <summary>
            A default implementation for cross presenter messaging.
            </summary>
        </member>
        <member name="M:IDS.Presentation.MessageBus.Publish``1(``0)">
            <summary>
            Publishes a message to the bus. Any existing subscriptions to this type,
            or an assignable type such as a base class or an interface, will be notified
            at this time.
            </summary>
            <typeparam name="TMessage">The type of the message to publish</typeparam>
            <param name="message">The message to publish</param>
        </member>
        <member name="M:IDS.Presentation.MessageBus.Subscribe``1(System.Action{``0},System.Action)">
            <summary>
            Registers a subscription to messages of the specified type. Any previously
            published messages that are valid for this subscription will be raised
            at this time.
            </summary>
            <typeparam name="TMessage">The type of messages to subscribe to</typeparam>
            <param name="messageReceivedCallback">A callback that will be invoked for each message received. This callback will be invoked once per message.</param>
            <param name="neverReceivedCallback">A callback that will be invoked if no matching message is ever received. This callback will not be invoked more than once.</param>
        </member>
        <member name="M:IDS.Presentation.MessageBus.Close">
            <summary>
            <para>
                Closes the message bus, causing any subscribers that have not yet received
                a message to have their "never received" callback fired.
            </para>
            <para>
                After this method is called, any further calls to <see cref="M:IDS.Presentation.IMessageBus.Publish``1(``0)"/> or
                <see cref="M:IDS.Presentation.IMessageBus.Subscribe``1(System.Action{``0},System.Action)"/> will result in an
                <see cref="T:System.InvalidOperationException"/>.
            </para>
            <para>
                The <see cref="M:IDS.Presentation.MessageBus.Close"/> method may be called multiple times and must not
                fail in this scenario.
            </para>
            </summary>
        </member>
        <member name="T:IDS.Presentation.PresenterAttribute">
            <summary>
            </summary>
        </member>
        <member name="M:IDS.Presentation.PresenterAttribute.#ctor(System.Type)">
            <summary>
            </summary>
            <param name="concretePresenterType"></param>
        </member>
        <member name="P:IDS.Presentation.PresenterAttribute.ConcretePresenterType">
            <summary>
            </summary>
        </member>
        <member name="T:IDS.Presentation.WorkflowAction">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDS.Presentation.WorkflowAction.Continue">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDS.Presentation.WorkflowAction.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDS.Presentation.WorkflowAction.Pause">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Presentation.WorkflowStep">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDS.Presentation.WorkflowStep.DataEntry">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDS.Presentation.WorkflowStep.Review">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDS.Presentation.WorkflowStep.Validation">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Profile.ExtendedProfileSetting">
            <summary>
            Extended user profile setting where setting value data-type length is max
            </summary>
        </member>
        <member name="P:IDS.Profile.ExtendedProfileSetting.Dataspace">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Profile.ExtendedProfileSetting.UserID">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Profile.ExtendedProfileSetting.GroupName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Profile.ExtendedProfileSetting.SettingKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Profile.ExtendedProfileSetting.SettingValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Profile.ExtendedProfileSetting.InsertDateUtc">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Profile.ExtendedProfileSettingsService">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Profile.ExtendedProfileSettingsService.Get(IDS.Security.IUser,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="groupName"></param>
            <param name="settingKey"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Profile.ExtendedProfileSettingsService.Set(IDS.Security.IUser,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="groupName"></param>
            <param name="settingKey"></param>
            <param name="settingValue"></param>
        </member>
        <member name="T:IDS.Profile.IProfileProvider">
            <summary>
            The IProfileProvider interface exposes the methods necessary to implement a profile provider
            that persists and retrieves a profile associated with a user.
            </summary>
        </member>
        <member name="M:IDS.Profile.IProfileProvider.GetProfile(System.String)">
            <summary>
            Loads profile items into a new <see cref="T:IDS.Profile.UserProfile"/> object.
            </summary>
            <param name="userID">The identifier for the user whose profile items are to be loaded.</param>
            <returns>A <see cref="T:IDS.Profile.UserProfile"/> object containing the profile items.</returns>
        </member>
        <member name="M:IDS.Profile.IProfileProvider.GetProfile(System.String,IDS.Profile.UserProfile)">
            <summary>
            Loads profile items into an existing <see cref="T:IDS.Profile.UserProfile"/> object.
            </summary>
            <param name="userID">The identifier for the user whose profile items are to be loaded.</param>
            <param name="profileToFill">The <see cref="T:IDS.Profile.UserProfile"/> object in which to place the profile items.</param>
        </member>
        <member name="M:IDS.Profile.IProfileProvider.PersistProfile(System.String,IDS.Profile.UserProfile)">
            <summary>
            Stores profile items into a persistent storage area.
            </summary>
            <param name="userID">The identifier for the user whose profile items will be stored.</param>
            <param name="userProfile">The <see cref="T:IDS.Profile.UserProfile" /> object containing the profile items.</param>
        </member>
        <member name="T:IDS.Profile.ProfilePictureProvider">
            <summary>
            Represents a repository of user profile pictures.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Profile.ProfilePictureProvider.GetProfilePictureAsync(IDS.Security.IUser,System.Threading.CancellationToken)">
            <summary>
            Gets the profile picture for a specified user.
            </summary>
        </member>
        <member name="M:IDS.Profile.ProfilePictureProvider.SetProfilePictureAsync(IDS.Security.IUser,IDS.Web.BinaryContent,System.Threading.CancellationToken)">
            <summary>
            Updates the profile picture for a specified user.
            </summary>
        </member>
        <member name="M:IDS.Profile.ProfilePictureProvider.DeleteProfilePictureAsync(IDS.Security.IUser,System.Threading.CancellationToken)">
            <summary>
            Deletes the profile picture for a specified user.
            </summary>
        </member>
        <member name="T:IDS.Profile.ProfileProviderBase">
            <summary>
            The ProfileProviderBase class provides the base implementation for a Profile Provider.
            </summary>
        </member>
        <member name="M:IDS.Profile.ProfileProviderBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Profile.ProfileProviderBase"/> class.
            </summary>
        </member>
        <member name="M:IDS.Profile.ProfileProviderBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProfileProviderBase class.
            </summary>
            <param name="persistOnlyDirtyItems">if set to <c>true</c> only dirty items are persisted.</param>
        </member>
        <member name="M:IDS.Profile.ProfileProviderBase.DoFillUserProfile(System.String,IDS.Profile.UserProfile)">
            <summary>
            Fill the user profile from the data store.
            </summary>
            <param name="userID">The user ID.</param>
            <param name="userSettings">The user settings.</param>
        </member>
        <member name="M:IDS.Profile.ProfileProviderBase.DoPersistDirtyItems(System.String,System.String,IDS.Collections.StateBag)">
            <summary>
            Persist the dirty items to the data store.
            </summary>
            <param name="groupID">The group ID.</param>
            <param name="userID">The user ID.</param>
            <param name="dirtyItems">The dirty items.</param>
        </member>
        <member name="M:IDS.Profile.ProfileProviderBase.DoPersistIndividualItem(System.String,System.String,System.String,System.Object)">
            <summary>
            Persist the individual item to the data store.
            </summary>
            <param name="groupID">The group ID.</param>
            <param name="userID">The user ID.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:IDS.Profile.ProfileProviderBase.DoPersistProfile(System.String,IDS.Profile.UserProfile)">
            <summary>
            Persist the profile to the data store.
            </summary>
            <param name="userID">The user ID.</param>
            <param name="userSettings">The user settings.</param>
        </member>
        <member name="P:IDS.Profile.ProfileProviderBase.PersistOnlyDirtyItems">
            <summary>
            Gets a value indicating whether to persist only the dirty items.
            </summary>
            <value>
            	<c>true</c> if only dirty items should be persisted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:IDS.Profile.ProfileProviderBase.GetProfile(System.String)">
            <summary>
            Loads profile items into a new <see cref="T:IDS.Profile.UserProfile"/> object.
            </summary>
            <param name="userID">The identifier for the user whose profile items are to be loaded.</param>
            <returns>
            A <see cref="T:IDS.Profile.UserProfile"/> object containing the profile items.
            </returns>
        </member>
        <member name="M:IDS.Profile.ProfileProviderBase.GetProfile(System.String,IDS.Profile.UserProfile)">
            <summary>
            Loads profile items into an existing <see cref="T:IDS.Profile.UserProfile"/> object.
            </summary>
            <param name="userID">The identifier for the user whose profile items are to be loaded.</param>
            <param name="profileToFill">The <see cref="T:IDS.Profile.UserProfile"/> object in which to place the profile items.</param>
        </member>
        <member name="M:IDS.Profile.ProfileProviderBase.PersistProfile(System.String,IDS.Profile.UserProfile)">
            <summary>
            Stores profile items into a persistent storage area.
            </summary>
            <param name="userID">The identifier for the user whose profile items will be stored.</param>
            <param name="userProfile">The <see cref="T:IDS.Profile.UserProfile"/> object containing the profile items.</param>
        </member>
        <member name="T:IDS.Profile.SettingsGroup">
            <summary>
            The SettingsGroup class allows related settings to be grouped.
            </summary>
        </member>
        <member name="M:IDS.Profile.SettingsGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Profile.SettingsGroup"/> class.
            </summary>
        </member>
        <member name="M:IDS.Profile.SettingsGroup.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Profile.SettingsGroup"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:IDS.Profile.SettingsGroup.#ctor(System.String,IDS.Collections.StateBag)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Profile.SettingsGroup"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:IDS.Profile.SettingsGroup.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:IDS.Profile.SettingsGroup.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="T:IDS.Profile.SqlExtendedProfileSettingsService">
            <summary>
            Read and write extended profile user settings to the database
            </summary>
        </member>
        <member name="P:IDS.Profile.SqlExtendedProfileSettingsService.ConnectionService">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Profile.SqlExtendedProfileSettingsService.Get(IDS.Security.IUser,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="groupName"></param>
            <param name="settingKey"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Profile.SqlExtendedProfileSettingsService.Set(IDS.Security.IUser,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="groupName"></param>
            <param name="settingKey"></param>
            <param name="settingValue"></param>
        </member>
        <member name="T:IDS.Profile.SqlProfilePictureProvider">
            <summary>
            Provides a <see cref="T:IDS.Profile.ProfilePictureProvider" /> implementation for SQL Server.
            </summary>
        </member>
        <member name="P:IDS.Profile.SqlProfilePictureProvider.ConnectionService">
            <summary>
            Gets or sets the configured <see cref="T:IDS.Data.SqlConnectionService" />.
            </summary>
        </member>
        <member name="M:IDS.Profile.SqlProfilePictureProvider.GetProfilePictureAsync(IDS.Security.IUser,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Profile.SqlProfilePictureProvider.SetProfilePictureAsync(IDS.Security.IUser,IDS.Web.BinaryContent,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Profile.SqlProfilePictureProvider.DeleteProfilePictureAsync(IDS.Security.IUser,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Profile.SqlProfileProvider">
            <summary>
            The SqlProfileProvider class is an implementation of the ProfileProviderBase that persists the profile collection into a SQL database.
            </summary>
        </member>
        <member name="M:IDS.Profile.SqlProfileProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Profile.SqlProfileProvider"/> class.
            </summary>
        </member>
        <member name="M:IDS.Profile.SqlProfileProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Profile.SqlProfileProvider"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:IDS.Profile.SqlProfileProvider.GetOpenConnection">
            <summary>
            Gets the open connection.
            </summary>
            <returns>Returns an open SqlConnection.</returns>
        </member>
        <member name="M:IDS.Profile.SqlProfileProvider.CloseConnection(System.Data.SqlClient.SqlConnection)">
            <summary>
            Closes the connection.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:IDS.Profile.SqlProfileProvider.DoFillUserProfile(System.String,IDS.Profile.UserProfile)">
            <summary>
            Does the fill user profile.
            </summary>
            <param name="userID">The user ID.</param>
            <param name="userSettings">The user settings.</param>
        </member>
        <member name="M:IDS.Profile.SqlProfileProvider.DoPersistDirtyItems(System.String,System.String,IDS.Collections.StateBag)">
            <summary>
            Persists the dirty items to the database.
            </summary>
            <param name="groupID">The group ID.</param>
            <param name="userID">The user ID.</param>
            <param name="dirtyItems">The dirty items.</param>
        </member>
        <member name="M:IDS.Profile.SqlProfileProvider.DoPersistIndividualItem(System.String,System.String,System.String,System.Object)">
            <summary>
            Persists the individual item to the database.
            </summary>
            <param name="groupID">The group ID.</param>
            <param name="userID">The user ID.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:IDS.Profile.SqlProfileProvider.PersistItem(System.Data.SqlClient.SqlConnection,System.String,System.String,System.String,System.Object)">
            <summary>
            Persists the item to the database.
            </summary>
            <param name="connection">The SQL connection.</param>
            <param name="groupID">The group ID.</param>
            <param name="userID">The user ID.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:IDS.Profile.SqlProfileProvider.ConnectionString">
            <summary>
            Gets or sets the SQL connection string.
            </summary>
            <value>The SQL connection string.</value>
        </member>
        <member name="T:IDS.Profile.UserProfile">
            <summary>
            The UserProfile class stores groups of settings related to a user.
            </summary>
        </member>
        <member name="M:IDS.Profile.UserProfile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Profile.UserProfile"/> class.
            </summary>
        </member>
        <member name="P:IDS.Profile.UserProfile.Groups">
            <summary>
            Gets the groups of settings related to this user.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="T:IDS.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.ActiveDirectoryRoleProvider">
            <summary>
              Looks up a localized string similar to Active Directory Role Provider.
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.InvalidOperation_WaitTimeLessThanZero">
            <summary>
              Looks up a localized string similar to A negative wait time is not allowed. Please choose a positive wait time..
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.SR_AttemptToModifyReadOnlyCollection">
            <summary>
              Looks up a localized string similar to The collection is read only.
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.SR_AuthenticationException_AuthenticationException_Default_Message">
            <summary>
              Looks up a localized string similar to General authentication exception..
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.SR_AuthenticationInvalidLoginNameException_Default_Message">
            <summary>
              Looks up a localized string similar to Invalid login name provided..
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.SR_AuthenticationInvalidPasswordException_Default_Message">
            <summary>
              Looks up a localized string similar to Invalid credentials provided..
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.SR_AuthenticationLockedException_Default_Message">
            <summary>
              Looks up a localized string similar to Account has been locked..
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.SR_AuthenticationNewPasswordSameAsCurrentException_Default_Message">
            <summary>
              Looks up a localized string similar to New password is the same as the current password..
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.SR_AuthenticationPasswordDuplicateException_Default_Message">
            <summary>
              Looks up a localized string similar to The new password duplicates a prior password..
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.SR_AuthenticationPasswordExpiredException_Default_Message">
            <summary>
              Looks up a localized string similar to Credentials have expired..
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.SR_AuthenticationRestrictedException_Default_Message">
            <summary>
              Looks up a localized string similar to Account has been restricted or disabled..
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.SR_AuthenticationUserNotAuthorizedException_Default_Message">
            <summary>
              Looks up a localized string similar to User not authorized for transaction..
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.SR_Credentials_CredentialItem_Not_Found">
            <summary>
              Looks up a localized string similar to The credential items collection doesn&apos;t contain an item called &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.SR_Credentials_Unable_To_Create">
            <summary>
              Looks up a localized string similar to Unable to create a credentials based on the given credential items.
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.SR_DefaultUserProvider_Default_User_Name">
            <summary>
              Looks up a localized string similar to (Default User).
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.SR_DefaultUserProvider_Only_From_Localhost">
            <summary>
              Looks up a localized string similar to The default users provider is in use and may only be authenticated from the local host..
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.TimeoutWaitingForLock">
            <summary>
              Looks up a localized string similar to Timeout waiting for lock.
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.UnableToRetrieveDirectoryEntryFromAD">
            <summary>
              Looks up a localized string similar to Unable to retrieve DirectoryEntry from ActiveDirectory: {0}.
            </summary>
        </member>
        <member name="P:IDS.Properties.Resources.UnableToRetrieveDirectoryEntryFromNTLM">
            <summary>
              Looks up a localized string similar to Unable to retrieve DirectoryEntry from Local Domain: {0}.
            </summary>
        </member>
        <member name="T:IDS.RecurringFrequency">
            <summary>
            A set of values defining the interval between instances of a recurring event.
            </summary>
        </member>
        <member name="F:IDS.RecurringFrequency.QuarterHourly">
            <summary>
            Four times an hour (every 15 minutes)
            </summary>
        </member>
        <member name="F:IDS.RecurringFrequency.HalfHourly">
            <summary>
            Twice an hour (every 30 minutes)
            </summary>
        </member>
        <member name="F:IDS.RecurringFrequency.Hourly">
            <summary>
            Once an hour
            </summary>
        </member>
        <member name="F:IDS.RecurringFrequency.SemiDaily">
            <summary>
            Twice a day
            </summary>
        </member>
        <member name="F:IDS.RecurringFrequency.Daily">
            <summary>
            Once a day
            </summary>
        </member>
        <member name="F:IDS.RecurringFrequency.BiDaily">
            <summary>
            Once every other day
            </summary>
        </member>
        <member name="F:IDS.RecurringFrequency.Weekly">
            <summary>
            Once a week
            </summary>
        </member>
        <member name="F:IDS.RecurringFrequency.BiWeekly">
            <summary>
            Once every other week
            </summary>
        </member>
        <member name="F:IDS.RecurringFrequency.SemiMonthly">
            <summary>
            Twice a month
            </summary>
        </member>
        <member name="F:IDS.RecurringFrequency.QuadWeekly">
            <summary>
            Once every 4 weeks
            </summary>
        </member>
        <member name="F:IDS.RecurringFrequency.Monthly">
            <summary>
            Once a month
            </summary>
        </member>
        <member name="F:IDS.RecurringFrequency.BiMonthly">
            <summary>
            Once every other month
            </summary>
        </member>
        <member name="F:IDS.RecurringFrequency.Quarterly">
            <summary>
            Once a quarter (Once every 3 months)
            </summary>
        </member>
        <member name="F:IDS.RecurringFrequency.SemiAnnually">
            <summary>
            Twice a year (Once every 6 months)
            </summary>
        </member>
        <member name="F:IDS.RecurringFrequency.Annually">
            <summary>
            Once a year
            </summary>
        </member>
        <member name="T:IDS.Reflection.AssemblyHelper">
            <summary>
            Provides helper methods for working with <see cref="T:System.Reflection.Assembly" /> objects.
            </summary>
        </member>
        <member name="M:IDS.Reflection.AssemblyHelper.GetAssemblyFileVersion(System.Reflection.Assembly)">
            <summary>
            Gets the value of the <see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> for a specified <see cref="T:System.Reflection.Assembly" />.
            </summary>
            <param name="assembly">
            An <see cref="T:System.Reflection.Assembly" />.
            </param>
            <returns>
            The value of the <see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> for the <paramref name="assembly" />,
            or the value of the <see cref="T:System.Reflection.AssemblyVersionAttribute" /> for the <paramref name="assembly" />
            if no <see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> exists.
            </returns>
        </member>
        <member name="T:IDS.Remoting.CryptoHelper">
            <summary>Helper functions for working with encryption and streams.</summary>
        </member>
        <member name="F:IDS.Remoting.CryptoHelper.bufferSize">
            <summary>Size to use for byte buffers when performing IO.</summary>
        </member>
        <member name="M:IDS.Remoting.CryptoHelper.GetNewSymmetricProvider(System.String)">
            <summary>Factory for symmetric algorithm providers.  Creates a new provider by name.</summary>
            <param name="algorithm">The name of the algorithm to use (e.g. "DES")</param>
            <returns>A SymmetricAlgorithm provider to be used for communication
            between client and server.</returns>
            <remarks>Currently supports "DES", "3DES", "RIJNDAEL", and "RC2".</remarks>
        </member>
        <member name="M:IDS.Remoting.CryptoHelper.GetEncryptedStream(System.IO.Stream,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Encrypts a stream with the specified symmetric provider.  The returned stream
            is at position zero and ready to be read.
            </summary>
            <param name="inStream">The stream to encrypt.</param>
            <param name="provider">The cryptographic provider to use for encryption.</param>
            <returns>Encrypted stream ready to be read.</returns>
        </member>
        <member name="M:IDS.Remoting.CryptoHelper.GetDecryptedStream(System.IO.Stream,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Decrypts a stream with the specified symmetric provider.
            </summary>
            <param name="inStream">The stream to decrypt.</param>
            <param name="provider">The cryptographic provider to use for encrypting.</param>
            <returns>Plaintext stream ready to be read.</returns>
        </member>
        <member name="T:IDS.Remoting.CommonHeaders">
            <summary>Names of transport headers used by client and server.</summary>
        </member>
        <member name="F:IDS.Remoting.CommonHeaders.ID">
            <summary>Header to hold the id of the client.</summary>
        </member>
        <member name="F:IDS.Remoting.CommonHeaders.Transaction">
            <summary>Header to hold the SecureTransaction state.</summary>
        </member>
        <member name="F:IDS.Remoting.CommonHeaders.PublicKey">
            <summary>Header to hold the RSA public key.</summary>
        </member>
        <member name="F:IDS.Remoting.CommonHeaders.SharedKey">
            <summary>Header to hold the encrypted shared key.</summary>
        </member>
        <member name="F:IDS.Remoting.CommonHeaders.SharedIV">
            <summary>Header to hold the encrypted IV.</summary>
        </member>
        <member name="T:IDS.Remoting.SecureTransaction">
            <summary>Enumeration of handshake and secure transaction message types.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureTransaction.Uninitialized">
            <summary>
            An uninitialized transaction; no information is being sent.
            </summary>
            <remarks>
            This is explicitly set to 0 (even though in its current position it
            will automatically have the value of 0) to prevent future mistakes should
            the order of the items in the enumeration be rearranged.
            The system counts on Uninitialized being 0 because Convert.ToInt32() returns
            0 for a null string.  We can then be sure that if Convert.ToInt32() on the
            respective header returns Uninitialized, either it was explicitly set
            to 0 or no header was set at all.  Regardless, it cuts down on headaches.
            </remarks>
        </member>
        <member name="F:IDS.Remoting.SecureTransaction.SendingPublicKey">
            <summary>The client is sending a public key to the server.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureTransaction.SendingSharedKey">
            <summary>The server is sending an encrypted shared key to the client.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureTransaction.SendingEncryptedMessage">
            <summary>The client is sending an encrypted request to the server.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureTransaction.SendingEncryptedResult">
            <summary>The server is sending an encrypted response to the client.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureTransaction.UnknownIdentifier">
            <summary>The server does not recognize the client's identification.</summary>
        </member>
        <member name="T:IDS.Remoting.ClientConnectionInfo">
            <summary>Contains connection information for a specific client sink in contact with the server.</summary>
        </member>
        <member name="F:IDS.Remoting.ClientConnectionInfo.transactID">
            <summary>Transaction ID for indentifying the client.</summary>
        </member>
        <member name="F:IDS.Remoting.ClientConnectionInfo.provider">
            <summary>Provider to use to encrypt communication with client.</summary>
        </member>
        <member name="F:IDS.Remoting.ClientConnectionInfo.lastUsed">
            <summary>The time of the last communication with this client.</summary>
        </member>
        <member name="F:IDS.Remoting.ClientConnectionInfo.disposed">
            <summary>Determines whether the object has been disposed.</summary>
        </member>
        <member name="M:IDS.Remoting.ClientConnectionInfo.#ctor(System.Guid,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>Initialize the ClientConnectionInfo object.</summary>
            <param name="transactID">The client's identification.</param>
            <param name="provider">The provider used to encrypt communication with this client.</param>
        </member>
        <member name="M:IDS.Remoting.ClientConnectionInfo.Finalize">
            <summary>Disposes of the connection information.</summary>
        </member>
        <member name="M:IDS.Remoting.ClientConnectionInfo.UpdateLastUsed">
            <summary>Changes the last used time to reflect the current time.</summary>
        </member>
        <member name="M:IDS.Remoting.ClientConnectionInfo.System#IDisposable#Dispose">
            <summary>Dispose of the connection information.</summary>
        </member>
        <member name="M:IDS.Remoting.ClientConnectionInfo.Dispose(System.Boolean)">
            <summary>Dispose of the connection information.</summary>
            <param name="disposing">Whether finalization should be suppressed.</param>
        </member>
        <member name="M:IDS.Remoting.ClientConnectionInfo.CheckDisposed">
            <summary>Throws an exception if the connection has already been disposed.</summary>
        </member>
        <member name="P:IDS.Remoting.ClientConnectionInfo.TransactID">
            <summary>Gets the transaction id for this client.</summary>
        </member>
        <member name="P:IDS.Remoting.ClientConnectionInfo.Provider">
            <summary>Gets the provider to use with this client.</summary>
            <remarks>
            Use this provider only for transformations based on its existing key and iv.
            Do not call GenerateKey or GenerateIV on it.
            </remarks>
        </member>
        <member name="P:IDS.Remoting.ClientConnectionInfo.LastUsed">
            <summary>Gets the timestamp for the last communication with this client.</summary>
        </member>
        <member name="T:IDS.Remoting.SecureClientChannelSink">
            <summary>
            Client channel sink that, in conjunction with SecureServerChannelSink, provides an
            asymmetric key exchange and shared key encryption across a remoting channel.
            </summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSink.algorithm">
            <summary>The name of the symmetric algorithm to use.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSink.oaep">
            <summary>Whether OAEP padding should be used.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSink.maxAttempts">
            <summary>The maximum number of times we should attempt to process the message.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSink.next">
            <summary>Reference to the next sink in the sink chain.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSink.transactID">
            <summary>The transaction ID to identify this client to the server.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSink._provider">
            <summary>
            The symmetric algorithm provider to be used for all transactions from this client.
            Note that all connections to objects from this client will use the same provider.
            The server, on the other hand, will use a different provider (a different key) for
            each connected client (though it, too, will use the same provider for all messages
            from the same client, regardless of destination object).
            </summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSink._rsaProvider">
            <summary>RSA provider used for encryption and decryption of shared key information.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSink._transactionLock">
            <summary>Used to take out a lock on transaction id and provider.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSink._defaultExceptionText">
            <summary>Text for generic secure remoting exception.</summary>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSink.#ctor(System.Runtime.Remoting.Channels.IClientChannelSink,System.String,System.Boolean,System.Int32)">
            <summary>Initialize the secure channel sink.</summary>
            <param name="nextSink">The next sink in the chain.</param>
            <param name="algorithm">The name of the symmetric algorithm to use for encryption.</param>
            <param name="oaep">Whether OAEP padding should be used for asymmetric encryption.</param>
            <param name="maxAttempts">The maximum number of times we should attempt to process the message.</param>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSink.CreateSharedKeyRequest(System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>Adds the headers for a shared-key request.</summary>
            <param name="requestHeaders">Output headers for the request.</param>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSink.DecryptResponse(System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>Decrypts the incoming response given the response stream and headers.</summary>
            <param name="responseStream">The response stream containing the response information.</param>
            <param name="responseHeaders">The response headers containing the response header information.</param>
            <returns>The decrypted stream if possible; null, otherwise.</returns>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSink.ProcessSharedKeyResponse(System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>Processes response transport headers for a shared-key request.</summary>
            <param name="responseHeaders">The headers from a shared-key request.</param>
            <returns>A SymmetricAlgorithm with the key information sent from the server.</returns>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSink.ObtainSharedKey(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Creates an RSA key pair.  Sends a message to the server secure sink which includes
            the public key from the pair along with a newly created GUID to identify this client
            to the server.  The server responds with an encrypted shared key which can be used for
            further communications between this client and server.
            </summary>
            <param name="msg">The original message passed to the sink.</param>
            <returns>Byte array containing shared key</returns>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSink.ClearSharedKey">
            <summary>Clears out the shared key and connection information.</summary>
            <remarks>Should always be called inside a lock on _transactionLock.</remarks>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSink.SetupEncryptedMessage(System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>Sets up the stream and headers for the encrypted message</summary>
            <param name="requestHeaders">The headers to be sent to the server containing connection information.</param>
            <param name="requestStream">The stream to be encrypted.</param>
            <returns>The encrypted stream to be sent to the server.</returns>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSink.ProcessEncryptedMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            Given a request stream, encrypts the stream with the shared key and sends
            the encrypted message to the server.  The server responds with an encrypted response
            stream which is decrypted.  This response stream is handed back to the caller.
            </summary>
            <param name="msg">The original message passed to the sink.</param>
            <param name="requestHeaders">The original request headers passed to the sink.</param>
            <param name="requestStream">The original request stream passed to the sink.</param>
            <param name="responseHeaders">Output response headers.</param>
            <param name="responseStream">Output response stream.</param>
            <returns>true if success; false, otherwise.</returns>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSink.EnsureIDAndProvider(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>Ensures that we've obtained shared-key information and a transaction ID.</summary>
            <param name="msg">The message to process.</param>
            <param name="requestHeaders">The headers to send to the server.</param>
            <returns>The transaction ID.</returns>
            <remarks>
            May require a synchronous roundtrip to the server.
            Should always be called inside a lock on _transactionLock.
            </remarks>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSink.ProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>Requests message processing from the current sink.</summary>
            <param name="msg">The message to process.</param>
            <param name="requestHeaders">The headers to send to the server.</param>
            <param name="requestStream">The stream to process and send to the server.</param>
            <param name="responseHeaders">Response headers from the server.</param>
            <param name="responseStream">Response stream from the server.</param>
            <exception cref="T:IDS.Remoting.SecureRemotingException">Thrown if a connection cannot be maintained with the server.</exception>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSink.GetRequestStream(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>Returns the Stream onto which the provided message is to be serialized.</summary>
            <param name="msg">The message being sent.</param>
            <param name="headers">The headers being sent to the server.</param>
            <returns>The stream onto which the provided message is to be serialized.</returns>
        </member>
        <member name="P:IDS.Remoting.SecureClientChannelSink.NextChannelSink">
            <summary>Returns the next channel sink in the sink chain.</summary>
        </member>
        <member name="T:IDS.Remoting.SecureClientChannelSink.AsyncProcessingState">
            <summary>Stores information on the current request; used in case an async request fails.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSink.AsyncProcessingState._stream">
            <summary>The input stream.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSink.AsyncProcessingState._headers">
            <summary>The transport headers.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSink.AsyncProcessingState._msg">
            <summary>The remoted message.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSink.AsyncProcessingState._id">
            <summary>Transaction ID when processing started.</summary>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSink.AsyncProcessingState.#ctor(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream@,System.Guid)">
            <summary>Initialize the state.</summary>
            <param name="msg">The message to be stored.</param>
            <param name="headers">The transport headers to be stored.</param>
            <param name="stream">The stream to be stored (copies the stream).</param>
            <param name="id">Transaction ID when processing started.</param>
        </member>
        <member name="P:IDS.Remoting.SecureClientChannelSink.AsyncProcessingState.Stream">
            <summary>Gets the input stream.</summary>
        </member>
        <member name="P:IDS.Remoting.SecureClientChannelSink.AsyncProcessingState.Headers">
            <summary>Gets the transport headers.</summary>
        </member>
        <member name="P:IDS.Remoting.SecureClientChannelSink.AsyncProcessingState.Message">
            <summary>Gets the remoted message.</summary>
        </member>
        <member name="P:IDS.Remoting.SecureClientChannelSink.AsyncProcessingState.ID">
            <summary>Gets the transaction id from when the transaction started.</summary>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSink.AsyncProcessingState.DuplicateStream(System.IO.Stream@)">
            <summary>Duplicates the stream.</summary>
            <param name="stream">The stream to be duplicated.</param>
            <returns>A copy of the stream.</returns>
            <remarks>
            Since we can't guarantee that Position will work on the input stream, we need
            to create a new stream and set the old reference to a copy of the new one.
            </remarks>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSink.AsyncProcessRequest(System.Runtime.Remoting.Channels.IClientChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>Requests asynchronous processing of a method call on the current sink.</summary>
            <param name="sinkStack">A stack of channel sinks.</param>
            <param name="msg">The message to process.</param>
            <param name="headers">The headers to send to the server.</param>
            <param name="stream">The stream headed to the transport sink.</param>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>Requests asynchronous processing of a response to a method call on the current sink.</summary>
            <param name="sinkStack">A stack of sinks that called this sink.</param>
            <param name="state">Information generated on the request side that is associated with this sink.</param>
            <param name="headers">The headers retrieved from the server response stream.</param>
            <param name="stream">The stream coming back from the transport sink.</param>
        </member>
        <member name="T:IDS.Remoting.SecureClientChannelSinkProvider">
            <summary>
            Used to create a secure client channel sink.
            </summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSinkProvider.next">
            <summary>Reference to the next sink provider in the provider chain.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSinkProvider.algorithm">
            <summary>The name of the symmetric algorithm to use.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSinkProvider.oaep">
            <summary>Whether OAEP padding should be used.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureClientChannelSinkProvider.maxAttempts">
            <summary>The maximum number of times we should attempt to process a message.</summary>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSinkProvider.#ctor">
            <summary>Initialize the sink provider.</summary>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>Initialize the sink provider.</summary>
            <param name="properties">Parameters specified in the config file.</param>
            <param name="providerData">Sink provider data.</param>
        </member>
        <member name="M:IDS.Remoting.SecureClientChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelSender,System.String,System.Object)">
            <summary>Creates a sink chain.</summary>
            <param name="channel">Channel for which the current sink chain is being constructed.</param>
            <param name="url">The URL of the object to connect to.</param>
            <param name="remoteChannelData">A channel data object describing a channel on the remote server.</param>
            <returns>A reference to the new sink, or null if it could not be created.</returns>
        </member>
        <member name="P:IDS.Remoting.SecureClientChannelSinkProvider.Next">
            <summary>Gets or sets the next sink provider in the channel sink provider chain.</summary>
        </member>
        <member name="T:IDS.Remoting.SecureRemotingException">
            <summary>
            The exception that is thrown when something goes wrong in the secure remoting channel.
            </summary>
        </member>
        <member name="M:IDS.Remoting.SecureRemotingException.#ctor">
            <summary>Initializes a new instance of the SecureRemotingException class with default properties.</summary>
        </member>
        <member name="M:IDS.Remoting.SecureRemotingException.#ctor(System.String)">
            <summary>Initializes a new instance of the SecureRemotingException class with the given message.</summary>
            <param name="message">The error message that explains why the exception occurred.</param>
        </member>
        <member name="M:IDS.Remoting.SecureRemotingException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the SecureRemotingException class with the specified properties.</summary>
            <param name="message">The error message that explains why the exception occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:IDS.Remoting.SecureRemotingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes the exception with serialized information.</summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:IDS.Remoting.SecureRemotingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Provides serialization functionality.</summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:IDS.Remoting.SecureServerChannelSink">
            <summary>
            Server channel sink that, in conjunction with SecureClientChannelSink, provides an 
            asymmetric key exchange and shared key encryption across a remoting channel.
            </summary>
        </member>
        <member name="F:IDS.Remoting.SecureServerChannelSink.algorithm">
            <summary>The name of the symmetric algorithm to use.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureServerChannelSink.oaep">
            <summary>Whether OAEP padding should be used.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureServerChannelSink.connectionAgeLimit">
            <summary>The minimum amount of time (s) information about a client connection should be retained.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureServerChannelSink.sweepFrequency">
            <summary>How often (s) the connection sweeper should run.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureServerChannelSink.requireSecurity">
            <summary>Whether the server requires the client to use the secure client sink.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureServerChannelSink.securityExemptionList">
            <summary>List of IPAddresses that are excepted from the this.requireSecurity restriction.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureServerChannelSink.connections">
            <summary>Table of all connections to this server.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureServerChannelSink.next">
            <summary>The next sink in the sink chain.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureServerChannelSink.sweepTimer">
            <summary>Timer used to signal the cleanup of connections.</summary>
        </member>
        <member name="M:IDS.Remoting.SecureServerChannelSink.#ctor(System.Runtime.Remoting.Channels.IServerChannelSink,System.String,System.Boolean,System.Double,System.Double,System.Boolean,System.Net.IPAddress[])">
            <summary>Initialize the secure channel sink.</summary>
            <param name="nextSink">The next sink in the chain.</param>
            <param name="algorithm">The name of the symmetric algorithm to use for encryption.</param>
            <param name="oaep">Whether OAEP padding should be used for asymmetric encryption.</param>
            <param name="connectionAgeLimit">The minimum amount of time (s) information about a client connection should be retained.</param>
            <param name="sweeperFrequency">How often (s) the connection sweeper should run.</param>
            <param name="requireSecurity">Whether the server requires the client to use the secure client sink.</param>
            <param name="securityExemptionList">The list of IPAddresses that are exempt from the requireSecurity restriction.</param>
        </member>
        <member name="M:IDS.Remoting.SecureServerChannelSink.MakeSharedKey(System.Guid,System.Runtime.Remoting.Channels.ITransportHeaders,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>Generates the output parameters necessary to send a new shared key to the client.</summary>
            <param name="transactID">The transaction ID for the client to whom we're communicating.</param>
            <param name="requestHeaders">Headers retrieved from the client.</param>
            <param name="responseMsg">Upon return, contains an empty message to be sent to the client.</param>
            <param name="responseHeaders">Upon return, contains the transport headers to be sent to the client.</param>
            <param name="responseStream">Upon return, contains an empty stream to be sent to the client.</param>
            <returns>Status of the server message processing (always returns Complete).</returns>
            <remarks>Caches the generated client information for later use.</remarks>
        </member>
        <member name="M:IDS.Remoting.SecureServerChannelSink.ProcessEncryptedMessage(System.Guid,System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>Decrypts the incoming message from the client and sends it to the next sink.</summary>
            <param name="transactID">The transaction ID for the client to whom we're communicating.</param>
            <param name="sinkStack">A stack of channel sinks.</param>
            <param name="requestMsg">The message that contains the request.</param>
            <param name="requestHeaders">Headers sent by the client.</param>
            <param name="requestStream">The stream that needs to be to processed.</param>
            <param name="responseMsg">Response message.</param>
            <param name="responseHeaders">Response headers</param>
            <param name="responseStream">Response stream.</param>
            <returns>Status of the server message processing.</returns>
        </member>
        <member name="M:IDS.Remoting.SecureServerChannelSink.PreviousTransactionWithClient(System.Guid)">
            <summary>Checks the connection table for previous communications with this client.</summary>
            <param name="transactID">Transaction ID of the client to check.</param>
            <returns>true if previous connection; otherwise, false.</returns>
        </member>
        <member name="M:IDS.Remoting.SecureServerChannelSink.SendEmptyToClient(IDS.Remoting.SecureTransaction,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            Creates all necessary objects to send an empty message back to the client.  
            Can be used to send back to the client an "Unknown Identifier" transaction type message.
            Note that this is a recoverable error and as such does not throw an exception.
            </summary>
            <param name="transactType">The transaction type to send to the client.</param>
            <param name="responseMsg">The output response message.</param>
            <param name="responseHeaders">The output response headers.</param>
            <param name="responseStream">The output response stream.</param>
            <returns>Status of the server message processing (Complete).</returns>
        </member>
        <member name="M:IDS.Remoting.SecureServerChannelSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>Requests message processing from the current sink.</summary>
            <param name="sinkStack">A stack of channel sinks</param>
            <param name="requestMsg">Request message.</param>
            <param name="requestHeaders">Headers sent by client.</param>
            <param name="requestStream">Stream to be processed..</param>
            <param name="responseMsg">Response message.</param>
            <param name="responseHeaders">Response headers.</param>
            <param name="responseStream">Response stream.</param>
            <returns>Status of the server message processing.</returns>
        </member>
        <member name="M:IDS.Remoting.SecureServerChannelSink.RequireSecurity(System.Net.IPAddress)">
            <summary>Determine whether we'll require encryption when communicating with the given endpoint.</summary>
            <param name="clientAddress">The address to check for security restrictions.</param>
            <returns>Whether communications with this client must be encrypted.</returns>
        </member>
        <member name="P:IDS.Remoting.SecureServerChannelSink.NextChannelSink">
            <summary>Gets the next server channel sink in the server sink chain.</summary>
        </member>
        <member name="M:IDS.Remoting.SecureServerChannelSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>Returns the Stream onto which the provided response message is to be serialized.</summary>
        </member>
        <member name="M:IDS.Remoting.SecureServerChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>Requests processing from the current sink of the response from a method call sent asynchronously.</summary>
        </member>
        <member name="M:IDS.Remoting.SecureServerChannelSink.StartConnectionSweeper">
            <summary>Starts the connection sweeper.</summary>
        </member>
        <member name="M:IDS.Remoting.SecureServerChannelSink.SweepConnections(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>Removes from the connection table any outdated connection information.</summary>
            <remarks>
            When the table is sweeped, the table is locked to prevent it from being modified during the
            sweep which could cause exceptions to be thrown.  The downside to this is that while the
            table is locked, incoming requests will be blocked!  As such, either this should be rewritten
            or the frequency of the sleep should be limited.  Idle checks could also be implemented to
            ensure that the process runs only when a long idle period has been observed.
            </remarks>
        </member>
        <member name="T:IDS.Remoting.SecureServerChannelSinkProvider">
            <summary>Used to create a secure server channel sink.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureServerChannelSinkProvider.next">
            <summary>The next sink provider in the sink provider chain.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureServerChannelSinkProvider.algorithm">
            <summary>The name of the symmetric algorithm to use.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureServerChannelSinkProvider.oaep">
            <summary>Whether OAEP padding should be used.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureServerChannelSinkProvider.requireSecurity">
            <summary>Whether the server requires the client to use the secure client sink.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureServerChannelSinkProvider.connectionAgeLimit">
            <summary>The minimum amount of time (s) information about a client connection should be retained.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureServerChannelSinkProvider.sweepFrequency">
            <summary>How often (s) the connection sweeper should run.</summary>
        </member>
        <member name="F:IDS.Remoting.SecureServerChannelSinkProvider.securityExemptionList">
            <summary>List of client IP's that should have the opposite security requirement.</summary>
        </member>
        <member name="M:IDS.Remoting.SecureServerChannelSinkProvider.#ctor">
            <summary>Initializes the sink provider.</summary>
        </member>
        <member name="M:IDS.Remoting.SecureServerChannelSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>Initializes the sink provider.</summary>
            <param name="properties">Parameters specified in the config file.</param>
            <param name="providerData">Sink provider data.</param>
        </member>
        <member name="M:IDS.Remoting.SecureServerChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
            <summary>Creates the channel sink.</summary>
            <param name="channel">The channel for which to create the channel sink chain.</param>
            <returns>The new channel sink.</returns>
        </member>
        <member name="M:IDS.Remoting.SecureServerChannelSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
            <summary>Returns the channel data for the channel that the current sink is associated with.</summary>
            <param name="channelData">An IChannelDataStore object in which the channel data is to be returned.</param>
        </member>
        <member name="P:IDS.Remoting.SecureServerChannelSinkProvider.Next">
            <summary>Gets or sets the next sink provider in the channel sink provider chain.</summary>
        </member>
        <member name="T:IDS.Remoting.Sponsor">
            <summary>
            The Sponsor class is an implementation of the ISponsor interface that provides for a configurable lifetime lease for remoting.
            </summary>
        </member>
        <member name="M:IDS.Remoting.Sponsor.Renewal(System.Runtime.Remoting.Lifetime.ILease)">
            <summary>
            Requests a sponsoring client to renew the lease for the specified object.
            </summary>
            <param name="lease">The lifetime lease of the object that requires lease renewal.</param>
            <returns>
            The additional lease time for the specified object.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission. </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure"/>
            </PermissionSet>
        </member>
        <member name="T:IDS.Require">
            <summary>
            Provides methods for verifying method preconditions.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Require.IsNotNull(System.Object,System.String)">
            <summary>
            Verifies that a method argument is not <see langword="null" />.
            </summary>
            <param name="actualValue">
            The value of the method argument.
            </param>
            <param name="paramName">
            The name of the method parameter.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="actualValue" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:IDS.Require.IsNotNullOrEmpty(System.String,System.String)">
            <summary>
            Verifies that a method argument is not <see langword="null"/>
            or an empty string.
            </summary>
            <param name="actualValue">The actual value.</param>
            <param name="paramName">The name of the method parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="actualValue"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="actualValue"/> is an empty string.
            </exception>
        </member>
        <member name="M:IDS.Require.IsTrue(System.Boolean,System.String)">
            <summary>
            Verifies that a method argument satisfies a precondition;
            if not, throws <see cref="T:System.ArgumentException"/> with
            a generic error message.
            </summary>
            <param name="condition">A <see cref="T:System.Boolean"/> condition involving the method argument
            that the argument must satisfy.</param>
            <param name="paramName">The name of the method parameter.</param>
            <overloads>
            Verifies that a method argument satisfies a precondition;
            if not, throws <see cref="T:System.ArgumentException"/> or one of its
            subclasses.
            </overloads>
            <exception cref="T:System.ArgumentException">
            	<paramref name="condition"/> is <see langword="false"/>.
            </exception>
        </member>
        <member name="M:IDS.Require.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Verifies that a method argument satisfies a precondition;
            if not, throws <see cref="T:System.ArgumentException" /> with
            a specified error message.
            </summary>
            <param name="condition">
            A <see cref="T:System.Boolean" /> condition involving the method argument
            that the argument must satisfy.
            </param>
            <param name="paramName">
            The name of the method parameter.
            </param>
            <param name="message">
            A description of the precondition.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="condition" /> is <see langword="false" />.
            </exception>
        </member>
        <member name="M:IDS.Require.IsTrue(System.Object,System.Boolean,System.String,System.String)">
            <summary>
            Verifies that a method argument satisfies a precondition;
            if not, throws <see cref="T:System.ArgumentOutOfRangeException" /> with
            a specified error message and the value of the argument.
            </summary>
            <param name="actualValue">
            The value of the method argument.
            </param>
            <param name="condition">
            A <see cref="T:System.Boolean" /> condition involving the method argument
            that the argument must satisfy.
            </param>
            <param name="paramName">
            The name of the method parameter.
            </param>
            <param name="message">
            A description of the precondition.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="condition" /> is <see langword="false" />.
            </exception>
        </member>
        <member name="T:IDS.Resources.CommandLabels.General">
            <summary>
            Provides strings that are localized for the current UI culture.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Add">
            <summary>
            Add an item to a list.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Agree">
            <summary>
            Agree to the current action.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Apply">
            <summary>
            Apply the information entered on the current screen.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Approve">
            <summary>
            Approve (authorize) an action.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Back">
            <summary>
            Go back to the previous screen.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Cancel">
            <summary>
            Cancel the current action.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Change">
            <summary>
            [Verb] Change information.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Clear">
            <summary>
            [Verb] Clear (erase) the information entered on the current screen.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Close">
            <summary>
            [Verb] Close the window.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Confirm">
            <summary>
            Confirm the current action.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Continue">
            <summary>
            Continue to the next screen.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Delete">
            <summary>
            Delete an item from a list.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Done">
            <summary>
            Exit the current workflow, which has completed.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Download">
            <summary>
            [Verb] Download a file.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Edit">
            <summary>
            [Verb] Edit information.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Export">
            <summary>
            [Verb] Export information to a file.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.GoBack">
            <summary>
            Go back to the previous screen.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Help">
            <summary>
            [Noun] Display help information.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Import">
            <summary>
            [Verb] Import information from a file.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Next">
            <summary>
            Go to the next screen.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.OK">
            <summary>
            Confirm or acknowledge the current action.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Previous">
            <summary>
            Go to the previous screen.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Refresh">
            <summary>
            [Verb] Refresh information.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Reject">
            <summary>
            Reject an action.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Remove">
            <summary>
            Remove an item from a list.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Save">
            <summary>
            [Verb] Save the information entered on the current screen.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Search">
            <summary>
            [Verb] Search for information.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Select">
            <summary>
            [Verb] Select an item.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Submit">
            <summary>
            Submit the information entered on the current screen.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Update">
            <summary>
            [Verb] Update information.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Upload">
            <summary>
            [Verb] Upload a file.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.Verify">
            <summary>
            Verify that information is correct.
            </summary>
        </member>
        <member name="P:IDS.Resources.CommandLabels.General.View">
            <summary>
            [Verb] View information.
            </summary>
        </member>
        <member name="T:IDS.Resources.FieldLabels.Address">
            <summary>
            Provides strings that are localized for the current UI culture.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Address.City">
            <summary>
            The name of a city.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Address.Country">
            <summary>
            The name of a country.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Address.Format">
            <summary>
            The type of an address: domestic or foreign.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Address.Line1">
            <summary>
            The first line of a street address.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Address.Line2">
            <summary>
            The second line of a street address.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Address.Line3">
            <summary>
            The third line of a street address.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Address.PostalCode">
            <summary>
            A foreign postal code.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Address.State">
            <summary>
            The name of a U.S. state.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Address.StateOrProvince">
            <summary>
            The name of a foreign state or province.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Address.ZipCode">
            <summary>
            A U.S. ZIP Code.
            </summary>
        </member>
        <member name="T:IDS.Resources.FieldLabels.General">
            <summary>
            Provides strings that are localized for the current UI culture.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.Address">
            <summary>
            A postal address.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.Category">
            <summary>
            A category.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.Date">
            <summary>
            A calendar date.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.DateRange">
            <summary>
            A range of calendar dates.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.Day">
            <summary>
            A day of the month.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.Description">
            <summary>
            A description.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.FileName">
            <summary>
            The name of a file.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.Frequency">
            <summary>
            The frequency of a periodic event.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.From_Source">
            <summary>
            A source or starting point.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.From_Value">
            <summary>
            The first value in a range of values.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.Month">
            <summary>
            A calendar month.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.Months">
            <summary>
            A number of calendar months.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.Name">
            <summary>
            The name of an entity.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.Nickname">
            <summary>
            The user's nickname for an entity.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.Priority">
            <summary>
            The priority of something relative to others.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.Schedule">
            <summary>
            A schedule.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.Status">
            <summary>
            The status (condition) of an entity.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.To_Destination">
            <summary>
            A destination or ending point.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.To_Value">
            <summary>
            The last value in a range of values.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.Type">
            <summary>
            A classification type.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.Year">
            <summary>
            A calendar year.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.General.Years">
            <summary>
            A number of calendar years.
            </summary>
        </member>
        <member name="T:IDS.Resources.FieldLabels.Messaging">
            <summary>
            Provides strings that are localized for the current UI culture.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Messaging.Body">
            <summary>
            The content (body) of an email message.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Messaging.Subject">
            <summary>
            The subject of an email message.
            </summary>
        </member>
        <member name="T:IDS.Resources.FieldLabels.Person">
            <summary>
            Provides strings that are localized for the current UI culture.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.BirthDate">
            <summary>
            A person's birth date.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.DriverLicense">
            <summary>
            A driver license.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.EmailAddress">
            <summary>
            A person's email address.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.Fax">
            <summary>
            A person's fax number.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.FirstName">
            <summary>
            A person's given name.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.HomePhone">
            <summary>
            A person's home telephone number.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.LastName">
            <summary>
            A person's surname.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.MiddleName">
            <summary>
            A person's middle name.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.MobilePhone">
            <summary>
            A person's mobile telephone number.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.MothersMaidenName">
            <summary>
            The maiden name of a person's mother.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.PhoneNumber">
            <summary>
            A person's telephone number.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.PhoneNumberExtension">
            <summary>
            A telephone number extension.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.SocialSecurityNumber">
            <summary>
            A person's Social Security number.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.Suffix">
            <summary>
            A person's generational suffix (such as Sr. or Jr.).
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.TaxId">
            <summary>
            A tax identifier (such as an SSN or EIN).
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.Title">
            <summary>
            A person's title of courtesy (such as Mr. or Ms.).
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Person.WorkPhone">
            <summary>
            A person's work telephone number.
            </summary>
        </member>
        <member name="T:IDS.Resources.FieldLabels.Security">
            <summary>
            Provides strings that are localized for the current UI culture.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Security.Password">
            <summary>
            A password.
            </summary>
        </member>
        <member name="P:IDS.Resources.FieldLabels.Security.UserId">
            <summary>
            An identifier for a user.
            </summary>
        </member>
        <member name="T:IDS.Resources.Messages.FieldValidation">
            <summary>
            Provides strings that are localized for the current UI culture.
            </summary>
        </member>
        <member name="P:IDS.Resources.Messages.FieldValidation.EmptyFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Resources.Messages.FieldValidation.InvalidCardNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Resources.Messages.FieldValidation.InvalidDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Resources.Messages.FieldValidation.InvalidEmailAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Resources.Messages.FieldValidation.InvalidFileType">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Resources.Messages.FieldValidation.InvalidPhoneNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Resources.Messages.FieldValidation.InvalidPhoneNumberExtension">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Resources.Messages.FieldValidation.InvalidSsn">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Resources.Messages.FieldValidation.InvalidZipCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Resources.Messages.FieldValidation.MaxFileSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Resources.Messages.FieldValidation.RequiredField">
            <summary>
            Localization note: {Label} is replaced by the field label.
            </summary>
        </member>
        <member name="T:IDS.Resources.Messages.General">
            <summary>
            Provides strings that are localized for the current UI culture.
            </summary>
        </member>
        <member name="P:IDS.Resources.Messages.General.SystemError">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Resources.Messages.Headings">
            <summary>
            Provides strings that are localized for the current UI culture.
            </summary>
        </member>
        <member name="P:IDS.Resources.Messages.Headings.Disclosure">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Resources.Messages.Headings.Error">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Resources.OptionLabels.DateTime">
            <summary>
            Provides strings that are localized for the current UI culture.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.AllDates">
            <summary>
            All available dates.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.Last12Months">
            <summary>
            The 12-month period ending today.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.Last1Month">
            <summary>
            The 1-month period ending today.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.Last3Months">
            <summary>
            The 3-month period ending today.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.Last6Months">
            <summary>
            The 6-month period ending today.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.Last9Months">
            <summary>
            The 9-month period ending today.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.LastMonth">
            <summary>
            The month before this month.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.LastWeek">
            <summary>
            The week before this week.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.LastYear">
            <summary>
            The year before this year.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.Next12Months">
            <summary>
            The 12-month period starting today.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.Next1Month">
            <summary>
            The 1-month period starting today.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.Next3Months">
            <summary>
            The 3-month period starting today.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.Next6Months">
            <summary>
            The 6-month period starting today.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.NextMonth">
            <summary>
            The month after this month.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.NextWeek">
            <summary>
            The week after this week.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.NextYear">
            <summary>
            The year after this year.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.ThisMonth">
            <summary>
            The present month.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.ThisWeek">
            <summary>
            The present week.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.ThisYear">
            <summary>
            The present year.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.Today">
            <summary>
            The present day.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.Tomorrow">
            <summary>
            The day after today.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.DateTime.Yesterday">
            <summary>
            The day before today.
            </summary>
        </member>
        <member name="T:IDS.Resources.OptionLabels.General">
            <summary>
            Provides strings that are localized for the current UI culture.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.General.All">
            <summary>
            All values.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.General.Custom">
            <summary>
            A user-defined value.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.General.No">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.General.Other">
            <summary>
            Another value.
            </summary>
        </member>
        <member name="P:IDS.Resources.OptionLabels.General.Yes">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.ServiceException">
            <summary>
            The exception that is thrown when a request to an external service did not complete successfully.
            </summary>
        </member>
        <member name="M:IDS.ServiceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ServiceException" /> class.
            </summary>
        </member>
        <member name="M:IDS.ServiceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ServiceException" /> class with a specified error message.
            </summary>
            <param name="message">
            An error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:IDS.ServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ServiceException" /> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            An error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception,
            or <see langword="null" /> if no inner exception is specified.
            </param>
        </member>
        <member name="M:IDS.ServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ServiceException" /> class with serialized data.
            </summary>
            <param name="info">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.
            </param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source of the serialized stream.
            </param>
        </member>
        <member name="T:IDS.ServiceModel.Configuration.ServiceConfigurationElement">
            <summary>
            Represents a service configuration element in a configuration file.
            </summary>
        </member>
        <member name="P:IDS.ServiceModel.Configuration.ServiceConfigurationElement.Name">
            <summary>
            Gets or sets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="P:IDS.ServiceModel.Configuration.ServiceConfigurationElement.ServiceType">
            <summary>
            Gets or sets the type of the service.
            </summary>
            <value>The type of the service.</value>
        </member>
        <member name="T:IDS.ServiceModel.Configuration.ServiceElementCollection">
            <summary>
            Represents a list of service elements in a configuration file.
            </summary>
        </member>
        <member name="P:IDS.ServiceModel.Configuration.ServiceElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:IDS.ServiceModel.Configuration.ServiceConfigurationElement"/> at the specified index.
            </summary>
        </member>
        <member name="P:IDS.ServiceModel.Configuration.ServiceElementCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:IDS.ServiceModel.Configuration.ServiceConfigurationElement"/> with the specified name.
            </summary>
        </member>
        <member name="P:IDS.ServiceModel.Configuration.ServiceElementCollection.CollectionType">
            <summary>
            Gets the type of this collection.
            </summary>
            <returns>The type of this collection.</returns>
        </member>
        <member name="M:IDS.ServiceModel.Configuration.ServiceElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:IDS.ServiceModel.Configuration.ServiceConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:IDS.ServiceModel.Configuration.ServiceConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:IDS.ServiceModel.Configuration.ServiceElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:IDS.ServiceModel.Configuration.ServiceConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:IDS.ServiceModel.Configuration.ServiceConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:IDS.ServiceModel.Configuration.ServiceElementCollection.IndexOf(IDS.ServiceModel.Configuration.ServiceConfigurationElement)">
            <summary>
            Returns the index of the specified <see cref="T:IDS.ServiceModel.Configuration.ServiceConfigurationElement"/>.
            </summary>
            <param name="element">The <see cref="T:IDS.ServiceModel.Configuration.ServiceConfigurationElement"/>.</param>
            <returns>The index of the specified <see cref="T:IDS.ServiceModel.Configuration.ServiceConfigurationElement"/>.</returns>
        </member>
        <member name="M:IDS.ServiceModel.Configuration.ServiceElementCollection.Add(IDS.ServiceModel.Configuration.ServiceConfigurationElement)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The <see cref="T:IDS.ServiceModel.Configuration.ServiceConfigurationElement"/>.</param>
        </member>
        <member name="M:IDS.ServiceModel.Configuration.ServiceElementCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Adds a configuration element to the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to add.</param>
        </member>
        <member name="M:IDS.ServiceModel.Configuration.ServiceElementCollection.Remove(IDS.ServiceModel.Configuration.ServiceConfigurationElement)">
            <summary>
            Removes the specified element.
            </summary>
            <param name="element">The <see cref="T:IDS.ServiceModel.Configuration.ServiceConfigurationElement"/>.</param>
        </member>
        <member name="M:IDS.ServiceModel.Configuration.ServiceElementCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:IDS.ServiceModel.Configuration.ServiceConfigurationElement"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:IDS.ServiceModel.Configuration.ServiceElementCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:IDS.ServiceModel.Configuration.ServiceConfigurationElement"/> with the specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:IDS.ServiceModel.Configuration.ServiceElementCollection.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="T:IDS.ServiceModel.Configuration.ServicesConfigurationSection">
            <summary>
            Represents a services configuration section in a configuration file.
            </summary>
        </member>
        <member name="P:IDS.ServiceModel.Configuration.ServicesConfigurationSection.Services">
            <summary>
            Gets the services.
            </summary>
            <value>The services.</value>
        </member>
        <member name="T:IDS.ServiceModel.LoggingBehavior">
            <summary>
            Logs the messages sent to and received from a WCF service.
            </summary>
        </member>
        <member name="M:IDS.ServiceModel.LoggingBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ServiceModel.LoggingBehavior" /> class.
            </summary>
            <param name="description">
            A description of the WCF service to be included in the logged entries.
            </param>
        </member>
        <member name="M:IDS.ServiceModel.LoggingBehavior.MaskSensitiveData(System.String)">
            <summary>
            Masks the content of sensitive elements in a specified XML string.
            </summary>
        </member>
        <member name="T:IDS.ServiceModel.WcfServiceHostContainer">
            <summary>
            A class that starts all WCF hosts configured in the application configuration file.
            </summary>
        </member>
        <member name="M:IDS.ServiceModel.WcfServiceHostContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ServiceModel.WcfServiceHostContainer"/> class.
            </summary>
        </member>
        <member name="M:IDS.ServiceModel.WcfServiceHostContainer.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:IDS.ServiceModel.WcfServiceHostContainer"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:IDS.ServiceModel.WcfServiceHostContainer.Hosts">
            <summary>
            Gets the collection of <see cref="T:System.ServiceModel.ServiceHost"/> instances that are being hosted in the container.
            </summary>
            <value>The hosts.</value>
        </member>
        <member name="M:IDS.ServiceModel.WcfServiceHostContainer.OpenHost(System.ServiceModel.ServiceHost)">
            <summary>
            Opens the supplied host and adds it to the <see cref="P:IDS.ServiceModel.WcfServiceHostContainer.Hosts"/> collection.
            </summary>
            <param name="host">The host to open.</param>
        </member>
        <member name="M:IDS.ServiceModel.WcfServiceHostContainer.CloseHost(System.ServiceModel.ServiceHost)">
            <summary>
            Closes the supplied host.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:IDS.ServiceModel.WcfServiceHostContainer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:IDS.ServiceModel.WcfServiceHostContainer.StartServices">
            <summary>
            Starts the services.
            </summary>
        </member>
        <member name="M:IDS.ServiceModel.WcfServiceHostContainer.StopServices">
            <summary>
            Stops the services.
            </summary>
        </member>
        <member name="M:IDS.ServiceModel.WcfServiceHostContainer.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:IDS.SignalPoint.MatchType">
            <summary>
            The MatchType enumeration defines whether a token match is considered a success or a failure.
            </summary>
        </member>
        <member name="F:IDS.SignalPoint.MatchType.MatchIsSuccess">
            <summary>
            A match is considered a success.
            </summary>
        </member>
        <member name="F:IDS.SignalPoint.MatchType.MatchIsFailure">
            <summary>
            A match is considered a failure.
            </summary>
        </member>
        <member name="T:IDS.SignalPoint.HttpUrlMonitorService">
            <summary>
            The HttpUrlMonitorService allows SignalPoint to monitor a URL using HTTP/HTTPS. The content that is returned
            can be searched for a particular regular expression. A match of the regular expression indicates either
            success or failure depending on how the service is configured.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.HttpUrlMonitorService.#ctor">
            <summary>
            Creates an instance of the HttpUrlMonitorService class.
            </summary>
        </member>
        <member name="P:IDS.SignalPoint.HttpUrlMonitorService.URL">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:IDS.SignalPoint.HttpUrlMonitorService.RequestTimeoutSeconds">
            <summary>
            Gets or sets the request timeout seconds.
            </summary>
            <value>The request timeout seconds.</value>
        </member>
        <member name="P:IDS.SignalPoint.HttpUrlMonitorService.RegExString">
            <summary>
            Gets or sets the regular expression string.
            </summary>
            <value>The reg ex string.</value>
        </member>
        <member name="P:IDS.SignalPoint.HttpUrlMonitorService.MatchAction">
            <summary>
            Gets or sets the match action.
            </summary>
            <value>The match action.</value>
        </member>
        <member name="P:IDS.SignalPoint.HttpUrlMonitorService.CancelQuerystring">
            <summary>
            Gets or sets the cancel querystring.
            </summary>
            <value>The cancel querystring.</value>
        </member>
        <member name="M:IDS.SignalPoint.HttpUrlMonitorService.CheckHealth">
            <summary>
            The CheckHealth method is responsible for validating the health of a SignalPoint
            service.
            </summary>
            <returns>
            Returns a LogEntryCollection that can contain a combination of information, warnings
            and exceptions.
            </returns>
            <remarks>
            The CheckHealth method is responsible for validating the health of a SignalPoint
            service. The method returns a LogEntryCollection which contains a collection of log entries.
            The LogEntryCollection can contain zero LogEntries but it must never be null. The CheckHealth()
            method will populate this collection with log entries. These entries can be informational,
            warnings, exceptions or other types of information. The SignalPoint module will interate
            through this collection and display the log entries on its monitoring page. The SignalPoint
            module will be configured to determine the minimum acceptable severity (IDS.Logging.LogSeverity)
            and possibly the minimum display severity. For example, if the minimum acceptable severity was configured as Exception, severities of Warnings, Information, Debug and Unspecified would be considered acceptable and would not cause SignalPoint to signal a failure. Only severities of Exception and Critical would cause a failure. This same logic could be used to determine what log entries to display on the SignalPoint monitoring page.
            </remarks>
        </member>
        <member name="T:IDS.SignalPoint.IMonitor">
            <summary>
            The IMonitor interface enables the SignalPoint module to be extended. Services that
            want to extend the SignalPoint monitoring service should implement this interface.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.IMonitor.CheckHealth">
            <summary>
            The CheckHealth method is responsible for validating the health of a SignalPoint
            service.
            </summary>
            <remarks>
            The CheckHealth method is responsible for validating the health of a SignalPoint
            service. The method returns a LogEntryCollection which contains a collection of log entries. 
            The LogEntryCollection can contain zero LogEntries but it must never be null. The CheckHealth() 
            method will populate this collection with log entries. These entries can be informational, 
            warnings, exceptions or other types of information. The SignalPoint module will interate 
            through this collection and display the log entries on its monitoring page. The SignalPoint 
            module will be configured to determine the minimum acceptable severity (IDS.Logging.LogSeverity) 
            and possibly the minimum display severity. For example, if the minimum acceptable severity was configured as Exception, severities of Warnings, Information, Debug and Unspecified would be considered acceptable and would not cause SignalPoint to signal a failure. Only severities of Exception and Critical would cause a failure. This same logic could be used to determine what log entries to display on the SignalPoint monitoring page.
            </remarks>
            <returns>Returns a LogEntryCollection that can contain a combination of information, warnings
            and exceptions.</returns>
        </member>
        <member name="T:IDS.SignalPoint.LazyCachedSignalPointResults">
            <summary>
            The LazyCachedSignalPointResults class is a <see cref="T:IDS.SignalPoint.SignalPointResults"/> class that lazy loads the results from the database.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.LazyCachedSignalPointResults.#ctor(IDS.SignalPoint.SqlDataService,System.Guid,System.String,System.String,System.DateTime,System.Boolean,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.LazyCachedSignalPointResults"/> class.
            </summary>
            <param name="dataService">The data service.</param>
            <param name="id">The id.</param>
            <param name="serverName">Name of the server.</param>
            <param name="sourceIP">The source IP.</param>
            <param name="created">The created.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="executionTime">The execution time.</param>
        </member>
        <member name="P:IDS.SignalPoint.LazyCachedSignalPointResults.SeverityThreshold">
            <summary>
            Gets the severity threshold.
            </summary>
            <value>The severity threshold.</value>
        </member>
        <member name="P:IDS.SignalPoint.LazyCachedSignalPointResults.LogEntries">
            <summary>
            Gets the log entries.
            </summary>
            <value>The log entries.</value>
        </member>
        <member name="P:IDS.SignalPoint.LazyCachedSignalPointResults.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:LazyCachedSignalPointResults"/> is success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:IDS.SignalPoint.LazyCachedSignalPointResults.EnsureResultsRetrieved">
            <summary>
            Ensures the results retrieved.
            </summary>
        </member>
        <member name="T:IDS.SignalPoint.LogCategory">
            <summary>
            The LogCategory is an enumeration of logging categories used by SignalPoint.
            </summary>
        </member>
        <member name="F:IDS.SignalPoint.LogCategory.Authorization">
            <summary>
            Logging items related to authorization.
            </summary>
        </member>
        <member name="F:IDS.SignalPoint.LogCategory.Authentication">
            <summary>
            Logging items related to authentication.
            </summary>
        </member>
        <member name="F:IDS.SignalPoint.LogCategory.PerformanceMonitor">
            <summary>
            Logging items related to performance monitoring.
            </summary>
        </member>
        <member name="F:IDS.SignalPoint.LogCategory.ServiceMonitor">
            <summary>
            Logging items related to service monitoring.
            </summary>
        </member>
        <member name="F:IDS.SignalPoint.LogCategory.HostConnection">
            <summary>
            Logging items related to the host connection.
            </summary>
        </member>
        <member name="F:IDS.SignalPoint.LogCategory.Other">
            <summary>
            A miscellaneous logging category.
            </summary>
        </member>
        <member name="T:IDS.SignalPoint.MaintenancePeriod">
            <summary>
            The MaintenancePeriod class represents a period where maintenance will be performed to allow service
            interruptions during this time period to be ignored.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.MaintenancePeriod.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.MaintenancePeriod"/> class.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.MaintenancePeriod.#ctor(System.DateTime,System.DateTime,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.MaintenancePeriod"/> class.
            </summary>
            <param name="startPeriod">The start period.</param>
            <param name="endPeriod">The end period.</param>
            <param name="Description">The description.</param>
            <param name="manualSuspension">if set to <c>true</c> [manual suspension].</param>
        </member>
        <member name="M:IDS.SignalPoint.MaintenancePeriod.#ctor(System.Guid,System.DateTime,System.DateTime,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.MaintenancePeriod"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="startPeriod">The start period.</param>
            <param name="endPeriod">The end period.</param>
            <param name="Description">The description.</param>
            <param name="isManualSuspension">if set to <c>true</c> [is manual suspension].</param>
        </member>
        <member name="P:IDS.SignalPoint.MaintenancePeriod.Id">
            <summary>
            Gets or sets the ID associated with this object.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:IDS.SignalPoint.MaintenancePeriod.StartPeriod">
            <summary>
            Gets or sets the start period.
            </summary>
            <value>The start period.</value>
        </member>
        <member name="P:IDS.SignalPoint.MaintenancePeriod.EndPeriod">
            <summary>
            Gets or sets the end period.
            </summary>
            <value>The end period.</value>
        </member>
        <member name="P:IDS.SignalPoint.MaintenancePeriod.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:IDS.SignalPoint.MaintenancePeriod.IsManualSuspension">
            <summary>
            Gets or sets a value indicating whether this instance is manual suspension.
            </summary>
            <value>
            	<c>true</c> if this instance is manual suspension; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IDS.SignalPoint.MaintenancePeriodCollection">
            <summary>
            The MaintenancePeriodCollection class contains a collection of <see cref="T:IDS.SignalPoint.MaintenancePeriod"/> objects.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.MaintenancePeriodCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.MaintenancePeriodCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.MaintenancePeriodCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.SignalPoint.MaintenancePeriod})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.MaintenancePeriodCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.SignalPoint.MaintenancePeriodCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.MaintenancePeriodCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="T:IDS.SignalPoint.MonitoredService">
            <summary>
            The MonitoredService class encapsulates the results from a monitored service.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.MonitoredService.#ctor(System.String,IDS.SignalPoint.IMonitor,IDS.Logging.LogSeverity)">
            <summary>
            Initializes a new instance of the <see cref="T:MonitoredService"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="monitorService">The monitor service.</param>
            <param name="failureSeverity">The failure severity.</param>
        </member>
        <member name="M:IDS.SignalPoint.MonitoredService.CreateFromXml(System.Xml.XmlNode)">
            <summary>
            Creates from XML.
            </summary>
            <param name="xmlNode">The XML node.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.MonitoredService.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:IDS.SignalPoint.MonitoredService.ServiceName">
            <summary>
            Gets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="P:IDS.SignalPoint.MonitoredService.FailureSeverity">
            <summary>
            Gets the failure severity.
            </summary>
            <value>The failure severity.</value>
        </member>
        <member name="P:IDS.SignalPoint.MonitoredService.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:MonitoredService"/> is success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.SignalPoint.MonitoredService.LogEntries">
            <summary>
            Gets the log entries.
            </summary>
            <value>The log entries.</value>
        </member>
        <member name="T:IDS.SignalPoint.MonitoredServiceCollection">
            <summary>
            The MonitoredServiceCollection class contains a collection of <see cref="T:IDS.SignalPoint.MonitoredService"/> objects.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.MonitoredServiceCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.MonitoredServiceCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.MonitoredServiceCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.SignalPoint.MonitoredService})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.MonitoredServiceCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.SignalPoint.MonitoredServiceCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.MonitoredServiceCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="T:IDS.SignalPoint.PerformanceCounter">
            <summary>
            The PerformanceCounter class contains the information related to a performance counter.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String,System.Int32,IDS.SignalPoint.PerformanceCounter.PerformanceCounterCompareModes,IDS.Logging.LogSeverity)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.PerformanceCounter"/> class.
            </summary>
            <param name="description">The description.</param>
            <param name="categoryName">Name of the category.</param>
            <param name="counterName">Name of the counter.</param>
            <param name="instanceName">Name of the instance.</param>
            <param name="threshold">The threshold.</param>
            <param name="compareMode">The compare mode.</param>
            <param name="failureSeverity">The failure severity.</param>
        </member>
        <member name="M:IDS.SignalPoint.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String,System.Int32,IDS.SignalPoint.PerformanceCounter.PerformanceCounterCompareModes,IDS.Logging.LogSeverity,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.PerformanceCounter"/> class.
            </summary>
            <param name="description">The description.</param>
            <param name="categoryName">Name of the category.</param>
            <param name="counterName">Name of the counter.</param>
            <param name="instanceName">Name of the instance.</param>
            <param name="threshold">The threshold.</param>
            <param name="compareMode">The compare mode.</param>
            <param name="failureSeverity">The failure severity.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:IDS.SignalPoint.PerformanceCounter.PerformanceCounterCompareModes">
            <summary>
            PerformanceCounterCompareModes Enum
            </summary>
        </member>
        <member name="F:IDS.SignalPoint.PerformanceCounter.PerformanceCounterCompareModes.Max">
            <summary>
            Max
            </summary>
        </member>
        <member name="F:IDS.SignalPoint.PerformanceCounter.PerformanceCounterCompareModes.Min">
            <summary>
            Min
            </summary>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounter.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounter.CategoryName">
            <summary>
            Gets the name of the category.
            </summary>
            <value>The name of the category.</value>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounter.CounterName">
            <summary>
            Gets the name of the counter.
            </summary>
            <value>The name of the counter.</value>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounter.InstanceName">
            <summary>
            Gets the name of the instance.
            </summary>
            <value>The name of the instance.</value>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounter.Threshold">
            <summary>
            Gets the threshold.
            </summary>
            <value>The threshold.</value>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounter.CompareMode">
            <summary>
            Gets the compare mode.
            </summary>
            <value>The compare mode.</value>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounter.FailureSeverity">
            <summary>
            Gets the failure severity.
            </summary>
            <value>The failure severity.</value>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounter.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounter.LogEntries">
            <summary>
            Gets the log entries.
            </summary>
            <value>The log entries.</value>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounter.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:IDS.SignalPoint.PerformanceCounter"/> is success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:IDS.SignalPoint.PerformanceCounter.GetCounter">
            <summary>
            Gets the counter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.PerformanceCounter.ExceedsThreshold">
            <summary>
            Exceedses the threshold.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.PerformanceCounter.CreateFromXml(System.Xml.XmlNode)">
            <summary>
            Creates from XML.
            </summary>
            <param name="xmlNode">The XML node.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.PerformanceCounter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:IDS.SignalPoint.PerformanceCounterCollection">
            <summary>
            The PerformanceCounterCollection class contains a collection of <see cref="T:IDS.SignalPoint.PerformanceCounter"/> objects.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.PerformanceCounterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.PerformanceCounterCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.PerformanceCounterCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.SignalPoint.PerformanceCounter})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.PerformanceCounterCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.SignalPoint.PerformanceCounterCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.PerformanceCounterCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="T:IDS.SignalPoint.ResultsDataBindingContext">
            <summary>
            The ResultsDataBinding class is used for providing the context for token data binding.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.ResultsDataBindingContext.#ctor(IDS.SignalPoint.SignalPointService,IDS.SignalPoint.SignalPointResults)">
            <summary>
            Create an instance of the ResultsDataBindingContext class.
            </summary>
            <param name="service">The SignalPoint service associated with this context.</param>
            <param name="results">The SignalPoint results associated with this context.</param>
        </member>
        <member name="M:IDS.SignalPoint.ResultsDataBindingContext.#ctor(IDS.SignalPoint.SignalPointService,IDS.SignalPoint.SignalPointResults,System.String)">
            <summary>
            Create an instance of the ResultsDataBindingContext class.
            </summary>
            <param name="service">The SignalPoint service associated with this context.</param>
            <param name="results">The SignalPoint results associated with this context.</param>
            <param name="statusText">The status text related to this context.</param>
        </member>
        <member name="P:IDS.SignalPoint.ResultsDataBindingContext.Service">
            <summary>
            The SignalPoint service associated with this context.
            </summary>
        </member>
        <member name="P:IDS.SignalPoint.ResultsDataBindingContext.Results">
            <summary>
            The SignalPoint results associated with this context.
            </summary>
        </member>
        <member name="T:IDS.SignalPoint.SchedulerMonitorService">
            <summary>
            The SchedulerMonitorService allows SignalPoint to monitor Scheduler.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.SchedulerMonitorService.#ctor">
            <summary>
            Creates an instance of the SchedulerMonitorService class.
            </summary>
        </member>
        <member name="P:IDS.SignalPoint.SchedulerMonitorService.AllSchedulerJobs">
            <summary>
            Gets or sets all the Scheduler jobs records.
            </summary>
            <value>All Scheduler jobs.</value>
        </member>
        <member name="P:IDS.SignalPoint.SchedulerMonitorService.ConnectionService">
            <summary>
            Gets or sets the SQL connection service.
            </summary>
            <value>The SQL connection service.</value>
        </member>
        <member name="P:IDS.SignalPoint.SchedulerMonitorService.PercentageBufferTime">
            <summary>
            Gets or sets the buffer time in percentage for PeriodicRecurrence jobs.
            </summary>
            <value>The percentage buffer time</value>
        </member>
        <member name="P:IDS.SignalPoint.SchedulerMonitorService.MinuteBufferTime">
            <summary>
            Gets or sets the buffer time in minutes for Non-PeriodicRecurrence jobs.
            </summary>
            <value>The buffer time in minutes</value>
        </member>
        <member name="M:IDS.SignalPoint.SchedulerMonitorService.CheckHealth">
            <summary>
            The CheckHealth method is responsible for validating the health of a SignalPoint
            service.
            </summary>
            <returns>
            Returns a LogEntryCollection that can contain a combination of information, warnings
            and exceptions.
            </returns>
            <remarks>
            The CheckHealth method is responsible for validating the health of a SignalPoint
            service. The method returns a LogEntryCollection which contains a collection of log entries.
            The LogEntryCollection can contain zero LogEntries but it must never be null. The CheckHealth()
            method will populate this collection with log entries. These entries can be informational,
            warnings, exceptions or other types of information. The SignalPoint module will interate
            through this collection and display the log entries on its monitoring page. The SignalPoint
            module will be configured to determine the minimum acceptable severity (IDS.Logging.LogSeverity)
            and possibly the minimum display severity. For example, if the minimum acceptable severity was configured as Exception, severities of Warnings, Information, Debug and Unspecified would be considered acceptable and would not cause SignalPoint to signal a failure. Only severities of Exception and Critical would cause a failure. This same logic could be used to determine what log entries to display on the SignalPoint monitoring page.
            </remarks>
        </member>
        <member name="T:IDS.SignalPoint.ServiceLogEntry">
            <summary>
            The ServiceLogEntry class holds the relationship between a service
            and a log entry generated by that service.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.ServiceLogEntry.#ctor(System.String,IDS.Logging.LogEntry,IDS.Logging.LogSeverity)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceLogEntry"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="logEntry">The log entry.</param>
            <param name="severityThreshold">The severity threshold.</param>
        </member>
        <member name="P:IDS.SignalPoint.ServiceLogEntry.ServiceName">
            <summary>
            Gets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="P:IDS.SignalPoint.ServiceLogEntry.LogEntry">
            <summary>
            Gets the log entry.
            </summary>
            <value>The log entry.</value>
        </member>
        <member name="P:IDS.SignalPoint.ServiceLogEntry.SeverityThreshold">
            <summary>
            Gets the severity threshold.
            </summary>
            <value>The severity threshold.</value>
        </member>
        <member name="T:IDS.SignalPoint.ServiceLogEntryCollection">
            <summary>
            The ServiceLogEntryCollection class contains a collection of <see cref="T:IDS.SignalPoint.ServiceLogEntry"/> objects.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.ServiceLogEntryCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.ServiceLogEntryCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.ServiceLogEntryCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.SignalPoint.ServiceLogEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.ServiceLogEntryCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.SignalPoint.ServiceLogEntryCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.ServiceLogEntryCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:IDS.SignalPoint.ServiceLogEntryCollection.Add(System.String,IDS.Logging.LogEntryCollection,IDS.Logging.LogSeverity)">
            <summary>
            Adds the specified service to the collection.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="logEntries">The log entries.</param>
            <param name="severityThreshold">The severity threshold.</param>
        </member>
        <member name="T:IDS.SignalPoint.SignalPointResults">
            <summary>
            The SignalPointResults class contains the results of a request to a SignalPoint service.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointResults.#ctor(System.String,IDS.SignalPoint.PerformanceCounterCollection,IDS.SignalPoint.MonitoredServiceCollection,IDS.Logging.LogEntryCollection,IDS.Logging.LogSeverity,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SignalPointResults"/> class.
            </summary>
            <param name="serverName">Name of the server.</param>
            <param name="performanceCounters">The performance counters.</param>
            <param name="monitoredServices">The monitored services.</param>
            <param name="logEntries">The log entries.</param>
            <param name="severityThreshold">The severity threshold.</param>
            <param name="sourceIP">The source IP.</param>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointResults.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SignalPointResults"/> class.
            </summary>
            <param name="serverName">Name of the server.</param>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointResults.#ctor(System.Guid,System.String,System.String,System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.SignalPointResults"/> class.
            </summary>
            <param name="id">The ID of the result.</param>
            <param name="serverName">Name of the server.</param>
            <param name="sourceIP">The source IP.</param>
            <param name="createdDateTime">The created date time.</param>
            <param name="executionTime">The execution time.</param>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointResults.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SignalPointResults"/> class.
            </summary>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointResults.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointResults.ServerName">
            <summary>
            Gets the name of the server.
            </summary>
            <value>The name of the server.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointResults.Created">
            <summary>
            Gets the created.
            </summary>
            <value>The created.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointResults.SeverityThreshold">
            <summary>
            Gets the severity threshold.
            </summary>
            <value>The severity threshold.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointResults.SourceIP">
            <summary>
            Gets the source IP.
            </summary>
            <value>The source IP.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointResults.ExecutionTime">
            <summary>
            Gets or sets the execution time.
            </summary>
            <value>The execution time.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointResults.LogEntries">
            <summary>
            Gets the log entries.
            </summary>
            <value>The log entries.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointResults.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:SignalPointResults"/> is success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointResults.StatusText">
            <summary>
            Gets the status text.
            </summary>
            <value>The status text.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointResults.PerformanceCounters">
            <summary>
            Gets the performance counters.
            </summary>
            <value>The performance counters.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointResults.MonitoredServices">
            <summary>
            Gets the monitored services.
            </summary>
            <value>The monitored services.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointResults.ErrorSummary">
            <summary>
            Gets the error summary.
            </summary>
            <value>The error summary.</value>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointResults.CreateFromXml(System.String)">
            <summary>
            Creates from XML.
            </summary>
            <param name="xmlString">The XML string.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointResults.CreateFromXml(System.Xml.XmlNode)">
            <summary>
            Creates from XML.
            </summary>
            <param name="xmlNode">The XML node.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointResults.GetAllLogEntries">
            <summary>
            Gets all log entries.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointResults.WriteAllLogEntriesToLog">
            <summary>
            Writes all log entries to log.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointResults.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointResults.WriteAdHocValuesAsServiceInfo(System.Xml.XmlWriter,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Add ad hoc, non Service related, values to the Services table. This method must be called 
            from this.WriteXml() (above), just before the call to writer.WriteEndElement() // &lt;/MonitoredServices&gt;
            Examples: 
               WriteAdHocValuesAsServiceInfo(writer, "Test Success", "Info", "This is a success message", true);
               WriteAdHocValuesAsServiceInfo(writer, "Test Failure", "Error", "This is a failure message", false);
            ChkNum
            </summary>
            <param name="writer">Open xml writer within MonitoredServices node.</param>
            <param name="service">Name that appears in Service column.</param>
            <param name="severity">Severity of message, e.g., Information, Exception, Critical.</param>
            <param name="message">Text that appears in the message column.</param>
            <param name="success">True for Green, False for Red.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointResults.LoadFromInstance(IDS.SignalPoint.SignalPointResults)">
            <summary>
            This is an internal method that initializes this instance with the values from another instance.
            This is to assist with lazy caching values.
            </summary>
            <param name="results"></param>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointResults.GetErrorSummary(System.String,System.String)">
            <summary>
            Gets the error summary.
            </summary>
            <param name="nameFormatString">The name format string.</param>
            <param name="logEntryFormatString">The log entry format string.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.SignalPoint.SignalPointResultsCollection">
            <summary>
            The SignalPointResultsCollection class contains a collection of <see cref="T:IDS.SignalPoint.SignalPointResults"/> objects.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointResultsCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.SignalPointResultsCollection"/> class.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointResultsCollection.#ctor(System.Collections.Generic.IEnumerable{IDS.SignalPoint.SignalPointResults})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.SignalPointResultsCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointResultsCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.SignalPointResultsCollection"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="T:IDS.SignalPoint.SignalPointService">
            <summary>
            The SignalPointService encapsulate all of the logic necessary for calculating and
            accummulating critical performance counters and monitoring external resources.
            This class can be used as a Portal service and implements an IHttpHandler
            which returns the results as XML.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointService.#ctor">
            <summary>
            Creates an instance of the SignalPointService class.
            </summary>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.SqlConnectionService">
            <summary>
            Gets or sets the SQL connection service.
            </summary>
            <value>The SQL connection service.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.EmailService">
            <summary>
            Gets or sets the email service.
            </summary>
            <value>The email service.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.AutoMonitor">
            <summary>
            Gets or sets a value indicating whether [auto monitor].
            </summary>
            <value><c>true</c> if [auto monitor]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.MonitorInternalMinutes">
            <summary>
            Gets or sets the monitor internal minutes.
            </summary>
            <value>The monitor internal minutes.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.RetryInternalMinutes">
            <summary>
            Gets or sets the retry internal minutes.
            </summary>
            <value>The retry internal minutes.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.PrimaryFailureCount">
            <summary>
            Gets or sets the primary failure count.
            </summary>
            <value>The primary failure count.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.PrimaryEmailGroup">
            <summary>
            Gets or sets the primary email group.
            </summary>
            <value>The primary email group.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.SecondaryFailureCount">
            <summary>
            Gets or sets the secondary failure count.
            </summary>
            <value>The secondary failure count.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.SecondaryEmailGroup">
            <summary>
            Gets or sets the secondary email group.
            </summary>
            <value>The secondary email group.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.TertiaryFailureCount">
            <summary>
            Gets or sets the tertiary failure count.
            </summary>
            <value>The tertiary failure count.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.TertiaryEmailGroup">
            <summary>
            Gets or sets the tertiary email group.
            </summary>
            <value>The tertiary email group.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.EmailSubject">
            <summary>
            Gets or sets the email subject.
            </summary>
            <value>The email subject.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.FailureEmailBodyTemplate">
            <summary>
            Gets or sets the failure email body template.
            </summary>
            <value>The failure email body template.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.SuccessEmailBodyTemplate">
            <summary>
            Gets or sets the success email body template.
            </summary>
            <value>The success email body template.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.SeverityThreshold">
            <summary>
            Gets or sets the severity threshold.
            </summary>
            <value>The severity threshold.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.PerformanceCounters">
            <summary>
            configurable performance counters
            </summary>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.ProcessorUtilizationMax">
            <summary>
            Gets or sets the processor utilization max.
            </summary>
            <value>The processor utilization max.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.ProcessorUtilizationFailureSeverity">
            <summary>
            Gets or sets the processor utilization failure severity.
            </summary>
            <value>The processor utilization failure severity.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.SessionsMax">
            <summary>
            Gets or sets the sessions max.
            </summary>
            <value>The sessions max.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.SessionFailureSeverity">
            <summary>
            Gets or sets the session failure severity.
            </summary>
            <value>The session failure severity.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.RequestsCurrentMax">
            <summary>
            Gets or sets the requests current max.
            </summary>
            <value>The requests current max.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.RequestsCurrentFailureSeverity">
            <summary>
            Gets or sets the requests current failure severity.
            </summary>
            <value>The requests current failure severity.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.RequestsExecutionTimeMax">
            <summary>
            Gets or sets the requests execution time max.
            </summary>
            <value>The requests execution time max.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.RequestsExecutionTimeFailureSeverity">
            <summary>
            Gets or sets the requests execution time failure severity.
            </summary>
            <value>The requests execution time failure severity.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.RequestsQueuedMax">
            <summary>
            Gets or sets the requests queued max.
            </summary>
            <value>The requests queued max.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.RequestsQueuedFailureSeverity">
            <summary>
            Gets or sets the requests queued failure severity.
            </summary>
            <value>The requests queued failure severity.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.RequestsWPQueueMax">
            <summary>
            Gets or sets the requests WP queue max.
            </summary>
            <value>The requests WP queue max.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.RequestsWPQueueFailureSeverity">
            <summary>
            Gets or sets the requests WP queue failure severity.
            </summary>
            <value>The requests WP queue failure severity.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.RequestWaitTimeMax">
            <summary>
            Gets or sets the request wait time max.
            </summary>
            <value>The request wait time max.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.RequestWaitTimeFailureSeverity">
            <summary>
            Gets or sets the request wait time failure severity.
            </summary>
            <value>The request wait time failure severity.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.PhysicalMemoryAvailableMin">
            <summary>
            Gets or sets the physical memory available min.
            </summary>
            <value>The physical memory available min.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.PhysicalMemoryAvailableFailureSeverity">
            <summary>
            Gets or sets the physical memory available failure severity.
            </summary>
            <value>The physical memory available failure severity.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.DiskSpaceMin">
            <summary>
            Gets or sets the disk space min.
            </summary>
            <value>The disk space min.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.DiskSpaceFailureSeverity">
            <summary>
            Gets or sets the disk space failure severity.
            </summary>
            <value>The disk space failure severity.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.HostName">
            <summary>
            Gets the name of the host.
            </summary>
            <value>The name of the host.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.HostIPAddress">
            <summary>
            Gets the host IP address.
            </summary>
            <value>The host IP address.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.FailureCount">
            <summary>
            Gets or sets the failure count.
            </summary>
            <value>The failure count.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.SyncRoot">
            <summary>
            Gets the sync root.
            </summary>
            <value>The sync root.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.MonitoringSuspended">
            <summary>
            Gets a value indicating whether [monitoring suspended].
            </summary>
            <value><c>true</c> if [monitoring suspended]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.DataService">
            <summary>
            Gets the data service.
            </summary>
            <value>The data service.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.DatabaseEnabled">
            <summary>
            Gets a value indicating whether writing to the database is enabled.
            </summary>
            <value><c>true</c> if [database enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.InMaintenancePeriod">
            <summary>
            Gets a value indicating whether [in maintenance period].
            </summary>
            <value><c>true</c> if [in maintenance period]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointService.GetResults">
            <summary>
            The GetResults() method returns the SignalPoint results.
            </summary>
            <returns>
            Returns a SignalPointResults instance with the results of the monitoring analysis.
            </returns>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointService.GetMonitoredServices">
            <summary>
            An abstract method that gets the monitored services.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointService.WriteStartDocument(System.Xml.XmlTextWriter)">
            <summary>
            Writes the XML start document element. It can be overwritten in a inherited class to write 
            XML such as stylesheet headers to the XML after the start document.
            </summary>
            <param name="writer">The XML writer.</param>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointService.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="P:IDS.SignalPoint.SignalPointService.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointService.LoadSettings(IDS.ComponentModel.ComponentSettings,System.Globalization.CultureInfo)">
            <summary>
            Loads the Component settings.
            </summary>
            <param name="settings">The Component settings.</param>
            <param name="culture">The culture of the Component settings.</param>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointService.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:IDS.SignalPoint.SignalPointService.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:IDS.SignalPoint.PerformanceCounterConfiguration">
            <summary>
            settings for perf mon counter confgi
            </summary>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounterConfiguration.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounterConfiguration.CategoryName">
            <summary>
            Gets the name of the category.
            </summary>
            <value>The name of the category.</value>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounterConfiguration.CounterName">
            <summary>
            Gets the name of the counter.
            </summary>
            <value>The name of the counter.</value>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounterConfiguration.InstanceName">
            <summary>
            Gets the name of the instance.
            </summary>
            <value>The name of the instance.</value>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounterConfiguration.Threshold">
            <summary>
            Gets the threshold.
            </summary>
            <value>The threshold.</value>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounterConfiguration.FailureSeverity">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.SignalPoint.PerformanceCounterConfiguration.CompareMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.SignalPoint.SqlConnectionMonitorService">
            <summary>
            The SqlConnectionMonitorService allows SignalPoint to monitor a SQL Server connection.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.SqlConnectionMonitorService.#ctor">
            <summary>
            Creates an instance of the SqlConnectionMonitorService class.
            </summary>
        </member>
        <member name="P:IDS.SignalPoint.SqlConnectionMonitorService.SqlConnectionService">
            <summary>
            Gets or sets the SQL connection service.
            </summary>
            <value>The SQL connection service.</value>
        </member>
        <member name="P:IDS.SignalPoint.SqlConnectionMonitorService.StoredProcedureToExecute">
            <summary>
            Gets or sets the stored procedure to execute.
            </summary>
            <value>The stored procedure to execute.</value>
        </member>
        <member name="M:IDS.SignalPoint.SqlConnectionMonitorService.CheckHealth">
            <summary>
            The CheckHealth method is responsible for validating the health of a SignalPoint
            service.
            </summary>
            <returns>
            Returns a LogEntryCollection that can contain a combination of information, warnings
            and exceptions.
            </returns>
            <remarks>
            The CheckHealth method is responsible for validating the health of a SignalPoint
            service. The method returns a LogEntryCollection which contains a collection of log entries.
            The LogEntryCollection can contain zero LogEntries but it must never be null. The CheckHealth()
            method will populate this collection with log entries. These entries can be informational,
            warnings, exceptions or other types of information. The SignalPoint module will interate
            through this collection and display the log entries on its monitoring page. The SignalPoint
            module will be configured to determine the minimum acceptable severity (IDS.Logging.LogSeverity)
            and possibly the minimum display severity. For example, if the minimum acceptable severity was configured as Exception, severities of Warnings, Information, Debug and Unspecified would be considered acceptable and would not cause SignalPoint to signal a failure. Only severities of Exception and Critical would cause a failure. This same logic could be used to determine what log entries to display on the SignalPoint monitoring page.
            </remarks>
        </member>
        <member name="T:IDS.SignalPoint.SqlDataService">
            <summary>
            The SqlDataService provides the data layer for accessing the data source for storing and retrieving
            SignalPoint monitored results in SQL Server.
            </summary>
        </member>
        <member name="T:IDS.SignalPoint.SqlDataService.SuccessSearchType">
            <summary>
            The SuccessSearchType enumeration is used to search monitored results.
            </summary>
        </member>
        <member name="F:IDS.SignalPoint.SqlDataService.SuccessSearchType.SearchAll">
            <summary>
            Search all results both successful and failures
            </summary>
        </member>
        <member name="F:IDS.SignalPoint.SqlDataService.SuccessSearchType.SearchSuccessfulOnly">
            <summary>
            Search only successful results
            </summary>
        </member>
        <member name="F:IDS.SignalPoint.SqlDataService.SuccessSearchType.SearchFailuresOnly">
            <summary>
            Search only failures
            </summary>
        </member>
        <member name="T:IDS.SignalPoint.SqlDataService.ResultsDateTimeRange">
            <summary>
            ResultsDateTimeRange
            </summary>
        </member>
        <member name="F:IDS.SignalPoint.SqlDataService.ResultsDateTimeRange.MinimumDateTime">
            <summary>
            The minimum date and time in the date range.
            </summary>
        </member>
        <member name="F:IDS.SignalPoint.SqlDataService.ResultsDateTimeRange.MaximumDateTime">
            <summary>
            The maximum date and time in the date range.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.ResultsDateTimeRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.SignalPoint.SqlDataService.ResultsDateTimeRange"/> class.
            </summary>
            <param name="minimumDateTime">The minimum date time.</param>
            <param name="maximumDateTime">The maximum date time.</param>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.#ctor(IDS.Data.SqlConnectionService)">
            <summary>
            Create an instance of the DataService class.
            </summary>
            <param name="connectionService">The SQL connection service to use to access the database.</param>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.#ctor(System.String)">
            <summary>
            Create an instance of the DataService class. This constructor uses the default Dataspace.
            </summary>
            <param name="connectionString">The connection string to use to access the database.</param>
        </member>
        <member name="P:IDS.SignalPoint.SqlDataService.SqlConnectionService">
            <summary>
            Gets the SQL connection service.
            </summary>
            <value>The SQL connection service.</value>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.WriteMonitoredResults(IDS.SignalPoint.SignalPointResults)">
            <summary>
            Writes the monitored results.
            </summary>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.ReadMonitoredResults(System.Guid)">
            <summary>
            Reads the monitored results.
            </summary>
            <param name="resultsId">The results id.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.SearchMonitoredResults(System.String,System.String,System.DateTime,System.DateTime,IDS.SignalPoint.SqlDataService.SuccessSearchType)">
            <summary>
            Searches the monitored results.
            </summary>
            <param name="serverName">Name of the server.</param>
            <param name="sourceIP">The source IP.</param>
            <param name="dateFrom">The date from.</param>
            <param name="dateTo">The date to.</param>
            <param name="searchType">Type of the search.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.ReadRecentFailures">
            <summary>
            Reads the recent failures.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.ReadRecentFailures(System.String)">
            <summary>
            Reads the recent failures.
            </summary>
            <param name="serverName">Name of the server.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.ReadRecentFailures(System.String,System.DateTime)">
            <summary>
            Reads the recent failures.
            </summary>
            <param name="serverName">Name of the server.</param>
            <param name="dateFrom">The date from.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.ReadUniqueServerNames">
            <summary>
            Reads the unique server names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.ReadUniqueSourceIPs">
            <summary>
            Reads the unique source I ps.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.ReadResultDateTimeRange">
            <summary>
            Reads the result date time range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.IsMonitoringSuspended">
            <summary>
            Determines whether [is monitoring suspended].
            </summary>
            <returns>
            	<c>true</c> if [is monitoring suspended]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.SuspendMonitoring">
            <summary>
            Suspends the monitoring.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.ResumeMonitoring">
            <summary>
            Resumes the monitoring.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.AddMaintenancePeriod(IDS.SignalPoint.MaintenancePeriod)">
            <summary>
            Adds the maintenance period.
            </summary>
            <param name="maintenancePeriod">The maintenance period.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.ReadMaintenancePeriod(System.Guid)">
            <summary>
            Reads the maintenance period.
            </summary>
            <param name="maintenancePeriodId">The maintenance period id.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.DeleteMaintenancePeriod(IDS.SignalPoint.MaintenancePeriod)">
            <summary>
            Deletes the maintenance period.
            </summary>
            <param name="maintenancePeriod">The maintenance period.</param>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.DeleteMaintenancePeriod(System.Guid)">
            <summary>
            Deletes the maintenance period.
            </summary>
            <param name="maintenancePeriodId">The maintenance period id.</param>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.ReadMaintenancePeriods(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Reads the maintenance periods.
            </summary>
            <param name="dateFrom">The date from.</param>
            <param name="dateTo">The date to.</param>
            <param name="includeManualSuspensions">if set to <c>true</c> [include manual suspensions].</param>
            <returns></returns>
        </member>
        <member name="M:IDS.SignalPoint.SqlDataService.ReadActiveMaintenancePeriods">
            <summary>
            Reads the active maintenance periods.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.SignalPoint.WorkerProcessItem">
            <summary>
            The WorkerProcessItem is an internal class for retrieving results from remote
            SignalPoint servers. This class is expected to be added to the ThreadPool as
            a queued user work item.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.WorkerProcessItem.#ctor(System.String,System.Int32)">
            <summary>
            Create an instance of the WorkerProcessItem.
            </summary>
            <param name="url">The URL of the remote SignalPoint service.</param>
            <param name="requestTimeoutSeconds">The request timeout seconds.</param>
        </member>
        <member name="P:IDS.SignalPoint.WorkerProcessItem.Results">
            <summary>
            Gets the SignalPoint results returned from the remote SignalPoint service.
            </summary>
        </member>
        <member name="P:IDS.SignalPoint.WorkerProcessItem.WaitHandle">
            <summary>
            Gets a wait handle that can be used to wait for this worker process item to finish processing.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.WorkerProcessItem.Run">
            <summary>
            Runs the process. This method gets the results from the remote server.
            </summary>
        </member>
        <member name="M:IDS.SignalPoint.WorkerProcessItem.Run(System.Object)">
            <summary>
            Runs the process. This method gets the results from the remote server.
            </summary>
            <param name="target">The target parameter is not used. It is provided for compatibility
            with the WaitCallback delegate.</param>
        </member>
        <member name="M:IDS.SignalPoint.WorkerProcessItem.GetResultsFromServer(System.String)">
            <summary>
            A private method that does all of the work of getting the results from the server.
            </summary>
            <param name="url">The URL to the remote SignalPoint web service.</param>
            <returns>Returns a SignalPoint results object.</returns>
        </member>
        <member name="M:IDS.SignalPoint.WorkerProcessItem.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:IDS.SignalPoint.WorkerProcessItem.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:IDS.SitePromotion.CannotOpenFileException">
            <summary>Indicates a file could not be added. Generally used if a file can not be opened for add, edit, delete, or integrate in a perforce changelist</summary>
            <remarks>The SPT modules will likely catch these exception types to better inform the user that its a perforce issue, ie somebody else has this file open</remarks>
        </member>
        <member name="M:IDS.SitePromotion.CannotOpenFileException.#ctor">
            <summary>Initializes a new instance of the CannotAddFileException class</summary>
        </member>
        <member name="M:IDS.SitePromotion.CannotOpenFileException.#ctor(System.String)">
            <summary>Initializes a new instance of the CannotAddFileException class</summary>
        </member>
        <member name="T:IDS.SitePromotion.IConfiguration">
            <summary>
            A configuration is the entire set of configuration data for a <see cref="T:IDS.SitePromotion.ISite">site</see>. 
            </summary>
        </member>
        <member name="P:IDS.SitePromotion.IConfiguration.VolatileConfigurationItems">
            <summary>
            Gets the volatile configuration items.
            </summary>
            <value>The volatile configuration items.</value>
        </member>
        <member name="P:IDS.SitePromotion.IConfiguration.NonVolatileConfigurationItems">
            <summary>
            Gets the non volatile configuration items.
            </summary>
            <value>The non volatile configuration items.</value>
        </member>
        <member name="P:IDS.SitePromotion.IConfiguration.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:IDS.SitePromotion.IConfigurationItem">
            <summary>
            A configuration item is a logical set of configuration data.  The data may be 
            <see cref="T:IDS.SitePromotion.IConfiguration">configuration</see>-neutral or it may belong
            to a particular <see cref="T:IDS.SitePromotion.IConfiguration">configuration</see>
            (see <see cref="T:IDS.SitePromotion.IVolatileConfigurationItem"/>).
            </summary>
            <seealso cref="T:IDS.SitePromotion.IConfiguration"/>
            <seealso cref="T:IDS.SitePromotion.IVolatileConfigurationItem"/>
        </member>
        <member name="P:IDS.SitePromotion.IConfigurationItem.ConfigurationData">
            <summary>
            Gets or sets the data for this configuration item.
            </summary>
            <value>The data for this configuration item.</value>
        </member>
        <member name="P:IDS.SitePromotion.IConfigurationItem.Name">
            <summary>
            Gets or sets the name of this configuration item.
            </summary>
            <value>The name of this configuration item.</value>
        </member>
        <member name="T:IDS.SitePromotion.IConfigurationItemRevision">
            <summary>
            A configuration item revision represents a single 
            version of a <see cref="T:IDS.SitePromotion.IConfigurationItem">configuration item</see>.
            It has a reference to the prior revision to aid in determining what was changed.
            </summary>
        </member>
        <member name="P:IDS.SitePromotion.IConfigurationItemRevision.PreviousConfigurationItem">
            <summary>
            Gets or sets the previous configuration item.
            </summary>
            <value>The previous configuration item.</value>
        </member>
        <member name="P:IDS.SitePromotion.IConfigurationItemRevision.PreviousVersion">
            <summary>
            Gets or sets the previous version.
            </summary>
            <value>The previous version.</value>
        </member>
        <member name="T:IDS.SitePromotion.ISite">
            <summary>
            A site is a distinct physical deployment of an application.  A given site
            contains one or more <see cref="T:IDS.SitePromotion.IConfiguration">configurations</see>, has
            an identifier, a name, and a description and can have its configuration transferred
            to or from another site.  A site also has a log of changes and tranfers that have affected the site.
            </summary>
        </member>
        <member name="P:IDS.SitePromotion.ISite.SiteID">
            <summary>
            Gets or sets this site's identifier.
            </summary>
            <value>The identifier for this site.</value>
        </member>
        <member name="P:IDS.SitePromotion.ISite.Name">
            <summary>
            Gets or sets this site's name.
            </summary>
            <value>The name of this site.</value>
        </member>
        <member name="P:IDS.SitePromotion.ISite.Description">
            <summary>
            Gets or sets a short description of this site.
            </summary>
            <value>The description of this site.</value>
        </member>
        <member name="P:IDS.SitePromotion.ISite.CurrentVersion">
            <summary>
            Gets or sets the current version.
            </summary>
            <value>The current version.</value>
        </member>
        <member name="P:IDS.SitePromotion.ISite.Configurations">
            <summary>
            Gets or sets the configurations that are defined in this site.
            </summary>
            <value>The configurations that are defined in this site.</value>
        </member>
        <member name="M:IDS.SitePromotion.ISite.TransferTo(IDS.SitePromotion.ISite,System.String,System.String)">
            <summary>
            Transfers this site's configuration to another's.
            </summary>
            <param name="destinationSite">The destination site.</param>
            <param name="user">The identifier of the user performing the transfer.</param>
            <param name="description">A brief description of what is being transferred.</param>
        </member>
        <member name="M:IDS.SitePromotion.ISite.TransferFrom(IDS.SitePromotion.ISite,System.String,System.String)">
            <summary>
            Transfers another site's configuration to this site's.
            </summary>
            <param name="sourceSite">The source site.</param>
            <param name="user">The identifier of the user performing the transfer.</param>
            <param name="description">A brief description of what is being transferred.</param>
        </member>
        <member name="M:IDS.SitePromotion.ISite.GetTransferHistory">
            <summary>
            Retrieves the history of transfers from this site to any other site.
            </summary>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteTransferHistoryItem">transfer history items</see>
            detailing the transfers from this site to any other site that have occurred.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISite.GetTransferHistory(IDS.SitePromotion.ISite)">
            <summary>
            Retrieves the history of transfers from this site to the specified site.
            </summary>
            <param name="destinationSite">The destination site.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteTransferHistoryItem">transfer history items</see>
            detailing the transfers from this site to the 
            <paramref name="destinationSite"/> that have occurred.
            </returns>		
        </member>
        <member name="M:IDS.SitePromotion.ISite.GetChangeHistory">
            <summary>
            Retrieves the changes that have been made to this site.
            </summary>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to this site.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISite.GetChangeHistory(System.Nullable{System.Int32})">
            <summary>
            Retrieves the changes that have been made to this site.
            </summary>
            <param name="maxResults">The maximum number of results to return.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to this site.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISite.GetChangeHistory(System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves the changes that have been made to this site.
            </summary>
            <param name="maxResults">The maximum number of results to return.</param>
            <param name="user">The user whose changes should be returned.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to this site.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISite.GetChangeHistory(System.DateTime,System.Nullable{System.Boolean})">
            <summary>
            Retrieves the changes that have been made to this site 
            since the specified point in time.
            </summary>
            <param name="startDateUtc">The UTC date and time of the earliest change that should be retrieved.</param>
            <param name="inclusive">If set to <see langword="true"/>, <paramref name="startDateUtc"/> should be treated as inclusive.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to this site since <paramref name="startDateUtc"/>.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISite.GetChangeHistory(System.DateTime,System.DateTime,System.Nullable{System.Boolean})">
            <summary>
            Retrieves the changes that have been made to this site
            within the specified date range.
            </summary>
            <param name="startDateUtc">The UTC date and time of the earliest change that should be retrieved.</param>
            <param name="endDateUtc">The UTC date and time of the latest change that should be retrieved.</param>
            <param name="inclusive">If set to <see langword="true"/>, date specifiers should be treated as inclusive.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to this site between <paramref name="startDateUtc"/>
            and <paramref name="endDateUtc"/>.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISite.GetChangeHistory(System.DateTime,System.DateTime,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Retrieves the changes that have been made to this site
            within the specified date range, and limited to the specified maximum number of results.
            </summary>
            <param name="startDateUtc">The UTC date and time of the earliest change that should be retrieved.</param>
            <param name="endDateUtc">The UTC date and time of the latest change that should be retrieved.</param>
            <param name="inclusive">If set to <see langword="true"/>, date specifiers should be treated as inclusive.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to this site.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISite.GetChangeHistory(System.DateTime,System.DateTime,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves the changes that have been made to this site
            within the specified date range, limited to the specified maximum number of results and/or
            changes by the specified user.
            </summary>
            <param name="startDateUtc">The UTC date and time of the earliest change that should be retrieved.</param>
            <param name="endDateUtc">The UTC date and time of the latest change that should be retrieved.</param>
            <param name="inclusive">If set to <see langword="true"/>, date specifiers should be treated as inclusive.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <param name="user">The user whose changes should be returned.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to this site.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISite.GetChangeHistory(System.String,System.Nullable{System.Boolean})">
            <summary>
            Retrieves the changes that have been made to this site.
            </summary>
            <param name="startVersion">The version (<see cref="P:IDS.SitePromotion.ISiteChangeHistoryItem.SiteChangeHistoryItemID"/>) of the earliest change that should be retrieved.</param>
            <param name="inclusive">If set to <see langword="true"/>, <paramref name="startVersion"/> should be treated as inclusive.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to this site.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISite.GetChangeHistory(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Retrieves the changes that have been made to this site.
            </summary>
            <param name="startVersion">The version (<see cref="P:IDS.SitePromotion.ISiteChangeHistoryItem.SiteChangeHistoryItemID"/>) of the earliest change that should be retrieved.</param>
            <param name="endVersion">The version (<see cref="P:IDS.SitePromotion.ISiteChangeHistoryItem.SiteChangeHistoryItemID"/>) of the latest change that should be retrieved.</param>
            <param name="inclusive">If set to <see langword="true"/>, version ranges should be treated as inclusive.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to this site.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISite.GetChangeHistory(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Retrieves the changes that have been made to this site.
            </summary>
            <param name="startVersion">The version (<see cref="P:IDS.SitePromotion.ISiteChangeHistoryItem.SiteChangeHistoryItemID"/>) of the earliest change that should be retrieved.</param>
            <param name="endVersion">The version (<see cref="P:IDS.SitePromotion.ISiteChangeHistoryItem.SiteChangeHistoryItemID"/>) of the latest change that should be retrieved.</param>
            <param name="inclusive">If set to <see langword="true"/>, version ranges should be treated as inclusive.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to this site.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISite.GetChangeHistory(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves the changes that have been made to this site.
            </summary>
            <param name="startVersion">The version (<see cref="P:IDS.SitePromotion.ISiteChangeHistoryItem.SiteChangeHistoryItemID"/>) of the earliest change that should be retrieved.</param>
            <param name="endVersion">The version (<see cref="P:IDS.SitePromotion.ISiteChangeHistoryItem.SiteChangeHistoryItemID"/>) of the latest change that should be retrieved.</param>
            <param name="inclusive">If set to <see langword="true"/>, version ranges should be treated as inclusive.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <param name="user">The user whose changes should be returned.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to this site.
            </returns>
        </member>
        <member name="T:IDS.SitePromotion.ISiteChangeHistoryItem">
            <summary>
            A site change history item is a change that was made to a <see cref="T:IDS.SitePromotion.ISite">site</see>.
            It includes information about when the change was made, 
            what <see cref="T:IDS.SitePromotion.IConfigurationItemRevision">data</see> was changed, who made the change, who approved the change
            for transfer to another site, a descriptive summary of the change, and a unique identifier for the change.
            </summary>
        </member>
        <member name="P:IDS.SitePromotion.ISiteChangeHistoryItem.AffectedConfigurationItems">
            <summary>
            Gets or sets the affected configuration items.
            </summary>
            <value>The affected configuration items.</value>
        </member>
        <member name="P:IDS.SitePromotion.ISiteChangeHistoryItem.DateUtc">
            <summary>
            Gets or sets the UTC date and time that the change was made.
            </summary>
            <value>The UTC date and time that the change was made.</value>
        </member>
        <member name="P:IDS.SitePromotion.ISiteChangeHistoryItem.Description">
            <summary>
            Gets or sets the description of the change that was made.
            </summary>
            <value>The description of the change that was made.</value>
            <remarks>
            For the best results, this value should be a meaningful and descriptive
            summary of what was changed.
            </remarks>
        </member>
        <member name="P:IDS.SitePromotion.ISiteChangeHistoryItem.IsReadyForTransfer">
            <summary>
            Gets or sets whether this change is ready for transfer
            to another <see cref="T:IDS.SitePromotion.ISite">site</see>.
            </summary>
            <value>
            <see langword="true"/>if this change is ready for transfer
            to another <see cref="T:IDS.SitePromotion.ISite">site</see>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:IDS.SitePromotion.ISiteChangeHistoryItem.TransferApprover">
            <summary>
            Gets or sets the name of the person who approved the change 
            for transfer to another <see cref="T:IDS.SitePromotion.ISite">site</see>.
            </summary>
            <value>The transfer approver.</value>
        </member>
        <member name="P:IDS.SitePromotion.ISiteChangeHistoryItem.User">
            <summary>
            Gets or sets the name of the user who made the change.
            </summary>
            <value>The user who made the change.</value>
        </member>
        <member name="P:IDS.SitePromotion.ISiteChangeHistoryItem.SiteChangeHistoryItemID">
            <summary>
            Gets or sets the unique identifier for the change.
            </summary>
            <value>The unique identifier for the change.</value>
        </member>
        <member name="M:IDS.SitePromotion.ISiteChangeHistoryItem.Approve(System.String)">
            <summary>
            Approves the change history item for transfer to another site.
            </summary>
            <param name="approver">The identifier for the person who approved item for transfer.</param>
        </member>
        <member name="T:IDS.SitePromotion.ISiteManager">
            <summary>
            A site manager provides access to the <see cref="T:IDS.SitePromotion.ISite">sites</see>
            and their related data in the data store.  It also manages the transfer 
            of one <see cref="T:IDS.SitePromotion.ISite">site's</see> configuration to another's.
            </summary>
            <seealso cref="T:IDS.SitePromotion.ISite"/>
            <seealso cref="T:IDS.SitePromotion.ISiteChangeHistoryItem"/>
            <seealso cref="T:IDS.SitePromotion.ISiteTransferHistoryItem"/>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.TransferConfiguration(IDS.SitePromotion.ISite,IDS.SitePromotion.ISite,System.String,System.String)">
            <summary>
            Transfers the one <see cref="T:IDS.SitePromotion.ISite">site's</see> configuration to another's.
            </summary>
            <param name="sourceSite">The source site.</param>
            <param name="destinationSite">The destination site.</param>
            <param name="user">The identifier of the user performing the transfer.</param>
            <param name="description">A brief description of what is being transferred.</param>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.CreateSite(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:IDS.SitePromotion.ISite">site</see>.
            </summary>
            <param name="name">The name of the new site.</param>
            <param name="user">The identifier of the user creating the site.</param>
            <returns>An <see cref="T:IDS.SitePromotion.ISite"/> representing the newly created site.</returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetSites">
            <summary>
            Retrieves a list of all the <see cref="T:IDS.SitePromotion.ISite">sites</see> in the datastore.
            </summary>
            <returns>A list of all the <see cref="T:IDS.SitePromotion.ISite">sites</see> in the datastore.</returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetSite(System.String)">
            <summary>
            Retrieves the data for the specified <see cref="T:IDS.SitePromotion.ISite">site</see>.
            </summary>
            <param name="siteID">The identifier for the desired site.</param>
            <returns>An <see cref="T:IDS.SitePromotion.ISite"/> representing the site identified by <paramref name="siteID"/>.</returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetTransferHistory(IDS.SitePromotion.ISite,IDS.SitePromotion.ISite)">
            <summary>
            Retrieves the history of transfers between two <see cref="T:IDS.SitePromotion.ISite">sites</see>.
            </summary>
            <param name="sourceSite">The source site.</param>
            <param name="destinationSite">The destination site.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteTransferHistoryItem">transfer history items</see>
            detailing the transfers from the <paramref name="sourceSite"/> to the 
            <paramref name="destinationSite"/> that have occurred.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetTransferHistory(IDS.SitePromotion.ISite,IDS.SitePromotion.ISite,System.Boolean)">
            <summary>
            Retrieves the history of transfers between two <see cref="T:IDS.SitePromotion.ISite">sites</see>, optionally 
            including transfers in both directions.
            </summary>
            <param name="site1">The first site to consider.</param>
            <param name="site2">The second site to consider.</param>
            <param name="bidirectional">If <see langword="true"/>, return all transfers regardless of transfer direction.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteTransferHistoryItem">transfer history items</see>
            detailing the transfers from <paramref name="site1"/> to 
            <paramref name="site2"/> that have occurred. If <paramref name="bidirectional" />
            is <see langword="true" />, the resulting list also contains transfer history
            items for transfers from <paramref name="site2"/> to <paramref name="site1"/>.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetTransferHistory(IDS.SitePromotion.ISite)">
            <summary>
            Retrieves the history of transfers from the specified <see cref="T:IDS.SitePromotion.ISite">site</see>.
            </summary>
            <param name="sourceSite">The source site.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteTransferHistoryItem">transfer history items</see>
            detailing the transfers from the <paramref name="sourceSite"/> to any other site
            that have occurred.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetSiteChangeHistory(IDS.SitePromotion.ISite)">
            <summary>
            Retrieves the changes that have been made to the specified <see cref="T:IDS.SitePromotion.ISite">site</see>.
            </summary>
            <param name="site">The site for which the change history is to be retrieved.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to <paramref name="site"/>.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetSiteChangeHistory(IDS.SitePromotion.ISite,System.Nullable{System.Int32})">
            <summary>
            Retrieves the changes that have been made to the specified <see cref="T:IDS.SitePromotion.ISite">site</see>.
            </summary>
            <param name="site">The site for which the change history is to be retrieved.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to <paramref name="site"/>.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetSiteChangeHistory(IDS.SitePromotion.ISite,System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves the changes that have been made to the specified <see cref="T:IDS.SitePromotion.ISite">site</see>.
            </summary>
            <param name="site">The site for which the change history is to be retrieved.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <param name="user">The user whose changes should be returned.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to <paramref name="site"/>.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetSiteChangeHistory(IDS.SitePromotion.ISite,System.DateTime,System.Nullable{System.Boolean})">
            <summary>
            Retrieves the changes that have been made to the specified <see cref="T:IDS.SitePromotion.ISite">site</see>
            since the specified point in time.
            </summary>
            <param name="site">The site for which the change history is to be retrieved.</param>
            <param name="startDateUtc">The UTC date and time of the earliest change that should be retrieved.</param>
            <param name="inclusive">If set to <see langword="true"/>, <paramref name="startDateUtc"/> should be treated as inclusive.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to <paramref name="site"/> since <paramref name="startDateUtc"/>.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetSiteChangeHistory(IDS.SitePromotion.ISite,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean})">
            <summary>
            Retrieves the changes that have been made to the specified <see cref="T:IDS.SitePromotion.ISite">site</see>
            within the specified date range.
            </summary>
            <param name="site">The site for which the change history is to be retrieved.</param>
            <param name="startDateUtc">The UTC date and time of the earliest change that should be retrieved.</param>
            <param name="endDateUtc">The UTC date and time of the latest change that should be retrieved.</param>
            <param name="inclusive">If set to <see langword="true"/>, date specifiers should be treated as inclusive.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to <paramref name="site"/> between <paramref name="startDateUtc"/>
            and <paramref name="endDateUtc"/>.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetSiteChangeHistory(IDS.SitePromotion.ISite,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Retrieves the changes that have been made to the specified <see cref="T:IDS.SitePromotion.ISite">site</see>
            within the specified date range, and limited to the specified maximum number of results.
            </summary>
            <param name="site">The site for which the change history is to be retrieved.</param>
            <param name="startDateUtc">The UTC date and time of the earliest change that should be retrieved.</param>
            <param name="endDateUtc">The UTC date and time of the latest change that should be retrieved.</param>
            <param name="inclusive">If set to <see langword="true"/>, date specifiers should be treated as inclusive.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to <paramref name="site"/>.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetSiteChangeHistory(IDS.SitePromotion.ISite,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves the changes that have been made to the specified <see cref="T:IDS.SitePromotion.ISite">site</see>
            within the specified date range, limited to the specified maximum number of results and/or
            changes by the specified user.
            </summary>
            <param name="site">The site for which the change history is to be retrieved.</param>
            <param name="startDateUtc">The UTC date and time of the earliest change that should be retrieved.</param>
            <param name="endDateUtc">The UTC date and time of the latest change that should be retrieved.</param>
            <param name="inclusive">If set to <see langword="true"/>, date specifiers should be treated as inclusive.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <param name="user">The user whose changes should be returned.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to <paramref name="site"/>.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetSiteChangeHistory(IDS.SitePromotion.ISite,System.String,System.Nullable{System.Boolean})">
            <summary>
            Retrieves the changes that have been made to the specified <see cref="T:IDS.SitePromotion.ISite">site</see>.
            </summary>
            <param name="site">The site for which the change history is to be retrieved.</param>
            <param name="startVersion">The version (<see cref="P:IDS.SitePromotion.ISiteChangeHistoryItem.SiteChangeHistoryItemID"/>) of the earliest change that should be retrieved.</param>
            <param name="inclusive">If set to <see langword="true"/>, <paramref name="startVersion"/> should be treated as inclusive.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to <paramref name="site"/>.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetSiteChangeHistory(IDS.SitePromotion.ISite,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Retrieves the changes that have been made to the specified <see cref="T:IDS.SitePromotion.ISite">site</see>.
            </summary>
            <param name="site">The site for which the change history is to be retrieved.</param>
            <param name="startVersion">The version (<see cref="P:IDS.SitePromotion.ISiteChangeHistoryItem.SiteChangeHistoryItemID"/>) of the earliest change that should be retrieved.</param>
            <param name="endVersion">The version (<see cref="P:IDS.SitePromotion.ISiteChangeHistoryItem.SiteChangeHistoryItemID"/>) of the latest change that should be retrieved.</param>
            <param name="inclusive">If set to <see langword="true"/>, version ranges should be treated as inclusive.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to <paramref name="site"/>.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetSiteChangeHistory(IDS.SitePromotion.ISite,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Retrieves the changes that have been made to the specified <see cref="T:IDS.SitePromotion.ISite">site</see>.
            </summary>
            <param name="site">The site for which the change history is to be retrieved.</param>
            <param name="startVersion">The version (<see cref="P:IDS.SitePromotion.ISiteChangeHistoryItem.SiteChangeHistoryItemID"/>) of the earliest change that should be retrieved.</param>
            <param name="endVersion">The version (<see cref="P:IDS.SitePromotion.ISiteChangeHistoryItem.SiteChangeHistoryItemID"/>) of the latest change that should be retrieved.</param>
            <param name="inclusive">If set to <see langword="true"/>, version ranges should be treated as inclusive.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to <paramref name="site"/>.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetSiteChangeHistory(IDS.SitePromotion.ISite,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
            <summary>
            Retrieves the changes that have been made to the specified <see cref="T:IDS.SitePromotion.ISite">site</see>.
            </summary>
            <param name="site">The site for which the change history is to be retrieved.</param>
            <param name="startVersion">The version (<see cref="P:IDS.SitePromotion.ISiteChangeHistoryItem.SiteChangeHistoryItemID"/>) of the earliest change that should be retrieved.</param>
            <param name="endVersion">The version (<see cref="P:IDS.SitePromotion.ISiteChangeHistoryItem.SiteChangeHistoryItemID"/>) of the latest change that should be retrieved.</param>
            <param name="inclusive">If set to <see langword="true"/>, version ranges should be treated as inclusive.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <param name="user">The user whose changes should be returned.</param>
            <returns>
            A list of <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem">changes</see> that have been
            made to <paramref name="site"/>.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetSiteChangeHistoryItem(System.String)">
            <summary>
            Retrieves the specified change history item from the datastore.
            </summary>
            <param name="siteChangeHistoryItemID">The identifier for the desired change history item.</param>
            <returns>
            An <see cref="T:IDS.SitePromotion.ISiteChangeHistoryItem"/> representing the change identified
            by <paramref name="siteChangeHistoryItemID"/>.
            </returns>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.RollbackSite(IDS.SitePromotion.ISite,System.String,System.String)">
            <summary>
            Rolls back the site to a particlar version.
            </summary>
            <param name="site">The site to rollback.</param>
            <param name="siteChangeHistoryItemID">The site change history item ID to rollback to.</param>
            <param name="user">The identifier of the user performing the rollback.</param>		
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.ApproveChangeHistoryItem(IDS.SitePromotion.ISiteChangeHistoryItem,System.String)">
            <summary>
            Approves the change history item for transfer to another site.
            </summary>
            <param name="item">The item to be approved.</param>
            <param name="approver">The identifier for the person who approved <paramref name="item"/> for transfer.</param>
        </member>
        <member name="M:IDS.SitePromotion.ISiteManager.GetLastTransferBetweenSites(IDS.SitePromotion.ISite,IDS.SitePromotion.ISite)">
            <summary>
            Gets the most recent transfer between two sites.
            </summary>
            <param name="site1">The first site to consider.</param>
            <param name="site2">The second site to consider.</param>
            <returns>
            An <see cref="T:IDS.SitePromotion.ISiteTransferHistoryItem"/> representing the most recent transfer 
            between <paramref name="site1"/> and <paramref name="site2"/>, regardless of 
            which site was the source site.
            </returns>
        </member>
        <member name="T:IDS.SitePromotion.ISiteTransferHistoryItem">
            <summary>
            A site transfer history item is a change to a <see cref="T:IDS.SitePromotion.ISite">site</see>
            that was the result of a transfer of configuration from another <see cref="T:IDS.SitePromotion.ISite">site</see>.
            </summary>
        </member>
        <member name="P:IDS.SitePromotion.ISiteTransferHistoryItem.SourceSite">
            <summary>
            Gets the source site.
            </summary>
            <value>The source site.</value>
        </member>
        <member name="P:IDS.SitePromotion.ISiteTransferHistoryItem.DestinationSite">
            <summary>
            Gets the destination site.
            </summary>
            <value>The destination site.</value>
        </member>
        <member name="P:IDS.SitePromotion.ISiteTransferHistoryItem.SourceVersion">
            <summary>
            Gets the source version.
            </summary>
            <value>The source version.</value>
        </member>
        <member name="P:IDS.SitePromotion.ISiteTransferHistoryItem.DestinationVersion">
            <summary>
            Gets the destination version.
            </summary>
            <value>The destination version.</value>
        </member>
        <member name="T:IDS.SitePromotion.IVolatileConfigurationItem">
            <summary>
            A volatile configuration item is a piece of configuration data that is 
            closely tied to other <see cref="T:IDS.SitePromotion.IConfigurationItem">configuration items</see>
            in the <see cref="T:IDS.SitePromotion.IConfiguration">configuration</see>.
            </summary>
            <seealso cref="T:IDS.SitePromotion.IConfiguration"/>
            <seealso cref="T:IDS.SitePromotion.IConfigurationItem"/>
        </member>
        <member name="P:IDS.SitePromotion.IVolatileConfigurationItem.ParentConfiguration">
            <summary>
            Gets or sets the configuration to which this item is bound.
            </summary>
            <value>The parent configuration.</value>
        </member>
        <member name="T:IDS.SitePromotion.SiteChangeAuditLog">
            <summary>Logs information related to a site change using the Site Promotion Tool</summary>
        </member>
        <member name="M:IDS.SitePromotion.SiteChangeAuditLog.#ctor(IDS.SitePromotion.ISiteChangeHistoryItem,System.Boolean)">
            <summary>Instantiates a new Site Change Audit Log Entry</summary>
        </member>
        <member name="M:IDS.SitePromotion.SiteChangeAuditLog.#ctor(System.String,System.DateTime,System.String,System.String,System.Boolean)">
            <summary>Instantiates a new Site Change Audit Log Entry</summary>
        </member>
        <member name="M:IDS.SitePromotion.SiteChangeAuditLog.PersistToSql(System.Data.SqlClient.SqlTransaction)">
            <summary>Persists the data</summary>
        </member>
        <member name="T:IDS.SitePromotion.SiteTransferAuditLog">
            <summary>Logs information related to a site transfer using the Site Promotion Tool</summary>
        </member>
        <member name="M:IDS.SitePromotion.SiteTransferAuditLog.#ctor(System.String,System.DateTime,System.String,System.String,System.Boolean,IDS.SitePromotion.ISite,IDS.SitePromotion.ISite)">
            <summary>Instantiates a new Site Transfer Audit Log Entry</summary>
        </member>
        <member name="M:IDS.SitePromotion.SiteTransferAuditLog.PersistToSql(System.Data.SqlClient.SqlTransaction)">
            <summary>Persists the data</summary>
        </member>
        <member name="T:IDS.SitePromotion.TransferConflictResolutionOption">
            <summary>
            Specifies whether a transfer conflict should be resolved by keeping the source (donor) version's content,
            the target verion's content, or a merged combination of both version's content.
            </summary>
        </member>
        <member name="F:IDS.SitePromotion.TransferConflictResolutionOption.AcceptSource">
            <summary>
            The conflict should be resolved by replacing the target's
            content with the source's content.  The target's content will become
            an exact copy of the source's content.
            </summary>
        </member>
        <member name="F:IDS.SitePromotion.TransferConflictResolutionOption.AcceptTarget">
            <summary>
            The conflict should be resolved by leaving the target's content unchanged.
            The source's content changes are completely ignored.
            </summary>
        </member>
        <member name="F:IDS.SitePromotion.TransferConflictResolutionOption.AcceptMerged">
            <summary>
            The conflict should be resolved by merging the source's content into
            the target's content.  The target's content will become a combination of both
            sets of content.
            </summary>
        </member>
        <member name="T:IDS.Sms.ISmsService">
            <summary>
            Interface used for sending SMS messages.
            </summary>
        </member>
        <member name="M:IDS.Sms.ISmsService.SendMessage(System.String,System.String,System.String)">
            <summary>
            Sends an outgoing SMS message to the specified phone number.
            </summary>
            <param name="fromPhoneNumber">the phone number to send from</param>
            <param name="toPhoneNumber">the phone number to send to</param>
            <param name="body">the body of the message to send</param>
        </member>
        <member name="M:IDS.Sms.ISmsService.GetMessage(System.String)">
            <summary>
            Gets a message that has been previously sent by ID.
            </summary>
            <param name="messageId">ID of message</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Sms.SmsPhoneEvent">
            <summary>
            Base class for events related to an SMS phone number.
            </summary>
        </member>
        <member name="P:IDS.Sms.SmsPhoneEvent.PhoneNumber">
            <summary>
            The user's phone number.
            </summary>
        </member>
        <member name="P:IDS.Sms.SmsPhoneEvent.ServicePhoneNumber">
            <summary>
            The phone number (or short code) of the SMS service.
            </summary>
        </member>
        <member name="P:IDS.Sms.SmsPhoneEvent.User">
            <summary>
            User the phone is associated with.
            </summary>
        </member>
        <member name="P:IDS.Sms.SmsPhoneEvent.UserID">
            <summary>
            ID of user.
            </summary>
        </member>
        <member name="T:IDS.Sms.SmsPhoneAddedEvent">
            <summary>
            Event raised when an SMS phone is added for a user.
            </summary>
        </member>
        <member name="T:IDS.Sms.SmsPhoneRemovedEvent">
            <summary>
            Event raised when an SMS phone is removed for a user.
            </summary>
        </member>
        <member name="T:IDS.Sms.SmsMessage">
            <summary>
            Represents a SMS text message sent or received on a mobile phone.
            </summary>
        </member>
        <member name="P:IDS.Sms.SmsMessage.ID">
            <summary>
            Gets or sets the ID of the message.
            </summary>
        </member>
        <member name="P:IDS.Sms.SmsMessage.Date">
            <summary>
            Gets or sets the Date/Time the message was sent.
            </summary>
        </member>
        <member name="P:IDS.Sms.SmsMessage.Status">
            <summary>
            Gets or sets the status of the message.
            </summary>
        </member>
        <member name="P:IDS.Sms.SmsMessage.From">
            <summary>
            Gets or sets the phone number the message is sent from.
            </summary>
        </member>
        <member name="P:IDS.Sms.SmsMessage.To">
            <summary>
            Gets or sets the phone number the message is sent to.
            </summary>
        </member>
        <member name="P:IDS.Sms.SmsMessage.Body">
            <summary>
            Gets or sets the body of the text message.
            </summary>
        </member>
        <member name="P:IDS.Sms.SmsMessage.Direction">
            <summary>
            Gets or sets the direction of the message from the perspective of the application (incoming or outgoing).
            </summary>
        </member>
        <member name="P:IDS.Sms.SmsMessage.PhoneNumber">
            <summary>
            Gets the phone number the message is associated with (From for incoming, To for outgoing).
            </summary>
        </member>
        <member name="T:IDS.Sms.SmsMessageStatus">
            <summary>
            SMS Message Status
            </summary>
        </member>
        <member name="F:IDS.Sms.SmsMessageStatus.Pending">
            <summary>
            Message is queued for processing
            </summary>
        </member>
        <member name="F:IDS.Sms.SmsMessageStatus.Sent">
            <summary>
            Message has been processed and sent to the destination
            </summary>
        </member>
        <member name="F:IDS.Sms.SmsMessageStatus.Received">
            <summary>
            Message has been received from the sender
            </summary>
        </member>
        <member name="F:IDS.Sms.SmsMessageStatus.Failed">
            <summary>
            Message failed to process
            </summary>
        </member>
        <member name="F:IDS.Sms.SmsMessageStatus.Unknown">
            <summary>
            Unknown status
            </summary>
        </member>
        <member name="T:IDS.Sms.SmsMessageDirection">
            <summary>
            SMS Message Direction
            </summary>
        </member>
        <member name="F:IDS.Sms.SmsMessageDirection.In">
            <summary>
            Incoming
            </summary>
        </member>
        <member name="F:IDS.Sms.SmsMessageDirection.Out">
            <summary>
            Outgoing
            </summary>
        </member>
        <member name="T:IDS.StreamHelper">
            <summary>
            The StreamHelper class is a static helper class that provides some utility methods for dealing with streams.
            </summary>
        </member>
        <member name="M:IDS.StreamHelper.Copy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the specified input stream to the output stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:IDS.StreamHelper.Copy(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies the specified input stream to the output stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="M:IDS.StreamHelper.StreamToBytes(System.IO.Stream)">
            <summary>Converts a stream to a byte array</summary>
            <param name="stream">The stream.</param>
            <remarks>The usual stream to bytes code was not converting some images properly, this does not have any known problems</remarks>
        </member>
        <member name="M:IDS.StreamHelper.StreamToByteArray(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.StreamHelper.StringToMemoryStream(System.String,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:IDS.StrictFederalHolidayCalculator">
            <summary>
            Holiday calculator that only takes into account the exact day of the federal holiday.  It does not take into account observed holidays.
            </summary>
            <remarks>
            For example, 12/25/2005 is a Sunday, and this calculator will consider it a holiday.  12/26/2005 is a Monday and the day the Federal Government observes 
            the Christmas holiday, this calculator will not consider 12/26/2005 a holiday.  Use <see cref="T:IDS.FederalHolidayCalculator">FederalHolidayCalculator</see>
            to include 12/26/2005 as a holiday.
            </remarks>
        </member>
        <member name="M:IDS.StrictFederalHolidayCalculator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.StrictFederalHolidayCalculator"/> class.
            </summary>
        </member>
        <member name="M:IDS.StrictFederalHolidayCalculator.DateIsStaticHoliday(System.DateTime)">
            <summary>
            Determines if the given date is a static federal holiday.
            </summary>
            <param name="date">The date to check against the list of static federal holidays</param>
            <returns>True if date matches 1/1, 7/4, 11/11, or 12/25 of any year.  Otherwise, false.</returns>
        </member>
        <member name="M:IDS.StrictFederalHolidayCalculator.DateIsDynamicHoliday(System.DateTime)">
            <summary>
            Determines if the given date is a dynamic federal holiday.
            </summary>
            <param name="date">The date to check against the list of dynamic federal holidays</param>
            <returns>True if date matches Martin Luther King Day, President's Day, Memorial Day, Labor Day, Columbus Day, or Thanksgiving Day.  Otherwise, false.</returns>
        </member>
        <member name="M:IDS.StrictFederalHolidayCalculator.GetAllHolidays(System.Int32)">
            <summary>
            Returns a list of dates which contains all the static holidays for the given year.
            </summary>
            <param name="year">Year for which the list of static holidays are being retrieved.</param>
            <returns>Returns a list of dates for the years static holidays which include New Year's Day, Independence Day, Veteran's Day and Christmas Day.</returns>
        </member>
        <member name="M:IDS.StrictFederalHolidayCalculator.GetStaticHolidays(System.Int32)">
            <summary>
            Returns a list of dates which contains all the holidays for the given year.
            </summary>
            <param name="year">Year for which the list of holidays are being retrieved.</param>
            <returns>Returns a list of dates for the years static holidays which include 
            New Year's Day, Independence Day, Veteran's Day and Christmas Day
            Labor Day, Columbus Day, and Thanksgiving Day.</returns>
        </member>
        <member name="M:IDS.StrictFederalHolidayCalculator.GetDynamicHolidays(System.Int32)">
            <summary>
            Returns a list of dates which contains all the dynamic holidays for the given year.
            </summary>
            <param name="year">Year for which the list of dynamic holidays are being retrieved.</param>
            <returns>Returns a list of dates for the years dynamic holidays which include Martin Luther King Day, President's Day, Memorial Day, Labor Day, Columbus Day, and Thanksgiving Day.</returns>
        </member>
        <member name="M:IDS.StrictFederalHolidayCalculator.IsHoliday(System.DateTime,IDS.HolidayCollection)">
            <summary>
            Determines whether the specified date is a holiday.
            </summary>
            <param name="date">The date to determine if it a holiday.</param>
            <param name="holidays">An array of holidays The holidays.</param>
            <returns>
            	<c>true</c> if the specified date is holiday; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:IDS.Text.Base36">
            <summary>
            Converts an unsigned long into a Base 36 string.
            </summary>
            <remarks>
            Handles positive only values up to ulong.MaxInt (e.g. 18,446,744,073,709,551,615).
            </remarks>
        </member>
        <member name="M:IDS.Text.Base36.ToString(System.UInt64)">
            <summary>
            Converts an unsigned long into a base 36 string.
            </summary>
            <param name="lval">The unsigned long value to convert to base 36.</param>
            <returns>Returns a string that is the base 36 representation of the lval parameter.</returns>
        </member>
        <member name="M:IDS.Text.Base36.ToULong(System.String)">
            <summary>
            Converts the base 36 string back into an unsigned long.
            </summary>
            <param name="t">The base 36 string.</param>
            <returns>Returns an unsigned long which is the representation of the base 36 string.</returns>
        </member>
        <member name="T:IDS.Text.BlacklistedWord">
            <summary>
            Class to store blacklisted word
            </summary>
        </member>
        <member name="P:IDS.Text.BlacklistedWord.Word">
            <summary>
            Get or Sets the blacklisted word
            </summary>
        </member>
        <member name="T:IDS.Text.BlacklistedWordProvider">
            <summary>
            Class which provides methods to manage blacklisted words
            </summary>
        </member>
        <member name="M:IDS.Text.BlacklistedWordProvider.GetBlacklistedWords">
            <summary>
            Gets the list of blacklisted words
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Text.BlacklistedWordProvider.InsertBlacklistedWord(System.String,System.String)">
            <summary>
            Inserts the blacklisted word
            </summary>
            <param name="word"></param>
            <param name="insertingUserID"></param>
        </member>
        <member name="M:IDS.Text.BlacklistedWordProvider.UpdateBlacklistedWord(System.String,System.String,System.String)">
            <summary>
            Updates the blacklisted word
            </summary>
            <param name="word"></param>
            <param name="wordToUpdate"></param>
            <param name="updatingUserID"></param>
        </member>
        <member name="M:IDS.Text.BlacklistedWordProvider.DeleteBlacklistedWord(System.String,System.String)">
            <summary>
            Deletes the blacklisted word
            </summary>
            <param name="word"></param>
            <param name="updatingUserID"></param>
        </member>
        <member name="M:IDS.Text.BlacklistedWordProvider.IsBlacklisted(System.String)">
            <summary>
            Checks if the word is blacklisted
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Text.BlacklistedWordProvider.GetWords(System.String)">
            <summary>
            Gets the words that constitute a specified string.
            </summary>
        </member>
        <member name="T:IDS.Text.BooleanFormatProvider">
            <summary>
            Implements a custom format provider for Boolean values.
            </summary>
            <remarks>
            If the object to format is a Boolean value and the format string
            contains a single semicolon, then the part before the semicolon is
            returned if the Boolean value is <see langword="true" /> and the part
            after the semicolon is returned if the Boolean value is
            <see langword="false" />.
            </remarks>
        </member>
        <member name="M:IDS.Text.BooleanFormatProvider.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent
            string representation using specified format and culture-specific
            formatting information.
            </summary>
            <param name="format">
            A format string containing formatting specifications.
            </param>
            <param name="arg">
            An object to format.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider" /> object that supplies
            format information about the current instance.
            </param>
            <returns>
            The string representation of the value of <paramref name="arg" />,
            formatted as specified by <paramref name="format" /> and
            <paramref name="formatProvider" />.
            </returns>
        </member>
        <member name="M:IDS.Text.BooleanFormatProvider.GetFormat(System.Type)">
            <summary>
            Returns an object that provides formatting services
            for the specified type.
            </summary>
            <param name="formatType">
            An object that specifies the type of format object to return.
            </param>
            <returns></returns>
        </member>
        <member name="T:IDS.Text.CSharpMethodCallParser">
            <summary>
            Parses a string that contains a period-separated sequence of method calls specified in C# syntax.
            </summary>
            <remarks>
            Currently, the supported types of method arguments are
            <see langword="int" />, <see langword="char" />, and <see langword="string" />.
            </remarks>
            <example>
            A valid expression is <c>Replace("-", "").PadLeft(10, '0').ToUpperInvariant()</c>.
            </example>
        </member>
        <member name="M:IDS.Text.CSharpMethodCallParser.Parse(System.String,System.Func{System.Object,System.String,System.Collections.Generic.List{System.Object},System.Object})">
            <summary>
            Parses a string that contains a sequence of method calls specified in C# syntax.
            </summary>
            <param name="expression">
            The string to parse.
            </param>
            <param name="evaluator">
            A function that accepts a value, the name of a method, and a list of arguments,
            and returns the result of invoking the named method on the value.
            </param>
            <returns>
            A function that accepts a value and returns the result of successively invoking each method
            specified in the <paramref name="expression" /> on the value.
            </returns>
        </member>
        <member name="M:IDS.Text.CSharpMethodCallParser.ReadMethodCallList">
            <summary>
            Reads and parses a sequence of one or more method calls separated by periods.
            Each method call consists of a method name followed by a parentheses-enclosed argument list.
            </summary>
        </member>
        <member name="M:IDS.Text.CSharpMethodCallParser.ReadArgumentList">
            <summary>
            Reads and parses a sequence of zero or more arguments that are
            separated by commas and terminated by a right parenthesis.
            </summary>
        </member>
        <member name="M:IDS.Text.CSharpMethodCallParser.ReadArgument(System.Boolean)">
            <summary>
            Reads and parses a C# number, character, or string literal.
            </summary>
            <returns>
            The parsed argument value.
            </returns>
        </member>
        <member name="T:IDS.Text.CurrencyToEnglish">
            <summary>
            The CurrencyToEnglish class converts a decimal currency value to an english representation.
            </summary>
        </member>
        <member name="M:IDS.Text.CurrencyToEnglish.ConvertCurrencyToEnglish(System.Decimal,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This function will convert a currency to its word representation.
            </summary>
            <param name="amount">The amount to convert to English.</param>
            <param name="capitalize">Capitalizes the first word in the string.</param>
            <param name="includeDollarVerbiage">If true outputs "X dollars and Y cents".</param>
            <param name="allCaps">Converts the string to UPPER case. Takes precedence over <paramref name="capitalize"/>.</param>
            <returns>The amount in English.</returns>
        </member>
        <member name="M:IDS.Text.CurrencyToEnglish.ConvertCurrencyToEnglish(System.Decimal,System.Boolean)">
            <summary>
            This function will convert a currency to its word representation.
            </summary>
            <param name="amount">The amount.</param>
            <param name="capitalize">Capitalizes the first word in the string.</param>
            <returns>The amount in English.</returns>
        </member>
        <member name="T:IDS.Text.DateTimeFormatProvider">
            <summary>
            Formatter that accepts sections in the format string for MinValue and MaxValue dates as well as
            converting DateTime from one timezone to another.
            </summary>
            <remarks>
            Use this format provider to convert a DateTime to a string when you need the format to
            vary based on whether the DateTime is equal to MinValue, MaxValue, or some other value.
            This is simular to the format supported by numerical format strings, where the format string
            can be delimited by ';' into up to 3 sections -- the first section for negative values,
            second for 0, and third for positive values. With this format provider, the first section
            corresponds to DateTime.MinValue, the third section to DateTime.MaxValue, and the middle (second)
            section to all other values. If there are only two sections, the first applies to DateTime.MinValue,
            and the second applies to all other values. If there is only one section (as in a regular DateTime formatting
            string), it applies to all values.
            <para>You cannot pass this format provider as a parameter to DateTime.ToString(). Instead, you must
            use string.Format().</para>
            <para>This format provider also supports converting a DateTime to another timezone by passing a
            format string of "tzconvert". The following examples show the syntax:
            convert - converts DateTime to the IDS.Time.TimeZoneInfo.Current timezone.
            convert(dest) - converts the DateTime to the destination timezone.
            convert(source, dest) - converts the DateTime from the source timezone to the destination timezone.
            The source and dest values can be any valid TimeZone ID or "local" to specify the local timezone on the
            current system, "utc" to specify the UTC timezone, "user" to specify the IDS.Time.TimeZoneHelper.UserTimeZone,
            or "enterprise" to specify the IDS.Time.TimeZoneHelper.EnterpriseTimeZone.
            A source timezone can only be provided if the DateTime.Kind is DateTimeKind.Utc or DateTimeKind.Local.
            If a source is not specified, the source defaults to UTC if the DateTime.Kind is DateTimeKind.Utc. Otherwise,
            it defaults to local.
            </para>
            <para>Several custom IDS DataGrid columns allow you to specify a custom formatter for formatting
            column data. Using this provider in conjuction with one of these custom column types will allow you
            to display a DateTime field on an ASP.NET DataGrid with special strings instead of 01/01/0001 or 12/31/9999.</para>
            </remarks>
            <example>
            <code>
            IDS.Text.DateTimeFormatProvider f = new IDS.Text.DateTimeFormatProvider();
            string format = "N/A;MM/dd/yyyy;In pro\gre\s\s";
            string format = "N/A;MM/dd/yyyy:tzconvert;In pro\gre\s\s";
            string format = "MM/dd/yyyy h:mmtt:tzconvert";
            string format = "MM/dd/yyyy h:mmtt:tzconvert(local)";
            string format = "MM/dd/yyyy h:mmtt:tzconvert(utc)";
            string format = "MM/dd/yyyy h:mmtt:tzconvert(user)";
            string format = "MM/dd/yyyy h:mmtt:tzconvert(Pacific Standard Time, utc)";
            Debug.WriteLine(string.Format(f, format, DateTime.MinValue);
            Debug.WriteLine(string.Format(f, format, DateTime.Now);
            Debug.WriteLine(string.Format(f, format, DateTime.MaxValue);
            </code>
            </example>
        </member>
        <member name="M:IDS.Text.DateTimeFormatProvider.GetFormat(System.Type)">
            <summary>
            
            </summary>
            <param name="formatType"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Text.DateTimeFormatProvider.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the given DateTime argument to a string with the given format string.
            </summary>
            <param name="format">Valid custom DateTime format string.</param>
            <param name="arg">DateTime value to format.</param>
            <param name="formatProvider">Ignored.</param>
            <returns>Formatted DateTime value.</returns>
        </member>
        <member name="T:IDS.Text.DefaultIDFormatter">
            <summary>
            The DefaultIDFormatter class implements the IIDFormatter interface and provides the default 
            formatting behavior for ID's. The default behavior is to to just return the ID without applying 
            any formatting to it.
            </summary>
        </member>
        <member name="M:IDS.Text.DefaultIDFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.DefaultIDFormatter"/> class.
            </summary>
        </member>
        <member name="M:IDS.Text.DefaultIDFormatter.Format(System.String)">
            <summary>
            Formats the specified ID.
            </summary>
            <param name="value">The value to format.</param>
            <returns>Returns the formatted string.</returns>
        </member>
        <member name="T:IDS.Text.EnumFormatProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Text.EnumFormatProvider.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation
            using specified format and culture-specific formatting information.
            </summary>
            <returns>
            The string representation of the value of <paramref name="arg" />,
            formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.
            </returns>
            <param name="format">
            A format string containing formatting specifications.
            </param>
            <param name="arg">
            An object to format.
            </param>
            <param name="formatProvider">
            An object that supplies format information about the current instance.
            </param>
        </member>
        <member name="M:IDS.Text.EnumFormatProvider.GetFormat(System.Type)">
            <summary>
            Returns an object that provides formatting services for the specified type.
            </summary>
            <param name="formatType">
            An object that specifies the type of format object to return.
            </param>
            <returns>
            An instance of the object specified by <paramref name="formatType" />,
            if the <see cref="T:System.IFormatProvider" /> implementation can supply that type of object;
            otherwise, <see langword="null" />.
            </returns>
        </member>
        <member name="M:IDS.Text.EnumFormatProvider.GetResourceString(System.Enum)">
            <summary>
            Gets the value of the localized string resource entry associated with a specified <see cref="T:System.Enum" /> value.
            </summary>
            <param name="value">
            An <see cref="T:System.Enum" /> value.
            </param>
            <returns>
            The value of the localized string resource entry associated with the <paramref name="value" />.
            </returns>
        </member>
        <member name="T:IDS.Text.ExportGenerator">
            <summary>
            Creates the content for an Exported file like a .CSV file by token data binding to an object
              Sample Usage:
            	string fileContent = ExportGenerator.CreateCsvExportGenerator(tokensItems).Export(viewData.Items);
            	return new DownloadResult("export.csv", "text/csv", Encoding.UTF8.GetBytes(fileContent));
            </summary>
        </member>
        <member name="M:IDS.Text.ExportGenerator.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="itemDelimiter"></param>
            <param name="lineDelimiter"></param>
            <param name="encloseInQuotes"></param>
        </member>
        <member name="M:IDS.Text.ExportGenerator.CreateCsvExportGenerator(System.String)">
            <summary>
            Creates an instance usable as a CSV file generator
            </summary>
            <returns></returns>
        </member>
        <member name="P:IDS.Text.ExportGenerator.EscapedLineDelimiter">
            <summary>
            Line Delimiter
            </summary>
        </member>
        <member name="P:IDS.Text.ExportGenerator.EscapedItemDelimiter">
            <summary>
            Item Delimiter
            </summary>
        </member>
        <member name="P:IDS.Text.ExportGenerator.EncloseInQuotes">
            <summary>
            Whether to enclose each item in quotes
            </summary>
        </member>
        <member name="P:IDS.Text.ExportGenerator.TokenItems">
            <summary>
            Token Items, Format: Header Text|Token. One item per line. Don't put quotes around items.
            </summary>
        </member>
        <member name="M:IDS.Text.ExportGenerator.GetHeaderLine">
            <summary>
            Returns the header line of a file
            </summary>
            <returns></returns>
        </member>
        <member name="P:IDS.Text.ExportGenerator.Tokens">
            <summary>
            Returns the parsed list of tokens. Item1 is the Header Text, Item2 is the Format String
            </summary>
        </member>
        <member name="M:IDS.Text.ExportGenerator.Export(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates the file content from the passed list of items
            </summary>
            <param name="writer"></param>
            <param name="dataItems"></param>
        </member>
        <member name="T:IDS.Text.Format">
            <summary>
            Static functions for standard Formatting.
            </summary>
        </member>
        <member name="M:IDS.Text.Format.FormatTimeString(System.DateTime)">
            <summary>
            Provides a standard way of displaying a date. Takes into account MinValue
            </summary>
            <param name="time">DateTime as string.</param>
            <returns>Date and Time</returns>
        </member>
        <member name="T:IDS.Text.GuidHelper">
            <summary>
            The GuidHelper class is a helper class for converting a GUID to make the GUID
            smaller and more manageable.
            </summary>
        </member>
        <member name="M:IDS.Text.GuidHelper.ToBase36(System.Guid)">
            <summary>
            Converts the Guid to a base 36 encoded string that is 26 characters long.
            </summary>
            <param name="guid">The Guid to convert.</param>
            <returns>Returns a base 36 encoded 26 characters long string that is the representation of the guid.</returns>
        </member>
        <member name="M:IDS.Text.GuidHelper.FromBase36(System.String)">
            <summary>
            Converts the base 36 encoded guid to a Guid.
            </summary>
            <param name="base36String">The base36 encoded Guid. It must be 26 characters long.</param>
            <returns>Returns a Guid by decoding the base 36 string.</returns>
        </member>
        <member name="T:IDS.Text.HexEncoding">
            <summary>
            Represents a hex encoding of Unicode characters.
            </summary>
        </member>
        <member name="M:IDS.Text.HexEncoding.GetBytes(System.String)">
            <summary>
             Encodes the specified range of a System.String into the specified range of a byte array.
            </summary>
            <param name="hexString">String to encode.</param>
            <returns>A byte array containing the encoded representation of the specified string.</returns>
        </member>
        <member name="M:IDS.Text.HexEncoding.GetString(System.Byte[])">
            <summary>
            Converts elements in an array of bytes to a System.String.
            </summary>
            <param name="hexBytes">A byte array containing the encoded representation of the specified string.</param>
            <returns>A System.String containing the values decoded as an System.Text.ASCIIEncoding.</returns>
        </member>
        <member name="T:IDS.Text.HtmlChecker">
            <summary>
            Utility class to check Html using XPath expressions.  Note that this requires that the HTML conform to xhtml standards.
            IMPORTANT - This converts the HTML to all lowercase before performing comparisons
            </summary>
        </member>
        <member name="P:IDS.Text.HtmlChecker.ParsedDocument">
            <summary>
            A parsed xml document
            </summary>
        </member>
        <member name="P:IDS.Text.HtmlChecker.IsValidHtml">
            <summary>
            Tells if the html is valid
            </summary>
        </member>
        <member name="P:IDS.Text.HtmlChecker.ParsingErrorMessage">
            <summary>
            The parsing errors if any
            </summary>
        </member>
        <member name="M:IDS.Text.HtmlChecker.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.HtmlChecker" /> class.
            </summary>
            <param name="html">
            The HTML markup to check.
            </param>
        </member>
        <member name="M:IDS.Text.HtmlChecker.SelectNodes(System.String)">
            <summary>
            Selects matching nodes given the XPath expression
            </summary>
            <param name="xpath"></param>
            <returns>An XmlNodeList of matching nodes</returns>
        </member>
        <member name="M:IDS.Text.HtmlChecker.HasNode(System.String)">
            <summary>
            Returns true if any matching nodes are found
            </summary>
            <param name="xpath">true if any matching nodes are found</param>
            <returns>true if any matching nodes are found</returns>
        </member>
        <member name="M:IDS.Text.HtmlChecker.ValidateUrlHosts(System.String,System.String)">
            <summary>
            Validates that all anchor tags in the HTML are to whitelisted hosts
            </summary>
            <param name="hostWhiteList">A comma-delimited list of hosts. ex. www.google.com,www.amazon.com</param>
            <param name="currentHost">An option parameter containing the current host name. It is added to the white list</param>
            <returns>false if any host names are found that are invalid or not in the whitelist</returns>
        </member>
        <member name="T:IDS.Text.HtmlHelper">
            <summary>
            Provides static methods for working with XHTML content.
            </summary>
        </member>
        <member name="M:IDS.Text.HtmlHelper.CombineCssClasses(System.String[])">
            <summary>
            Combines an array of space-delimited CSS class names into a single space-delimited string.
            </summary>
            <param name="cssClasses">
            An array of space-delimited CSS class names.
            </param>
            <returns>
            A string that contains the combined list of CSS class names.
            </returns>
        </member>
        <member name="M:IDS.Text.HtmlHelper.RemoveUnsafeContent(System.String@)">
            <summary>
            Removes attributes and elements from a specified XHTML fragment
            that might introduce a cross-site scripting (XSS) vulnerability.
            </summary>
            <param name="xhtml">
            A <see cref="T:System.String" /> containing a fragment of XHTML.
            When the method returns, receives the transformed XHTML fragment
            if the return value is <see langword="true" />.
            </param>
            <returns>
            <see langword="true" /> if <paramref name="xhtml" /> is well-formed;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:IDS.Text.HtmlHelper.Transform(System.String)">
            <summary>
            Transforms a specified XHTML fragment according to embedded
            formatting instructions.
            </summary>
            <param name="xhtml">
            A <see cref="T:System.String" /> containing a well-formed fragment of XHTML.
            </param>
            <returns>
            The transformed XHTML fragment.
            </returns>
            <exception cref="T:System.Xml.XmlException">
            <paramref name="xhtml" /> is not well-formed XML.
            </exception>
            <remarks>
            <para>
            The following formatting instructions are recognized:
            </para>
            <list type="bullet">
            <item>
            <description>
            The <c>ids:alternatingrowclass</c> attribute, which is valid on
            a <c>table</c> or <c>tbody</c> element, specifies the <c>class</c>
            to add to every even-numbered child row (counting from one).
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:IDS.Text.IIDFormatter">
            <summary>
            The IIDFormatter interface is an interface for formatting ID's such as the login ID and user ID.
            </summary>
        </member>
        <member name="M:IDS.Text.IIDFormatter.Format(System.String)">
            <summary>
            Formats the specified ID.
            </summary>
            <param name="value">The value to format.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="T:IDS.Text.IUserIDFormatter">
            <summary>
            The IUserIDFormatter interface is an interface for taking an IUser object and returning a properly formatted ID for that user.
            This can be used to abstract how we represent a user to a third-party service such as RSA.
            </summary>
        </member>
        <member name="M:IDS.Text.IUserIDFormatter.Format(IDS.Security.IUser)">
            <summary>
            Takes the User ID.
            </summary>
            <param name="user">The user.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="T:IDS.Text.JavaScriptCode">
            <summary>
            Represents a fragment of code that can be parsed as a JavaScript expression.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Text.JavaScriptCode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.JavaScriptCode" /> class.
            </summary>
            <param name="code">
            A <see cref="T:System.String" /> that contains a fragment of JavaScript code.
            </param>
        </member>
        <member name="P:IDS.Text.JavaScriptCode.Code">
            <summary>
            Gets a <see cref="T:System.String" /> that contains the fragment of JavaScript code.
            </summary>
        </member>
        <member name="M:IDS.Text.JavaScriptCode.AppendTo(System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Text.JavaScriptCode.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Text.JavaScriptCode.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:IDS.Text.JavaScriptCode.ToComponentString">
            <inheritdoc />
        </member>
        <member name="T:IDS.Text.JavaScriptCode`1">
            <summary>
            Represents a fragment of code that can be parsed as a JavaScript expression of a specified type.
            </summary>
            <typeparam name="T">
            The type of the JavaScript expression.
            </typeparam>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Text.JavaScriptCode`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.JavaScriptCode`1" /> class.
            </summary>
            <param name="code">
            A <see cref="T:System.String" /> that contains a fragment of JavaScript code.
            </param>
        </member>
        <member name="P:IDS.Text.JavaScriptCode`1.Code">
            <summary>
            Gets a <see cref="T:System.String" /> that contains the fragment of JavaScript code.
            </summary>
        </member>
        <member name="M:IDS.Text.JavaScriptCode`1.AppendTo(System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Text.JavaScriptCode`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Text.JavaScriptCode`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:IDS.Text.JavaScriptCode`1.ToComponentString">
            <inheritdoc />
        </member>
        <member name="T:IDS.Text.JavaScriptConstructorCall">
            <summary>
            Represents JavaScript code that creates an object using the <c>new</c> operator.
            </summary>
        </member>
        <member name="M:IDS.Text.JavaScriptConstructorCall.#ctor(IDS.Text.JavaScriptExpression,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.JavaScriptConstructorCall" /> class.
            </summary>
        </member>
        <member name="M:IDS.Text.JavaScriptConstructorCall.AppendTo(System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Text.JavaScriptExpression">
            <summary>
            Represents a JavaScript expression of any type.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Text.JavaScriptExpression.AppendTo(System.Text.StringBuilder)">
            <summary>
            Appends the expression to a specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">
            </param>
        </member>
        <member name="M:IDS.Text.JavaScriptExpression.ToComponentString">
            <summary>
            Converts the expression to an equivalent string representation that can later be parsed by
            <see cref="T:IDS.Text.JavaScriptExpressionTypeConverter" />.
            </summary>
        </member>
        <member name="T:IDS.Text.JavaScriptExpression`1">
            <summary>
            Represents a JavaScript expression of a specified type.
            </summary>
            <typeparam name="T">
            The type of the JavaScript expression.
            </typeparam>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Text.JavaScriptExpression`1.ParseComponentString(System.String)">
            <summary>
            Converts a specified string to an equivalent <see cref="T:IDS.Text.JavaScriptExpression`1" />.
            </summary>
        </member>
        <member name="T:IDS.Text.JavaScriptExpressionTypeConverter">
            <summary>
            Implements a <see cref="T:System.ComponentModel.TypeConverter" /> for the <see cref="T:IDS.Text.JavaScriptExpression" /> class.
            </summary>
        </member>
        <member name="M:IDS.Text.JavaScriptExpressionTypeConverter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.JavaScriptExpressionTypeConverter" /> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type" /> of the <see cref="T:IDS.Text.JavaScriptExpression" /> class for which the converter is used.
            </param>
        </member>
        <member name="M:IDS.Text.JavaScriptExpressionTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Text.JavaScriptExpressionTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Text.JavaScriptExpressionTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Text.JavaScriptExpressionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Text.JavaScriptFunction`1">
            <summary>
            Represents a JavaScript function that evaluates a specified expression.
            </summary>
            <typeparam name="T">
            A delegate type (such as <see cref="T:System.Action" /> or <see cref="T:System.Func`1" />)
            that represents the type of the function.
            </typeparam>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="P:IDS.Text.JavaScriptFunction`1.Body">
            <summary>
            Gets the expression that the function evaluates.
            </summary>
        </member>
        <member name="P:IDS.Text.JavaScriptFunction`1.ParameterNames">
            <summary>
            Gets the names of the function's formal parameters.
            </summary>
        </member>
        <member name="M:IDS.Text.JavaScriptFunction`1.#ctor(IDS.Text.JavaScriptExpression,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.JavaScriptFunction`1" /> class.
            </summary>
            <param name="body">
            The expression that the function evaluates.
            </param>
            <param name="parameterNames">
            The names of the function's formal parameters.
            </param>
        </member>
        <member name="M:IDS.Text.JavaScriptFunction`1.AppendTo(System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Text.JavaScriptFunctionCall">
            <summary>
            Represents a JavaScript expression that invokes a function.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Text.JavaScriptFunctionCall.#ctor(System.Object,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.JavaScriptFunctionCall" /> class.
            </summary>
        </member>
        <member name="M:IDS.Text.JavaScriptFunctionCall.AppendTo(System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Text.JavaScriptFunctionCall`1">
            <summary>
            Represents a JavaScript expression that invokes a function.
            </summary>
            <typeparam name="T">
            The type of the value returned by the function.
            </typeparam>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Text.JavaScriptFunctionCall`1.#ctor(IDS.Text.JavaScriptCode,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.JavaScriptFunctionCall" /> class.
            </summary>
        </member>
        <member name="M:IDS.Text.JavaScriptFunctionCall`1.#ctor(IDS.Text.JavaScriptExpression,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.JavaScriptFunctionCall" /> class.
            </summary>
        </member>
        <member name="M:IDS.Text.JavaScriptFunctionCall`1.AppendTo(System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Text.JavaScriptHelper">
            <summary>
            Provides static methods for working with JavaScript.
            </summary>
        </member>
        <member name="M:IDS.Text.JavaScriptHelper.Append(System.Text.StringBuilder,System.Object)">
            <summary>
            Converts a specified value or object to its equivalent JavaScript representation
            and appends the result to a specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="result">
            A <see cref="T:System.Text.StringBuilder" />.
            </param>
            <param name="value">
            The value or object to convert, or <see langword="null" />.
            </param>
        </member>
        <member name="M:IDS.Text.JavaScriptHelper.Append(System.Text.StringBuilder,System.Object,IDS.Text.JavaScriptOptions)">
            <summary>
            Converts a specified value or object to its equivalent JavaScript representation
            and appends the result to a specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="result">
            A <see cref="T:System.Text.StringBuilder" />.
            </param>
            <param name="value">
            The value or object to convert, or <see langword="null" />.
            </param>
            <param name="options">
            Zero or more <see cref="T:IDS.Text.JavaScriptOptions" />.
            </param>
        </member>
        <member name="M:IDS.Text.JavaScriptHelper.AppendList``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts a specified collection of values or objects to their equivalent JavaScript representations
            and appends the results to a specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <typeparam name="T">
            The type of values in the collection.
            </typeparam>
            <param name="result">
            A <see cref="T:System.Text.StringBuilder" />.
            </param>
            <param name="values">
            The values or objects to convert.
            </param>
            <param name="separator">
            A string to append between each value or object.
            </param>
        </member>
        <member name="M:IDS.Text.JavaScriptHelper.FormatIsoDateString(System.DateTime,System.Boolean)">
            <summary>
            Converts a specified <see cref="T:System.DateTime" /> to its equivalent ISO 8601 representation.
            </summary>
            <param name="value">
            The <see cref="T:System.DateTime" /> to convert.
            </param>
            <param name="includeMilliseconds">
            <see langword="true" /> to include milliseconds in the resulting string;
            otherwise, <see langword="false" />.
            </param>
            <returns>
            The <paramref name="value" /> in the format "yyyy-MM-ddTHH:mm:ssZ", without any surrounding quotes.
            </returns>
        </member>
        <member name="M:IDS.Text.JavaScriptHelper.ParseJson``1(System.String)">
            <summary>
            Converts a specified JSON string to an object of type <typeparamref name="T" />.
            </summary>
            <typeparamref name="T">
            The type of the object to convert to.
            </typeparamref>
            <param name="json">
            The JSON string to convert.
            </param>
            <returns>
            The object represented by the <paramref name="json" /> string.
            </returns>
        </member>
        <member name="M:IDS.Text.JavaScriptHelper.ToJson(System.Object,IDS.Text.JavaScriptOptions)">
            <summary>
            Converts a specified <see cref="T:System.Object" /> to its equivalent JSON representation.
            </summary>
            <param name="value">
            The value or object to convert.
            </param>
            <param name="options">
            Zero or more <see cref="T:IDS.Text.JavaScriptOptions" />.
            </param>
            <returns>
            The JSON representation of the <paramref name="value" />.
            </returns>
        </member>
        <member name="M:IDS.Text.JavaScriptHelper.ToString(System.Boolean)">
            <summary>
            Converts a specified <see cref="T:System.Boolean" /> to its equivalent JavaScript literal.
            </summary>
            <param name="value">
            The <see cref="T:System.Boolean" /> to convert.
            </param>
            <returns>
            "true" if <paramref name="value" /> is <see langword="true" />;
            "false" if <paramref name="value" /> is <see langword="false" />.
            </returns>
        </member>
        <member name="M:IDS.Text.JavaScriptHelper.ToString(System.String)">
            <summary>
            Converts a specified string to its equivalent JavaScript string literal.
            </summary>
            <param name="value">
            The <see cref="T:System.String" /> to convert.
            </param>
            <returns>
            A <see cref="T:System.String" /> that contains a JavaScript string literal that represents the specified <paramref name="value" />.
            </returns>
        </member>
        <member name="M:IDS.Text.JavaScriptHelper.ToString(System.Object)">
            <summary>
            Converts a specified value or object to its equivalent JavaScript representation.
            </summary>
            <param name="value">
            The value or object to convert, or <see langword="null" />.
            </param>
            <returns>
            A <see cref="T:System.String" /> that contains the JavaScript representation of the <paramref name="value" />.
            </returns>
        </member>
        <member name="M:IDS.Text.JavaScriptHelper.ToString(System.Object,IDS.Text.JavaScriptOptions)">
            <summary>
            Converts a specified value or object to its equivalent JavaScript representation.
            </summary>
            <param name="value">
            The value or object to convert, or <see langword="null" />.
            </param>
            <param name="options">
            Zero or more <see cref="T:IDS.Text.JavaScriptOptions" />.
            </param>
        </member>
        <member name="T:IDS.Text.JavaScriptHelper.DateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime" /> value to a string that can be parsed by the JavaScript Date constructor.
            </summary>
        </member>
        <member name="M:IDS.Text.JavaScriptHelper.DateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Text.JavaScriptHelper.SensitiveDataResolver">
            <summary>
            Contract resolver for sensitive data; see 
            https://stackoverflow.com/questions/33148957/replace-sensitive-data-value-on-json-serialization
            </summary>
        </member>
        <member name="T:IDS.Text.JavaScriptHelper.SensitiveDataResolver.MaskedValueProvider">
            <summary>
            This Value Provider is used to get the serialized string corresponding to a masked Property
            </summary>
        </member>
        <member name="M:IDS.Text.JavaScriptHelper.SensitiveDataResolver.MaskedValueProvider.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="propertyInfo"></param>
            <param name="tokenizedString"></param>
        </member>
        <member name="M:IDS.Text.JavaScriptHelper.SensitiveDataResolver.MaskedValueProvider.GetValue(System.Object)">
            <summary>
            Gets the masked value for the property
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Text.JavaScriptHelper.SensitiveDataResolver.MaskedValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            We do not support setting the masked property with this provider, so it can only be
            used for Serialization
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="M:IDS.Text.JavaScriptHelper.SensitiveDataResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Text.JavaScriptOptions">
            <summary>
            Specifies options for the <see cref="M:IDS.Text.JavaScriptHelper.ToJson(System.Object,IDS.Text.JavaScriptOptions)" /> or
            <see cref="M:IDS.Text.JavaScriptHelper.ToString(System.Object,IDS.Text.JavaScriptOptions)" /> method.
            </summary>
        </member>
        <member name="F:IDS.Text.JavaScriptOptions.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDS.Text.JavaScriptOptions.CamelCase">
            <summary>
            
            </summary>
            <remarks>
            This option applies to <see cref="M:IDS.Text.JavaScriptHelper.ToJson(System.Object,IDS.Text.JavaScriptOptions)" /> only.
            </remarks>
        </member>
        <member name="F:IDS.Text.JavaScriptOptions.IgnoreNullValues">
            <summary>
            
            </summary>
            <remarks>
            This option applies to <see cref="M:IDS.Text.JavaScriptHelper.ToJson(System.Object,IDS.Text.JavaScriptOptions)" /> only.
            </remarks>
        </member>
        <member name="F:IDS.Text.JavaScriptOptions.MaskSensitiveData">
            <summary>
            Masks the values of properties to which the <see cref="T:IDS.Text.SensitiveDataAttribute" /> has been applied.
            </summary>
            <remarks>
            This option applies to <see cref="M:IDS.Text.JavaScriptHelper.ToJson(System.Object,IDS.Text.JavaScriptOptions)" /> only.
            </remarks>
        </member>
        <member name="F:IDS.Text.JavaScriptOptions.SerializeDatesAsUtc">
            <summary>
            Serializes all <see cref="T:System.DateTime" /> values with a <see cref="P:System.DateTime.TimeOfDay" /> component
            of <see cref="F:System.TimeSpan.Zero" />, regardless of <see cref="P:System.DateTime.Kind" />, as UTC dates.
            </summary>
            <remarks>
            This option applies to <see cref="M:IDS.Text.JavaScriptHelper.ToString(System.Object,IDS.Text.JavaScriptOptions)" /> only.
            </remarks>
        </member>
        <member name="T:IDS.Text.SensitiveDataAttribute">
            <summary>
            Attribute indicating that an element should (optionally) be masked as it contains sensitive data
            </summary>
        </member>
        <member name="P:IDS.Text.SensitiveDataAttribute.ReplacementString">
            <summary>
            Format string to use when replacing the sensitive data value. The value of the property being masked is accessible as {0}
            </summary>
        </member>
        <member name="M:IDS.Text.SensitiveDataAttribute.#ctor(System.String)">
            <summary>
            Constructir
            </summary>
            <param name="replacementString">Tokenized string that will be used to replace the value when masked. The value of the property being masked is accessible as {0}</param>
        </member>
        <member name="T:IDS.Text.JavaScriptLiteral`1">
            <summary>
            Represents a JavaScript literal value.
            </summary>
            <typeparam name="T">
            The type of the literal value.
            </typeparam>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Text.JavaScriptLiteral`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.JavaScriptLiteral`1" /> class.
            </summary>
            <param name="value">
            The value of the literal.
            </param>
        </member>
        <member name="M:IDS.Text.JavaScriptLiteral`1.#ctor(`0,IDS.Text.JavaScriptOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.JavaScriptLiteral`1" /> class.
            </summary>
            <param name="value">
            The value of the literal.
            </param>
            <param name="options">
            Zero or more <see cref="T:IDS.Text.JavaScriptOptions" />.
            </param>
        </member>
        <member name="P:IDS.Text.JavaScriptLiteral`1.Value">
            <summary>
            Gets the value of the literal.
            </summary>
        </member>
        <member name="M:IDS.Text.JavaScriptLiteral`1.AppendTo(System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Text.JavaScriptLiteral`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Text.JavaScriptLiteral`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:IDS.Text.JavaScriptLiteral`1.ToComponentString">
            <inheritdoc />
        </member>
        <member name="T:IDS.Text.JavaScriptLiteral">
            <summary>
            Provides <see cref="T:IDS.Text.JavaScriptLiteral`1" /> instances for common constant values.
            </summary>
        </member>
        <member name="F:IDS.Text.JavaScriptLiteral.EmptyString">
            <summary>
            Represents the zero-length string ("").
            </summary>
        </member>
        <member name="F:IDS.Text.JavaScriptLiteral.False">
            <summary>
            Represents the Boolean value <see langword="false" />.
            </summary>
        </member>
        <member name="F:IDS.Text.JavaScriptLiteral.Null">
            <summary>
            Represents the <see langword="null" /> value, typed as an <see cref="T:System.Object" />.
            </summary>
        </member>
        <member name="F:IDS.Text.JavaScriptLiteral.OneInt32">
            <summary>
            Represents the number one (1), typed as an <see cref="T:System.Int32" />.
            </summary>
        </member>
        <member name="F:IDS.Text.JavaScriptLiteral.True">
            <summary>
            Represents the Boolean value <see langword="true" />.
            </summary>
        </member>
        <member name="F:IDS.Text.JavaScriptLiteral.ZeroDouble">
            <summary>
            Represents the number zero (0), typed as a <see cref="T:System.Double" />.
            </summary>
        </member>
        <member name="F:IDS.Text.JavaScriptLiteral.ZeroInt32">
            <summary>
            Represents the number zero (0), typed as an <see cref="T:System.Int32" />.
            </summary>
        </member>
        <member name="T:IDS.Text.JavaScriptLogicalAndExpression">
            <summary>
            Represents the logical AND of two Boolean-valued JavaScript expressions.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Text.JavaScriptLogicalAndExpression.#ctor(IDS.Text.JavaScriptExpression{System.Boolean},IDS.Text.JavaScriptExpression{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.JavaScriptLogicalAndExpression" /> class.
            </summary>
        </member>
        <member name="M:IDS.Text.JavaScriptLogicalAndExpression.AppendTo(System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Text.JavaScriptLogicalAndExpression.Simplify">
            <summary>
            Simplifies the expression, if possible.
            </summary>
        </member>
        <member name="T:IDS.Text.JavaScriptLogicalNotExpression">
            <summary>
            Represents the logical NOT of another Boolean-valued JavaScript expression.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Text.JavaScriptLogicalNotExpression.#ctor(IDS.Text.JavaScriptExpression{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.JavaScriptLogicalNotExpression" /> class.
            </summary>
        </member>
        <member name="M:IDS.Text.JavaScriptLogicalNotExpression.AppendTo(System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:IDS.Text.JavaScriptLogicalNotExpression.Simplify">
            <summary>
            Simplifies the expression, if possible.
            </summary>
        </member>
        <member name="T:IDS.Text.JavaScriptPropertyAccess">
            <summary>
            Represents a JavaScript expression that accesses a specified property of an object.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:IDS.Text.JavaScriptPropertyAccess.#ctor(IDS.Text.JavaScriptExpression,IDS.Text.JavaScriptExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.JavaScriptPropertyAccess" /> class.
            </summary>
            <param name="baseExpression">
            A <see cref="T:IDS.Text.JavaScriptExpression" /> that evaluates to an object.
            </param>
            <param name="property">
            A <see cref="T:IDS.Text.JavaScriptExpression" /> that evaluates to the name of the property to access.
            </param>
        </member>
        <member name="M:IDS.Text.JavaScriptPropertyAccess.AppendTo(System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Text.LoginNameUserIDFormatter">
            <summary>
            The LoginNameUserIDFormatter implements the <see cref="T:IDS.Text.IUserIDFormatter"/> interface and returns
            the <see cref="M:IDS.Security.Credentials.ToString"/> value from the Format() method.
            </summary>
        </member>
        <member name="M:IDS.Text.LoginNameUserIDFormatter.Format(IDS.Security.IUser)">
            <summary>
            Takes the User ID.
            </summary>
            <param name="user">The user.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="T:IDS.Text.NumericFormatProvider">
            <summary>
            The DecimalFormatProvider implements the IFormatProvider and ICustomFormatter interfaces for formatting decimals.
            </summary>
        </member>
        <member name="M:IDS.Text.NumericFormatProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.NumericFormatProvider"/> class.
            </summary>
        </member>
        <member name="M:IDS.Text.NumericFormatProvider.GetFormat(System.Type)">
            <summary>
            Gets an object that provides formatting services for the specified type.
            </summary>
            <param name="formatType">An object that specifies the type of format object to get.</param>
            <returns>
            The current instance, if formatType is the same type as the current instance; otherwise, null.
            </returns>
        </member>
        <member name="M:IDS.Text.NumericFormatProvider.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.
            </summary>
            <param name="format">A format string containing formatting specifications.</param>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"></see> object that supplies format information about the current instance.</param>
            <returns>
            The string representation of the value of arg, formatted as specified by format and formatProvider.
            </returns>
        </member>
        <member name="M:IDS.Text.NumericFormatProvider.IsNull(System.Object)">
            <summary>
            Determines whether the specified arg is null.
            </summary>
            <param name="arg">The arg.</param>
            <returns>
            	<c>true</c> if the specified arg is null; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDS.Text.NumericFormatProvider.ConvertToDecimal(System.Object)">
            <summary>
            Converts to decimal.
            </summary>
            <param name="arg">The arg.</param>
            <returns></returns>
        </member>
        <member name="T:IDS.Text.PadIDFormatter">
            <summary>
            The PadIDFormatter class implements the IIDFormatter interface and formats an ID
            by padding the ID with a specified character to a specified length.
            </summary>
        </member>
        <member name="T:IDS.Text.PadIDFormatter.PadDirection">
            <summary>
            Determines which side to pad the account number on.
            </summary>
        </member>
        <member name="F:IDS.Text.PadIDFormatter.PadDirection.PadLeft">
            <summary>
            Pad the value on the left.
            </summary>
        </member>
        <member name="F:IDS.Text.PadIDFormatter.PadDirection.PadRight">
            <summary>
            Pad the account number on the right.
            </summary>
        </member>
        <member name="M:IDS.Text.PadIDFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.PadIDFormatter"/> class.
            </summary>
        </member>
        <member name="M:IDS.Text.PadIDFormatter.#ctor(System.Int32,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.PadIDFormatter"/> class.
            </summary>
            <param name="padWidth">The minimum width to make the account number.</param>
            <param name="padChar">The character to use to pad the account number if the account number is less
            then the padLength.</param>
        </member>
        <member name="M:IDS.Text.PadIDFormatter.#ctor(System.Int32,System.Char,IDS.Text.PadIDFormatter.PadDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.PadIDFormatter"/> class.
            </summary>
            <param name="padWidth">The minimum width to make the valud.</param>
            <param name="padChar">The character to use to pad the valud if the value is less
            then the padLength.</param>
            <param name="padDirection">The side to pad the characters on.</param>
        </member>
        <member name="P:IDS.Text.PadIDFormatter.PaddingWidth">
            <summary>
            Gets or sets the minimum length to pad the value.
            </summary>
        </member>
        <member name="P:IDS.Text.PadIDFormatter.PaddingCharacter">
            <summary>
            Gets or sets the character to use to pad the value if the value is less
            then the PaddingWidth.
            </summary>
        </member>
        <member name="P:IDS.Text.PadIDFormatter.PaddingDirection">
            <summary>
            Gets or sets the side to pad the characters on.
            </summary>
        </member>
        <member name="P:IDS.Text.PadIDFormatter.OnlyPadIfNumeric">
            <summary>
            Gets or sets a value indicating whether to pad only if the value input is numeric.
            </summary>
            <value><c>true</c> if pad should only happen if the input is numeric; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:IDS.Text.PadIDFormatter.Format(System.String)">
            <summary>
            Formats the specified ID.
            </summary>
            <param name="value">The value to format.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="T:IDS.Text.SmartFormatProvider">
            <summary>
            Formatter that uses IDS.Text.DateTimeFormatProvider for DateTimes, the IDS.Text.StringFormatProvider for strings, and the default custom formatter for everything else.
            </summary>
        </member>
        <member name="F:IDS.Text.SmartFormatProvider.GlobalFormatProvider">
            <summary>
            This variable contains a static reference to a global SmartFormatProvider.
            </summary>
        </member>
        <member name="M:IDS.Text.SmartFormatProvider.GetFormat(System.Type)">
            <summary>
            Gets an object that provides formatting services for the specified type.
            </summary>
            <param name="formatType">An object that specifies the type of format object to get.</param>
            <returns>
            The current instance, if formatType is the same type as the current instance; otherwise, null.
            </returns>
        </member>
        <member name="M:IDS.Text.SmartFormatProvider.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.
            </summary>
            <param name="format">A format string containing formatting specifications.</param>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"></see> object that supplies format information about the current instance.</param>
            <returns>
            The string representation of the value of arg, formatted as specified by format and formatProvider.
            </returns>
        </member>
        <member name="T:IDS.Text.SqlBlacklistedWordProvider">
            <summary>
            Class which provides methods to manage blacklisted words
            </summary>
        </member>
        <member name="P:IDS.Text.SqlBlacklistedWordProvider.AppSqlConnectionService">
            <summary>
            Apps db SQL connection
            </summary>
        </member>
        <member name="M:IDS.Text.SqlBlacklistedWordProvider.GetBlacklistedWords">
            <summary>
            Gets the list of blacklisted words
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDS.Text.SqlBlacklistedWordProvider.InsertBlacklistedWord(System.String,System.String)">
            <summary>
            Inserts the blacklisted word
            </summary>
            <param name="word"></param>
            <param name="insertingUserID"></param>
        </member>
        <member name="M:IDS.Text.SqlBlacklistedWordProvider.UpdateBlacklistedWord(System.String,System.String,System.String)">
            <summary>
            Updates the blacklisted word
            </summary>
            <param name="word"></param>
            <param name="wordToUpdate"></param>
            <param name="updatingUserID"></param>
        </member>
        <member name="M:IDS.Text.SqlBlacklistedWordProvider.DeleteBlacklistedWord(System.String,System.String)">
            <summary>
            Deletes the blacklisted word
            </summary>
            <param name="word"></param>
            <param name="updatingUserID"></param>
        </member>
        <member name="T:IDS.Text.StringFormatProvider">
             <summary>
             Formatter that can manipulate the target as a string, transforming to all caps, lower, capitalization, etc.
             </summary>
             <remarks>
             Use this format provider to convert any argument to a string, and then manipulate that string in one of the supported ways.
             </remarks>
             <example>
             <code>
             IDS.Text.StringFormatProvider f = new IDS.Web.UI.StringFormatProvider();
             
             // syntax: "manipulation mode; maximum length; overflow text"
            
             Debug.WriteLine(string.Format(f, "caps", "this text will end up with every word capitalized"));
             Debug.WriteLine(string.Format(f, "lower", "this text will be all lower case"));
             Debug.WriteLine(string.Format(f, "upper;20;...", "this text will be all UPPER CASE and will be truncated after 20 characters. If truncated it trails with '...'"));
             Debug.WriteLine(string.Format(f, ";30;...cont", "the casing of this text will be left as is, but will be truncated after 30 characters. If truncated it trails with '...cont'"));
             Debug.WriteLine(string.Format(f, "htmlencode;30;<b>...</b>", "this text is html encoded and truncated after 30 characters"));
             Debug.WriteLine(string.Format(f, "left;15;noeffect", "this text will be truncated to the left-most 15 characters. The 'overflow text' parameter has no effect and can be omitted."));
             Debug.WriteLine(string.Format(f, "right;15;noeffect", "this text will be truncated to the right-most 15 characters. The 'overflow text' parameter has no effect and can be omitted."));
             </code>
             </example>
        </member>
        <member name="M:IDS.Text.StringFormatProvider.GetFormat(System.Type)">
            <summary>
            
            </summary>
            <param name="formatType"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Text.StringFormatProvider.Format(System.String,System.Object,System.IFormatProvider)">
             <summary>
             Converts the given string argument to a string with the given format string.
             </summary>
             <param name="format">Valid custom string format string.</param>
             <param name="arg">String value to format.</param>
             <param name="formatProvider">Ignored.</param>
             <returns>Formatted string value.</returns>
             <example>
             The syntax of the format string is &lt;manipulation mode>; &lt;maximum length>; &lt;overflow text>
             <code>
             IDS.Web.UI.StringFormatProvider f = new IDS.Web.UI.StringFormatProvider();
             
             // syntax: "manipulation mode; maximum length; overflow text"
            
             Debug.WriteLine(string.Format(f, "caps", "this text will end up with every word capitalized"));
             Debug.WriteLine(string.Format(f, "lower", "this text will be all lower case"));
             Debug.WriteLine(string.Format(f, "upper;20;...", "this text will be all UPPER CASE and will be truncated after 20 characters. If truncated it trails with '...'"));
             Debug.WriteLine(string.Format(f, ";30;...cont", "the casing of this text will be left as is, but will be truncated after 30 characters. If truncated it trails with '...cont'"));
             Debug.WriteLine(string.Format(f, "htmlencode;30;<b>...</b>", "this text is html encoded and truncated after 30 characters"));
             Debug.WriteLine(string.Format(f, "left;15;*", "this text will be truncated to the left-most 15 characters. The 'overflow text' parameter (optional) serves as a padding character if the source string is less than 15 characters."));
             Debug.WriteLine(string.Format(f, "right;15;*", "this text will be truncated to the right-most 15 characters. The 'overflow text' parameter (optional) serves as a padding character if the source string is less than 15 characters."));
             Debug.WriteLine(string.Format(f, "substring;10-15", "Only characters 10 through 15 will be displayed."));
             Debug.WriteLine(string.Format(f, "substring;10", "Only characters 10 and on will be displayed."));
             
             // StringFormatProvider also supports treating the string as a numeric number. In this mode, the 2nd section (optional) specifies the numeric format.
             
             Debug.WriteLine(string.Format(f, "numeric", "0000123456")); // since the parameter is converted to a number, the leading zeros will disappear.
             Debug.WriteLine(string.Format(f, "numeric;000000000000000", "0000123456")); // parameter is converted to a number, 123456, then formatted with the given format, so it will appear as 000000000123456.
             Debug.WriteLine(string.Format(f, "decimal;c", "1234.56")); // parameter is converted to a decimal and formatted as currency: $1,234.56
             // if for some reason the parameter cannot be converted to a number, it is left as-is.
             Debug.WriteLine(string.Format(f, "decimal;c", "abc")); // parameter cannot be converted, value is just "abc".
             // as with regular numeric format strings, you can specify multiple sections to format negative, zero, and positive values differently.
             // Since ';' is already a section separator, use a | to separate the sections instead.
             Debug.WriteLine(string.Format(f, "decimal;(0.00)|--|0.00", "1234.56")); // Value is in parens if negative, "--" if zero, regular number format if positive.
             Debug.WriteLine(string.Format(f, "Line1\nLine2:replace;\n;<br />\n}")); // Replace new line with a <br />.
            
             // StringFormatProvider also supports a chain of string manipulation method calls separated by periods.
             // .NET string manipulation methods and some IDS.Text.StringUtils methods are supported.
             // In this case, use C# syntax for the method calls. Note that method names are case sensitive, and currently only integer, character, and string literal arguments are supported.
             Debug.WriteLine(string.Format(f, "Substring(2, 7).ToUpperInvariant().PadLeft(10, '0')")); // Equivalent to f.Substring(2, 7).ToUpperInvariant().PadLeft(10, '0') in C#
             </code>
             </example>
        </member>
        <member name="M:IDS.Text.StringFormatProvider.InvokeMethod(System.Object,System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Invokes a specified method call that was parsed from a format string
            using the <see cref="T:IDS.Text.CSharpMethodCallParser" /> class.
            </summary>
            <param name="value">The object that is being formatted.</param>
            <param name="name">The name of a method that was parsed by the parser.</param>
            <param name="arguments">The arguments that were parsed by the parser.</param>
        </member>
        <member name="T:IDS.Text.StringUtils">
            <summary>
            Groups a set of useful <see cref="T:System.String" /> manipulation and validation 
            methods.
            </summary>
        </member>
        <member name="M:IDS.Text.StringUtils.IsDigitSequence(System.String)">
            <summary>
            Determines whether a string contains only decimal digits.
            </summary>
            <param name="value">
            The <see cref="T:System.String" /> to test.
            </param>
            <returns>
            <see langword="true" /> if the specified <paramref name="value" />
            contains only characters in the range '0' to '9' or is an empty string;
            otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:IDS.Text.StringUtils.IsDigitSequence(System.String,System.Int32)">
            <summary>
            Determines whether a string contains only decimal digits
            and has a specified length.
            </summary>
            <param name="value">
            The <see cref="T:System.String" /> to test.
            </param>
            <param name="expectedLength">
            The number of digits expected in the string.
            </param>
            <returns>
            <see langword="true" /> if the specified <paramref name="value" />
            contains only characters in the range '0' to '9'
            and has a length of <paramref name="expectedLength" />;
            otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:IDS.Text.StringUtils.IsDigitSequence(System.String,System.Int32,System.Int32)">
            <summary>
            Determines whether a string contains only decimal digits
            and has a length in a specified range.
            </summary>
            <param name="value">
            The <see cref="T:System.String" /> to test.
            </param>
            <param name="minLength">
            The minimum number of digits expected in the string.
            </param>
            <param name="maxLength">
            The maximum number of digits expected in the string.
            </param>
            <returns>
            <see langword="true" /> if the specified <paramref name="value" />
            contains only characters in the range '0' to '9'
            and has a length between <paramref name="minLength" /> and
            <paramref name="maxLength" />, inclusive;
            otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:IDS.Text.StringUtils.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether or not the specified <see cref="T:System.String" /> is 
            <see langword="null" /> or an <see cref="F:System.String.Empty" /> string.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true" /> if <paramref name="value" /> is <see langword="null" />
            or an empty string (""); otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:IDS.Text.StringUtils.ConvertEmptyToNull(System.String)">
            <summary>
            Converts an empty string to <see langword="null" />.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>
            <see langword="null" /> if <paramref name="value" /> is an empty 
            string or <see langword="null" />; otherwise, <paramref name="value" />.
            </returns>
        </member>
        <member name="M:IDS.Text.StringUtils.ConvertNullToEmpty(System.String)">
            <summary>
            Converts <see langword="null" /> to an empty string.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>
            An empty string if <paramref name="value" /> is <see langword="null" />;
            otherwise, <paramref name="value" />.
            </returns>
        </member>
        <member name="M:IDS.Text.StringUtils.Split(System.String,System.Char[])">
            <summary>
            Splits a delimited string and trims the items
            </summary>
            <param name="toSplit"></param>
            <param name="delimiter">a params list of delimiters</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Text.StringUtils.Join(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Concatenates a specified separator <see cref="T:System.String" /> between each 
            element of a specified <see cref="T:System.Collections.Specialized.StringCollection" />, yielding a 
            single concatenated string.
            </summary>
            <param name="separator">A <see cref="T:System.String" />.</param>
            <param name="value">A <see cref="T:System.Collections.Specialized.StringCollection" />.</param>
            <returns>
            A <see cref="T:System.String" /> consisting of the elements of <paramref name="value" /> 
            interspersed with the separator string.
            </returns>
            <remarks>
            <para>
            For example if <paramref name="separator" /> is ", " and the elements 
            of <paramref name="value" /> are "apple", "orange", "grape", and "pear", 
            <see cref="M:IDS.Text.StringUtils.Join(System.String,System.Collections.Specialized.StringCollection)" /> returns "apple, orange, 
            grape, pear".
            </para>
            <para>
            If <paramref name="separator" /> is <see langword="null" />, an empty 
            string (<see cref="F:System.String.Empty" />) is used instead.
            </para>
            </remarks>
        </member>
        <member name="M:IDS.Text.StringUtils.Join(System.String,System.Collections.IEnumerable)">
            <summary>
            Concatenates a specified separator <see cref="T:System.String" /> between
            the string representation of each element of a specified collection,
            yielding a single concatenated string.
            </summary>
            <param name="separator">
            A <see cref="T:System.String" />.
            </param>
            <param name="collection">
            An <see cref="T:System.Collections.IEnumerable" /> collection.
            </param>
            <returns>
            A <see cref="T:System.String" /> consisting of the string representation
            of each element of <paramref name="collection" />
            interspersed with the <paramref name="separator" /> string.
            </returns>
        </member>
        <member name="M:IDS.Text.StringUtils.GetEscapedStringLiteral(System.String)">
            <summary>
            Converts a specified string to an equivalent C# string literal,
            replacing non-printable and non-ASCII characters by corresponding
            escape sequences.
            </summary>
            <param name="value">
            The <see cref="T:System.String" /> to convert.
            </param>
            <returns>
            A <see cref="T:System.String" /> containing a C# string literal that
            represents the specified <paramref name="value" />. The literal is
            created by concatenating an opening double quote (<c>"</c>),
            a copy of <paramref name="value" /> with each non-printable or
            non-ASCII character replaced by a corresponding escape sequence,
            and a closing double quote.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> is <see langword="null" />.
            </exception>
            <remarks>
            <para>
            The following table lists the characters that are replaced by escape sequences:
            </para>
            <list type="table">
            <listheader><term>Character</term><description>Escape sequence</description></listheader>
            <item><term>U+0000 (null)</term><description>\0</description></item>
            <item><term>U+0007 (bell)</term><description>\a</description></item>
            <item><term>U+0008 (backspace)</term><description>\b</description></item>
            <item><term>U+0009 (horizontal tab)</term><description>\t</description></item>
            <item><term>U+000A (line feed)</term><description>\n</description></item>
            <item><term>U+000B (vertical tab)</term><description>\v</description></item>
            <item><term>U+000C (form feed)</term><description>\f</description></item>
            <item><term>U+000D (carriage return)</term><description>\r</description></item>
            <item><term>" (double quote)</term><description>\"</description></item>
            <item><term>\ (backslash)</term><description>\\</description></item>
            <item><term>U+WXYZ where 0xWXYZ &lt; 0x20 or 0xWXYZ &gt; 0xFE</term><description>\uWXYZ</description></item>
            </list>
            </remarks>
            <example>
            <code>
            string s = "\tHello \"World\"!";
            Console.WriteLine(s);
            Console.WriteLine(StringUtility.GetEscapedStringLiteral(s));
            // Output:
            //         Hello "World"!
            // "\tHello \"World\"!"
            </code>
            </example>
            <seealso cref="M:IDS.Text.StringUtils.GetVerbatimStringLiteral(System.String)" />
            <seealso cref="M:IDS.Text.StringUtils.ParseStringLiteral(System.String)" />
        </member>
        <member name="M:IDS.Text.StringUtils.GetEscapedStringLiteral(System.String,IDS.Text.StringLiteralLanguage,IDS.Text.StringLiteralStyle)">
            <summary>
            Converts a specified string to an equivalent C# or JavaScript string literal,
            replacing non-printable and non-ASCII characters by corresponding
            escape sequences.
            </summary>
            <param name="value">
            The <see cref="T:System.String" /> to convert.
            </param>
            <param name="language">
            A <see cref="T:IDS.Text.StringLiteralLanguage" /> that specifies
            the programming language in which to represent the string literal.
            </param>
            <param name="style">
            A <see cref="T:IDS.Text.StringLiteralStyle" /> that specifies
            whether or not to surround the string literal with quotes.
            </param>
            <returns>
            <para>
            A <see cref="T:System.String" /> containing a C# or JavaScript string literal that
            represents the specified <paramref name="value" />. The literal is
            created by concatenating:
            </para>
            <list type="bullet">
            <item>
            an opening double quote (<c>"</c>) if <paramref name="style" /> is
            <see cref="F:IDS.Text.StringLiteralStyle.Quoted" />,
            </item>
            <item>
            a copy of <paramref name="value" /> with each non-printable or
            non-ASCII character replaced by a corresponding escape sequence, and
            </item>
            <item>
            a closing double quote if <paramref name="style" /> is
            <see cref="F:IDS.Text.StringLiteralStyle.Quoted" />.
            </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> is <see langword="null" />.
            </exception>
            <remarks>
            <para>
            The following table lists the characters that are replaced by escape sequences:
            </para>
            <list type="table">
            <listheader><term>Character</term><description>Escape sequence</description></listheader>
            <item><term>U+0000 (null)</term><description>\0 (C# only)</description></item>
            <item><term>U+0007 (bell)</term><description>\a (C# only)</description></item>
            <item><term>U+0008 (backspace)</term><description>\b</description></item>
            <item><term>U+0009 (horizontal tab)</term><description>\t</description></item>
            <item><term>U+000A (line feed)</term><description>\n</description></item>
            <item><term>U+000B (vertical tab)</term><description>\v (C# only)</description></item>
            <item><term>U+000C (form feed)</term><description>\f</description></item>
            <item><term>U+000D (carriage return)</term><description>\r</description></item>
            <item><term>' (double quote)</term><description>\' (JavaScript only)</description></item>
            <item><term>" (double quote)</term><description>\"</description></item>
            <item><term>/ (slash)</term><description>\/ (JavaScript only)</description></item>
            <item><term>\ (backslash)</term><description>\\</description></item>
            <item><term>U+WXYZ where 0xWXYZ &lt; 0x20 or 0xWXYZ &gt; 0xFE</term><description>\uWXYZ</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:IDS.Text.StringUtils.GetVerbatimStringLiteral(System.String)">
            <summary>
            Converts a specified string to an equivalent C# verbatim (@-quoted)
            string literal.
            </summary>
            <param name="value">
            The <see cref="T:System.String" /> to convert.
            </param>
            <returns>
            A <see cref="T:System.String" /> containing a C# verbatim string literal that
            represents the specified <paramref name="value" />. The literal is
            created by concatenating an opening at sign and double quote (<c>@"</c>),
            a copy of <paramref name="value" /> with each double quote replaced
            by a pair of double quotes, and a closing double quote.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> is <see langword="null" />.
            </exception>
            <example>
            <code>
            string s = "\tHello \"World\"!";
            Console.WriteLine(s);
            Console.WriteLine(StringUtility.GetVerbatimStringLiteral(s));
            // Output:
            //         Hello "World"!
            // @"      Hello ""World""!"
            </code>
            </example>
            <seealso cref="M:IDS.Text.StringUtils.GetEscapedStringLiteral(System.String)" />
        </member>
        <member name="M:IDS.Text.StringUtils.ParseStringLiteral(System.String)">
            <summary>
            Converts a specified C# string literal or C# verbatim (@-quoted)
            string literal to the string represented by the literal.
            </summary>
            <param name="literal">
            The <see cref="T:System.String" /> to convert. It must be a valid
            C# string literal (in which case it must begin and end with
            a double quote (<c>"</c>), may contain escape sequences,
            and must not contain newline characters) or a valid C#
            verbatim string literal (in which case it must begin with
            an at sign and double quote (<c>@"</c>), must end with a double quote,
            and must not contain unpaired double quotes).
            </param>
            <returns>
            The string represented by the <paramref name="literal" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="literal" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="literal" /> is not a valid literal.
            </exception>
            <remarks>
            All C# escape sequences are supported except for \U.
            </remarks>
            <example>
            <code>
            string s1 = "\"\\tHello \\\"World\\\"!\"";
            string s2 = "@\"\tHello \"\"World\"\"!\"";
            Console.WriteLine(s1);
            Console.WriteLine(StringUtility.ParseStringLiteral(s1));
            Console.WriteLine(s2);
            Console.WriteLine(StringUtility.ParseStringLiteral(s2));
            // Output:
            // "\tHello \"World\"!"
            //         Hello "World"!
            // @"      Hello ""World""!"
            //         Hello "World"!
            </code>
            </example>
        </member>
        <member name="M:IDS.Text.StringUtils.ToTitleCase(System.String)">
            <summary>
            Converts a specified string to title case.
            </summary>
            <param name="value">
            The string to convert to title case.
            </param>
            <returns>
            The specified string converted to title case.
            </returns>
            <remarks>
            For each word, the first letter is converted to uppercase
            and the remaining letters are converted to lowercase.
            </remarks>
        </member>
        <member name="M:IDS.Text.StringUtils.BreakForWrapping(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="numChars"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Text.StringUtils.StaticItemsToList(System.String)">
            <summary>
            
            </summary>
            <param name="staticItems"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Text.StringUtils.StaticItemsToString(System.Collections.Generic.List{System.Tuple{System.String,System.String}})">
            <summary>
            
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Text.StringUtils.GetFriendly(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="enumName"></param>
            <param name="staticItems"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Text.StringUtils.Left(System.String,System.Int32)">
            <summary>
            Returns the left part of a character string with the specified number of characters.
            </summary>
            <param name="value">The string value to check.</param>
            <param name="maxLength">The maximum number of characters that the string can contain.</param>
            <returns>
            Returns the left part of <paramref name="value" /> with the specified <paramref name="maxLength" />.
            </returns>
        </member>
        <member name="M:IDS.Text.StringUtils.Right(System.String,System.Int32)">
            <summary>
            Returns the right part of a character string with the specified number of characters.
            </summary>
            <param name="value">The string value to check.</param>
            <param name="maxLength">The maximum number of characters that the string can contain.</param>
            <returns>
            Returns the right part of <paramref name="value" /> with the specified <paramref name="maxLength" />.
            </returns>
        </member>
        <member name="M:IDS.Text.StringUtils.Mask(System.String,System.Int32,System.Char)">
            <summary>
            Replaces all but the last several characters in a specified string with a specified masking character.
            </summary>
            <param name="value">
            The string to mask.
            </param>
            <param name="unmaskedLength">
            The number of characters at the end of the string to leave unmasked.
            </param>
            <param name="maskingCharacter">
            The masking character.
            </param>
            <returns>
            The masked string, which will always be the same length as the original string.
            </returns>
        </member>
        <member name="M:IDS.Text.StringUtils.IsRegularFormatString(System.String)">
            <summary>
            Determines whether a specified composite format string can be safely passed to String.Format because
            it contains only indexed placeholders ("{0:format}") and no named placeholders ("{Property:format}").
            </summary>
        </member>
        <member name="M:IDS.Text.StringUtils.EscapeCsvValue(System.String)">
            <summary>
            Quotes and sanitizes a specified string value so that it is safe to include in a CSV file.
            </summary>
            <param name="value">
            The string value to include in a CSV file.
            </param>
            <returns>
            The quote-enclosed, sanitized value.
            </returns>
            <remarks>
            This method protects against Excel formula injection attacks.
            </remarks>
        </member>
        <member name="T:IDS.Text.StringLiteralLanguage">
            <summary>
            Specifies the programming language used to represent a string literal.
            </summary>
        </member>
        <member name="F:IDS.Text.StringLiteralLanguage.CSharp">
            <summary>
            C#
            </summary>
        </member>
        <member name="F:IDS.Text.StringLiteralLanguage.JavaScript">
            <summary>
            JavaScript
            </summary>
        </member>
        <member name="F:IDS.Text.StringLiteralLanguage.Sql">
            <summary>
            Sql
            </summary>
        </member>
        <member name="T:IDS.Text.StringLiteralStyle">
            <summary>
            Specifies whether or not a string literal is surrounded by quotes.
            </summary>
        </member>
        <member name="F:IDS.Text.StringLiteralStyle.Bare">
            <summary>
            The string literal is not surrounded by quotes.
            </summary>
        </member>
        <member name="F:IDS.Text.StringLiteralStyle.Quoted">
            <summary>
            The string literal is surrounded by quotes.
            </summary>
        </member>
        <member name="T:IDS.Text.TruncateZeroesIDFormatter">
            <summary>
            The TruncateZeroesIDFormatter class implements the IIDFormatter interface and formats an ID
            by trimming any leading and trailing spaces and removing any leading zeroes.
            </summary>
        </member>
        <member name="M:IDS.Text.TruncateZeroesIDFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Text.TruncateZeroesIDFormatter"/> class.
            </summary>
        </member>
        <member name="M:IDS.Text.TruncateZeroesIDFormatter.Format(System.String)">
            <summary>
            Formats the specified ID.
            </summary>
            <param name="value">The value to format.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="T:IDS.Threading.AsyncPrefetchService">
            <summary>
            The AsyncPrefetchService class implements an asynchronous prefetch service.
            </summary>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Threading.AsyncPrefetchService"/> class.
            </summary>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:IDS.Threading.AsyncPrefetchService"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.Dispose(System.Boolean)">
            <summary>
            Disposes the specified disposing.
            </summary>
            <param name="disposing">if set to <c>true</c> [disposing].</param>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.GetTaskByID(System.Object)">
            <summary>
            Gets the task by ID.
            </summary>
            <param name="taskID">The task ID.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.OnTaskCompleted(System.Object)">
            <summary>
            Called when [task completed].
            </summary>
            <param name="taskID">The task ID.</param>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.RunPrefetchTask(System.Object,System.Delegate,System.Boolean,System.Object[])">
            <summary>
            Runs the prefetch task.
            </summary>
            <param name="taskID">The task ID.</param>
            <param name="method">The method.</param>
            <param name="isBackgroundTask">if set to <c>true</c> if the task is a background task.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.RunPrefetchTask(IDS.Threading.IAsyncPrefetchTask)">
            <summary>
            Runs the prefetch task.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.TaskResultIsReady(IDS.Threading.IAsyncPrefetchTask)">
            <summary>
            Tasks the result is ready.
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.TaskResultIsReady(System.Object)">
            <summary>
            Tasks the result is ready.
            </summary>
            <param name="taskID">The task ID.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.GetTaskResult(IDS.Threading.IAsyncPrefetchTask,System.Int32,System.Boolean)">
            <summary>
            Gets the task result.
            </summary>
            <param name="task">The task.</param>
            <param name="waitMilliseconds">The wait milliseconds.</param>
            <param name="removeTask">if set to <c>true</c>, remove the task.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.GetTaskResult(IDS.Threading.IAsyncPrefetchTask)">
            <summary>
            Gets the task result.
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.GetTaskResult(IDS.Threading.IAsyncPrefetchTask,System.Boolean)">
            <summary>
            Gets the task result.
            </summary>
            <param name="task">The task.</param>
            <param name="removeTask">if set to <c>true</c>, remove the task.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.GetTaskResult(System.Object)">
            <summary>
            Gets the task result.
            </summary>
            <param name="taskID">The task ID.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.GetTaskResult(System.Object,System.Boolean)">
            <summary>
            Gets the task result.
            </summary>
            <param name="taskID">The task ID.</param>
            <param name="removeTask">if set to <c>true</c> [remove task].</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.GetTaskResult(System.Object,System.Int32)">
            <summary>
            Gets the task result.
            </summary>
            <param name="taskID">The task ID.</param>
            <param name="waitMilliseconds">The wait milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.RemoveTask(System.Object)">
            <summary>
            Removes the task.
            </summary>
            <param name="taskID">The task ID.</param>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.TaskHasBeenStarted(System.Object)">
            <summary>
            Tasks the has been started.
            </summary>
            <param name="taskID">The task ID.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchService.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:IDS.Threading.AsyncPrefetchTask">
            <summary>
            The AsyncPrefetchTask class is an implementation of the IAsyncPrefetchTask interface.
            </summary>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Threading.AsyncPrefetchTask"/> class.
            </summary>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchTask.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Threading.AsyncPrefetchTask"/> class.
            </summary>
            <param name="id">The id of the prefetch task.</param>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchTask.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:IDS.Threading.AsyncPrefetchTask"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchTask.OnTaskComplete(System.Object)">
            <summary>
            Called when the task has completed.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchTask.Dispose(System.Boolean)">
            <summary>
            Disposes the specified disposing.
            </summary>
            <param name="disposing">if set to <c>true</c>, the class is disposing.</param>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchTask.DoThreadProc">
            <summary>
            Executes the main thread method.
            </summary>
            <returns>Returns the result of executing the prefetch method.</returns>
        </member>
        <member name="P:IDS.Threading.AsyncPrefetchTask.ID">
            <summary>
            Gets or sets the ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:IDS.Threading.AsyncPrefetchTask.Thread">
            <summary>
            Gets or sets the thread.
            </summary>
            <value>The thread.</value>
        </member>
        <member name="P:IDS.Threading.AsyncPrefetchTask.IsBackgroundTask">
            <summary>
            Gets or sets a value indicating whether this instance is background task.
            </summary>
            <value>
            	<c>true</c> if this instance is background task; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Threading.AsyncPrefetchTask.SynchronizationHandle">
            <summary>
            Gets the synchronization handle.
            </summary>
            <value>The synchronization handle.</value>
        </member>
        <member name="P:IDS.Threading.AsyncPrefetchTask.PrefetchMethodArgs">
            <summary>
            Gets the prefetch method arguments.
            </summary>
            <value>The prefetch method arguments.</value>
        </member>
        <member name="P:IDS.Threading.AsyncPrefetchTask.PrefetchMethod">
            <summary>
            Gets or sets the prefetch method.
            </summary>
            <value>The prefetch method.</value>
        </member>
        <member name="P:IDS.Threading.AsyncPrefetchTask.PrefetchResult">
            <summary>
            Gets the prefetch result.
            </summary>
            <value>The prefetch result.</value>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchTask.ThreadProc">
            <summary>
            The procedure that gets called to do the actual prefetching.
            </summary>
        </member>
        <member name="M:IDS.Threading.AsyncPrefetchTask.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:IDS.Threading.BackgroundTaskScheduler">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Threading.BackgroundTaskScheduler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Threading.BackgroundTaskScheduler" /> class.
            </summary>
        </member>
        <member name="M:IDS.Threading.BackgroundTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Threading.BackgroundTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Threading.BackgroundTaskScheduler.GetScheduledTasks">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Threading.BackgroundTaskService">
            <summary>
            Runs tasks asynchronously on the thread pool.
            </summary>
        </member>
        <member name="M:IDS.Threading.BackgroundTaskService.StartTask``1(System.String,System.TimeSpan,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            Starts a specified task.
            </summary>
            <typeparam name="TResult">
            </typeparam>
            <param name="description">
            A description of the task, for debugging purposes.
            </param>
            <param name="timeout">
            The timeout period for the task.
            </param>
            <param name="getTask">
            A delegate the returns the task to start.
            </param>
            <returns>
            A string that uniquely identifies the task.
            </returns>
        </member>
        <member name="M:IDS.Threading.BackgroundTaskService.StartTask``1(System.String,System.TimeSpan,System.TimeSpan,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            Starts a specified task.
            </summary>
            <typeparam name="TResult">
            </typeparam>
            <param name="description">
            A description of the task, for debugging purposes.
            </param>
            <param name="timeout">
            The timeout period for the task.
            </param>
            <param name="expiration">
            The expiration period for the task result.
            </param>
            <param name="getTask">
            A delegate the returns the task to start.
            </param>
            <returns>
            A string that uniquely identifies the task.
            </returns>
        </member>
        <member name="M:IDS.Threading.BackgroundTaskService.StartTask``1(System.String,System.TimeSpan,System.TimeSpan,System.Func{System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            Starts a specified task.
            </summary>
            <typeparam name="TResult">
            </typeparam>
            <param name="description">
            A description of the task, for debugging purposes.
            </param>
            <param name="timeout">
            The timeout period for the task.
            </param>
            <param name="expiration">
            The expiration period for the task result.
            </param>
            <param name="getTask">
            A delegate that receives the ID of the task and returns the task to start.
            </param>
            <returns>
            A string that uniquely identifies the task.
            </returns>
        </member>
        <member name="M:IDS.Threading.BackgroundTaskService.TryGetTaskResult``1(System.String,``0@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Threading.BackgroundTaskService.TryGetTaskResult``2(System.String,``0@,System.Collections.Generic.List{``1}@)">
            <summary>
            This method will return the partial results along with the Main Result.
            </summary>
        </member>
        <member name="M:IDS.Threading.BackgroundTaskService.EnqueueTaskPartialResult(System.String,System.Object)">
            <summary>
            Enqueue/Insert a partial result to BackgroundTaskPartialResult(will be treated as FIFO) table
            </summary>
        </member>
        <member name="M:IDS.Threading.BackgroundTaskService.DoAddTask(System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Threading.BackgroundTaskService.DoGetTaskResult``2(System.String,``0@,System.Collections.Generic.List{``1}@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Threading.BackgroundTaskService.DoSetTaskResult(System.String,System.Boolean,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Threading.BackgroundTaskService.DoEnqueueTaskPartialResult(System.String,System.Object)">
             <summary>
            Enqueue/Insert a partial result to BackgroundTaskPartialResult(will be treated as FIFO) table
             </summary>
        </member>
        <member name="T:IDS.Threading.TaskExpiredException">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDS.Threading.IAsyncPrefetchTask">
            <summary>
            The IAsyncPrefetchTask interface defines methods for implementing a task that prefetches data before it is actually requested.
            </summary>
        </member>
        <member name="P:IDS.Threading.IAsyncPrefetchTask.ID">
            <summary>
            Gets or sets the ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:IDS.Threading.IAsyncPrefetchTask.Thread">
            <summary>
            Gets or sets the thread.
            </summary>
            <value>The thread.</value>
        </member>
        <member name="P:IDS.Threading.IAsyncPrefetchTask.IsBackgroundTask">
            <summary>
            Gets or sets a value indicating whether this instance is background task.
            </summary>
            <value>
            	<c>true</c> if this instance is background task; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDS.Threading.IAsyncPrefetchTask.SynchronizationHandle">
            <summary>
            Gets the synchronization handle.
            </summary>
            <value>The synchronization handle.</value>
        </member>
        <member name="P:IDS.Threading.IAsyncPrefetchTask.PrefetchMethodArgs">
            <summary>
            Gets the prefetch method arguments.
            </summary>
            <value>The prefetch method arguments.</value>
        </member>
        <member name="P:IDS.Threading.IAsyncPrefetchTask.PrefetchMethod">
            <summary>
            Gets or sets the prefetch method.
            </summary>
            <value>The prefetch method.</value>
        </member>
        <member name="P:IDS.Threading.IAsyncPrefetchTask.PrefetchResult">
            <summary>
            Gets the prefetch result.
            </summary>
            <value>The prefetch result.</value>
        </member>
        <member name="M:IDS.Threading.IAsyncPrefetchTask.ThreadProc">
            <summary>
            The procedure that gets called to do the actual prefetching.
            </summary>
        </member>
        <member name="T:IDS.Threading.LockTimeoutException">
            <summary>
            Thrown when a lock times out.
            </summary>
        </member>
        <member name="M:IDS.Threading.LockTimeoutException.#ctor">
            <summary>
            Creates a new <see cref="T:IDS.Threading.LockTimeoutException"/> instance.
            </summary>
        </member>
        <member name="M:IDS.Threading.LockTimeoutException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IDS.Threading.LockTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:IDS.Threading.LockTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:IDS.Threading.LockTimeoutException.ToString">
            <summary>
            Returns a string representation of the exception.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IDS.Threading.InvalidMutexOperationException">
            <summary>
            This Exception is thrown when a thread attempts to release a mutex that it does not own.
            </summary>
        </member>
        <member name="M:IDS.Threading.InvalidMutexOperationException.#ctor">
            <summary>
            The constructor that creates an exception and sets the exception message.
            </summary>
        </member>
        <member name="M:IDS.Threading.InvalidMutexOperationException.#ctor(System.Exception)">
            <summary>
            The constructor that creates an exception and sets the exception message and an inner exception.
            </summary>
            <param name="innerException">The exception that caused this exception to be thrown.</param>
        </member>
        <member name="M:IDS.Threading.InvalidMutexOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor that creates an exception and sets the exception info and context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:IDS.Threading.Mutex">
            <summary>
            This class guarantees first in first out for all objects that wait to obtain mutually
            exclusive use of the mutex.
            </summary>
            <remarks>
            The ThreadAbortException exception behaves differently from other exceptions. The exception cannot be
            swallowed. Therefore, there is no need to call throw to rethrow it. Additionally, for each method in
            the call stack, if the instruction pointer points at code inside of a try block, code in its finally
            block and any catch(ThreadAbortException),catch(SystemException), and catch(Exception) will execute,
            but no other code will ever execute. If, for one of the methods in the call stack, the instruction
            pointer points to code inside a finally block when the thread is aborted, then no code for that method
            will ever execute. Code will only execute if the instruction pointer is pointing at code inside of a try
            block when the thread is aborted.
            </remarks>
        </member>
        <member name="T:IDS.Threading.Mutex.MutexItem">
            <summary>
            This class represents a thread that requests ownership of the mutex.
            </summary>
        </member>
        <member name="P:IDS.Threading.Mutex.MutexItem.Thread">
            <summary>
            Gets the System.Threading.Thread object associated with the object.
            </summary>
        </member>
        <member name="P:IDS.Threading.Mutex.MutexItem.CanOwnMutex">
            <summary>
            Gets whether the thread can own the mutex or not. If the thread is aborted,
            or cannot be resumed, then this property is set to false and the request to
            own the mutex is never granted.
            </summary>
        </member>
        <member name="M:IDS.Threading.Mutex.MutexItem.IncrementWaitOneCount">
            <summary>
            Increments the number of times the thread has called WaitOne.
            </summary>
            <returns>The resulting WaitOne count.</returns>
        </member>
        <member name="M:IDS.Threading.Mutex.MutexItem.DecrementWaitOneCount">
            <summary>
            Deccrements the number of times the thread has to call ReleaseMutex.
            </summary>
            <returns>The resulting WaitOne count.</returns>
        </member>
        <member name="M:IDS.Threading.Mutex.MutexItem.Wait">
            <summary>
            Causes the thread to wait until the waitEvent is signaled.
            </summary>
            <returns>
            True if the thread receives a signal; otherwise, false. See System.Threading.WaitHandle.WaitOne
            for more details.
            </returns>
        </member>
        <member name="M:IDS.Threading.Mutex.MutexItem.Wait(System.TimeSpan)">
            <summary>
            Causes the thread to wait until the waitEvent is signaled, or until the timeout is reached.
            </summary>
            <param name="timeout">The timespan to wait for the thread to receive a signal.</param>
            <returns>
            True if the thread receives a signal; otherwise, false. See System.Threading.WaitHandle.WaitOne
            for more details.
            </returns>
        </member>
        <member name="M:IDS.Threading.Mutex.MutexItem.SignalWaitOver">
            <summary>
            Signals the thread that its wait is over so it can take ownership of the mutex.
            </summary>
        </member>
        <member name="M:IDS.Threading.Mutex.#ctor">
            <summary>
            The constructor creates an instance of this class.
            </summary>
        </member>
        <member name="M:IDS.Threading.Mutex.Finalize">
            <summary>
            The destructor ensures that native resources are cleaned up.
            </summary>
        </member>
        <member name="M:IDS.Threading.Mutex.MutexManagementThreadProc">
            <summary>
            This method is the thread procedure that manages the threads that request
            ownership of this mutex. This thread procedure is started at object construction
            and runs until the object is disposed. This method ensures that the thread
            next in line to receive ownership is resumed and given ownership.
            </summary>
        </member>
        <member name="M:IDS.Threading.Mutex.WaitOne">
            <summary>
            Blocks the current thread until the thread receives ownership of the mutex.
            </summary>
            <returns>True if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:IDS.Threading.Mutex.WaitOne(System.Int32)">
            <summary>
            Blocks the current thread until the thread receives ownership of the mutex, or until
            the timeout is reached.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to receive a signal.</param>
            <returns>True if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:IDS.Threading.Mutex.WaitOne(System.TimeSpan)">
            <summary>
            Blocks the current thread until the thread receives ownership of the mutex, or until
            the timeout is reached.
            </summary>
            <param name="timeout">The timespan to wait for the thread to receive a signal.</param>
            <returns>True if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:IDS.Threading.Mutex.ReleaseMutex">
            <summary>
            Releases ownership of the mutex by the current thread.
            </summary>
        </member>
        <member name="M:IDS.Threading.Mutex.Close">
            <summary>
            Releases all resources held by the mutex.
            </summary>
        </member>
        <member name="M:IDS.Threading.Mutex.Dispose">
            <summary>
            Releases all resources held by the mutex.
            </summary>
        </member>
        <member name="M:IDS.Threading.Mutex.Dispose(System.Boolean)">
            <summary>
            Signals the mutex management thread to exit and terminate the thread.
            </summary>
            <param name="disposing">
            True if the method is called deterministically by a client, or false if the method is
            called by the OS during finalization.
            </param>
        </member>
        <member name="T:IDS.Threading.SingleThreadContext">
            <remarks>
            This code is adapted from Stephen Toub's AsyncPump class and Stephen Cleary's AsyncContext class:
            https://blogs.msdn.microsoft.com/pfxteam/2012/02/02/await-synchronizationcontext-and-console-apps-part-3/
            https://github.com/StephenCleary/AsyncEx
            </remarks>
        </member>
        <member name="T:IDS.Threading.SqlBackgroundTaskService">
            <summary>
            Provides an implementation of <see cref="T:IDS.Threading.BackgroundTaskService" /> for SQL Server.
            </summary>
        </member>
        <member name="P:IDS.Threading.SqlBackgroundTaskService.ConnectionService">
            <summary>
            Gets or sets the configured <see cref="T:IDS.Data.SqlConnectionService" />.
            </summary>
        </member>
        <member name="M:IDS.Threading.SqlBackgroundTaskService.DoAddTask(System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Threading.SqlBackgroundTaskService.DoGetTaskResult``2(System.String,``0@,System.Collections.Generic.List{``1}@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Threading.SqlBackgroundTaskService.DoSetTaskResult(System.String,System.Boolean,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Threading.SqlBackgroundTaskService.DoEnqueueTaskPartialResult(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:IDS.Threading.SynchronizationContextScope">
            <summary>
            Temporarily replaces the <see cref="T:System.Threading.SynchronizationContext" /> for the current thread.
            </summary>
        </member>
        <member name="M:IDS.Threading.SynchronizationContextScope.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Replaces the current <see cref="T:System.Threading.SynchronizationContext" /> with a specified context.
            </summary>
            <param name="newContext">
            The new <see cref="T:System.Threading.SynchronizationContext" />, or <see langword="null" /> to remove the current context.
            </param>
        </member>
        <member name="M:IDS.Threading.SynchronizationContextScope.Dispose">
            <summary>
            Restores the original <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
        </member>
        <member name="T:IDS.Threading.TaskHelper">
            <summary>
            Provides <see langword="static" /> methods for working with <see cref="T:System.Threading.Tasks.Task" /> objects.
            </summary>
        </member>
        <member name="M:IDS.Threading.TaskHelper.RunSynchronously(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs a <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current thread.
            </summary>
            <param name="func">
            A function that returns the <see cref="T:System.Threading.Tasks.Task" /> to run.
            </param>
        </member>
        <member name="M:IDS.Threading.TaskHelper.RunSynchronously``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs a <see cref="T:System.Threading.Tasks.Task`1" /> synchronously on the current thread and returns its result.
            </summary>
            <typeparam name="TResult">
            The type of the result produced by the task.
            </typeparam>
            <param name="func">
            A function that returns the <see cref="T:System.Threading.Tasks.Task`1" /> to run.
            </param>
            <returns>
            The result of the task.
            </returns>
        </member>
        <member name="T:IDS.Threading.ThreadPoolThrottle">
            <summary>
            The ThreadPoolThrottle class implements a wrapper around the ThreadPool.QueueUserWorkItem method
            that adds throttling to limit the number of concurrent worker items to a maximum number.
            </summary>
        </member>
        <member name="M:IDS.Threading.ThreadPoolThrottle.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Threading.ThreadPoolThrottle"/> class.
            </summary>
            <param name="maximumAllowed">The maximum number of concurrent work items allowed.</param>
        </member>
        <member name="M:IDS.Threading.ThreadPoolThrottle.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>
            Queues a method for execution. The method executes when a slot in the throttled thread pool
            becomes available.
            </summary>
            <param name="callback">A WaitCallback(object) representing the work item method to execute.</param>
        </member>
        <member name="M:IDS.Threading.ThreadPoolThrottle.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            Queues a method for execution and specifies an object containing data to be used by the method. 
            The method executes when a slot in the throttled thread pool becomes available.
            </summary>
            <param name="callback">A WaitCallback(object) representing the work item method to execute.</param>
            <param name="state">An object containing data to be used by the method.</param>
        </member>
        <member name="M:IDS.Threading.ThreadPoolThrottle.HandleWorkItem(System.Object)">
            <summary>
            A private method for handling throttling the work item.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="T:IDS.Threading.ThreadPoolThrottle.QueuedCallback">
            <summary>
            The QueuedCallback class is a private class for encapsulating the Callback and State
            for a queued work item.
            </summary>
        </member>
        <member name="M:IDS.Threading.ThreadPoolThrottle.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:IDS.Threading.TimedLock">
            <summary>
            Class provides a nice way of obtaining a lock that will time out 
            with a cleaner syntax than using the whole Monitor.TryEnter() method.
            </summary>
            <remarks>
            Adapted from Ian Griffiths article http://www.interact-sw.co.uk/iangblog/2004/03/23/locking 
            and incorporating suggestions by Marek Malowidzki as outlined in this blog post 
            http://www.interact-sw.co.uk/iangblog/2004/05/12/timedlockstacktrace
            </remarks>
            <example>
            Instead of:
            <code>
            lock(obj)
            {
            	//Thread safe operation
            }
            
            do this:
            
            using(TimedLock.Lock(obj))
            {
            	//Thread safe operations
            }
            
            or this:
            
            try
            {
            	TimedLock timeLock = TimedLock.Lock(obj);
            	//Thread safe operations
            	timeLock.Dispose();
            }
            catch(LockTimeoutException e)
            {
            	Console.WriteLine("Couldn't get a lock!");
            	StackTrace otherStack = e.GetBlockingThreadStackTrace(5000);
            	if(otherStack == null)
            	{
            		Console.WriteLine("Couldn't get other stack!");
            	}
            	else
            	{
            		Console.WriteLine("Stack trace of thread that owns lock!");
            	}
            	
            }
            </code>
            </example>
        </member>
        <member name="M:IDS.Threading.TimedLock.Lock(System.Object,System.TimeSpan)">
            <summary>
            Attempts to obtain a lock on the specified object for up to 
            the specified timeout.
            </summary>
            <param name="o"></param>
            <param name="timeout"></param>
            <returns></returns>
            <exception cref="T:System.TimeoutException">The <see cref="T:System.TimeoutException"/> is thrown if the lockout exceeds the specified timeout period.</exception>
        </member>
        <member name="M:IDS.Threading.TimedLock.Dispose">
            <summary>
            Disposes of this lock.
            </summary>
        </member>
        <member name="T:IDS.Threading.UndisposedLockException">
            <summary>
            This exception indicates that a user of the TimedLock struct 
            failed to leave a Monitor.  This could be the result of a 
            deadlock or forgetting to use the using statement or a try 
            finally block.
            </summary>
        </member>
        <member name="M:IDS.Threading.UndisposedLockException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IDS.Threading.UndisposedLockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor used for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:IDS.Threading.UndisposedLockException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Threading.UndisposedLockException"/> class.
            </summary>
        </member>
        <member name="M:IDS.Threading.UndisposedLockException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Threading.UndisposedLockException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:IDS.Time.DateTimeProvider">
            <summary>
            Retrieves the current date and time.
            </summary>
        </member>
        <member name="F:IDS.Time.DateTimeProvider.Default">
            <summary>
            Represents a default instance of the <see cref="T:IDS.Time.DateTimeProvider" /> class.
            </summary>
        </member>
        <member name="P:IDS.Time.DateTimeProvider.UtcNow">
            <summary>
            Gets the current date and time, expressed in Coordinated Universal Time.
            </summary>
            <remarks>
            The default implementation returns <see cref="P:System.DateTime.UtcNow">DateTime.UtcNow</see>.
            </remarks>
        </member>
        <member name="P:IDS.Time.DateTimeProvider.CurrentEnterpriseDateTime">
            <summary>
            Gets the current date and time in the <see cref="P:IDS.Time.TimeZoneHelper.EnterpriseTimeZone" />.
            </summary>
            <value>
            The current date and time in the <see cref="P:IDS.Time.TimeZoneHelper.EnterpriseTimeZone" />.
            </value>
        </member>
        <member name="P:IDS.Time.DateTimeProvider.CurrentLocalDateTime">
            <summary>
            Gets the current date and time in the <see cref="P:IDS.Time.TimeZoneHelper.LocalTimeZone" />.
            </summary>
            <value>
            The current date and time in the <see cref="P:IDS.Time.TimeZoneHelper.LocalTimeZone" />.
            </value>
        </member>
        <member name="T:IDS.Time.TimeZoneHelper">
            <summary>
            TimeZoneHelper is a class composed of static members that encapsulate common
            operations related to <see cref="T:System.TimeZoneInfo" /> objects.
            </summary>
        </member>
        <member name="P:IDS.Time.TimeZoneHelper.LocalTimeZone">
            <summary>
            Gets the time zone of the current computer.
            </summary>
            <value>
            A <see cref="T:System.TimeZoneInfo" /> object that represents the local time zone.
            </value>
        </member>
        <member name="P:IDS.Time.TimeZoneHelper.CurrentLocalDate">
            <summary>
            Gets the current date in the <see cref="P:IDS.Time.TimeZoneHelper.LocalTimeZone" />.
            </summary>
            <value>
            The current date in the <see cref="P:IDS.Time.TimeZoneHelper.LocalTimeZone" />.
            </value>
        </member>
        <member name="P:IDS.Time.TimeZoneHelper.CurrentLocalDateTime">
            <summary>
            Gets the current date and time in the <see cref="P:IDS.Time.TimeZoneHelper.LocalTimeZone" />.
            </summary>
            <value>
            The current date and time in the <see cref="P:IDS.Time.TimeZoneHelper.LocalTimeZone" />.
            </value>
        </member>
        <member name="P:IDS.Time.TimeZoneHelper.EnterpriseTimeZone">
            <summary>
            Gets or sets the enterprise time zone for the current thread or <see cref="T:System.Web.HttpContext" />.
            </summary>
            <value>
            A <see cref="T:System.TimeZoneInfo" /> object that represents the current enterprise time zone.
            </value>
            <remarks>
            The property returns <see cref="P:IDS.Time.TimeZoneHelper.LocalTimeZone" /> if it has not been explicitly set
            or has been set to <see langword="null" />.
            </remarks>
        </member>
        <member name="P:IDS.Time.TimeZoneHelper.CurrentEnterpriseDate">
            <summary>
            Gets the current date in the <see cref="P:IDS.Time.TimeZoneHelper.EnterpriseTimeZone" />.
            </summary>
            <value>
            The current date in the <see cref="P:IDS.Time.TimeZoneHelper.EnterpriseTimeZone" />.
            </value>
        </member>
        <member name="P:IDS.Time.TimeZoneHelper.CurrentEnterpriseDateTime">
            <summary>
            Gets the current date and time in the <see cref="P:IDS.Time.TimeZoneHelper.EnterpriseTimeZone" />.
            </summary>
            <value>
            The current date and time in the <see cref="P:IDS.Time.TimeZoneHelper.EnterpriseTimeZone" />.
            </value>
        </member>
        <member name="P:IDS.Time.TimeZoneHelper.UserTimeZone">
            <summary>
            Gets or sets the user time zone for the current thread or <see cref="T:System.Web.HttpContext" />.
            </summary>
            <value>
            A <see cref="T:System.TimeZoneInfo" /> object that represents the current user time zone.
            </value>
            <remarks>
            The property returns <see cref="P:IDS.Time.TimeZoneHelper.EnterpriseTimeZone" /> if it has not been explicitly set
            or has been set to <see langword="null" />.
            </remarks>
        </member>
        <member name="P:IDS.Time.TimeZoneHelper.CurrentUserDate">
            <summary>
            Gets the current date in the <see cref="P:IDS.Time.TimeZoneHelper.UserTimeZone" />.
            </summary>
            <value>
            The current date in the <see cref="P:IDS.Time.TimeZoneHelper.UserTimeZone" />.
            </value>
        </member>
        <member name="P:IDS.Time.TimeZoneHelper.CurrentUserDateTime">
            <summary>
            Gets the current date and time in the <see cref="P:IDS.Time.TimeZoneHelper.UserTimeZone" />.
            </summary>
            <value>
            The current date and time in the <see cref="P:IDS.Time.TimeZoneHelper.UserTimeZone" />.
            </value>
        </member>
        <member name="T:IDS.Time.TimeZoneHelperProxy">
            <summary>
            The TimeZoneHelperProxy class is a MarshalByRef class that allows accessing
            and setting the TimeZoneInfo across AppDomain's.
            </summary>
        </member>
        <member name="P:IDS.Time.TimeZoneHelperProxy.EnterpriseTimeZone">
            <summary>
            Gets or sets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="M:IDS.Time.TimeZoneHelperProxy.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"></see> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"></see> property.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/></PermissionSet>
        </member>
        <member name="M:IDS.Web.UAParser.Parser.GetDefault">
            <summary>
            Gets the instantiated singleton for user
            </summary>
        </member>
        <member name="T:IDS.Web.UAParser.MinimalYamlParser">
            <summary>
            Just enough string parsing to recognize the regexes.yaml file format. Introduced to remove
            dependency on large Yaml parsing lib. Note that a unittest ensures compatibility
            by ensuring regexes and properties are read similar to using the full yaml lib
            </summary>
        </member>
        <member name="T:IDS.Web.AjaxRequestEndpoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Web.AjaxRequestEndpoint.Method">
            <summary>
            Gets or sets the HTTP method (such as "GET" or "POST").
            </summary>
        </member>
        <member name="P:IDS.Web.AjaxRequestEndpoint.Url">
            <summary>
            Gets or sets the URL of the endpoint.
            </summary>
        </member>
        <member name="P:IDS.Web.AjaxRequestEndpoint.Token">
            <summary>
            Gets or sets the request token for the <see cref="P:IDS.Web.AjaxRequestEndpoint.Method" /> and <see cref="P:IDS.Web.AjaxRequestEndpoint.Url" />.
            </summary>
        </member>
        <member name="T:IDS.Web.BinaryContent">
            <summary>
            Represents binary content.
            </summary>
        </member>
        <member name="P:IDS.Web.BinaryContent.Content">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDS.Web.BinaryContent.ContentBase64">
            <value>
            The Base64-encoded binary data.
            </value>
        </member>
        <member name="P:IDS.Web.BinaryContent.ContentType">
            <value>
            The MIME type of the content.
            </value>
        </member>
        <member name="M:IDS.Web.BinaryContent.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDS.Web.BinaryContent.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="contentBase64"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:IDS.Web.BinaryContent.#ctor(System.Byte[],System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <param name="contentType"></param>
        </member>
        <member name="T:IDS.Web.RequestInfo">
            <summary>
            The RequestInfo class contains information related to a request.
            </summary>
        </member>
        <member name="M:IDS.Web.RequestInfo.BeginRequest">
            <summary>
            Begins the request by creating a RequestInfo class and assigning it to the current context.
            </summary>
            <returns>Returns the RequestInfo instance.</returns>
        </member>
        <member name="P:IDS.Web.RequestInfo.Current">
            <summary>
            Gets the current request info instance for this request.
            </summary>
            <value>The current request info instance.</value>
        </member>
        <member name="P:IDS.Web.RequestInfo.RequestID">
            <summary>
            Gets the request ID.
            </summary>
            <value>The request ID.</value>
        </member>
        <member name="P:IDS.Web.RequestInfo.RequestStartTime">
            <summary>
            Gets or sets the request start time. The setter is only provided for serialization.
            </summary>
            <value>The request start time.</value>
        </member>
        <member name="P:IDS.Web.RequestInfo.RequestEndTime">
            <summary>
            Gets or sets the request end time. The setter is only provided for serialization.
            </summary>
            <value>The request start time.</value>
        </member>
        <member name="P:IDS.Web.RequestInfo.RequestException">
            <summary>
            Gets or sets the exception that is associated with the request or null if no exception.
            </summary>
            <value>The exception associated with the request or null if no exception.</value>
        </member>
        <member name="P:IDS.Web.RequestInfo.ResponseCode">
            <summary>
            Gets or sets the response code that is associated with the request or null.
            </summary>
            <value>The response code associated with the request or null.</value>
        </member>
        <member name="P:IDS.Web.RequestInfo.ResponseMessage">
            <summary>
            Gets or sets the response message.
            </summary>
            <value>The response message.</value>
        </member>
        <member name="M:IDS.Web.RequestInfo.GetElapsedTime">
            <summary>
            Gets the elapsed time.
            </summary>
            <returns>Returns a <see cref="T:System.TimeSpan"/> object with the elapsed time of this request.</returns>
        </member>
        <member name="M:IDS.Web.RequestInfo.EndRequest">
            <summary>
            Ends the request and stops the elapsed timer.
            </summary>
        </member>
        <member name="P:IDS.Web.RequestInfo.User">
            <summary>
            Gets or sets the user associated with this request.
            </summary>
            <value>The user associated with this request.</value>
        </member>
        <member name="P:IDS.Web.RequestInfo.LogContext">
            <summary>
            Gets or sets the log context.
            </summary>
            <value>The log context.</value>
        </member>
        <member name="P:IDS.Web.RequestInfo.Redirecting">
            <summary>
            Gets or sets a value indicating whether this web request is redirecting.
            </summary>
            <value><c>true</c> if redirecting; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:IDS.Web.WebHelper">
            <summary>
            Provides helper methods for processing Web requests.
            </summary>
        </member>
        <member name="M:IDS.Web.WebHelper.MapPath(System.String)">
            <summary>
            Maps a specified virtual path to a physical path.
            </summary>
            <param name="virtualPath">
            The virtual path to map.
            </param>
            <returns>
            The physical path on the server that corresponds to
            the <paramref name="virtualPath" />.
            </returns>
            <remarks>
            If the <paramref name="virtualPath" /> is actually an absolute
            physical path containing a colon or beginning with two backslashes,
            then the method returns the path unchanged.
            </remarks>
        </member>
        <member name="M:IDS.Web.WebHelper.GetHttpRequestNameValues(System.Web.HttpRequest)">
            <summary>
            Gets all of the name/value pairs from the QueryString and Form collections for the specified HTTP request.
            </summary>
            <param name="request">The HTTP request.</param>
            <returns>Returns a NameValueCollection containing all of the name/value pairs fromthe QueryString and Form collections.</returns>
        </member>
        <member name="M:IDS.Web.WebHelper.ProcessHttpsFile``1(System.Func{System.IO.Stream,``0},System.String,System.String,System.String)">
            <summary>
            Downloads an HTTPS file as a Stream and sends the Stream to the passed processFunction
            </summary>
            <param name="processFunction"></param>
            <param name="url"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Web.WebHelper.ProcessFtpFile``1(System.Func{System.IO.Stream,``0},System.String,System.String,System.String)">
            <summary>
            Downloads an FTP file as a Stream and sends the Stream to the passed processFunction
            </summary>
            <param name="processFunction"></param>
            <param name="url"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Web.WebHelper.ProcessSftpFile``1(System.Func{System.IO.Stream,``0},System.String,System.String,System.String)">
            <summary>
            Downloads an SFTP file as a Stream and sends the Stream to the passed processFunction
            </summary>
            <param name="processFunction"></param>
            <param name="url"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:IDS.Web.WebHelper.IsLocalUrl(System.Web.HttpRequest,System.String)">
            <summary>
            Determines whether a specified string contains a valid absolute URL that references the host
            of the current HttpRequest.
            </summary>
            <param name="request">Http Request</param>
            <param name="url">Absolute Url to be checked</param>
        </member>
        <member name="T:IDS.ValidationException">
            <summary>
            Represents the exception that is thrown during validation of user input.
            </summary>
        </member>
        <member name="M:IDS.ValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ValidationException" /> class.
            </summary>
        </member>
        <member name="M:IDS.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ValidationException" /> class with a specified error message.
            </summary>
            <param name="message">
            A localized error message, suitable for display to the user, that explains the reason for the exception.
            </param>
        </member>
        <member name="M:IDS.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ValidationException" /> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            A localized error message, suitable for display to the user, that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception,
            or <see langword="null" /> if no inner exception is specified.
            </param>
        </member>
        <member name="M:IDS.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.ValidationException" /> class with serialized data.
            </summary>
            <param name="info">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.
            </param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source of the serialized stream.
            </param>
        </member>
        <member name="F:IDS.Win32.SecurityImpersonationLevel.SecurityAnonymous">
            <summary>
            The server process cannot obtain identification information about the client, 
            and it cannot impersonate the client. It is defined with no value given, and thus, 
            by ANSI C rules, defaults to a value of zero. 
            </summary>
        </member>
        <member name="F:IDS.Win32.SecurityImpersonationLevel.SecurityIdentification">
            <summary>
            The server process can obtain information about the client, such as security identifiers and privileges, 
            but it cannot impersonate the client. This is useful for servers that export their own objects, 
            for example, database products that export tables and views. 
            Using the retrieved client-security information, the server can make access-validation decisions without 
            being able to use other services that are using the client's security context. 
            </summary>
        </member>
        <member name="F:IDS.Win32.SecurityImpersonationLevel.SecurityImpersonation">
            <summary>
            The server process can impersonate the client's security context on its local system. 
            The server cannot impersonate the client on remote systems. 
            </summary>
        </member>
        <member name="F:IDS.Win32.SecurityImpersonationLevel.SecurityDelegation">
            <summary>
            The server process can impersonate the client's security context on remote systems. 
            NOTE: Windows NT:  This impersonation level is not supported.
            </summary>
        </member>
        <member name="F:IDS.Win32.LogonType.LOGON32_LOGON_INTERACTIVE">
            <summary>
            This logon type is intended for users who will be interactively using the computer, such as a user being logged on  
            by a terminal server, remote shell, or similar process.
            This logon type has the additional expense of caching logon information for disconnected operations; 
            therefore, it is inappropriate for some client/server applications,
            such as a mail server.
            </summary>
        </member>
        <member name="F:IDS.Win32.LogonType.LOGON32_LOGON_NETWORK">
            <summary>
            This logon type is intended for high performance servers to authenticate plaintext passwords.
            The LogonUser function does not cache credentials for this logon type.
            </summary>
        </member>
        <member name="F:IDS.Win32.LogonType.LOGON32_LOGON_BATCH">
            <summary>
            This logon type is intended for batch servers, where processes may be executing on behalf of a user without 
            their direct intervention. This type is also for higher performance servers that process many plaintext
            authentication attempts at a time, such as mail or Web servers. 
            The LogonUser function does not cache credentials for this logon type.
            </summary>
        </member>
        <member name="F:IDS.Win32.LogonType.LOGON32_LOGON_SERVICE">
            <summary>
            Indicates a service-type logon. The account provided must have the service privilege enabled. 
            </summary>
        </member>
        <member name="F:IDS.Win32.LogonType.LOGON32_LOGON_UNLOCK">
            <summary>
            This logon type is for GINA DLLs that log on users who will be interactively using the computer. 
            This logon type can generate a unique audit record that shows when the workstation was unlocked. 
            </summary>
        </member>
        <member name="F:IDS.Win32.LogonType.LOGON32_LOGON_NETWORK_CLEARTEXT">
            <summary>
            This logon type preserves the name and password in the authentication package, which allows the server to make 
            connections to other network servers while impersonating the client. A server can accept plaintext credentials 
            from a client, call LogonUser, verify that the user can access the system across the network, and still 
            communicate with other servers.
            NOTE: Windows NT:  This value is not supported. 
            </summary>
        </member>
        <member name="F:IDS.Win32.LogonType.LOGON32_LOGON_NEW_CREDENTIALS">
            <summary>
            This logon type allows the caller to clone its current token and specify new credentials for outbound connections.
            The new logon session has the same local identifier but uses different credentials for other network connections. 
            NOTE: This logon type is supported only by the LOGON32_PROVIDER_WINNT50 logon provider.
            NOTE: Windows NT:  This value is not supported. 
            </summary>
        </member>
        <member name="F:IDS.Win32.LogonProvider.LOGON32_PROVIDER_DEFAULT">
            <summary>
            Use the standard logon provider for the system. 
            The default security provider is negotiate, unless you pass NULL for the domain name and the user name 
            is not in UPN format. In this case, the default provider is NTLM. 
            NOTE: Windows 2000/NT:   The default security provider is NTLM.
            </summary>
        </member>
        <member name="F:IDS.Win32.LogonProvider.LOGON32_PROVIDER_WINNT40">
            <summary>
            Use the NTLM logon provider.
            </summary>
        </member>
        <member name="F:IDS.Win32.LogonProvider.LOGON32_PROVIDER_WINNT50">
            <summary>
            Use the negotiate logon provider. 
            </summary>
        </member>
        <member name="T:IDS.Xml.ExplicitSerialization.ExplicitXmlSerializer">
            <summary>
            Serializes and deserializes objects to and from XML documents.
            </summary>
        </member>
        <member name="M:IDS.Xml.ExplicitSerialization.ExplicitXmlSerializer.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the
            <see cref="T:IDS.Xml.ExplicitSerialization.ExplicitXmlSerializer" /> class.
            </summary>
            <param name="knownTypes">
            A collection containing the types that the serializer can serialize
            and deserialize.
            </param>
        </member>
        <member name="M:IDS.Xml.ExplicitSerialization.ExplicitXmlSerializer.Deserialize``1(System.Xml.XmlReader)">
            <summary>
            Deserializes an <see cref="T:IDS.Xml.ExplicitSerialization.IExplicitXmlSerializable" />
            object from an XML document.
            </summary>
            <typeparam name="T">
            The type of the object to deserialize.
            </typeparam>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader" /> to use to read the XML representation
            of the object.
            </param>
            <returns>
            The deserialized <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:IDS.Xml.ExplicitSerialization.ExplicitXmlSerializer.Serialize(System.Xml.XmlWriter,IDS.Xml.ExplicitSerialization.IExplicitXmlSerializable)">
            <summary>
            Serializes a specified <see cref="T:IDS.Xml.ExplicitSerialization.IExplicitXmlSerializable" />
            object to an XML document.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter" /> to use to write the XML representation
            of the object.
            </param>
            <param name="root">
            The <see cref="T:System.Object" /> to serialize.
            </param>
        </member>
        <member name="M:IDS.Xml.ExplicitSerialization.ExplicitXmlSerializer.RegisterType(System.Type)">
            <summary>
            Registers a specified <see cref="T:System.Type" /> with the serializer,
            allowing objects of that type to be serialized and deserialized.
            </summary>
            <param name="type">
            The <see cref="T:System.Type" /> of the objects to serialize and deserialize.
            </param>
        </member>
        <member name="T:IDS.Xml.ExplicitSerialization.IExplicitXmlSerializable">
            <summary>
            Allows an object to control its own serialization and deserialization
            to and from an XML document.
            </summary>
            <remarks>
            The <see cref="T:IDS.Xml.ExplicitSerialization.IExplicitXmlSerializable" /> interface implies
            a public constructor with the signature
            (<see cref="T:IDS.Xml.ExplicitSerialization.ExplicitXmlSerializer" />, <see cref="T:System.Xml.XmlReader" />).
            </remarks>
        </member>
        <member name="M:IDS.Xml.ExplicitSerialization.IExplicitXmlSerializable.WriteXml(IDS.Xml.ExplicitSerialization.ExplicitXmlSerializer,System.Xml.XmlWriter)">
            <summary>
            Converts the object to its XML representation.
            </summary>
            <param name="serializer">
            The <see cref="T:IDS.Xml.ExplicitSerialization.ExplicitXmlSerializer" /> to use to serialize
            nested objects.
            </param>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter" /> to use to write the XML representation
            of the object.
            </param>
        </member>
        <member name="T:IDS.Xml.ObjectNavigator">
            <summary>
            Implements an <see cref="T:System.Xml.XPath.XPathNavigator" /> that uses reflection
            to access the properties of an <see cref="T:System.Object" />.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Xml.ObjectNavigator" />
            class and positions it at the root of an empty document.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Xml.ObjectNavigator" />
            class and positions it at a virtual XML element that represents
            a specified <see cref="T:System.Object" />.
            </summary>
            <param name="name">
            A name for the <paramref name="value" />.
            </param>
            <param name="value">
            An <see cref="T:System.Object" />.
            </param>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.#ctor(IDS.Xml.ObjectNavigator)">
            <summary>
            Initializes a new instance of the <see cref="T:IDS.Xml.ObjectNavigator" />
            class and positions it at the same node as an existing
            <see cref="T:IDS.Xml.ObjectNavigator" />.
            </summary>
            <param name="navigator">
            An <see cref="T:IDS.Xml.ObjectNavigator" />.
            </param>
        </member>
        <member name="P:IDS.Xml.ObjectNavigator.BaseURI">
            <summary>
            Overrides XPathNavigator.BaseURI.
            </summary>
        </member>
        <member name="P:IDS.Xml.ObjectNavigator.HasAttributes">
            <summary>
            Overrides XPathNavigator.HasAttributes.
            </summary>
        </member>
        <member name="P:IDS.Xml.ObjectNavigator.HasChildren">
            <summary>
            Overrides XPathNavigator.HasChildren.
            </summary>
        </member>
        <member name="P:IDS.Xml.ObjectNavigator.IsEmptyElement">
            <summary>
            Overrides XPathNavigator.IsEmptyElement.
            </summary>
        </member>
        <member name="P:IDS.Xml.ObjectNavigator.LocalName">
            <summary>
            Overrides XPathNavigator.LocalName.
            </summary>
        </member>
        <member name="P:IDS.Xml.ObjectNavigator.NamespaceURI">
            <summary>
            Overrides XPathNavigator.NamespaceURI.
            </summary>
        </member>
        <member name="P:IDS.Xml.ObjectNavigator.Name">
            <summary>
            Overrides XPathNavigator.Name.
            </summary>
        </member>
        <member name="P:IDS.Xml.ObjectNavigator.NameTable">
            <summary>
            Overrides XPathNavigator.NameTable.
            </summary>
        </member>
        <member name="P:IDS.Xml.ObjectNavigator.NodeType">
            <summary>
            Overrides XPathNavigator.NodeType.
            </summary>
        </member>
        <member name="P:IDS.Xml.ObjectNavigator.Prefix">
            <summary>
            Overrides XPathNavigator.Prefix.
            </summary>
        </member>
        <member name="P:IDS.Xml.ObjectNavigator.TypedValue">
            <summary>
            Overrides XPathNavigator.TypedValue.
            </summary>
        </member>
        <member name="P:IDS.Xml.ObjectNavigator.Value">
            <summary>
            Overrides XPathNavigator.Value.
            </summary>
        </member>
        <member name="P:IDS.Xml.ObjectNavigator.XmlLang">
            <summary>
            Overrides XPathNavigator.XmlLang.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.Clone">
            <summary>
            Creates a new <see cref="T:IDS.Xml.ObjectNavigator" /> positioned at
            the same node as this <see cref="T:IDS.Xml.ObjectNavigator" />.
            </summary>
            <returns>
            A new <see cref="T:IDS.Xml.ObjectNavigator" /> positioned at
            the same node as this <see cref="T:IDS.Xml.ObjectNavigator" />.
            </returns>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.GetAttribute(System.String,System.String)">
            <summary>
            Overrides XPathNavigator.GetAttribute.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.GetNamespace(System.String)">
            <summary>
            Overrides XPathNavigator.GetNamespace.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
            <summary>
            Overrides XPathNavigator.IsSamePosition.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
            <summary>
            Overrides XPathNavigator.MoveTo.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.MoveToAttribute(System.String,System.String)">
            <summary>
            Overrides XPathNavigator.MoveToAttribute.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.MoveToFirst">
            <summary>
            Overrides XPathNavigator.MoveToFirst.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.MoveToFirstAttribute">
            <summary>
            Overrides XPathNavigator.MoveToFirstAttribute.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.MoveToFirstChild">
            <summary>
            Overrides XPathNavigator.MoveToFirstChild.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Overrides XPathNavigator.MoveToFirstNamespace.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.MoveToId(System.String)">
            <summary>
            Overrides XPathNavigator.MoveToId.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.MoveToNamespace(System.String)">
            <summary>
            Overrides XPathNavigator.MoveToNamespace.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.MoveToNext">
            <summary>
            Overrides XPathNavigator.MoveToNext.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.MoveToNextAttribute">
            <summary>
            Overrides XPathNavigator.MoveToNextAttribute.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Overrides XPathNavigator.MoveToNextNamespace.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.MoveToParent">
            <summary>
            Overrides XPathNavigator.MoveToParent.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.MoveToPrevious">
            <summary>
            Overrides XPathNavigator.MoveToPrevious.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.MoveToRoot">
            <summary>
            Overrides XPathNavigator.MoveToRoot.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)">
            <summary>
            Overrides XPathNavigator.SelectChildren.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.SelectChildren(System.String,System.String)">
            <summary>
            Overrides XPathNavigator.SelectChildren.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.SingleNodeIterator.#ctor(IDS.Xml.ObjectNavigator.SingleNodeIterator)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="M:IDS.Xml.ObjectNavigator.CollectionNodeIterator.#ctor(IDS.Xml.ObjectNavigator.CollectionNodeIterator)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="T:IDS.Xml.XmlHelper">
            <summary>
            The XmlHelper class is a helper class with numerous static methods for working with XML.
            </summary>
        </member>
        <member name="M:IDS.Xml.XmlHelper.GetString(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Gets the string from the specified XmlNode.
            </summary>
            <param name="node">The node.</param>
            <param name="defaultValue">The default value.</param>
            <param name="emptyIsDefault">if set to <c>true</c> if the value is empty (rather then missing or null), return the default value.</param>
            <returns>Returns the string found</returns>
        </member>
        <member name="M:IDS.Xml.XmlHelper.GetString(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the string from the XML node.
            </summary>
            <param name="node">The node.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Xml.XmlHelper.GetString(System.Xml.XmlNode)">
            <summary>
            Gets the string from the XML node.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:IDS.Xml.XmlHelper.GetInt32(System.Xml.XmlNode,System.Int32,System.Boolean)">
            <summary>
            Gets an Int32 from the XML node.
            </summary>
            <param name="node">The node.</param>
            <param name="defaultValue">The default value.</param>
            <param name="throwOnFormatError">if set to <c>true</c> [throw on format error].</param>
            <returns>Returns an Int32.</returns>
        </member>
        <member name="M:IDS.Xml.XmlHelper.GetInt32(System.Xml.XmlNode)">
            <summary>
            Gets an Int32 from the XML node.
            </summary>
            <param name="node">The node.</param>
            <returns>Returns an Int32.</returns>
        </member>
        <member name="M:IDS.Xml.XmlHelper.GetInt32(System.Xml.XmlNode,System.Int32)">
            <summary>
            Gets an Int32 from the XML node.
            </summary>
            <param name="node">The node.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Returns an Int32.</returns>
        </member>
        <member name="M:IDS.Xml.XmlHelper.GetDecimal(System.Xml.XmlNode,System.Decimal,System.Boolean)">
            <summary>
            Gets a decimal from the XML node.
            </summary>
            <param name="node">The node.</param>
            <param name="defaultValue">The default value.</param>
            <param name="throwOnFormatError">if set to <c>true</c> an an exception should be thrown on a formatting error.</param>
            <returns>Returns a decimal.</returns>
        </member>
        <member name="M:IDS.Xml.XmlHelper.GetDecimal(System.Xml.XmlNode)">
            <summary>
            Gets a decimal from the XML node.
            </summary>
            <param name="node">The node.</param>
            <returns>Returns a decimal.</returns>
        </member>
        <member name="M:IDS.Xml.XmlHelper.GetDecimal(System.Xml.XmlNode,System.Decimal)">
            <summary>
            Gets a decimal from the XML node.
            </summary>
            <param name="node">The node.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Returns a decimal.</returns>
        </member>
        <member name="M:IDS.Xml.XmlHelper.GetDateTime(System.Xml.XmlNode,System.DateTime,System.Boolean)">
            <summary>
            Gets the date time from the XML node.
            </summary>
            <param name="node">The node.</param>
            <param name="defaultValue">The default value.</param>
            <param name="throwOnFormatError">if set to <c>true</c> an an exception should be thrown on a formatting error.</param>
            <returns>Returns a DateTime.</returns>
        </member>
        <member name="M:IDS.Xml.XmlHelper.GetDateTime(System.Xml.XmlNode)">
            <summary>
            Gets the date time from the XML node.
            </summary>
            <param name="node">The node.</param>
            <returns>Returns a DateTime.</returns>
        </member>
        <member name="M:IDS.Xml.XmlHelper.GetDateTime(System.Xml.XmlNode,System.DateTime)">
            <summary>
            Gets the date time from the XML node.
            </summary>
            <param name="node">The node.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Returns a DateTime.</returns>
        </member>
        <member name="T:IDS.Xml.XmlTrackingUrlResolver">
            <summary>
            Implements an enhanced <see cref="T:System.Xml.XmlUrlResolver" /> that tracks
            the path of each file-based external XML resource that is resolved.
            </summary>
        </member>
        <member name="M:IDS.Xml.XmlTrackingUrlResolver.GetPaths">
            <summary>
            Gets an array containing the paths of the external XML resources
            that have been resolved.
            </summary>
            <returns>
            A new <see cref="T:System.String" /> array.
            </returns>
        </member>
        <member name="M:IDS.Xml.XmlTrackingUrlResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Overrides XmlUrlResolver.GetEntity.
            </summary>
        </member>
        <member name="T:IDS.Xml.XPathUtility">
            <summary>
            Provides static methods for working with XPath expressions.
            </summary>
        </member>
        <member name="M:IDS.Xml.XPathUtility.ToBoolean(System.Double)">
            <summary>
            Converts a number to a Boolean by applying the XPath boolean()
            function.
            </summary>
            <param name="value">
            The number to convert.
            </param>
            <returns>
            <see langword="true" /> if the <paramref name="value" /> is
            neither zero nor <see cref="F:System.Double.NaN" />;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:IDS.Xml.XPathUtility.ToBoolean(System.Object)">
            <summary>
            Converts an object to a Boolean by applying the XPath boolean()
            function.
            </summary>
            <param name="value">
            The object to convert.
            </param>
            <returns>
            <see langword="true" /> if the <paramref name="value" /> is
            <see langword="true" />, a positive or negative number,
            a nonempty string, or a nonempty node set;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:IDS.Xml.XPathUtility.ToBoolean(System.String)">
            <summary>
            Converts a string to a Boolean by applying the XPath boolean()
            function.
            </summary>
            <param name="value">
            The string to convert.
            </param>
            <returns>
            <see langword="true" /> if the <paramref name="value" /> is
            a nonempty string; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:IDS.Xml.XPathUtility.ToDouble(System.Boolean)">
            <summary>
            Converts a Boolean to a number by applying the XPath number()
            function.
            </summary>
            <param name="value">
            The Boolean to convert.
            </param>
            <returns>
            1 if the <paramref name="value" /> is <see langword="true" />;
            otherwise, 0.
            </returns>
        </member>
        <member name="M:IDS.Xml.XPathUtility.ToDouble(System.Object)">
            <summary>
            Converts an object to a number by applying the XPath number()
            function.
            </summary>
            <param name="value">
            The object to convert.
            </param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:IDS.Xml.XPathUtility.ToDouble(System.String)">
            <summary>
            Converts a string to a number by applying the XPath number()
            function.
            </summary>
            <param name="value">
            The string to convert.
            </param>
            <returns>
            The number represented by the <paramref name="value" />,
            or <see cref="F:System.Double.NaN" /> if the <paramref name="value" />
            is not a valid representation of a number.
            </returns>
        </member>
        <member name="M:IDS.Xml.XPathUtility.ToString(System.Boolean)">
            <summary>
            Converts a Boolean to a string by applying the XPath string()
            function.
            </summary>
            <param name="value">
            The Boolean to convert.
            </param>
            <returns>
            "true" if the <paramref name="value" /> is <see langword="true" />;
            otherwise, "false".
            </returns>
        </member>
        <member name="M:IDS.Xml.XPathUtility.ToString(System.Double)">
            <summary>
            Converts a number to a string by applying the XPath string()
            function.
            </summary>
            <param name="value">
            The number to convert.
            </param>
            <returns>
            The string representation of the <paramref name="value" />,
            which may be "NaN", "Infinity", or "-Infinity".
            </returns>
        </member>
        <member name="M:IDS.Xml.XPathUtility.ToString(System.Object)">
            <summary>
            Converts an object to a string by applying the XPath string()
            function.
            </summary>
            <param name="value">
            The object to convert.
            </param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="T:IDS.Xml.XsltTransformer">
            <summary>
            This class makes it easy to apply xslt transform by taking string xml and xsl
            as parameters
            </summary>
        </member>
        <member name="M:IDS.Xml.XsltTransformer.Transform(System.String,System.String)">
            <summary>
            This method takes xml string and xsl string and returns transformed output
            </summary>
            <param name="xml"></param>
            <param name="xsl"></param>
            <returns></returns>
        </member>
    </members>
</doc>
