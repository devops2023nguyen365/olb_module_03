name: Deployment workflow

# Controls when the action will run. 
on:
  # Triggers the workflow on manual trigger
  workflow_dispatch:

jobs:
  create-deployment-artifacts:
    name: Create Deployment artifacts
    runs-on:
      group: BUILD
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1
    - name: Build Solution
      run: |
        mkdir _build
        msbuild.exe PS.OLB.sln /nologo /nr:false /p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:platform="Any CPU" /p:configuration="Release" /p:PublishUrl="../_build"
    - name: Extract HLM package
      run: |
        # Use the 'Get-Location' cmdlet to get the current directory
        $currentDirectory = Get-Location
        Write-Host "Current Directory: $currentDirectory"
        
        # Find all .hlm files recursively in $currentDirectory
        $hlmFiles = Get-ChildItem -Path $currentDirectory -Filter "*.hlm" -File -Recurse
        # Copy the .hlm files to the _build directory
        $hlmFiles | ForEach-Object {
          $destinationPath = Join-Path -Path $currentDirectory/_build -ChildPath $_.Name
          Copy-Item -Path $_.FullName -Destination $destinationPath -Force
          Write-Host "Copied $($_.FullName) to $destinationPath"
        }
        # Unzip HLM files
        # Get a list of all .hlm files in the _build
        $packageFiles = Get-ChildItem -Path $currentDirectory/_build -Filter "*.hlm"
    
        # Loop through and process each .hlm file
        foreach ($packageFile in $packageFiles) {
          $hlmFileName = $packageFile.Name
          $zipFileName = $hlmFileName -replace ".hlm$", ".zip"
          $fileNameWithoutExtension = [System.IO.Path]::GetFileNameWithoutExtension($packageFile)
    
          # Rename the .hlm file to .zip
          Rename-Item -Path $packageFile.FullName -NewName $zipFileName -Force
          Write-Host "Renamed $hlmFileName to $zipFileName"
          
          # Unzip the .zip file into the destination directory
          Expand-Archive -Path $currentDirectory/_build/$zipFileName -DestinationPath "$currentDirectory/_build/unzipped/$fileNameWithoutExtension" -Force
          Write-Host "Unzipped $zipFileName into $currentDirectory/_build/unzipped"
          
          # Rename the .zip file back to .hlm
          Rename-Item -Path "$currentDirectory/_build/$zipFileName" -NewName $hlmFileName -Force
          Write-Host "Renamed $zipFileName back to $hlmFileName"
        }
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: drop
        path: ./_build  
  
  dev-deployment:
    runs-on:
      group: DEV
    environment: 
      name: DEV      
    needs: [create-deployment-artifacts]
    steps:
    - name: Deploying on DEV
      run: echo Deploying on DEV

    - name: Download Artifacts for DEV
      uses: actions/download-artifact@v3
      with:
        name: drop

    - name: Execute PowerShell Scripts for DEV
      run: |
        # Add your PowerShell commands here
        echo "PowerShell scripts for DEV go here"
      shell: pwsh
    - name: Stop IIS
      run: |
        Stop-Service -Name "W3SVC" -Force
        Write-Host "IIS has been stopped."
      shell: pwsh
    - name: "Backup OLB folder to backup folder"
      run: |
        Write-Host "Backup OLB folder to backup folder"
        # Define source and destination paths
        $currentTimestamp = Get-Date -Format "-yyyy-MM-dd-HH-mm-ss"
        $sourcePath = 'C:\Fiserv\Architect\Build\2023\2268New'
        $destinationPath = 'D:\Backup\Portal' + $currentTimestamp + '\2268'

        # Check if the destination folder exists, and create it if not
        if (-Not (Test-Path -Path $destinationPath -PathType Container)) {
          New-Item -Path $destinationPath -ItemType Directory -Force
        }

        # Copy the contents of the source folder to the destination folder
        Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse -Force
      shell: pwsh
    - name: "Deploy package to HLM folder"
      run: |
        Write-Host "Deploy package to HLM folder"
        $currentDirectory = Get-Location
        Write-Host "Current Directory: $currentDirectory"
        
        # Define source and destination folders
        $sourcePath = "$currentDirectory\unzipped\"
        Write-Host "sourcePath: $sourcePath"
        $destinationPath = "C:\Fiserv\Architect\Build\2023\2268New\Portal\hlm"
              
        # Get a list of all subfolders in the source folder
        $subfolders = Get-ChildItem -Path $sourceFolder -Directory

        # Loop through each subfolder and copy it to the destination
        foreach ($subfolder in $subfolders) {
            Copy-Item -Path $sourcePath/$subfolder.Name -Destination $destinationPath -Recurse -Force
        }
      shell: pwsh      
    - name: "Start IIS"
      run: |
        # Start IIS
        Start-Service -Name "W3SVC"
        Write-Host "IIS has been started."
      shell: pwsh            
                  
      
  uat-deployment:
    runs-on: ${{ matrix.runner_label }}
    environment: 
      name: UAT       
    strategy:
      matrix:
        runner_label: ['OB-WFE-D4-UAT1','OB-WFE-D4-UAT2','OB-WFE-D4-UAT3']
    needs: [create-deployment-artifacts, dev-deployment]
    steps:
    - name: Deploying on ${{ matrix.runner_label }}
      run: echo Deploying on ${{ matrix.runner_label }}

    - name: Download Artifacts for ${{ matrix.runner_label }}
      uses: actions/download-artifact@v3
      with:
        name: drop

    - name: Execute PowerShell Scripts for  ${{ matrix.runner_label }}
      run: |
        # Add your PowerShell commands here
        echo "PowerShell scripts for DEV go here"
      shell: pwsh
    - name: "Stop IIS"
      run: |
        Write-Host "Start IIS"
      shell: pwsh
    - name: "Backup OLB folder to backup folder"
      run: |
        Write-Host "Backup OLB folder to backup folder"
      shell: pwsh
    - name: "Deploy package to HLM folder"
      run: |
        Write-Host "Deploy package to HLM folder"
      shell: pwsh      
    - name: "Start IIS"
      run: |
        Write-Host "Start IIS"
      shell: pwsh            

                 
  dr-deployment:
    needs: [create-deployment-artifacts, dev-deployment, uat-deployment]
    runs-on: ${{ matrix.runner_label }}
    environment: 
      name: DR 
    strategy:
      matrix:
        runner_label: ['OB-WFE-D4-DR1','OB-WFE-D4-DR2','OB-WFE-D4-DR4']
    steps:
    - name: Deploying on ${{ matrix.runner_label }}
      run: echo Hello, world!

    - name: Download Artifacts for ${{ matrix.runner_label }}
      uses: actions/download-artifact@v3
      with:
        name: drop

    - name: Execute PowerShell Scripts for ${{ matrix.runner_label }}
      run: |
        # Add your PowerShell commands here
        echo "PowerShell scripts for UAT go here"
      shell: pwsh
    - name: "Stop IIS"
      run: |
        Write-Host "Start IIS"
      shell: pwsh
    - name: "Backup OLB folder to backup folder"
      run: |
        Write-Host "Backup OLB folder to backup folder"
      shell: pwsh
    - name: "Deploy package to HLM folder"
      run: |
        Write-Host "Deploy package to HLM folder"
      shell: pwsh      
    - name: "Start IIS"
      run: |
        Write-Host "Start IIS"
      shell: pwsh            
                 
